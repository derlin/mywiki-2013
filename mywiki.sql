-- MariaDB dump 10.19  Distrib 10.6.4-MariaDB, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: mywiki
-- ------------------------------------------------------
-- Server version	10.6.4-MariaDB-1:10.6.4+maria~focal

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `mk_commentmeta`
--

DROP TABLE IF EXISTS `mk_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext DEFAULT NULL,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_commentmeta`
--

LOCK TABLES `mk_commentmeta` WRITE;
/*!40000 ALTER TABLE `mk_commentmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `mk_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mk_comments`
--

DROP TABLE IF EXISTS `mk_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT 0,
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT 0,
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT 0,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_comments`
--

LOCK TABLES `mk_comments` WRITE;
/*!40000 ALTER TABLE `mk_comments` DISABLE KEYS */;
INSERT INTO `mk_comments` VALUES (1,1,'Mr WordPress','','http://wordpress.org/','','2013-10-11 09:34:53','2013-10-11 09:34:53','Hi, this is a comment.\nTo delete a comment, just log in and view the post&#039;s comments. There you will have the option to edit or delete them.',0,'1','','',0,0);
/*!40000 ALTER TABLE `mk_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mk_links`
--

DROP TABLE IF EXISTS `mk_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT 1,
  `link_rating` int(11) NOT NULL DEFAULT 0,
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_links`
--

LOCK TABLES `mk_links` WRITE;
/*!40000 ALTER TABLE `mk_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `mk_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mk_options`
--

DROP TABLE IF EXISTS `mk_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(64) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=InnoDB AUTO_INCREMENT=14050 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_options`
--

LOCK TABLES `mk_options` WRITE;
/*!40000 ALTER TABLE `mk_options` DISABLE KEYS */;
INSERT INTO `mk_options` VALUES (1,'siteurl','http://localhost','yes'),(2,'blogname','Error418 - MyWiki','yes'),(3,'blogdescription','** the Onenote for Linux **','yes'),(4,'users_can_register','0','yes'),(5,'admin_email','lucy.derlin@gmail.com','yes'),(6,'start_of_week','1','yes'),(7,'use_balanceTags','0','yes'),(8,'use_smilies','1','yes'),(9,'require_name_email','','yes'),(10,'comments_notify','','yes'),(11,'posts_per_rss','20','yes'),(12,'rss_use_excerpt','1','yes'),(13,'mailserver_url','mail.example.com','yes'),(14,'mailserver_login','login@example.com','yes'),(15,'mailserver_pass','password','yes'),(16,'mailserver_port','110','yes'),(17,'default_category','1','yes'),(18,'default_comment_status','closed','yes'),(19,'default_ping_status','open','yes'),(20,'default_pingback_flag','','yes'),(21,'posts_per_page','10','yes'),(22,'date_format','F j, Y','yes'),(23,'time_format','g:i a','yes'),(24,'links_updated_date_format','F j, Y g:i a','yes'),(28,'comment_moderation','','yes'),(29,'moderation_notify','','yes'),(30,'permalink_structure','/%postname%/','yes'),(31,'gzipcompression','0','yes'),(32,'hack_file','0','yes'),(33,'blog_charset','UTF-8','yes'),(34,'moderation_keys','','no'),(35,'active_plugins','a:6:{i:0;s:19:\"akismet/akismet.php\";i:1;s:39:\"bs_sidebar_widget/bs_sidebar_widget.php\";i:2;s:63:\"category-posts-in-custom-menu/category-posts-in-custom-menu.php\";i:3;s:29:\"easyincludes/easyincludes.php\";i:4;s:65:\"html-editor-syntax-highlighter/html-editor-syntax-highlighter.php\";i:5;s:65:\"prettify-gc-syntax-highlighter/prettify-gc-syntax-highlighter.php\";}','yes'),(36,'home','http://localhost','yes'),(37,'category_base','','yes'),(38,'ping_sites','http://rpc.pingomatic.com/','yes'),(39,'advanced_edit','0','yes'),(40,'comment_max_links','2','yes'),(41,'gmt_offset','0','yes'),(42,'default_email_category','1','yes'),(43,'recently_edited','a:5:{i:0;s:64:\"/var/www/mywiki/wp-content/themes/twentythirteen-child/style.css\";i:1;s:79:\"/var/www/mywiki/wp-content/themes/twentythirteen-child/archive-members_only.php\";i:3;s:54:\"/var/www/mywiki/wp-content/themes/twentytwelve/404.php\";i:4;s:56:\"/var/www/mywiki/wp-content/themes/twentytwelve/style.css\";i:5;s:0:\"\";}','no'),(44,'template','twentythirteen','yes'),(45,'stylesheet','twentythirteen-child','yes'),(46,'comment_whitelist','','yes'),(47,'blacklist_keys','','no'),(48,'comment_registration','','yes'),(49,'html_type','text/html','yes'),(50,'use_trackback','0','yes'),(51,'default_role','subscriber','yes'),(52,'db_version','29632','yes'),(53,'uploads_use_yearmonth_folders','1','yes'),(54,'upload_path','','yes'),(55,'blog_public','0','yes'),(56,'default_link_category','2','yes'),(57,'show_on_front','posts','yes'),(58,'tag_base','','yes'),(59,'show_avatars','','yes'),(60,'avatar_rating','G','yes'),(61,'upload_url_path','','yes'),(62,'thumbnail_size_w','150','yes'),(63,'thumbnail_size_h','150','yes'),(64,'thumbnail_crop','1','yes'),(65,'medium_size_w','300','yes'),(66,'medium_size_h','300','yes'),(67,'avatar_default','mystery','yes'),(68,'large_size_w','1024','yes'),(69,'large_size_h','1024','yes'),(70,'image_default_link_type','file','yes'),(71,'image_default_size','','yes'),(72,'image_default_align','','yes'),(73,'close_comments_for_old_posts','','yes'),(74,'close_comments_days_old','14','yes'),(75,'thread_comments','','yes'),(76,'thread_comments_depth','5','yes'),(77,'page_comments','','yes'),(78,'comments_per_page','50','yes'),(79,'default_comments_page','newest','yes'),(80,'comment_order','asc','yes'),(81,'sticky_posts','a:0:{}','yes'),(82,'widget_categories','a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(83,'widget_text','a:2:{i:2;a:3:{s:5:\"title\";s:5:\"Index\";s:4:\"text\";s:194:\"<div class=\" the-sidebar-container\">\r\n             <div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\" data-offset-bottom=\"200\"><ul class=\"nav bs-sidebar\">\r\n                </ul></div></div>\r\n\";s:6:\"filter\";b:0;}s:12:\"_multiwidget\";i:1;}','yes'),(84,'widget_rss','a:0:{}','yes'),(85,'uninstall_plugins','a:1:{s:63:\"category-posts-in-custom-menu/category-posts-in-custom-menu.php\";a:2:{i:0;s:12:\"CPCM_Manager\";i:1;s:14:\"cpmp_uninstall\";}}','no'),(86,'timezone_string','','yes'),(87,'page_for_posts','0','yes'),(88,'page_on_front','0','yes'),(89,'default_post_format','0','yes'),(90,'link_manager_enabled','0','yes'),(91,'initial_db_version','24448','yes'),(92,'mk_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:62:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:9:\"add_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(93,'widget_search','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(94,'widget_recent-posts','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(95,'widget_recent-comments','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(96,'widget_archives','a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(97,'widget_meta','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(98,'sidebars_widgets','a:4:{s:19:\"wp_inactive_widgets\";a:1:{i:0;s:6:\"text-2\";}s:9:\"sidebar-1\";a:4:{i:0;s:14:\"recent-posts-2\";i:1;s:10:\"archives-2\";i:2;s:11:\"tag_cloud-2\";i:3;s:12:\"categories-2\";}s:9:\"sidebar-2\";a:1:{i:0;s:26:\"bootstrap_sidebar_widget-5\";}s:13:\"array_version\";i:3;}','yes'),(99,'cron','a:4:{i:1658871350;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1658914555;a:1:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1658914778;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}','yes'),(108,'dashboard_widget_options','a:4:{s:25:\"dashboard_recent_comments\";a:1:{s:5:\"items\";i:5;}s:24:\"dashboard_incoming_links\";a:5:{s:4:\"home\";s:28:\"http://localhost\";s:4:\"link\";s:104:\"http://blogsearch.google.com/blogsearch?scoring=d&partner=wordpress&q=link:http://localhost/\";s:3:\"url\";s:132:\"http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=10&output=rss&partner=wordpress&q=link:http://localhost/mywiki/\";s:5:\"items\";i:10;s:9:\"show_date\";b:0;}s:17:\"dashboard_primary\";a:7:{s:4:\"link\";s:26:\"http://wordpress.org/news/\";s:3:\"url\";s:31:\"http://wordpress.org/news/feed/\";s:5:\"title\";s:14:\"WordPress Blog\";s:5:\"items\";i:2;s:12:\"show_summary\";i:1;s:11:\"show_author\";i:0;s:9:\"show_date\";i:1;}s:19:\"dashboard_secondary\";a:7:{s:4:\"link\";s:28:\"http://planet.wordpress.org/\";s:3:\"url\";s:33:\"http://planet.wordpress.org/feed/\";s:5:\"title\";s:20:\"Other WordPress News\";s:5:\"items\";i:5;s:12:\"show_summary\";i:0;s:11:\"show_author\";i:0;s:9:\"show_date\";i:0;}}','yes'),(143,'_transient_random_seed','83a84238015f202e8ff16665824e0751','yes'),(167,'theme_mods_twentythirteen','a:5:{s:18:\"nav_menu_locations\";a:1:{s:7:\"primary\";i:11;}s:16:\"header_textcolor\";s:6:\"220e10\";s:12:\"header_image\";s:96:\"http://localhost/html/wp-content/themes/twentythirteen/images/headers/circle.png\";s:17:\"header_image_data\";a:3:{s:3:\"url\";s:96:\"http://localhost/html/wp-content/themes/twentythirteen/images/headers/circle.png\";s:13:\"thumbnail_url\";s:106:\"http://localhost/html/wp-content/themes/twentythirteen/images/headers/circle-thumbnail.png\";s:11:\"description\";s:6:\"Circle\";}s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1381681094;s:4:\"data\";a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:5:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:10:\"archives-2\";i:3;s:11:\"tag_cloud-2\";i:4;s:12:\"categories-2\";}s:9:\"sidebar-2\";a:0:{}}}}','yes'),(168,'nav_menu_options','a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}','yes'),(169,'widget_tag_cloud','a:2:{i:2;a:2:{s:5:\"title\";s:9:\"tag cloud\";s:8:\"taxonomy\";s:8:\"post_tag\";}s:12:\"_multiwidget\";i:1;}','yes'),(205,'recently_activated','a:1:{s:33:\"ssh-sftp-updater-support/sftp.php\";i:1410541058;}','yes'),(210,'ftp_credentials','a:3:{s:8:\"hostname\";s:9:\"localhost\";s:8:\"username\";s:11:\"mywiki-user\";s:15:\"connection_type\";s:3:\"ssh\";}','yes'),(225,'current_theme','Twenty Thirteen Child','yes'),(226,'theme_mods_twentythirteen-child','a:3:{i:0;b:0;s:18:\"nav_menu_locations\";a:1:{s:7:\"primary\";i:11;}s:16:\"header_textcolor\";s:6:\"220e10\";}','yes'),(227,'theme_switched','','yes'),(1166,'widget_bootstrap_sidebar_widget','a:2:{i:5;a:3:{s:5:\"title\";s:0:\"\";s:18:\"active_links_color\";s:8:\" #B22F18\";s:22:\"active_links_extra_css\";s:20:\"\r\nfont-weight: bold;\";}s:12:\"_multiwidget\";i:1;}','yes'),(1396,'easyincludes_settings','a:1:{s:7:\"root_fs\";s:13:\"/var/www/html\";}','yes'),(3331,'category_children','a:2:{i:7;a:7:{i:0;i:8;i:1;i:12;i:2;i:14;i:3;i:19;i:4;i:30;i:5;i:34;i:6;i:50;}i:23;a:3:{i:0;i:41;i:1;i:42;i:2;i:43;}}','yes'),(4148,'WPLANG','','yes'),(4149,'db_upgraded','','yes'),(5211,'auto_core_update_notified','a:4:{s:4:\"type\";s:6:\"manual\";s:5:\"email\";s:21:\"lucy.derlin@gmail.com\";s:7:\"version\";s:5:\"4.2.2\";s:9:\"timestamp\";i:1431503615;}','yes'),(14028,'_site_transient_timeout_theme_roots','1658861120','yes'),(14029,'_site_transient_theme_roots','a:4:{s:14:\"twentyfourteen\";s:7:\"/themes\";s:20:\"twentythirteen-child\";s:7:\"/themes\";s:14:\"twentythirteen\";s:7:\"/themes\";s:12:\"twentytwelve\";s:7:\"/themes\";}','yes'),(14030,'_site_transient_update_themes','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1658859325;s:7:\"checked\";a:4:{s:14:\"twentyfourteen\";s:3:\"1.2\";s:20:\"twentythirteen-child\";s:5:\"1.0.0\";s:14:\"twentythirteen\";s:3:\"1.0\";s:12:\"twentytwelve\";s:3:\"1.2\";}s:8:\"response\";a:3:{s:14:\"twentyfourteen\";a:6:{s:5:\"theme\";s:14:\"twentyfourteen\";s:11:\"new_version\";s:3:\"3.4\";s:3:\"url\";s:44:\"https://wordpress.org/themes/twentyfourteen/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/theme/twentyfourteen.3.4.zip\";s:8:\"requires\";b:0;s:12:\"requires_php\";s:5:\"5.2.4\";}s:14:\"twentythirteen\";a:6:{s:5:\"theme\";s:14:\"twentythirteen\";s:11:\"new_version\";s:3:\"3.6\";s:3:\"url\";s:44:\"https://wordpress.org/themes/twentythirteen/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/theme/twentythirteen.3.6.zip\";s:8:\"requires\";s:3:\"3.6\";s:12:\"requires_php\";s:5:\"5.2.4\";}s:12:\"twentytwelve\";a:6:{s:5:\"theme\";s:12:\"twentytwelve\";s:11:\"new_version\";s:3:\"3.7\";s:3:\"url\";s:42:\"https://wordpress.org/themes/twentytwelve/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/theme/twentytwelve.3.7.zip\";s:8:\"requires\";s:3:\"3.5\";s:12:\"requires_php\";s:5:\"5.2.4\";}}s:12:\"translations\";a:0:{}}','yes'),(14031,'_site_transient_update_plugins','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1658859323;s:8:\"response\";a:4:{s:63:\"category-posts-in-custom-menu/category-posts-in-custom-menu.php\";O:8:\"stdClass\":14:{s:2:\"id\";s:43:\"w.org/plugins/category-posts-in-custom-menu\";s:4:\"slug\";s:29:\"category-posts-in-custom-menu\";s:6:\"plugin\";s:63:\"category-posts-in-custom-menu/category-posts-in-custom-menu.php\";s:11:\"new_version\";s:5:\"1.3.0\";s:3:\"url\";s:60:\"https://wordpress.org/plugins/category-posts-in-custom-menu/\";s:7:\"package\";s:78:\"https://downloads.wordpress.org/plugin/category-posts-in-custom-menu.1.3.0.zip\";s:5:\"icons\";a:1:{s:2:\"1x\";s:82:\"https://ps.w.org/category-posts-in-custom-menu/assets/icon-128x128.png?rev=2539336\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:5:\"3.2.1\";s:6:\"tested\";s:5:\"5.7.6\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";a:0:{}s:14:\"upgrade_notice\";s:201:\"<p>After a long hiatus, now compatible with WordPress 5.7.\nIf you are on a WordPress version between 4.7 and 5.7.2, when encountering issues please report the WordPress version you&#039;re running.</p>\";}s:65:\"html-editor-syntax-highlighter/html-editor-syntax-highlighter.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:44:\"w.org/plugins/html-editor-syntax-highlighter\";s:4:\"slug\";s:30:\"html-editor-syntax-highlighter\";s:6:\"plugin\";s:65:\"html-editor-syntax-highlighter/html-editor-syntax-highlighter.php\";s:11:\"new_version\";s:5:\"2.4.4\";s:3:\"url\";s:61:\"https://wordpress.org/plugins/html-editor-syntax-highlighter/\";s:7:\"package\";s:79:\"https://downloads.wordpress.org/plugin/html-editor-syntax-highlighter.2.4.4.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:83:\"https://ps.w.org/html-editor-syntax-highlighter/assets/icon-256x256.png?rev=2013780\";s:2:\"1x\";s:75:\"https://ps.w.org/html-editor-syntax-highlighter/assets/icon.svg?rev=2013780\";s:3:\"svg\";s:75:\"https://ps.w.org/html-editor-syntax-highlighter/assets/icon.svg?rev=2013780\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:86:\"https://ps.w.org/html-editor-syntax-highlighter/assets/banner-1544x500.png?rev=2013780\";s:2:\"1x\";s:85:\"https://ps.w.org/html-editor-syntax-highlighter/assets/banner-772x250.png?rev=2013780\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.0\";s:6:\"tested\";s:5:\"5.8.4\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";a:0:{}}s:29:\"relative-url/relative-url.php\";O:8:\"stdClass\":14:{s:2:\"id\";s:26:\"w.org/plugins/relative-url\";s:4:\"slug\";s:12:\"relative-url\";s:6:\"plugin\";s:29:\"relative-url/relative-url.php\";s:11:\"new_version\";s:5:\"0.1.8\";s:3:\"url\";s:43:\"https://wordpress.org/plugins/relative-url/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/relative-url.0.1.8.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:65:\"https://ps.w.org/relative-url/assets/icon-256x256.png?rev=2581668\";s:2:\"1x\";s:57:\"https://ps.w.org/relative-url/assets/icon.svg?rev=1568302\";s:3:\"svg\";s:57:\"https://ps.w.org/relative-url/assets/icon.svg?rev=1568302\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:68:\"https://ps.w.org/relative-url/assets/banner-1544x500.png?rev=2581668\";s:2:\"1x\";s:67:\"https://ps.w.org/relative-url/assets/banner-772x250.png?rev=2581668\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:5:\"2.1.0\";s:6:\"tested\";s:5:\"5.8.4\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";a:0:{}s:14:\"upgrade_notice\";s:121:\"<ul>\n<li>Compatibility check for 5.8, nothing new, just bump version to tell everyone this plugin still works.</li>\n</ul>\";}s:33:\"ssh-sftp-updater-support/sftp.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:38:\"w.org/plugins/ssh-sftp-updater-support\";s:4:\"slug\";s:24:\"ssh-sftp-updater-support\";s:6:\"plugin\";s:33:\"ssh-sftp-updater-support/sftp.php\";s:11:\"new_version\";s:5:\"0.8.4\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/ssh-sftp-updater-support/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/ssh-sftp-updater-support.0.8.4.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:68:\"https://s.w.org/plugins/geopattern-icon/ssh-sftp-updater-support.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.1\";s:6:\"tested\";s:5:\"6.0.1\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";a:0:{}}}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:5:{s:55:\"absolute-to-relative-urls/absolute-to-relative-urls.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:39:\"w.org/plugins/absolute-to-relative-urls\";s:4:\"slug\";s:25:\"absolute-to-relative-urls\";s:6:\"plugin\";s:55:\"absolute-to-relative-urls/absolute-to-relative-urls.php\";s:11:\"new_version\";s:5:\"0.3.4\";s:3:\"url\";s:56:\"https://wordpress.org/plugins/absolute-to-relative-urls/\";s:7:\"package\";s:68:\"https://downloads.wordpress.org/plugin/absolute-to-relative-urls.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:69:\"https://s.w.org/plugins/geopattern-icon/absolute-to-relative-urls.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.2\";}s:19:\"akismet/akismet.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:21:\"w.org/plugins/akismet\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:3:\"5.0\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:54:\"https://downloads.wordpress.org/plugin/akismet.5.0.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:59:\"https://ps.w.org/akismet/assets/icon-256x256.png?rev=969272\";s:2:\"1x\";s:59:\"https://ps.w.org/akismet/assets/icon-128x128.png?rev=969272\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:61:\"https://ps.w.org/akismet/assets/banner-772x250.jpg?rev=479904\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"5.0\";s:6:\"tested\";s:5:\"6.0.1\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";a:0:{}}s:9:\"hello.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:25:\"w.org/plugins/hello-dolly\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:5:\"1.7.2\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/hello-dolly.1.7.2.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:64:\"https://ps.w.org/hello-dolly/assets/icon-256x256.jpg?rev=2052855\";s:2:\"1x\";s:64:\"https://ps.w.org/hello-dolly/assets/icon-128x128.jpg?rev=2052855\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:67:\"https://ps.w.org/hello-dolly/assets/banner-1544x500.jpg?rev=2645582\";s:2:\"1x\";s:66:\"https://ps.w.org/hello-dolly/assets/banner-772x250.jpg?rev=2052855\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.6\";s:6:\"tested\";s:5:\"5.8.4\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";a:0:{}}s:65:\"prettify-gc-syntax-highlighter/prettify-gc-syntax-highlighter.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:44:\"w.org/plugins/prettify-gc-syntax-highlighter\";s:4:\"slug\";s:30:\"prettify-gc-syntax-highlighter\";s:6:\"plugin\";s:65:\"prettify-gc-syntax-highlighter/prettify-gc-syntax-highlighter.php\";s:11:\"new_version\";s:5:\"1.6.0\";s:3:\"url\";s:61:\"https://wordpress.org/plugins/prettify-gc-syntax-highlighter/\";s:7:\"package\";s:79:\"https://downloads.wordpress.org/plugin/prettify-gc-syntax-highlighter.1.6.0.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:74:\"https://s.w.org/plugins/geopattern-icon/prettify-gc-syntax-highlighter.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:5:\"3.0.5\";}s:39:\"syntaxhighlighter/syntaxhighlighter.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:31:\"w.org/plugins/syntaxhighlighter\";s:4:\"slug\";s:17:\"syntaxhighlighter\";s:6:\"plugin\";s:39:\"syntaxhighlighter/syntaxhighlighter.php\";s:11:\"new_version\";s:5:\"3.6.2\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/syntaxhighlighter/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/syntaxhighlighter.3.6.2.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:68:\"https://s.w.org/plugins/geopattern-icon/syntaxhighlighter_ffffff.svg\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:71:\"https://ps.w.org/syntaxhighlighter/assets/banner-772x250.png?rev=478964\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"5.7\";s:6:\"tested\";s:5:\"5.9.3\";s:12:\"requires_php\";s:3:\"7.0\";s:13:\"compatibility\";a:0:{}}}}','yes'),(14032,'rewrite_rules','a:68:{s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:20:\"(.?.+?)(/[0-9]+)?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";s:27:\"[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\"[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\"[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:20:\"([^/]+)/trackback/?$\";s:31:\"index.php?name=$matches[1]&tb=1\";s:40:\"([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:35:\"([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:28:\"([^/]+)/page/?([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&paged=$matches[2]\";s:35:\"([^/]+)/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&cpage=$matches[2]\";s:20:\"([^/]+)(/[0-9]+)?/?$\";s:43:\"index.php?name=$matches[1]&page=$matches[2]\";s:16:\"[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:26:\"[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:46:\"[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";}','yes'),(14033,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:24:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-6.0.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-6.0.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-6.0.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-6.0.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"6.0.1\";s:7:\"version\";s:5:\"6.0.1\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:1;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.1.13.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.1.13.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.1.13-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-5.1.13-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"5.1.13\";s:7:\"version\";s:6:\"5.1.13\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:2;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-6.0.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-6.0.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-6.0.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-6.0.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"6.0.1\";s:7:\"version\";s:5:\"6.0.1\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:3;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:57:\"https://downloads.wordpress.org/release/wordpress-6.0.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:57:\"https://downloads.wordpress.org/release/wordpress-6.0.zip\";s:10:\"no_content\";s:68:\"https://downloads.wordpress.org/release/wordpress-6.0-no-content.zip\";s:11:\"new_bundled\";s:69:\"https://downloads.wordpress.org/release/wordpress-6.0-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:3:\"6.0\";s:7:\"version\";s:3:\"6.0\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:4;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.9.3.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.9.3.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.9.3-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.9.3-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"5.9.3\";s:7:\"version\";s:5:\"5.9.3\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:5;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.9.2.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.9.2.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.9.2-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.9.2-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"5.9.2\";s:7:\"version\";s:5:\"5.9.2\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:6;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.8.4.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.8.4.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.8.4-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.8.4-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"5.8.4\";s:7:\"version\";s:5:\"5.8.4\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:7;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.7.6.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.7.6.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.7.6-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.7.6-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"5.7.6\";s:7:\"version\";s:5:\"5.7.6\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:8;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.6.8.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.6.8.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.6.8-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.6.8-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"5.6.8\";s:7:\"version\";s:5:\"5.6.8\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:9;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.5.9.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.5.9.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.5.9-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.5.9-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"5.5.9\";s:7:\"version\";s:5:\"5.5.9\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:10;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.4.10.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.4.10.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.4.10-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-5.4.10-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"5.4.10\";s:7:\"version\";s:6:\"5.4.10\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:11;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.3.12.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.3.12.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.3.12-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-5.3.12-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"5.3.12\";s:7:\"version\";s:6:\"5.3.12\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:12;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.2.15.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.2.15.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.2.15-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-5.2.15-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"5.2.15\";s:7:\"version\";s:6:\"5.2.15\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:13;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.1.13.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.1.13.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.1.13-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-5.1.13-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"5.1.13\";s:7:\"version\";s:6:\"5.1.13\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:14;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.0.16.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-5.0.16.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.0.16-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-5.0.16-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"5.0.16\";s:7:\"version\";s:6:\"5.0.16\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:15;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.9.20.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.9.20.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.9.20-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.9.20-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.9.20\";s:7:\"version\";s:6:\"4.9.20\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:16;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.8.19.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.8.19.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.8.19-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.8.19-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.8.19\";s:7:\"version\";s:6:\"4.8.19\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:17;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.7.23.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.7.23.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.7.23-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.7.23-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.7.23\";s:7:\"version\";s:6:\"4.7.23\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:18;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.6.23.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.6.23.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.6.23-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.6.23-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.6.23\";s:7:\"version\";s:6:\"4.6.23\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:19;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.5.26.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.5.26.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.5.26-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.5.26-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.5.26\";s:7:\"version\";s:6:\"4.5.26\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:20;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.4.27.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.4.27.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.4.27-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.4.27-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.4.27\";s:7:\"version\";s:6:\"4.4.27\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:21;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.3.28.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.3.28.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.3.28-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.3.28-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.3.28\";s:7:\"version\";s:6:\"4.3.28\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:22;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.2.32.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.2.32.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.2.32-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.2.32-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.2.32\";s:7:\"version\";s:6:\"4.2.32\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:23;O:8:\"stdClass\":10:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.1.35.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"https://downloads.wordpress.org/release/wordpress-4.1.35.zip\";s:10:\"no_content\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.1.35-no-content.zip\";s:11:\"new_bundled\";s:72:\"https://downloads.wordpress.org/release/wordpress-4.1.35-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:6:\"4.1.35\";s:7:\"version\";s:6:\"4.1.35\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1658859400;s:15:\"version_checked\";s:6:\"4.0.35\";s:12:\"translations\";a:0:{}}','yes'),(14034,'_site_transient_timeout_browser_d3d4068a11f4e0f44e4527b12fc4b98f','1659464200','yes'),(14035,'_site_transient_browser_d3d4068a11f4e0f44e4527b12fc4b98f','a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:9:\"103.0.0.0\";s:8:\"platform\";s:9:\"Macintosh\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','yes'),(14036,'can_compress_scripts','0','yes'),(14037,'_transient_timeout_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','1658902603','no'),(14038,'_transient_timeout_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1658902603','no'),(14039,'_transient_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1658859403','no'),(14040,'_transient_timeout_feed_867bd5c64f85878d03a060509cd2f92c','1658902605','no'),(14041,'_transient_timeout_feed_mod_867bd5c64f85878d03a060509cd2f92c','1658902605','no'),(14042,'_transient_feed_mod_867bd5c64f85878d03a060509cd2f92c','1658859405','no'),(14043,'_transient_timeout_plugin_slugs','1658945813','no'),(14044,'_transient_plugin_slugs','a:12:{i:0;s:55:\"absolute-to-relative-urls/absolute-to-relative-urls.php\";i:1;s:19:\"akismet/akismet.php\";i:2;s:39:\"bs_sidebar_widget/bs_sidebar_widget.php\";i:3;s:63:\"category-posts-in-custom-menu/category-posts-in-custom-menu.php\";i:4;s:29:\"easyincludes/easyincludes.php\";i:5;s:9:\"hello.php\";i:6;s:65:\"html-editor-syntax-highlighter/html-editor-syntax-highlighter.php\";i:7;s:41:\"make-urls-relative/make_urls_relative.php\";i:8;s:65:\"prettify-gc-syntax-highlighter/prettify-gc-syntax-highlighter.php\";i:9;s:29:\"relative-url/relative-url.php\";i:10;s:33:\"ssh-sftp-updater-support/sftp.php\";i:11;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";}','no'),(14045,'_transient_timeout_dash_4077549d03da2e451c8b5f002294ff51','1658902613','no'),(14046,'_transient_dash_4077549d03da2e451c8b5f002294ff51','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wordpress.org/news/2022/07/episode-36-beginners-guide-to-contributions-2-0/\'>WP Briefing: Episode 36: Beginner’s Guide to Contributions 2.0</a> <span class=\"rss-date\">July 25, 2022</span><div class=\"rssSummary\">Thinking of contributing to WordPress? Josepha Haden Chomphosy guides you through the five stages of contribution on the latest episode of the WP Briefing podcast!</div></li></ul></div><div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://blog.akismet.com/2022/07/26/version-5-0-of-the-akismet-wordpress-plugin-is-now-available/\'>Akismet: Version 5.0 of the Akismet WordPress Plugin is Now Available</a></li><li><a class=\'rsswidget\' href=\'https://blog.akismet.com/2022/07/26/spambots-theyre-not-just-like-us-introducing-akismets-newest-spam-fighting-feature/\'>Akismet: Spambots: They’re (Not) Just Like Us. Introducing Akismet’s Newest Spam-fighting Feature.</a></li><li><a class=\'rsswidget\' href=\'https://dothewoo.io/the-developer-journey-that-twists-and-turns/\'>Do The Woo Community: Taking the Curvy Road to Becoming a Developer with Carmen Maymo</a></li></ul></div><div class=\"rss-widget\"><ul></ul></div>','no'),(14047,'_transient_is_multi_author','0','yes');
/*!40000 ALTER TABLE `mk_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mk_postmeta`
--

DROP TABLE IF EXISTS `mk_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext DEFAULT NULL,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=800 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_postmeta`
--

LOCK TABLES `mk_postmeta` WRITE;
/*!40000 ALTER TABLE `mk_postmeta` DISABLE KEYS */;
INSERT INTO `mk_postmeta` VALUES (1,2,'_wp_page_template','default'),(2,4,'_edit_last','1'),(3,4,'_edit_lock','1381506069:1'),(7,7,'_edit_last','1'),(8,7,'_edit_lock','1389978802:1'),(18,18,'_menu_item_type','custom'),(19,18,'_menu_item_menu_item_parent','0'),(20,18,'_menu_item_object_id','18'),(21,18,'_menu_item_object','custom'),(22,18,'_menu_item_target',''),(23,18,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(24,18,'_menu_item_xfn',''),(25,18,'_menu_item_url','/mywiki/'),(36,20,'_menu_item_type','taxonomy'),(37,20,'_menu_item_menu_item_parent','0'),(38,20,'_menu_item_object_id','2'),(39,20,'_menu_item_object','category'),(40,20,'_menu_item_target',''),(41,20,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(42,20,'_menu_item_xfn',''),(43,20,'_menu_item_url',''),(63,23,'_edit_last','1'),(64,23,'_edit_lock','1381519120:1'),(65,24,'_edit_last','1'),(66,24,'_edit_lock','1381519967:1'),(70,27,'_edit_last','1'),(71,27,'_edit_lock','1388350970:1'),(78,27,'_syntaxhighlighter_encoded','1'),(79,45,'_edit_last','1'),(80,45,'_edit_lock','1388350990:1'),(95,62,'_menu_item_type','taxonomy'),(96,62,'_menu_item_menu_item_parent','242'),(97,62,'_menu_item_object_id','14'),(98,62,'_menu_item_object','category'),(99,62,'_menu_item_target',''),(100,62,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(101,62,'_menu_item_xfn',''),(102,62,'_menu_item_url',''),(113,64,'_menu_item_type','taxonomy'),(114,64,'_menu_item_menu_item_parent','242'),(115,64,'_menu_item_object_id','12'),(116,64,'_menu_item_object','category'),(117,64,'_menu_item_target',''),(118,64,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(119,64,'_menu_item_xfn',''),(120,64,'_menu_item_url',''),(124,65,'_edit_last','1'),(125,65,'_edit_lock','1382871625:1'),(131,76,'_edit_last','1'),(132,76,'_edit_lock','1396509174:1'),(136,81,'_edit_last','1'),(137,81,'_edit_lock','1388669420:1'),(142,89,'_menu_item_type','taxonomy'),(143,89,'_menu_item_menu_item_parent','242'),(144,89,'_menu_item_object_id','19'),(145,89,'_menu_item_object','category'),(146,89,'_menu_item_target',''),(147,89,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(148,89,'_menu_item_xfn',''),(149,89,'_menu_item_url',''),(155,94,'_wp_attached_file','2013/10/funny_bash_prompt.png'),(156,94,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:576;s:6:\"height\";i:163;s:4:\"file\";s:29:\"2013/10/funny_bash_prompt.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"funny_bash_prompt-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"funny_bash_prompt-300x84.png\";s:5:\"width\";i:300;s:6:\"height\";i:84;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(157,103,'_edit_last','3'),(158,103,'_edit_lock','1411486396:3'),(160,112,'_wp_attached_file','2013/12/davmail.txt'),(173,103,'_wp_old_slug','utiliser-microsoft-exchange-avec-thunderbird'),(177,129,'_edit_last','1'),(178,129,'_edit_lock','1391113109:1'),(184,136,'_edit_last','1'),(185,136,'_edit_lock','1390130302:1'),(187,149,'_edit_last','1'),(188,149,'_edit_lock','1409048486:3'),(212,179,'_edit_last','1'),(213,179,'_edit_lock','1658859538:3'),(215,182,'_edit_lock','1387652771:1'),(216,182,'_edit_last','1'),(220,191,'_edit_last','1'),(221,191,'_edit_lock','1390546832:1'),(223,195,'_menu_item_type','taxonomy'),(224,195,'_menu_item_menu_item_parent','0'),(225,195,'_menu_item_object_id','23'),(226,195,'_menu_item_object','category'),(227,195,'_menu_item_target',''),(228,195,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(229,195,'_menu_item_xfn',''),(230,195,'_menu_item_url',''),(236,200,'_edit_lock','1410686418:3'),(237,200,'_edit_last','3'),(243,208,'_edit_lock','1388258322:1'),(244,208,'_edit_last','1'),(254,1,'_edit_lock','1388244965:1'),(255,1,'_edit_last','1'),(258,1,'_oembed_0e51df2ead0744a04401e9da3bab8922','{{unknown}}'),(262,229,'_edit_lock','1388526613:1'),(263,229,'_edit_last','1'),(264,237,'_edit_lock','1389171179:1'),(265,237,'_edit_last','1'),(266,18,'cpcm-unfold',''),(267,18,'cpcm-orderby','none'),(268,18,'cpcm-order','DESC'),(269,18,'cpcm-item-count','-1'),(270,18,'cpcm-item-titles','%post_title'),(271,18,'cpcm-remove-original-item','always'),(278,62,'cpcm-unfold','1'),(279,62,'cpcm-orderby','title'),(280,62,'cpcm-order','DESC'),(281,62,'cpcm-item-count','-1'),(282,62,'cpcm-item-titles','%post_title'),(283,62,'cpcm-remove-original-item','only if empty'),(290,64,'cpcm-unfold','1'),(291,64,'cpcm-orderby','title'),(292,64,'cpcm-order','DESC'),(293,64,'cpcm-item-count','-1'),(294,64,'cpcm-item-titles','%post_title'),(295,64,'cpcm-remove-original-item','only if empty'),(296,89,'cpcm-unfold','1'),(297,89,'cpcm-orderby','title'),(298,89,'cpcm-order','DESC'),(299,89,'cpcm-item-count','-1'),(300,89,'cpcm-item-titles','%post_title'),(301,89,'cpcm-remove-original-item','only if empty'),(302,195,'cpcm-unfold',''),(303,195,'cpcm-orderby','title'),(304,195,'cpcm-order','DESC'),(305,195,'cpcm-item-count','-1'),(306,195,'cpcm-item-titles','%post_title'),(307,195,'cpcm-remove-original-item','only if empty'),(308,20,'cpcm-unfold','1'),(309,20,'cpcm-orderby','none'),(310,20,'cpcm-order','DESC'),(311,20,'cpcm-item-count','-1'),(312,20,'cpcm-item-titles','%post_title'),(313,20,'cpcm-remove-original-item','only if empty'),(323,242,'_menu_item_type','custom'),(324,242,'_menu_item_menu_item_parent','0'),(325,242,'_menu_item_object_id','242'),(326,242,'_menu_item_object','custom'),(327,242,'_menu_item_target',''),(328,242,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(329,242,'_menu_item_xfn',''),(330,242,'_menu_item_url','#'),(332,242,'cpcm-unfold',''),(333,242,'cpcm-orderby','none'),(334,242,'cpcm-order','DESC'),(335,242,'cpcm-item-count','-1'),(336,242,'cpcm-item-titles','%post_title'),(337,242,'cpcm-remove-original-item','always'),(338,243,'_edit_last','3'),(339,243,'_edit_lock','1418836212:3'),(343,253,'_edit_lock','1389966427:1'),(344,253,'_edit_last','1'),(347,256,'_edit_last','1'),(348,256,'_edit_lock','1388834542:1'),(374,268,'_menu_item_type','taxonomy'),(375,268,'_menu_item_menu_item_parent','242'),(376,268,'_menu_item_object_id','30'),(377,268,'_menu_item_object','category'),(378,268,'_menu_item_target',''),(379,268,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(380,268,'_menu_item_xfn',''),(381,268,'_menu_item_url',''),(383,268,'cpcm-unfold','1'),(384,268,'cpcm-orderby','title'),(385,268,'cpcm-order','DESC'),(386,268,'cpcm-item-count','-1'),(387,268,'cpcm-item-titles','%post_title'),(388,268,'cpcm-remove-original-item','only if empty'),(389,269,'_menu_item_type','taxonomy'),(390,269,'_menu_item_menu_item_parent','242'),(391,269,'_menu_item_object_id','8'),(392,269,'_menu_item_object','category'),(393,269,'_menu_item_target',''),(394,269,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(395,269,'_menu_item_xfn',''),(396,269,'_menu_item_url',''),(398,269,'cpcm-unfold','1'),(399,269,'cpcm-orderby','title'),(400,269,'cpcm-order','DESC'),(401,269,'cpcm-item-count','-1'),(402,269,'cpcm-item-titles','%post_title'),(403,269,'cpcm-remove-original-item','only if empty'),(404,270,'_menu_item_type','taxonomy'),(405,270,'_menu_item_menu_item_parent','0'),(406,270,'_menu_item_object_id','29'),(407,270,'_menu_item_object','category'),(408,270,'_menu_item_target',''),(409,270,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(410,270,'_menu_item_xfn',''),(411,270,'_menu_item_url',''),(413,270,'cpcm-unfold','1'),(414,270,'cpcm-orderby','title'),(415,270,'cpcm-order','DESC'),(416,270,'cpcm-item-count','-1'),(417,270,'cpcm-item-titles','%post_title'),(418,270,'cpcm-remove-original-item','only if empty'),(420,271,'_edit_last','1'),(421,271,'_edit_lock','1388840497:1'),(423,274,'_edit_lock','1388862503:1'),(424,274,'_edit_last','1'),(425,274,'_wp_page_template','members_only_template.php'),(427,277,'_edit_last','1'),(428,277,'_edit_lock','1389170640:1'),(429,283,'_edit_last','1'),(430,283,'_edit_lock','1389171955:1'),(431,284,'_edit_last','1'),(432,284,'_edit_lock','1389430881:1'),(437,290,'_edit_lock','1389432306:1'),(438,290,'_edit_last','1'),(439,291,'_edit_lock','1389432492:1'),(440,291,'_edit_last','1'),(447,298,'_edit_lock','1389432862:1'),(448,298,'_edit_last','1'),(454,304,'_edit_lock','1389433300:1'),(455,304,'_edit_last','1'),(458,307,'_edit_lock','1389433604:1'),(459,307,'_edit_last','1'),(460,308,'_edit_lock','1389433710:1'),(461,308,'_edit_last','1'),(465,313,'_edit_lock','1389434070:1'),(466,313,'_edit_last','1'),(468,315,'_edit_lock','1389434213:1'),(469,315,'_edit_last','1'),(470,316,'_edit_lock','1389434311:1'),(471,316,'_edit_last','1'),(480,328,'_edit_lock','1389435070:1'),(481,328,'_edit_last','1'),(483,330,'_edit_lock','1389435183:1'),(484,330,'_edit_last','1'),(486,333,'_edit_lock','1389436132:1'),(487,333,'_edit_last','1'),(490,336,'_edit_last','1'),(491,336,'_edit_lock','1390546669:1'),(498,343,'_edit_lock','1389970384:1'),(499,343,'_edit_last','1'),(505,352,'_edit_lock','1390333177:1'),(506,352,'_edit_last','1'),(509,366,'_edit_lock','1390246672:1'),(510,366,'_edit_last','1'),(515,374,'_edit_lock','1390408762:1'),(516,374,'_edit_last','1'),(517,377,'_edit_last','1'),(518,377,'_edit_lock','1431499668:3'),(521,383,'_edit_lock','1391084542:1'),(522,383,'_edit_last','1'),(527,392,'_edit_last','1'),(528,392,'_edit_lock','1390511665:1'),(532,397,'_menu_item_type','taxonomy'),(533,397,'_menu_item_menu_item_parent','242'),(534,397,'_menu_item_object_id','34'),(535,397,'_menu_item_object','category'),(536,397,'_menu_item_target',''),(537,397,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(538,397,'_menu_item_xfn',''),(539,397,'_menu_item_url',''),(541,397,'cpcm-unfold','1'),(542,397,'cpcm-orderby','none'),(543,397,'cpcm-order','DESC'),(544,397,'cpcm-item-count','-1'),(545,397,'cpcm-item-titles','%post_title'),(546,397,'cpcm-remove-original-item','only if empty'),(551,402,'_edit_lock','1391356086:1'),(552,402,'_edit_last','1'),(562,410,'_edit_lock','1391452893:1'),(563,410,'_edit_last','1'),(570,420,'_edit_lock','1392187668:1'),(571,420,'_edit_last','1'),(573,423,'_edit_lock','1392635507:1'),(574,423,'_edit_last','1'),(576,112,'_edit_lock','1392489421:1'),(577,431,'_edit_lock','1396979776:1'),(578,431,'_edit_last','1'),(580,434,'_edit_last','1'),(581,434,'_edit_lock','1406196204:1'),(582,437,'_edit_last','1'),(583,437,'_edit_lock','1394007714:1'),(584,441,'_menu_item_type','taxonomy'),(585,441,'_menu_item_menu_item_parent','195'),(586,441,'_menu_item_object_id','39'),(587,441,'_menu_item_object','category'),(588,441,'_menu_item_target',''),(589,441,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(590,441,'_menu_item_xfn',''),(591,441,'_menu_item_url',''),(593,441,'cpcm-unfold','1'),(594,441,'cpcm-orderby','title'),(595,441,'cpcm-order','DESC'),(596,441,'cpcm-item-count','-1'),(597,441,'cpcm-item-titles','%post_title'),(598,441,'cpcm-remove-original-item','only if empty'),(599,442,'_menu_item_type','taxonomy'),(600,442,'_menu_item_menu_item_parent','270'),(601,442,'_menu_item_object_id','1'),(602,442,'_menu_item_object','category'),(603,442,'_menu_item_target',''),(604,442,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(605,442,'_menu_item_xfn',''),(606,442,'_menu_item_url',''),(608,442,'cpcm-unfold','1'),(609,442,'cpcm-orderby','title'),(610,442,'cpcm-order','DESC'),(611,442,'cpcm-item-count','-1'),(612,442,'cpcm-item-titles','%post_title'),(613,442,'cpcm-remove-original-item','only if empty'),(614,443,'_edit_last','1'),(615,443,'_edit_lock','1396459715:1'),(631,450,'_menu_item_type','taxonomy'),(632,450,'_menu_item_menu_item_parent','195'),(633,450,'_menu_item_object_id','41'),(634,450,'_menu_item_object','category'),(635,450,'_menu_item_target',''),(636,450,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(637,450,'_menu_item_xfn',''),(638,450,'_menu_item_url',''),(640,451,'_menu_item_type','taxonomy'),(641,451,'_menu_item_menu_item_parent','195'),(642,451,'_menu_item_object_id','42'),(643,451,'_menu_item_object','category'),(644,451,'_menu_item_target',''),(645,451,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(646,451,'_menu_item_xfn',''),(647,451,'_menu_item_url',''),(649,452,'_menu_item_type','taxonomy'),(650,452,'_menu_item_menu_item_parent','195'),(651,452,'_menu_item_object_id','43'),(652,452,'_menu_item_object','category'),(653,452,'_menu_item_target',''),(654,452,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(655,452,'_menu_item_xfn',''),(656,452,'_menu_item_url',''),(658,450,'cpcm-unfold','1'),(659,450,'cpcm-orderby','title'),(660,450,'cpcm-order','DESC'),(661,450,'cpcm-item-count','-1'),(662,450,'cpcm-item-titles','%post_title'),(663,450,'cpcm-remove-original-item','only if empty'),(664,451,'cpcm-unfold','1'),(665,451,'cpcm-orderby','title'),(666,451,'cpcm-order','DESC'),(667,451,'cpcm-item-count','-1'),(668,451,'cpcm-item-titles','%post_title'),(669,451,'cpcm-remove-original-item','only if empty'),(670,452,'cpcm-unfold','1'),(671,452,'cpcm-orderby','title'),(672,452,'cpcm-order','DESC'),(673,452,'cpcm-item-count','-1'),(674,452,'cpcm-item-titles','%post_title'),(675,452,'cpcm-remove-original-item','only if empty'),(676,453,'_edit_last','1'),(677,453,'_edit_lock','1397108933:1'),(678,454,'_wp_attached_file','2014/04/matlab.desktop.txt'),(679,455,'_wp_attached_file','2014/04/x-matlab.xml_.txt'),(680,454,'_edit_lock','1397109038:1'),(681,465,'_edit_last','1'),(682,465,'_edit_lock','1398880308:1'),(683,469,'_edit_last','1'),(684,469,'_edit_lock','1411399456:3'),(686,474,'_edit_last','1'),(687,474,'_edit_lock','1400653574:1'),(689,478,'_wp_attached_file','2014/05/disable-animations-ms-word.png'),(690,478,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:617;s:6:\"height\";i:375;s:4:\"file\";s:38:\"2014/05/disable-animations-ms-word.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:38:\"disable-animations-ms-word-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:38:\"disable-animations-ms-word-300x182.png\";s:5:\"width\";i:300;s:6:\"height\";i:182;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:38:\"disable-animations-ms-word-604x270.png\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(693,481,'_edit_last','1'),(694,481,'_edit_lock','1401298443:1'),(696,483,'_edit_lock','1403110118:1'),(697,483,'_edit_last','1'),(699,486,'_edit_lock','1403679951:1'),(700,486,'_edit_last','1'),(701,490,'_edit_last','1'),(702,490,'_edit_lock','1404153027:1'),(703,492,'_edit_last','1'),(704,492,'_edit_lock','1404149230:1'),(705,494,'_edit_lock','1407780371:1'),(706,494,'_edit_last','1'),(708,498,'_edit_last','1'),(709,498,'_edit_lock','1406618061:1'),(711,505,'_edit_last','1'),(712,505,'_edit_lock','1404505214:1'),(714,508,'_edit_last','1'),(715,508,'_edit_lock','1404820988:1'),(716,513,'_edit_lock','1405188662:1'),(717,513,'_edit_last','1'),(721,516,'_wp_attached_file','2014/07/arduino_clapper_schema.png'),(722,516,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:2655;s:6:\"height\";i:1701;s:4:\"file\";s:34:\"2014/07/arduino_clapper_schema.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"arduino_clapper_schema-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"arduino_clapper_schema-300x192.png\";s:5:\"width\";i:300;s:6:\"height\";i:192;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:35:\"arduino_clapper_schema-1024x656.png\";s:5:\"width\";i:1024;s:6:\"height\";i:656;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:34:\"arduino_clapper_schema-604x270.png\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(723,516,'_edit_lock','1405187076:1'),(724,518,'_wp_attached_file','2014/07/RGBLed.h'),(725,519,'_wp_attached_file','2014/07/RGBLed.cpp_.txt'),(726,520,'_edit_lock','1405187407:1'),(727,520,'_edit_last','1'),(728,521,'_wp_attached_file','2014/07/arduino_clapper.ino_.txt'),(730,521,'_edit_lock','1405187584:1'),(731,523,'_edit_last','1'),(732,523,'_edit_lock','1406305485:1'),(733,526,'_edit_lock','1419085890:3'),(734,526,'_edit_last','3'),(740,532,'_edit_lock','1406305370:1'),(741,532,'_edit_last','1'),(742,542,'_edit_last','1'),(743,542,'_edit_lock','1407657938:1'),(747,551,'_edit_last','3'),(748,551,'_edit_lock','1409487302:3'),(749,557,'_edit_lock','1410685273:3'),(750,557,'_edit_last','3'),(753,561,'_edit_last','1'),(754,561,'_edit_lock','1407863753:1'),(756,565,'_edit_last','1'),(757,565,'_edit_lock','1407923890:1'),(759,568,'_wp_attached_file','2014/08/latex_makefile.txt'),(760,574,'_edit_last','3'),(761,574,'_edit_lock','1410698838:3'),(763,579,'_edit_last','3'),(764,579,'_edit_lock','1409048037:3'),(771,590,'_edit_last','3'),(772,590,'_edit_lock','1409048519:3'),(775,593,'_edit_last','3'),(776,593,'_edit_lock','1409487296:3'),(782,601,'_edit_last','3'),(783,601,'_edit_lock','1409658561:3'),(785,1,'_oembed_693b367f5ea630c6724dd44a5df32fae','{{unknown}}'),(788,606,'_edit_lock','1410685169:3'),(789,606,'_edit_last','3'),(794,613,'_edit_lock','1410698754:3'),(795,613,'_edit_last','3'),(796,623,'_edit_lock','1418847289:3'),(797,623,'_edit_last','3'),(798,630,'_edit_lock','1428173426:3'),(799,630,'_edit_last','3');
/*!40000 ALTER TABLE `mk_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mk_posts`
--

DROP TABLE IF EXISTS `mk_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT 0,
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT 0,
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT 0,
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=633 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_posts`
--

LOCK TABLES `mk_posts` WRITE;
/*!40000 ALTER TABLE `mk_posts` DISABLE KEYS */;
INSERT INTO `mk_posts` VALUES (1,3,'2013-10-11 09:34:53','2013-10-11 09:34:53','Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!\r\nhttp://error418.no-ip.org:4320\r\nerror418.no-ip.org\r\n&nbsp;\r\n\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png\"><img class=\"alignnone size-full wp-image-94\" alt=\"funny_bash_prompt\" src=\"http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png\" width=\"576\" height=\"163\" /></a>','Hello world!','','publish','open','open','','hello-world','','','2013-12-28 14:39:48','2013-12-28 14:39:48','',0,'http://localhost/mywiki/?p=1',0,'post','',1),(2,3,'2013-10-11 09:34:53','2013-10-11 09:34:53','This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href=\"http://localhost/mywiki/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!','Sample Page','','publish','open','open','','sample-page','','','2013-10-11 09:34:53','2013-10-11 09:34:53','',0,'http://localhost/mywiki/?page_id=2',0,'page','',0),(4,3,'2013-10-11 09:44:09','2013-10-11 09:44:09','<p>To connect to a mysql server, type:\r\n<code>&gt; mysql -u root -p</code>\r\n\r\nAt the prompt, you can do the following:\r\n<code> \r\nmysql> use mysql;\r\nmysql> create user \'user\'@\'%\' identified by \'password\';\r\nmysql> grant all privileges on mywiki.* to \'mywiki\';\r\n\r\n# change root password\r\nmysql> update user set password=PASSWORD(\"NEWPASSWORD\") where User=\'root\';\r\nmysql> flush privileges;\r\nmysql> quit\r\n</code>\r\n\r\nIf you use lampp, don\'t forget that the mysql to use is located in <u>lampp/bin/mysql</u>.\r\n</p>','MySql - manage users','','publish','closed','open','','mysql-manage-users','','','2013-10-11 09:45:27','2013-10-11 09:45:27','',0,'http://localhost/html/?p=4',0,'post','',0),(5,3,'2013-10-11 09:44:09','2013-10-11 09:44:09','<p>To connect to a mysql server, type:\r\n<code>&gt; mysql -u root -p</code>\r\n\r\nAt the prompt, you can do the following:\r\n<code> \r\nmysql> use mysql;\r\nmysql> create user \'user\'@\'%\' identified by \'password\';\r\nmysql> grant all privileges on mywiki.* to \'mywiki\';\r\n\r\n# change root password\r\nmysql> update user set password=PASSWORD(\"NEWPASSWORD\") where User=\'root\';\r\nmysql> flush privileges;\r\nmysql> quit\r\n</code>\r\n\r\nIf you use lampp, don\'t forget that the mysql to use is located in lampp/bin/mysql.\r\n</p>','MySql - manage users','','inherit','closed','open','','4-revision-v1','','','2013-10-11 09:44:09','2013-10-11 09:44:09','',4,'http://localhost/html/?p=5',0,'revision','',0),(6,3,'2013-10-11 09:45:27','2013-10-11 09:45:27','<p>To connect to a mysql server, type:\r\n<code>&gt; mysql -u root -p</code>\r\n\r\nAt the prompt, you can do the following:\r\n<code> \r\nmysql> use mysql;\r\nmysql> create user \'user\'@\'%\' identified by \'password\';\r\nmysql> grant all privileges on mywiki.* to \'mywiki\';\r\n\r\n# change root password\r\nmysql> update user set password=PASSWORD(\"NEWPASSWORD\") where User=\'root\';\r\nmysql> flush privileges;\r\nmysql> quit\r\n</code>\r\n\r\nIf you use lampp, don\'t forget that the mysql to use is located in <u>lampp/bin/mysql</u>.\r\n</p>','MySql - manage users','','inherit','closed','open','','4-revision-v1','','','2013-10-11 09:45:27','2013-10-11 09:45:27','',4,'http://localhost/html/?p=6',0,'revision','',0),(7,3,'2013-10-11 09:57:17','2013-10-11 09:57:17','In ARM, 15 registers are at disposal:\r\n<ul>\r\n	<li>\r\n    <strong>R0-R3</strong> are used for passing arguments to subroutines; they are thus modified by each call.</li>\r\n	<li>\r\n    <strong>R4-R9</strong> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\n    never forget to back them up before anything else:\r\n    <pre class=\"prettyprint\">\r\npush {R4-R9, LR} /* backup */\r\n...\r\npop {R4-R9, PC} /* restore and branch at the same time \r\n(LR restored in PC) */</pre></li>\r\n	<li>\r\n    <strong>R7</strong> is also used to store the address of a syscall to execute</li>\r\n	<li>\r\n    <strong>R13</strong> points to the stack, <strong>R14</strong> is the link register (holding the return address when calling a subroutine), and <strong>R15</strong> is the programm counter (holding the address of the next instruction).</li>\r\n</ul>\r\n<h2>Registers complete table</h2>\r\n<table>\r\n<thead>\r\n<td>register</td>\r\n<td>alt. name</td>\r\n<td>function</td>\r\n</thead>\r\n<tr>\r\n<td>r0</td>\r\n<td>a1</td>\r\n<td>First function argument / Integer function result Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r1</td>\r\n<td>a2</td>\r\n<td>Second function argument Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r2</td>\r\n<td>a3</td>\r\n<td>Third function argument Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r3</td>\r\n<td>a4</td>\r\n<td>Fourth function argument Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r4</td>\r\n<td>v1</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r5</td>\r\n<td>v2</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r6</td>\r\n<td>v3</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r7</td>\r\n<td>v4</td>\r\n<td>Register variable, also used to store the address of a syscall</td>\r\n</tr>\r\n<tr>\r\n<td>r8</td>\r\n<td>v5</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r9</td>\r\n<td>v6</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r10</td>\r\n<td>sl</td>\r\n<td>Stack limit</td>\r\n</tr>\r\n<tr>\r\n<td>r11</td>\r\n<td>fp</td>\r\n<td>Argument pointer</td>\r\n</tr>\r\n<tr>\r\n<td>r12</td>\r\n<td>ip</td>\r\n<td>Temporary workspace</td>\r\n</tr>\r\n<tr>\r\n<td>r13</td>\r\n<td>sp</td>\r\n<td>Stack pointer</td>\r\n</tr>\r\n<tr>\r\n<td>r14</td>\r\n<td>lr</td>\r\n<td>Link register Workspace</td>\r\n</tr>\r\n<tr>\r\n<td>r15</td>\r\n<td>pc</td>\r\n<td>Program counter</td>\r\n</tr>\r\n</table>\r\n<a href=\"http://www.exploit-db.com/papers/14143/\">source</a>','ARM Registers','','publish','closed','open','','arm-registers','','','2014-01-17 14:56:23','2014-01-17 14:56:23','',0,'http://localhost/html/?p=7',0,'post','',0),(8,3,'2013-10-11 09:57:17','2013-10-11 09:57:17','<table>\r\n    <thead>\r\n        <td>register</td>\r\n        <td>alt. name</td>\r\n        <td>function</td>\r\n    </thead>\r\n        <tr>\r\n        <td>r0</td>\r\n        <td>a1</td>\r\n        <td>First function argument Integer function result Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r1</td>\r\n        <td>a2</td>\r\n        <td>Second function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r2</td>\r\n        <td>a3</td>\r\n        <td>Third function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r3</td>\r\n        <td>a4</td>\r\n        <td>Fourth function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r4</td>\r\n        <td>v1</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r5</td>\r\n        <td>v2</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r6</td>\r\n        <td>v3</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r7</td>\r\n        <td>v4</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r8</td>\r\n        <td>v5</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r9</td>\r\n        <td>v6</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>r10</td>\r\n        <td>sl</td>\r\n        <td>Stack limit</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r11</td>\r\n        <td>fp</td>\r\n        <td>Argument pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r12</td>\r\n        <td>ip</td>\r\n        <td>Temporary workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r13</td>\r\n        <td>sp</td>\r\n        <td>Stack pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r14</td>\r\n        <td>lr</td>\r\n        <td>Link register Workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r15</td>\r\n        <td>pc</td>\r\n        <td>Program counter</td>\r\n    </tr>\r\n</table>\r\n','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2013-10-11 09:57:17','2013-10-11 09:57:17','',7,'http://localhost/html/?p=8',0,'revision','',0),(9,3,'2014-01-17 14:57:26','2014-01-17 14:57:26','In ARM, 15 registers are at disposal:\n<ul>\n	<li>\n    <strong>R0-R3</strong> are used for passing arguments to subroutines; they are thus modified by each call.</li>\n	<li>\n    <strong>R4-R9</strong> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \n    never forget to back them up before anything else:\n<pre class=\"prettyprint\">\npush {R4-R9, LR} /* backup */\n...\npop {R4-R9, PC} /* restore and branch at the same time \n(LR restored in PC) */</pre>\n</li>\n	<li>\n    <strong>R7</strong> is also used to store the address of a syscall to execute</li>\n	<li>\n    <strong>R13</strong> points to the stack, <strong>R14</strong> is the link register (holding the return address when calling a subroutine), and <strong>R15</strong> is the programm counter (holding the address of the next instruction).</li>\n</ul>\n<h2>Registers complete table</h2>\n<table>\n<thead>\n<td>register</td>\n<td>alt. name</td>\n<td>function</td>\n</thead>\n<tr>\n<td>r0</td>\n<td>a1</td>\n<td>First function argument / Integer function result Scratch register</td>\n</tr>\n<tr>\n<td>r1</td>\n<td>a2</td>\n<td>Second function argument Scratch register</td>\n</tr>\n<tr>\n<td>r2</td>\n<td>a3</td>\n<td>Third function argument Scratch register</td>\n</tr>\n<tr>\n<td>r3</td>\n<td>a4</td>\n<td>Fourth function argument Scratch register</td>\n</tr>\n<tr>\n<td>r4</td>\n<td>v1</td>\n<td>Register variable</td>\n</tr>\n<tr>\n<td>r5</td>\n<td>v2</td>\n<td>Register variable</td>\n</tr>\n<tr>\n<td>r6</td>\n<td>v3</td>\n<td>Register variable</td>\n</tr>\n<tr>\n<td>r7</td>\n<td>v4</td>\n<td>Register variable, also used to store the address of a syscall</td>\n</tr>\n<tr>\n<td>r8</td>\n<td>v5</td>\n<td>Register variable</td>\n</tr>\n<tr>\n<td>r9</td>\n<td>v6</td>\n<td>Register variable</td>\n</tr>\n<tr>\n<td>r10</td>\n<td>sl</td>\n<td>Stack limit</td>\n</tr>\n<tr>\n<td>r11</td>\n<td>fp</td>\n<td>Argument pointer</td>\n</tr>\n<tr>\n<td>r12</td>\n<td>ip</td>\n<td>Temporary workspace</td>\n</tr>\n<tr>\n<td>r13</td>\n<td>sp</td>\n<td>Stack pointer</td>\n</tr>\n<tr>\n<td>r14</td>\n<td>lr</td>\n<td>Link register Workspace</td>\n</tr>\n<tr>\n<td>r15</td>\n<td>pc</td>\n<td>Program counter</td>\n</tr>\n</table>\n<a href=\"http://www.exploit-db.com/papers/14143/\">source</a>','ARM Registers','','inherit','closed','open','','7-autosave-v1','','','2014-01-17 14:57:26','2014-01-17 14:57:26','',7,'http://localhost/html/?p=9',0,'revision','',0),(10,3,'2013-10-11 10:06:45','2013-10-11 10:06:45','<p> In ARM, there is 15 registers at disposal. <br />\r\n<ul>\r\n    <li>\r\n<emph>R0-R3</emph> are used for passing arguments to subroutines; they are thus modified\r\nby each call.\r\n    </li>\r\n    <li>\r\n<emph>R4-R9</emph> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\nnever forget to back them up before anything else:\r\n<code>\r\n    push {R4-R9, LR} /* backup */\r\n    ...\r\n    pop {R4-R9, PC} /* restore and branch at the same time (LR restored in PC) */\r\n</code>\r\n    </li>\r\n    <li>\r\n    <emph>R7</emph> is also used to store the address of a syscall to execute \r\n    </li>\r\n    <li>\r\n    <emph>R13</emph> points to the stack, <emph>R14</emph> is the link register (holding the return address when calling a subroutine),\r\n    and <emph>R15</emph> is the programm counter (holding the address of the next instruction).\r\n    </li>\r\n</ul>\r\n\r\n</p>\r\n\r\n<h3>Complete table</h3>\r\n\r\n<table>\r\n    <thead>\r\n        <td>register</td>\r\n        <td>alt. name</td>\r\n        <td>function</td>\r\n    </thead>\r\n        <tr>\r\n        <td>r0</td>\r\n        <td>a1</td>\r\n        <td>First function argument Integer function result Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r1</td>\r\n        <td>a2</td>\r\n        <td>Second function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r2</td>\r\n        <td>a3</td>\r\n        <td>Third function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r3</td>\r\n        <td>a4</td>\r\n        <td>Fourth function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r4</td>\r\n        <td>v1</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r5</td>\r\n        <td>v2</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r6</td>\r\n        <td>v3</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r7</td>\r\n        <td>v4</td>\r\n        <td>Register variable, also used to store the address of a syscall</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r8</td>\r\n        <td>v5</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r9</td>\r\n        <td>v6</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>r10</td>\r\n        <td>sl</td>\r\n        <td>Stack limit</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r11</td>\r\n        <td>fp</td>\r\n        <td>Argument pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r12</td>\r\n        <td>ip</td>\r\n        <td>Temporary workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r13</td>\r\n        <td>sp</td>\r\n        <td>Stack pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r14</td>\r\n        <td>lr</td>\r\n        <td>Link register Workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r15</td>\r\n        <td>pc</td>\r\n        <td>Program counter</td>\r\n    </tr>\r\n</table>\r\n','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2013-10-11 10:06:45','2013-10-11 10:06:45','',7,'http://localhost/html/?p=10',0,'revision','',0),(11,3,'2013-10-11 10:09:01','2013-10-11 10:09:01','<p> In ARM, there is 15 registers at disposal. <br />\r\n<ul>\r\n    <li>\r\n    <emph>R0-R3</emph> are used for passing arguments to subroutines; they are thus modified\r\n    by each call.\r\n    </li>\r\n    <li>\r\n    <emph>R4-R9</emph> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\n    never forget to back them up before anything else:\r\n    <code>\r\n        push {R4-R9, LR} /* backup */\r\n        ...\r\n        pop {R4-R9, PC} /* restore and branch at the same time \r\n                           (LR restored in PC) */\r\n\r\n    </code>\r\n    </li>\r\n    <li>\r\n    <emph>R7</emph> is also used to store the address of a syscall to execute \r\n    </li>\r\n    <li>\r\n    <emph>R13</emph> points to the stack, <emph>R14</emph> is the link register (holding the return address when calling a subroutine),\r\n    and <emph>R15</emph> is the programm counter (holding the address of the next instruction).\r\n    </li>\r\n</ul>\r\n\r\n</p>\r\n\r\n<h3>Complete table</h3>\r\n\r\n<table>\r\n    <thead>\r\n        <td>register</td>\r\n        <td>alt. name</td>\r\n        <td>function</td>\r\n    </thead>\r\n    <tr>\r\n        <td>r0</td>\r\n        <td>a1</td>\r\n        <td>First function argument Integer function result Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r1</td>\r\n        <td>a2</td>\r\n        <td>Second function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r2</td>\r\n        <td>a3</td>\r\n        <td>Third function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r3</td>\r\n        <td>a4</td>\r\n        <td>Fourth function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r4</td>\r\n        <td>v1</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r5</td>\r\n        <td>v2</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r6</td>\r\n        <td>v3</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r7</td>\r\n        <td>v4</td>\r\n        <td>Register variable, also used to store the address of a syscall</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r8</td>\r\n        <td>v5</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r9</td>\r\n        <td>v6</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>r10</td>\r\n        <td>sl</td>\r\n        <td>Stack limit</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r11</td>\r\n        <td>fp</td>\r\n        <td>Argument pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r12</td>\r\n        <td>ip</td>\r\n        <td>Temporary workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r13</td>\r\n        <td>sp</td>\r\n        <td>Stack pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r14</td>\r\n        <td>lr</td>\r\n        <td>Link register Workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r15</td>\r\n        <td>pc</td>\r\n        <td>Program counter</td>\r\n    </tr>\r\n</table>\r\n','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2013-10-11 10:09:01','2013-10-11 10:09:01','',7,'http://localhost/html/?p=11',0,'revision','',0),(12,3,'2013-10-11 10:09:58','2013-10-11 10:09:58','<p> In ARM, there is 15 registers at disposal. <br />\r\n<ul>\r\n    <li>\r\n    <emph>R0-R3</emph> are used for passing arguments to subroutines; they are thus modified\r\n    by each call.\r\n    </li>\r\n    <li>\r\n    <emph>R4-R9</emph> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\n    never forget to back them up before anything else:\r\n    <code>\r\n        push {R4-R9, LR} /* backup */\r\n        ...\r\n        pop {R4-R9, PC} /* restore and branch at the same time \r\n                           (LR restored in PC) */\r\n\r\n    </code>\r\n    </li>\r\n    <li>\r\n    <emph>R7</emph> is also used to store the address of a syscall to execute \r\n    </li>\r\n    <li>\r\n    <emph>R13</emph> points to the stack, <emph>R14</emph> is the link register (holding the return address when calling a subroutine),\r\n    and <emph>R15</emph> is the programm counter (holding the address of the next instruction).\r\n    </li>\r\n</ul>\r\n\r\n</p>\r\n\r\n<h3>Complete table</h3>\r\n\r\n<table>\r\n    <thead>\r\n        <td>register</td>\r\n        <td>alt. name</td>\r\n        <td>function</td>\r\n    </thead>\r\n    <tr>\r\n        <td>r0</td>\r\n        <td>a1</td>\r\n        <td>First function argument Integer function result Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r1</td>\r\n        <td>a2</td>\r\n        <td>Second function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r2</td>\r\n        <td>a3</td>\r\n        <td>Third function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r3</td>\r\n        <td>a4</td>\r\n        <td>Fourth function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r4</td>\r\n        <td>v1</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r5</td>\r\n        <td>v2</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r6</td>\r\n        <td>v3</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r7</td>\r\n        <td>v4</td>\r\n        <td>Register variable, also used to store the address of a syscall</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r8</td>\r\n        <td>v5</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r9</td>\r\n        <td>v6</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>r10</td>\r\n        <td>sl</td>\r\n        <td>Stack limit</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r11</td>\r\n        <td>fp</td>\r\n        <td>Argument pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r12</td>\r\n        <td>ip</td>\r\n        <td>Temporary workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r13</td>\r\n        <td>sp</td>\r\n        <td>Stack pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r14</td>\r\n        <td>lr</td>\r\n        <td>Link register Workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r15</td>\r\n        <td>pc</td>\r\n        <td>Program counter</td>\r\n    </tr>\r\n</table>\r\n<a href=\"http://www.exploit-db.com/papers/14143/\">source</a>','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2013-10-11 10:09:58','2013-10-11 10:09:58','',7,'http://localhost/html/?p=12',0,'revision','',0),(13,3,'2013-10-11 10:16:33','2013-10-11 10:16:33','<p> In ARM, there is 15 registers at disposal. <br />\r\n<ul>\r\n    <li>\r\n    <strong>R0-R3</strong> are used for passing arguments to subroutines; they are thus modified\r\n    by each call.\r\n    </li>\r\n    <li>\r\n    <strong>R4-R9</strong> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\n    never forget to back them up before anything else:\r\n    <code>\r\n        push {R4-R9, LR} /* backup */\r\n        ...\r\n        pop {R4-R9, PC} /* restore and branch at the same time \r\n        (LR restored in PC) */\r\n\r\n    </code>\r\n    </li>\r\n    <li>\r\n    <strong>R7</strong> is also used to store the address of a syscall to execute \r\n    </li>\r\n    <li>\r\n    <strong>R13</strong> points to the stack, <strong>R14</strong> is the link register (holding the return address when calling a subroutine),\r\n    and <strong>R15</strong> is the programm counter (holding the address of the next instruction).\r\n    </li>\r\n</ul>\r\n\r\n</p>\r\n\r\n<h3>Complete table</h3>\r\n\r\n<table>\r\n    <thead>\r\n        <td>register</td>\r\n        <td>alt. name</td>\r\n        <td>function</td>\r\n    </thead>\r\n    <tr>\r\n        <td>r0</td>\r\n        <td>a1</td>\r\n        <td>First function argument Integer function result Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r1</td>\r\n        <td>a2</td>\r\n        <td>Second function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r2</td>\r\n        <td>a3</td>\r\n        <td>Third function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r3</td>\r\n        <td>a4</td>\r\n        <td>Fourth function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r4</td>\r\n        <td>v1</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r5</td>\r\n        <td>v2</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r6</td>\r\n        <td>v3</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r7</td>\r\n        <td>v4</td>\r\n        <td>Register variable, also used to store the address of a syscall</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r8</td>\r\n        <td>v5</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r9</td>\r\n        <td>v6</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>r10</td>\r\n        <td>sl</td>\r\n        <td>Stack limit</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r11</td>\r\n        <td>fp</td>\r\n        <td>Argument pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r12</td>\r\n        <td>ip</td>\r\n        <td>Temporary workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r13</td>\r\n        <td>sp</td>\r\n        <td>Stack pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r14</td>\r\n        <td>lr</td>\r\n        <td>Link register Workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r15</td>\r\n        <td>pc</td>\r\n        <td>Program counter</td>\r\n    </tr>\r\n</table>\r\n<a href=\"http://www.exploit-db.com/papers/14143/\">source</a>\r\n','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2013-10-11 10:16:33','2013-10-11 10:16:33','',7,'http://localhost/html/?p=13',0,'revision','',0),(14,3,'2013-10-11 10:17:14','2013-10-11 10:17:14','<p> In ARM, 15 registers are at disposal:\r\n<ul>\r\n    <li>\r\n    <strong>R0-R3</strong> are used for passing arguments to subroutines; they are thus modified\r\n    by each call.\r\n    </li>\r\n    <li>\r\n    <strong>R4-R9</strong> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\n    never forget to back them up before anything else:\r\n    <code>\r\n        push {R4-R9, LR} /* backup */\r\n        ...\r\n        pop {R4-R9, PC} /* restore and branch at the same time \r\n        (LR restored in PC) */\r\n\r\n    </code>\r\n    </li>\r\n    <li>\r\n    <strong>R7</strong> is also used to store the address of a syscall to execute \r\n    </li>\r\n    <li>\r\n    <strong>R13</strong> points to the stack, <strong>R14</strong> is the link register (holding the return address when calling a subroutine),\r\n    and <strong>R15</strong> is the programm counter (holding the address of the next instruction).\r\n    </li>\r\n</ul>\r\n\r\n</p>\r\n\r\n<h3>Complete table</h3>\r\n\r\n<table>\r\n    <thead>\r\n        <td>register</td>\r\n        <td>alt. name</td>\r\n        <td>function</td>\r\n    </thead>\r\n    <tr>\r\n        <td>r0</td>\r\n        <td>a1</td>\r\n        <td>First function argument Integer function result Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r1</td>\r\n        <td>a2</td>\r\n        <td>Second function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r2</td>\r\n        <td>a3</td>\r\n        <td>Third function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r3</td>\r\n        <td>a4</td>\r\n        <td>Fourth function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r4</td>\r\n        <td>v1</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r5</td>\r\n        <td>v2</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r6</td>\r\n        <td>v3</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r7</td>\r\n        <td>v4</td>\r\n        <td>Register variable, also used to store the address of a syscall</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r8</td>\r\n        <td>v5</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r9</td>\r\n        <td>v6</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>r10</td>\r\n        <td>sl</td>\r\n        <td>Stack limit</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r11</td>\r\n        <td>fp</td>\r\n        <td>Argument pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r12</td>\r\n        <td>ip</td>\r\n        <td>Temporary workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r13</td>\r\n        <td>sp</td>\r\n        <td>Stack pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r14</td>\r\n        <td>lr</td>\r\n        <td>Link register Workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r15</td>\r\n        <td>pc</td>\r\n        <td>Program counter</td>\r\n    </tr>\r\n</table>\r\n<a href=\"http://www.exploit-db.com/papers/14143/\">source</a>\r\n','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2013-10-11 10:17:14','2013-10-11 10:17:14','',7,'http://localhost/html/?p=14',0,'revision','',0),(15,3,'2013-10-11 10:17:42','2013-10-11 10:17:42','<p> In ARM, 15 registers are at disposal:\r\n<ul>\r\n    <li>\r\n    <strong>R0-R3</strong> are used for passing arguments to subroutines; they are thus modified by each call.\r\n    </li>\r\n    <li>\r\n    <strong>R4-R9</strong> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\n    never forget to back them up before anything else:\r\n    <code>\r\n        push {R4-R9, LR} /* backup */\r\n        ...\r\n        pop {R4-R9, PC} /* restore and branch at the same time \r\n        (LR restored in PC) */\r\n\r\n    </code>\r\n    </li>\r\n    <li>\r\n    <strong>R7</strong> is also used to store the address of a syscall to execute \r\n    </li>\r\n    <li>\r\n    <strong>R13</strong> points to the stack, <strong>R14</strong> is the link register (holding the return address when calling a subroutine), and <strong>R15</strong> is the programm counter (holding the address of the next instruction).\r\n    </li>\r\n</ul>\r\n\r\n</p>\r\n\r\n<h3>Complete table</h3>\r\n\r\n<table>\r\n    <thead>\r\n        <td>register</td>\r\n        <td>alt. name</td>\r\n        <td>function</td>\r\n    </thead>\r\n    <tr>\r\n        <td>r0</td>\r\n        <td>a1</td>\r\n        <td>First function argument Integer function result Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r1</td>\r\n        <td>a2</td>\r\n        <td>Second function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r2</td>\r\n        <td>a3</td>\r\n        <td>Third function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r3</td>\r\n        <td>a4</td>\r\n        <td>Fourth function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r4</td>\r\n        <td>v1</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r5</td>\r\n        <td>v2</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r6</td>\r\n        <td>v3</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r7</td>\r\n        <td>v4</td>\r\n        <td>Register variable, also used to store the address of a syscall</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r8</td>\r\n        <td>v5</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r9</td>\r\n        <td>v6</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>r10</td>\r\n        <td>sl</td>\r\n        <td>Stack limit</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r11</td>\r\n        <td>fp</td>\r\n        <td>Argument pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r12</td>\r\n        <td>ip</td>\r\n        <td>Temporary workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r13</td>\r\n        <td>sp</td>\r\n        <td>Stack pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r14</td>\r\n        <td>lr</td>\r\n        <td>Link register Workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r15</td>\r\n        <td>pc</td>\r\n        <td>Program counter</td>\r\n    </tr>\r\n</table>\r\n<a href=\"http://www.exploit-db.com/papers/14143/\">source</a>\r\n','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2013-10-11 10:17:42','2013-10-11 10:17:42','',7,'http://localhost/html/?p=15',0,'revision','',0),(16,3,'2013-10-11 10:18:22','2013-10-11 10:18:22','<p> In ARM, 15 registers are at disposal:\r\n<ul>\r\n    <li>\r\n    <strong>R0-R3</strong> are used for passing arguments to subroutines; they are thus modified by each call.\r\n    </li>\r\n    <li>\r\n    <strong>R4-R9</strong> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\n    never forget to back them up before anything else:\r\n    <code>\r\n        push {R4-R9, LR} /* backup */\r\n        ...\r\n        pop {R4-R9, PC} /* restore and branch at the same time \r\n        (LR restored in PC) */\r\n\r\n    </code>\r\n    </li>\r\n    <li>\r\n    <strong>R7</strong> is also used to store the address of a syscall to execute \r\n    </li>\r\n    <li>\r\n    <strong>R13</strong> points to the stack, <strong>R14</strong> is the link register (holding the return address when calling a subroutine), and <strong>R15</strong> is the programm counter (holding the address of the next instruction).\r\n    </li>\r\n</ul>\r\n\r\n</p>\r\n\r\n<h3>Complete table</h3>\r\n\r\n<table>\r\n    <thead>\r\n        <td>register</td>\r\n        <td>alt. name</td>\r\n        <td>function</td>\r\n    </thead>\r\n    <tr>\r\n        <td>r0</td>\r\n        <td>a1</td>\r\n        <td>First function argument Integer function result Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r1</td>\r\n        <td>a2</td>\r\n        <td>Second function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r2</td>\r\n        <td>a3</td>\r\n        <td>Third function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r3</td>\r\n        <td>a4</td>\r\n        <td>Fourth function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r4</td>\r\n        <td>v1</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r5</td>\r\n        <td>v2</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r6</td>\r\n        <td>v3</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r7</td>\r\n        <td>v4</td>\r\n        <td>Register variable, also used to store the address of a syscall</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r8</td>\r\n        <td>v5</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r9</td>\r\n        <td>v6</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r10</td>\r\n        <td>sl</td>\r\n        <td>Stack limit</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r11</td>\r\n        <td>fp</td>\r\n        <td>Argument pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r12</td>\r\n        <td>ip</td>\r\n        <td>Temporary workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r13</td>\r\n        <td>sp</td>\r\n        <td>Stack pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r14</td>\r\n        <td>lr</td>\r\n        <td>Link register Workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r15</td>\r\n        <td>pc</td>\r\n        <td>Program counter</td>\r\n    </tr>\r\n</table>\r\n<a href=\"http://www.exploit-db.com/papers/14143/\">source</a>','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2013-10-11 10:18:22','2013-10-11 10:18:22','',7,'http://localhost/html/?p=16',0,'revision','',0),(17,3,'2013-10-11 10:19:12','2013-10-11 10:19:12','<p> In ARM, 15 registers are at disposal:\r\n<ul>\r\n    <li>\r\n    <strong>R0-R3</strong> are used for passing arguments to subroutines; they are thus modified by each call.\r\n    </li>\r\n    <li>\r\n    <strong>R4-R9</strong> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\n    never forget to back them up before anything else:\r\n    <code>\r\n        push {R4-R9, LR} /* backup */\r\n        ...\r\n        pop {R4-R9, PC} /* restore and branch at the same time \r\n        (LR restored in PC) */\r\n\r\n    </code>\r\n    </li>\r\n    <li>\r\n    <strong>R7</strong> is also used to store the address of a syscall to execute \r\n    </li>\r\n    <li>\r\n    <strong>R13</strong> points to the stack, <strong>R14</strong> is the link register (holding the return address when calling a subroutine), and <strong>R15</strong> is the programm counter (holding the address of the next instruction).\r\n    </li>\r\n</ul>\r\n\r\n</p>\r\n\r\n<h3>Complete table</h3>\r\n\r\n<table>\r\n    <thead>\r\n        <td>register</td>\r\n        <td>alt. name</td>\r\n        <td>function</td>\r\n    </thead>\r\n    <tr>\r\n        <td>r0</td>\r\n        <td>a1</td>\r\n        <td>First function argument / Integer function result Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r1</td>\r\n        <td>a2</td>\r\n        <td>Second function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r2</td>\r\n        <td>a3</td>\r\n        <td>Third function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r3</td>\r\n        <td>a4</td>\r\n        <td>Fourth function argument Scratch register</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r4</td>\r\n        <td>v1</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r5</td>\r\n        <td>v2</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r6</td>\r\n        <td>v3</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r7</td>\r\n        <td>v4</td>\r\n        <td>Register variable, also used to store the address of a syscall</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r8</td>\r\n        <td>v5</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r9</td>\r\n        <td>v6</td>\r\n        <td>Register variable</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r10</td>\r\n        <td>sl</td>\r\n        <td>Stack limit</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r11</td>\r\n        <td>fp</td>\r\n        <td>Argument pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r12</td>\r\n        <td>ip</td>\r\n        <td>Temporary workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r13</td>\r\n        <td>sp</td>\r\n        <td>Stack pointer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r14</td>\r\n        <td>lr</td>\r\n        <td>Link register Workspace</td>\r\n    </tr>\r\n    <tr>\r\n        <td>r15</td>\r\n        <td>pc</td>\r\n        <td>Program counter</td>\r\n    </tr>\r\n</table>\r\n<a href=\"http://www.exploit-db.com/papers/14143/\">source</a>','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2013-10-11 10:19:12','2013-10-11 10:19:12','',7,'http://localhost/html/?p=17',0,'revision','',0),(18,3,'2013-10-11 15:45:06','2013-10-11 15:45:06','','Home','','publish','closed','open','','home','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',0,'http://localhost/html/?p=18',1,'nav_menu_item','',0),(20,3,'2013-10-11 15:45:06','2013-10-11 15:45:06',' ','','','publish','closed','open','','20','','','2014-04-09 15:08:40','2014-04-09 15:08:40','',0,'http://localhost/html/?p=20',14,'nav_menu_item','',0),(23,3,'2013-10-11 19:18:40','0000-00-00 00:00:00','Finalizers are not really usefull.\n\n<a href=tp://books.google.ch/books?id=ka2VUBqHiWkC&pg=PA27&lpg=PA27&dq=Item+7:+Avoid+finalizers&source=bl&ots=yYKfNgu_M4&sig=WylcHuQVtaZShk0FvwT-RPGtjss&hl=en&sa=X&ei=BSxJUpWuG6qg7AaKr4GQDg&redir_esc=y#v=onepage&q=Item%207%3A%20Avoid%20finalizers&f=false','Java -- avoid finalizers','','draft','closed','open','','','','','2013-10-11 19:18:40','2013-10-11 19:18:40','',0,'http://localhost/html/?p=23',0,'post','',0),(24,3,'2013-10-11 19:20:11','2013-10-11 19:20:11','Finalizers are not really useful.\r\n\r\n<a href=http://books.google.ch/books?id=ka2VUBqHiWkC&pg=PA27&lpg=PA27&dq=Item+7:+Avoid+finalizers&source=bl&ots=yYKfNgu_M4&sig=WylcHuQVtaZShk0FvwT-RPGtjss&hl=en&sa=X&ei=BSxJUpWuG6qg7AaKr4GQDg&redir_esc=y#v=onepage&q=Item%207%3A%20Avoid%20finalizers&f=false\">check this link</a>','Avoid finalizers','','publish','closed','open','','avoid-finalizers','','','2013-10-11 19:34:37','2013-10-11 19:34:37','',0,'http://localhost/html/?p=24',0,'post','',0),(25,3,'2013-10-11 19:20:11','2013-10-11 19:20:11','Finalizers are not really useful.\r\n\r\n<a href=htttp://books.google.ch/books?id=ka2VUBqHiWkC&pg=PA27&lpg=PA27&dq=Item+7:+Avoid+finalizers&source=bl&ots=yYKfNgu_M4&sig=WylcHuQVtaZShk0FvwT-RPGtjss&hl=en&sa=X&ei=BSxJUpWuG6qg7AaKr4GQDg&redir_esc=y#v=onepage&q=Item%207%3A%20Avoid%20finalizers&f=false\">check this link</a>','Avoid finalizers','','inherit','closed','open','','24-revision-v1','','','2013-10-11 19:20:11','2013-10-11 19:20:11','',24,'http://localhost/html/24-revision-v1/',0,'revision','',0),(26,3,'2013-10-11 19:20:51','2013-10-11 19:20:51','Finalizers are not really useful.\r\n\r\n<a href=http://books.google.ch/books?id=ka2VUBqHiWkC&pg=PA27&lpg=PA27&dq=Item+7:+Avoid+finalizers&source=bl&ots=yYKfNgu_M4&sig=WylcHuQVtaZShk0FvwT-RPGtjss&hl=en&sa=X&ei=BSxJUpWuG6qg7AaKr4GQDg&redir_esc=y#v=onepage&q=Item%207%3A%20Avoid%20finalizers&f=false\">check this link</a>','Avoid finalizers','','inherit','closed','open','','24-revision-v1','','','2013-10-11 19:20:51','2013-10-11 19:20:51','',24,'http://localhost/html/24-revision-v1/',0,'revision','',0),(27,3,'2013-10-13 15:15:19','2013-10-13 15:15:19','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl</code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\n\r\n# prompts for a password and returns it, without term object\r\nuse Term::ReadKey;\r\n\r\nprint \"Enter your password: \";\r\nReadMode \'noecho\';\r\n$password = ReadLine 0;\r\nchomp $password;\r\nReadMode \'normal\';\r\nprint \"\\n\";</pre>\r\nThis is the easy and straight-forward way. But if we use a term object and we also want to avoid the password to be kept in history, we would rather use a more complex routine, like this one:\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name\r\n\r\nsub get_pass{ # $pass (void)\r\n    # parse args\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n\r\n    # get password\r\n    print $msg; # (??) it does not work with $term->...\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password;\r\n	chomp( $password = ReadLine 0 ); \r\n    ReadMode( 0 );  # back to normal\r\n\r\n    # remove pass from history\r\n    eval{ $term->remove_history( $term->where_history() ) }; \r\n\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I< params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...</li>\r\n</ol>\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..\r\n\r\n<h2>Common troubles with perl-related tools</h2>\r\nIf the <code>perldoc</code> command outputs something like:\r\n<pre>\r\nESC[1mNAMEESC[0m\r\n    ESC[4mcybeESC[0m - Cyberlearn Sync Utility.\r\n\r\n    Simple utility to keep in sync with a course from Cyberlearn.\r\n\r\nESC[1mDESCRIPTIONESC[0m\r\n    ...\r\n</pre>\r\nthe problem here is that the \"pager\" (probably \'less\') is \"catching\" (ie, printing \"ESC\" instead the actual escape character) the escape sequences, preventing your terminal from displaying the text correctly [<a href=\"https://groups.google.com/forum/#!topic/comp.lang.perl.misc/9fv3yDB_ipM\">sic</a>]. The cleanest solution is to set perldoc to use \'less\' with the \'-r\' (=\"raw\" output) option.\r\n\r\nYou can add this line to your .bashrc or .zshrc:\r\n<pre class=\"prettyprint lang-text\">\r\nexport PERLDOC_PAGER=\'less -r\'\r\n</pre>','Perl tips and tricks','','publish','closed','open','','perl-tips-and-tricks','','','2013-12-29 20:42:33','2013-12-29 20:42:33','',0,'http://localhost/html/?p=27',0,'post','',0),(28,3,'2013-10-13 15:15:19','2013-10-13 15:15:19','<h2>Import a module from a custom path</h2>\r\n\r\n<p>\r\nWhen you write custom modules, it is normally in ordre to use them in other files. \r\n<br />\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this : \r\n\r\n<code>\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\/)[^\\/]*/ and $1 );\r\nrequire MyModule;\r\n</code>\r\n\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module. <br />\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n</p>\r\n\r\n','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 15:15:19','2013-10-13 15:15:19','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(29,3,'2013-12-29 20:43:36','2013-12-29 20:43:36','<h2>Import a module from a custom path</h2>\nWhen you write custom modules, it is normally in order to use them in other files.\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\n<pre class=\"prettyprint\">\nuse Cwd;\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\nrequire MyModule;</pre>\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl</code>.\n	Another difference between use and import is the Export handling. Here are some examples :\n<pre class=\"prettyprint\">\nuse Foo();\n# equivalent to:\nrequire Foo;\n# ie don\'t import anything, not even the default things\n\nuse Foo;\n# equivalent to:\nBEGIN{\n   require Foo; Foo->import();\n}\nuse Foo qw (foo bar);\n# equivalent to:\nBEGIN{\n   require Foo; Foo->import(qw(foo bar));\n}</pre>\n<h2>Readline, terminal interactions, ...</h2>\n<h3>Get password from commandline</h3>\nFor that to work, you should first have a proper environment:\n<ol>\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\n	<li>In your ~.bashrc, add the following line : \n<code>export \"PERL_RL= o=0\"</code></li>\n</ol>\nThen, you can use this code :\n<pre class=\"prettyprint\">\n\n# prompts for a password and returns it, without term object\nuse Term::ReadKey;\n\nprint \"Enter your password: \";\nReadMode \'noecho\';\n$password = ReadLine 0;\nchomp $password;\nReadMode \'normal\';\nprint \"\\n\";</pre>\nThis is the easy and straight-forward way. But if we use a term object and we also want to avoid the password to be kept in history, we would rather use a more complex routine, like this one:\n<pre class=\"prettyprint\">\nuse Term::ReadKey;\nuse Term::ReadLine;\n\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name\n\nsub get_pass{ # $pass (void)\n    # parse args\n    my $msg = shift;\n    $msg = \"Type your password : \" unless defined $msg;\n\n    # get password\n    print $msg; # (??) it does not work with $term->...\n    ReadMode(\'noecho\'); # don\'t echo\n    my $password;\n	chomp( $password = ReadLine 0 ); \n    ReadMode( 0 );  # back to normal\n\n    # remove pass from history\n    eval{ $term->remove_history( $term->where_history() ) }; \n\n    print \"\\n\";\n    return $password;\n}</pre>\n<h3>Autocompletion</h3>\nFirst, check those links:\n<ul>\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\n</ul>\nSample example, autocompletion:\n<pre class=\"prettyprint\">\nmy $term = Term::ReadLine->new(\"a name\"); \n$term->Attribs->{completion_function} = sub{\n    my ($text, $line, $start) = @_;\n\n    if( $line =~ /^\\s*$/ ){ # first word\n        @_ = grep{ /^$text/ } @COMMANDS;\n        return @_ if( scalar(@_) );\n    }\n\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\n        return @HEADERS_FOR_COMPLETION;\n    }\n\n    if( $line =~ /^(\\w+)$/ ){\n        @_ = grep{ /^$1/ } @COMMANDS;\n        return @_ if( scalar(@_) );\n    }\n\n    return undef;\n};</pre>\n<h3>Coloring</h3>\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\n<pre class=\"prettyprint\">\n# prints an error message (in red) to stdout\n# I<params>: the message to print\nsub print_error{ # void ( $message )\n    my $msg = shift;\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \n        unless not defined $msg;\n}\n\n# prints an info message to stdout\n# I<params>: the message to print\nsub print_info{ # void ( $message )\n    my $msg = shift;\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \n        unless not defined $msg;\n}</pre>\n<h2>Utilities</h2>\n<h3>Remove duplicates from arrays</h3>\n<pre class=\"prettyprint\">\n# removes the duplicates from the given array\n# I<params>: the array\nsub distinct{ # \\@ ( \\@ )\n    # the idea is to convert the array into a hash, since hash keys \n    # must be unique, and then get the keys back\n    my %h;\n    return grep { !$h{$_}++ } @_\n}</pre>\n<h3>trim strings</h3>\n<pre class=\"prettyprint\">\n# simple trim function\n# I< params>: the string to trim \nsub trim { # $ ($)\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\n}</pre>\n<h2>Catch signals</h2>\nNothing easier in Perl, although I didn\'t test it with multiple threads...\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\n<pre class=\"prettyprint\">\n#!/usr/bin/perl\n\nuse strict;\n\nour $SIG;\n\nSIG{\"INT\"} = \"catch_signal\";\n\nwhile (1){\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\n    sleep(10);\n}\n\nsub catch_signal {\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\n    exit();\n}</pre>\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\nThis warning comes from the use of the ~~ operator, which is \nTwo ways:\n<ol>\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\nsimply write:\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\nand we are done</li>\n	<li>A second way is to disable smartmatch warning by an ugly macro:\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...</li>\n</ol>\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..\n<h2>Common troubles with perl-related tools</h2>\nIf the <code>perldoc</code> command outputs something like:\n<pre>\nESC[1mNAMEESC[0m\n    ESC[4mcybeESC[0m - Cyberlearn Sync Utility.\n\n    Simple utility to keep in sync with a course from Cyberlearn.\n\nESC[1mDESCRIPTIONESC[0m\n    ...</pre>\nthe problem here is that the \"pager\" (probably \'less\') is \"catching\" (ie, printing \"ESC\" instead the actual escape character) the escape sequences, preventing your terminal from displaying the text correctly [<a href=\"https://groups.google.com/forum/#!topic/comp.lang.perl.misc/9fv3yDB_ipM\">sic</a>]. The cleanest solution is to set perldoc to use \'less\' with the \'-r\' (=\"raw\" output) option.\n\nYou can add this line to your .bashrc or .zshrc:\n<pre class=\"prettyprint lang-text\">\nexport PERLDOC_PAGER=\'less -r\'</pre>','Perl tips and tricks','','inherit','closed','open','','27-autosave-v1','','','2013-12-29 20:43:36','2013-12-29 20:43:36','',27,'http://localhost/html/27-autosave-v1/',0,'revision','',0),(30,3,'2013-10-13 15:22:47','2013-10-13 15:22:47','<h2>Import a module from a custom path</h2>\r\n\r\n<p>\r\nWhen you write custom modules, it is normally in ordre to use them in other files. \r\n<br />\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this : \r\n\r\n<code>\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\/)[^\\/]*/ and $1 );\r\nrequire MyModule;\r\n</code>\r\n\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module. <br />\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n</p>\r\n\r\n\r\n<h2>Get password from commandline</h2>\r\n<p>\r\nFor that to work, you should first have a proper environment:<ol>\r\n<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system </li>\r\n<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code>\r\n</li>\r\n</ol>\r\n\r\nThen, you can use this code : \r\n<code>\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}\r\n</code>\r\n\r\n</p>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 15:22:47','2013-10-13 15:22:47','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(31,3,'2013-10-13 15:26:18','2013-10-13 15:26:18','<h2>Import a module from a custom path</h2>\r\n\r\n<p>\r\nWhen you write custom modules, it is normally in ordre to use them in other files. \r\n<br />\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this : \r\n\r\n[code language=perl]\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\/)[^\\/]*/ and $1 );\r\nrequire MyModule;\r\n[/code]\r\n\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module. <br />\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n</p>\r\n\r\n\r\n<h2>Get password from commandline</h2>\r\n<p>\r\nFor that to work, you should first have a proper environment:<ol>\r\n<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system </li>\r\n<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code>\r\n</li>\r\n</ol>\r\n\r\nThen, you can use this code : \r\n<code>\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}\r\n</code>\r\n\r\n</p>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 15:26:18','2013-10-13 15:26:18','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(32,3,'2013-10-13 15:26:38','2013-10-13 15:26:38','<h2>Import a module from a custom path</h2>\r\n\r\n<p>\r\nWhen you write custom modules, it is normally in ordre to use them in other files. \r\n<br />\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this : \r\n\r\n[code language=\"perl\"]\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\/)[^\\/]*/ and $1 );\r\nrequire MyModule;\r\n[/code]\r\n\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module. <br />\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n</p>\r\n\r\n\r\n<h2>Get password from commandline</h2>\r\n<p>\r\nFor that to work, you should first have a proper environment:<ol>\r\n<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system </li>\r\n<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code>\r\n</li>\r\n</ol>\r\n\r\nThen, you can use this code : \r\n<code>\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}\r\n</code>\r\n\r\n</p>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 15:26:38','2013-10-13 15:26:38','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(33,3,'2013-10-13 15:35:45','2013-10-13 15:35:45','<h2>Import a module from a custom path</h2>\r\n\r\n<p>\r\nWhen you write custom modules, it is normally in ordre to use them in other files. \r\n<br />\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this : \r\n\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\/)[^\\/]*/ and $1 );\r\nrequire MyModule;\r\n</pre>\r\n\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module. <br />\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n</p>\r\n\r\n\r\n<h2>Get password from commandline</h2>\r\n<p>\r\nFor that to work, you should first have a proper environment:<ol>\r\n<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system </li>\r\n<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code>\r\n</li>\r\n</ol>\r\n\r\nThen, you can use this code : \r\n<code>\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}\r\n</code>\r\n\r\n</p>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 15:35:45','2013-10-13 15:35:45','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(34,3,'2013-10-13 15:37:45','2013-10-13 15:37:45','<h2>Import a module from a custom path</h2>\r\n\r\n<p>\r\nWhen you write custom modules, it is normally in ordre to use them in other files. \r\n<br />\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this : \r\n\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\/)[^\\/]*/ and $1 );\r\nrequire MyModule;\r\n</pre>\r\n\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module. <br />\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n</p>\r\n\r\n\r\n<h2>Get password from commandline</h2>\r\n<p>\r\nFor that to work, you should first have a proper environment:<ol>\r\n<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system </li>\r\n<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code>\r\n</li>\r\n</ol>\r\n\r\nThen, you can use this code : \r\n[code language=\"perl\"]\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine-&gt;new(&quot;a name&quot;); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = &quot;Type your password : &quot; unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term-&gt;readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term-&gt;remove_history( $term-&gt;where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print &quot;\\n&quot;;\r\n    return $password;\r\n}\r\n[/code]\r\n\r\n</p>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 15:37:45','2013-10-13 15:37:45','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(35,3,'2013-10-13 15:38:13','2013-10-13 15:38:13','<h2>Import a module from a custom path</h2>\r\n\r\n<p>\r\nWhen you write custom modules, it is normally in ordre to use them in other files. \r\n<br />\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this : \r\n\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\/)[^\\/]*/ and $1 );\r\nrequire MyModule;\r\n</pre>\r\n\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module. <br />\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n</p>\r\n\r\n\r\n<h2>Get password from commandline</h2>\r\n<p>\r\nFor that to work, you should first have a proper environment:<ol>\r\n<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system </li>\r\n<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code>\r\n</li>\r\n</ol>\r\n\r\nThen, you can use this code : \r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}\r\n</pre>\r\n\r\n</p>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 15:38:13','2013-10-13 15:38:13','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(36,3,'2013-10-13 15:59:33','2013-10-13 15:59:33','<h2>Import a module from a custom path</h2>\r\n\r\n<p>\r\nWhen you write custom modules, it is normally in ordre to use them in other files. \r\n<br />\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this : \r\n\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\/)[^\\/]*/ and $1 );\r\nrequire MyModule;\r\n</pre>\r\n\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module. <br />\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n</p>\r\n\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\n<p>\r\nFor that to work, you should first have a proper environment:<ol>\r\n<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system </li>\r\n<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code>\r\n</li>\r\n</ol>\r\n\r\nThen, you can use this code : \r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}\r\n</pre>\r\n\r\n<h3>Autocompletion</h3>\r\n\r\nFirst, check those links:\r\n<ul>\r\n<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\n\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n    \r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n    \r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n    \r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n   \r\n    return undef;\r\n};\r\n</pre>\r\n\r\n</p>\r\n\r\n<h3>Coloring</h3>\r\n\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n</pre>\r\n\r\n\r\n<h2>Utilities</h2>\r\n\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys must be\r\n    # unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}\r\n</pre>\r\n\r\n\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}\r\n</pre>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 15:59:33','2013-10-13 15:59:33','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(37,3,'2013-10-13 16:00:18','2013-10-13 16:00:18','<h2>Import a module from a custom path</h2>\r\n\r\n<p>\r\nWhen you write custom modules, it is normally in ordre to use them in other files. \r\n<br />\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this : \r\n\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\/)[^\\/]*/ and $1 );\r\nrequire MyModule;\r\n</pre>\r\n\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module. <br />\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n</p>\r\n\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\n<p>\r\nFor that to work, you should first have a proper environment:<ol>\r\n<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system </li>\r\n<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code>\r\n</li>\r\n</ol>\r\n\r\nThen, you can use this code : \r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}\r\n</pre>\r\n\r\n<h3>Autocompletion</h3>\r\n\r\nFirst, check those links:\r\n<ul>\r\n<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\n\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n    \r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n    \r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n    \r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n   \r\n    return undef;\r\n};\r\n</pre>\r\n\r\n</p>\r\n\r\n<h3>Coloring</h3>\r\n\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n</pre>\r\n\r\n\r\n<h2>Utilities</h2>\r\n\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}\r\n</pre>\r\n\r\n\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}\r\n</pre>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 16:00:18','2013-10-13 16:00:18','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(38,3,'2013-10-13 20:05:01','2013-10-13 20:05:01','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in ordre to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\/)[^\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 20:05:01','2013-10-13 20:05:01','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(39,3,'2013-10-13 20:05:30','2013-10-13 20:05:30','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in ordre to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is capital : the keyword <code>use</code> is evaluated at compile time, so before you modified the @INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-13 20:05:30','2013-10-13 20:05:30','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(40,3,'2013-10-14 05:28:25','2013-10-14 05:28:25','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @m and works only with modules (you cannot write INC array. On the other hand, <code>require</code> is evaluated at runtime, when it is encountered.\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-14 05:28:25','2013-10-14 05:28:25','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(41,3,'2013-10-14 05:32:04','2013-10-14 05:32:04','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl<code>.\r\n<p>\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\nrequire Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\nrequire Foo; Foo->import(qw(foo bar));\r\n}\r\n</pre>\r\n</p>\r\n\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-14 05:32:04','2013-10-14 05:32:04','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(42,3,'2013-10-14 05:32:35','2013-10-14 05:32:35','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-14 05:32:35','2013-10-14 05:32:35','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(43,3,'2013-10-14 05:32:59','2013-10-14 05:32:59','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-14 05:32:59','2013-10-14 05:32:59','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(45,3,'2013-10-23 18:26:32','2013-10-23 18:26:32','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:\r\n<ul>\r\n	<li><code>script_files</code> : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n	<li><code>create_makefile_pl</code>: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n	<li><code>version_from</code>: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...</li>\r\n</ol>\r\n<h3>Créer le paquet debian</h3>\r\n<ol>\r\n	<li>Créer le tarball original : <code>./Build dist</code></li>\r\n	<li>Copier le tarball dans un autre répertoire, en le renommant: <code><i>nomdumodule</i>_<i>version</i>.orig.tar.gz</code>. Le underscore est très très important ! Dans notre exemple, nous aurons <code>libcybesync-perl_1.0.orig.tar.gz</code> (le lib est la manière standard de nommer les paquets perl - si vous avez un doute, tentez la commande debuild, il vous dira ce qu\'il attend comme nom de tarball original)</li>\r\n	<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier (qu\'on peut renommer comme bon nous semble) sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\r\n	<li>Ajouter le fichier .gitignore à la racine du nouveau dossier, avec le contenu suivant:\r\n<pre class=\"prettyprint\">META*\r\nMYMETA*\r\n_build/*\r\nblib/*</pre>\r\n</li>\r\n	<li>Exécuter la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\r\n	<li>Editer le fichier <code>debian/control</code>, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\r\n	<li>Faire un commit des changements: <code>git commit -a</code>.</li>\r\n	<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\r\n	<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\r\n</ol>\r\n<h3>Mettre à jour le paquet debian</h3>\r\n<span style=\"color:red; font-style:italic\">Attention</span> : toutes les modifications sur les sources doivent se faire dans le répertoire original, tandis que les modifications relatives au package (description, version, etc) se font dans le répertoire utilisé pour le packaging. Les deux sont totalement différents, voire presque indépendants!\r\n<ol>\r\n	<li>Les sources ayant été modifiées, il s\'agit de recréer un tarball. Ce tarball représente la nouvelle <i>upstream</i> version.</li>\r\n	<li>Mettre à jour le dossier packaging via la commande <code>git-update-orig <path_to_the_new_tarball></code>.</li>\r\n	<li>Mettre à jour le changelog via <code>git-dch</code>: il faudra soit-même s\'assurer que la version est correcte, voire la modifier à la main.</li>\r\n	<li>Faire un git commit des changements</li>\r\n	<li>Créer le nouveau package via <code>debuild -us -uc</code></li>\r\n	<li>Normalement, il n\'est pas nécessaire de garder tous les packages debian précédemment créés. Tant que nous avons la dernière release et un tarball original !</li>\r\n</ol>\r\n\r\n\r\n<h2>Other utilities</h2>\r\n<h3>readme.md file</h3>\r\nThe plugin <code>Pod::Markdown</code> includes a nice util, <code>pod2markdown</code>, which convert your POD to md file format.\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# convert POD to md file\r\n> pod2markdown MyModule.pm > README.md\r\n# convert POD to text file\r\n> pod2text MyModule.pm > README\r\n# convert POD to html\r\n> pod2html MyModule.pm > README.html\r\n\r\n# display POD\r\n> perldoc MyModule.pm\r\n</pre>','Créer un package debian avec Perl','','publish','closed','open','','creer-un-package-debian-avec-perl','','','2013-12-29 20:56:14','2013-12-29 20:56:14','',0,'http://localhost/html/?p=45',0,'post','',0),(46,3,'2013-10-23 18:24:29','2013-10-23 18:24:29','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base : <br />\r\n		<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install,  \r\n	</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.\r\n	</li>\r\n	<li>\r\n		\r\n	</li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 18:24:29','2013-10-23 18:24:29','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(47,3,'2013-10-23 18:26:32','2013-10-23 18:26:32','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install,</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante: <br />\r\n		<pre class=\"prettyprint\">\r\n				use 5.006;\r\n				use strict;\r\n				use warnings FATAL => \'all\';\r\n				use Module::Build;\r\n				\r\n				my $builder = Module::Build->new(\r\n					module_name         => \'CybeSync\',\r\n					license             => \'perl\',\r\n					dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n					dist_version_from   => \'lib/CybeSync.pm\',\r\n					dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n					version_from        => \'lib/CybeSync.pm\',\r\n					abstract_from       => \'script/cybe\',\r\n					release_status      => \'stable\',\r\n					configure_requires => {\r\n						\'Module::Build\' => 0,\r\n					},\r\n					build_requires => {\r\n						\'Test::More\' => 0\r\n					},\r\n					requires => {\r\n						\'Term::ReadLine\' => 0,\r\n						\'Term::ReadKey\' => 0,\r\n						\'Data::Dumper\' => 0,\r\n						\'Carp\' => 0,\r\n						\'JSON\' => 0,\r\n						\'Pod::Usage\' => 0,\r\n						\'LWP::UserAgent\' => 0,\r\n						\'LWP::Protocol::https\' => 0,\r\n						\'HTTP::Request\' => 0,\r\n						\'HTTP::Cookies\' => 0,\r\n						\'URI::Escape\' => 0,\r\n						\'File::Spec\' => 0,\r\n						\'HTML::TokeParser::Simple\' => 0,\r\n						\'Cwd\' => 0\r\n					},\r\n					script_files       => [\'scripts/cybe\'], \r\n					add_to_cleanup     => [ \'CybeSync-*\' ],\r\n					create_makefile_pl => \'traditional\',\r\n					create_readme      => 1\r\n				);\r\n				\r\n				$builder->create_build_script();\r\n				# write Makefile for an easy interface to the build script\r\n				# Module::Build::Compat->write_makefile(build_class => ref $builder);\r\n\r\n		</pre>\r\n	</li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 18:26:32','2013-10-23 18:26:32','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(48,3,'2013-10-23 18:27:02','2013-10-23 18:27:02','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install,</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\nmodule_name         => \'CybeSync\',\r\nlicense             => \'perl\',\r\ndist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\ndist_version_from   => \'lib/CybeSync.pm\',\r\ndist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\nversion_from        => \'lib/CybeSync.pm\',\r\nabstract_from       => \'script/cybe\',\r\nrelease_status      => \'stable\',\r\nconfigure_requires => {\r\n\'Module::Build\' => 0,\r\n},\r\nbuild_requires => {\r\n\'Test::More\' => 0\r\n},\r\nrequires => {\r\n\'Term::ReadLine\' => 0,\r\n\'Term::ReadKey\' => 0,\r\n\'Data::Dumper\' => 0,\r\n\'Carp\' => 0,\r\n\'JSON\' => 0,\r\n\'Pod::Usage\' => 0,\r\n\'LWP::UserAgent\' => 0,\r\n\'LWP::Protocol::https\' => 0,\r\n\'HTTP::Request\' => 0,\r\n\'HTTP::Cookies\' => 0,\r\n\'URI::Escape\' => 0,\r\n\'File::Spec\' => 0,\r\n\'HTML::TokeParser::Simple\' => 0,\r\n\'Cwd\' => 0\r\n},\r\nscript_files       => [\'scripts/cybe\'], \r\nadd_to_cleanup     => [ \'CybeSync-*\' ],\r\ncreate_makefile_pl => \'traditional\',\r\ncreate_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();\r\n# write Makefile for an easy interface to the build script\r\n# Module::Build::Compat->write_makefile(build_class => ref $builder);\r\n</pre>\r\n</li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 18:27:02','2013-10-23 18:27:02','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(49,3,'2013-12-29 20:57:16','2013-12-29 20:57:16','<h2>Créer un module \"CPAN-compatible\"</h2>\n<ol>\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\n<code>module-starter --module=MyModule::Name \\\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\n	<li>\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\n	<li>\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\n		la configuration suivante:\n<pre class=\"prettyprint\">\nuse 5.006;\nuse strict;\nuse warnings FATAL => \'all\';\nuse Module::Build;\n\nmy $builder = Module::Build->new(\n    module_name         => \'CybeSync\',\n    license             => \'perl\',\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\n    dist_version_from   => \'lib/CybeSync.pm\',\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\n    version_from        => \'lib/CybeSync.pm\',\n    abstract_from       => \'script/cybe\',\n    release_status      => \'stable\',\n    configure_requires => {\n        \'Module::Build\' => 0,\n    },\n    build_requires => {\n        \'Test::More\' => 0\n    },\n    requires => {\n        \'Term::ReadLine\' => 0,\n        \'Term::ReadKey\' => 0,\n        \'Data::Dumper\' => 0,\n        \'Carp\' => 0,\n        \'JSON\' => 0,\n        \'Pod::Usage\' => 0,\n        \'LWP::UserAgent\' => 0,\n        \'LWP::Protocol::https\' => 0,\n        \'HTTP::Request\' => 0,\n        \'HTTP::Cookies\' => 0,\n        \'URI::Escape\' => 0,\n        \'File::Spec\' => 0,\n        \'HTML::TokeParser::Simple\' => 0,\n        \'Cwd\' => 0\n    },\n    script_files       => [\'scripts/cybe\'], \n    add_to_cleanup     => [ \'CybeSync-*\' ],\n    create_makefile_pl => \'traditional\',\n    create_readme      => 1\n);\n\n$builder->create_build_script();</pre>\nÀ noter les choses suivantes:\n<ul>\n	<li><code>script_files</code> : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\n	<li><code>create_makefile_pl</code>: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\n	<li><code>version_from</code>: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\n</ul>\n</li>\n	<li>\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...</li>\n</ol>\n<h3>Créer le paquet debian</h3>\n<ol>\n	<li>Créer le tarball original : <code>./Build dist</code></li>\n	<li>Copier le tarball dans un autre répertoire, en le renommant: <code><i>nomdumodule</i>_<i>version</i>.orig.tar.gz</code>. Le underscore est très très important ! Dans notre exemple, nous aurons <code>libcybesync-perl_1.0.orig.tar.gz</code> (le lib est la manière standard de nommer les paquets perl - si vous avez un doute, tentez la commande debuild, il vous dira ce qu\'il attend comme nom de tarball original)</li>\n	<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier (qu\'on peut renommer comme bon nous semble) sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\n	<li>Ajouter le fichier .gitignore à la racine du nouveau dossier, avec le contenu suivant:\n<pre class=\"prettyprint\">META*\nMYMETA*\n_build/*\nblib/*</pre>\n</li>\n	<li>Exécuter la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\n	<li>Editer le fichier <code>debian/control</code>, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\n	<li>Faire un commit des changements: <code>git commit -a</code>.</li>\n	<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\n	<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\n</ol>\n<h3>Mettre à jour le paquet debian</h3>\n<span style=\"color:red; font-style:italic\">Attention</span> : toutes les modifications sur les sources doivent se faire dans le répertoire original, tandis que les modifications relatives au package (description, version, etc) se font dans le répertoire utilisé pour le packaging. Les deux sont totalement différents, voire presque indépendants!\n<ol>\n	<li>Les sources ayant été modifiées, il s\'agit de recréer un tarball. Ce tarball représente la nouvelle <i>upstream</i> version.</li>\n	<li>Mettre à jour le dossier packaging via la commande <code>git-update-orig <path_to_the_new_tarball></code>.</li>\n	<li>Mettre à jour le changelog via <code>git-dch</code>: il faudra soit-même s\'assurer que la version est correcte, voire la modifier à la main.</li>\n	<li>Faire un git commit des changements</li>\n	<li>Créer le nouveau package via <code>debuild -us -uc</code></li>\n	<li>Normalement, il n\'est pas nécessaire de garder tous les packages debian précédemment créés. Tant que nous avons la dernière release et un tarball original !</li>\n</ol>\n<h2>Other utilities</h2>\n<h3>readme.md file</h3>\nThe plugin <code>Pod::Markdown</code> includes a nice util, <code>pod2markdown</code>, which convert your POD to md file format.\n<pre class=\"prettyprint lang-text with-comments\">\n# convert POD to md file\n> pod2markdown MyModule.pm > README.md\n# convert POD to text file\n> pod2text MyModule.pm > README\n# convert POD to html\n> pod2html MyModule.pm > README.html\n\n# display POD\n> perldoc MyModule.pm</pre>','Créer un package debian avec Perl','','inherit','closed','open','','45-autosave-v1','','','2013-12-29 20:57:16','2013-12-29 20:57:16','',45,'http://localhost/html/45-autosave-v1/',0,'revision','',0),(50,3,'2013-10-23 18:28:14','2013-10-23 18:28:14','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install,</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder &gt;lucy.derlin@gmail.com&lt;},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();\r\n# write Makefile for an easy interface to the build script\r\n# Module::Build::Compat->write_makefile(build_class => ref $builder);\r\n</pre>\r\n</li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 18:28:14','2013-10-23 18:28:14','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(51,3,'2013-10-23 18:28:51','2013-10-23 18:28:51','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install,</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();\r\n</pre>\r\n\r\n</li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 18:28:51','2013-10-23 18:28:51','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(52,3,'2013-10-23 18:33:46','2013-10-23 18:33:46','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:<ul>\r\n<li>script_files : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n<li>create_makefile_pl: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n<li>version_from: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n		<li>\r\n			Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes.\r\n	</li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 18:33:46','2013-10-23 18:33:46','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(53,3,'2013-10-23 18:36:49','2013-10-23 18:36:49','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:<ul>\r\n	<li>script_files : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n	<li>create_makefile_pl: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n	<li>version_from: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes.Par exemple: </li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 18:36:49','2013-10-23 18:36:49','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(54,3,'2013-10-23 18:47:35','2013-10-23 18:47:35','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:\r\n<ul>\r\n	<li>script_files : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n	<li>create_makefile_pl: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n	<li>version_from: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...\r\n	</li>	\r\n</ol>\r\n\r\n\r\n<h3>Créer le paquet debian</h3>\r\n\r\n<ol>\r\n	<li>Créer le tarball original : <code>./Build dist</code></li>\r\n	<li>Copier le tarball dans un autre répertoire, en le renommant ainsi: <code><nomdumodule>_<verion>.orig.tar.gz</code>. Le underscore est très très important !</li>\r\n		<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\r\n		<li>Commencer par la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\r\n		<li>Editer le fichier debian/control, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\r\n		<li>Faire un commit des changements (<code>git commit -a </code>).</li>\r\n		<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\r\n		<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\r\n			\r\n			\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 18:47:35','2013-10-23 18:47:35','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(55,3,'2013-10-23 18:49:49','2013-10-23 18:49:49','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:\r\n<ul>\r\n	<li>script_files : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n	<li>create_makefile_pl: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n	<li>version_from: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...</li>\r\n</ol>\r\n<h3>Créer le paquet debian</h3>\r\n<ol>\r\n	<li>Créer le tarball original : <code>./Build dist</code></li>\r\n	<li>Copier le tarball dans un autre répertoire, en le renommant ainsi: <code><nomdumodule>_<verion>.orig.tar.gz</code>. Le underscore est très très important !</li>\r\n	<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\r\n	<li>Commencer par la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\r\n		<li>Editer le fichier <code>debian/control</code>, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\r\n	<li>Faire un commit des changements (<code>git commit -a </code>).</li>\r\n	<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\r\n	<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\r\n</ol>\r\n		\r\n<h3>Mettre à jour le paquet debian</h3>\r\n		Attention : toutes les modifications sur les sources doivent se faire dans le répertoire original, tandis que les modifications relatives au package (description, version, etc) se font dans le répertoire utilisé pour le packaging. Les deux sont totalement différents, voire presque indépendants!\r\n		','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 18:49:49','2013-10-23 18:49:49','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(56,3,'2013-10-23 20:15:56','2013-10-23 20:15:56','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:\r\n<ul>\r\n	<li>script_files : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n	<li>create_makefile_pl: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n	<li>version_from: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...</li>\r\n</ol>\r\n<h3>Créer le paquet debian</h3>\r\n<ol>\r\n	<li>Créer le tarball original : <code>./Build dist</code></li>\r\n	<li>Copier le tarball dans un autre répertoire, en le renommant ainsi: <code><nomdumodule>_<verion>.orig.tar.gz</code>. Le underscore est très très important !</li>\r\n	<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\r\n		<li>Ajouter le fichier .gitignore à la racine du nouveau dossier, avec le contenu suivant:\r\n			<pre class=\"prettyprint\">\r\nMETA*\r\nMYMETA*\r\n_build/*\r\nblib/*\r\n			</pre>\r\n		</li>\r\n	<li>Exécuter la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\r\n	<li>Editer le fichier <code>debian/control</code>, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\r\n	<li>Faire un commit des changements (<code>git commit -a </code>).</li>\r\n	<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\r\n	<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\r\n</ol>\r\n<h3>Mettre à jour le paquet debian</h3>\r\n		<span style=\"color:red; font-style:italic\">Attention</span> : toutes les modifications sur les sources doivent se faire dans le répertoire original, tandis que les modifications relatives au package (description, version, etc) se font dans le répertoire utilisé pour le packaging. Les deux sont totalement différents, voire presque indépendants!\r\n		<ol>\r\n			<li>Les sources ayant été modifiées, il s\'agit de recréer un tarball. Ce tarball représente la nouvelle <i>upstream</i> version.</li>\r\n			<li>Mettre à jour le dossier packaging via la commande <code>git-update-orig <path_to_the_new_tarball></code>.</li>\r\n				<li>Mettre à jour le changelog via <code>git-dch</code></li>\r\n		</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 20:15:56','2013-10-23 20:15:56','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(57,3,'2013-10-23 20:21:27','2013-10-23 20:21:27','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:\r\n<ul>\r\n	<li>script_files : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n	<li>create_makefile_pl: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n	<li>version_from: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...</li>\r\n</ol>\r\n<h3>Créer le paquet debian</h3>\r\n<ol>\r\n	<li>Créer le tarball original : <code>./Build dist</code></li>\r\n	<li>Copier le tarball dans un autre répertoire, en le renommant ainsi: <code><nomdumodule>_<verion>.orig.tar.gz</code>. Le underscore est très très important !</li>\r\n	<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier (qu\'on peut renommer comme bon nous semble) sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\r\n	<li>Ajouter le fichier .gitignore à la racine du nouveau dossier, avec le contenu suivant:\r\n<pre class=\"prettyprint\">META*\r\nMYMETA*\r\n_build/*\r\nblib/*</pre>\r\n</li>\r\n	<li>Exécuter la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\r\n	<li>Editer le fichier <code>debian/control</code>, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\r\n		<li>Faire un commit des changements: <code>git commit -a</code>.</li>\r\n	<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\r\n	<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\r\n</ol>\r\n<h3>Mettre à jour le paquet debian</h3>\r\n<span style=\"color:red; font-style:italic\">Attention</span> : toutes les modifications sur les sources doivent se faire dans le répertoire original, tandis que les modifications relatives au package (description, version, etc) se font dans le répertoire utilisé pour le packaging. Les deux sont totalement différents, voire presque indépendants!\r\n<ol>\r\n	<li>Les sources ayant été modifiées, il s\'agit de recréer un tarball. Ce tarball représente la nouvelle <i>upstream</i> version.</li>\r\n	<li>Mettre à jour le dossier packaging via la commande <code>git-update-orig <path_to_the_new_tarball></code>.</li>\r\n		<li>Mettre à jour le changelog via <code>git-dch</code>: il faudra soit-même s\'assurer que la version est correcte, voire la modifier à la main.</li>\r\n	<li>Faire un git commit des changements</li>\r\n	<li>Créer le nouveau package via <code>debuild -us -uc</code></li>\r\n	<li>Normalement, il n\'est pas nécessaire de garder tous les packages debian précédemment créés. Tant que nous avons la dernière release et un tarball original !</li>\r\n		\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-23 20:21:27','2013-10-23 20:21:27','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(58,3,'2013-10-24 12:53:31','2013-10-24 12:53:31','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:\r\n<ul>\r\n<li><code>script_files</code> : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n<li><code>create_makefile_pl</code>: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n<li><code>version_from</code>: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...</li>\r\n</ol>\r\n<h3>Créer le paquet debian</h3>\r\n<ol>\r\n	<li>Créer le tarball original : <code>./Build dist</code></li>\r\n	<li>Copier le tarball dans un autre répertoire, en le renommant ainsi: <code><nomdumodule>_<verion>.orig.tar.gz</code>. Le underscore est très très important !</li>\r\n	<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier (qu\'on peut renommer comme bon nous semble) sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\r\n	<li>Ajouter le fichier .gitignore à la racine du nouveau dossier, avec le contenu suivant:\r\n<pre class=\"prettyprint\">META*\r\nMYMETA*\r\n_build/*\r\nblib/*</pre>\r\n</li>\r\n	<li>Exécuter la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\r\n	<li>Editer le fichier <code>debian/control</code>, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\r\n	<li>Faire un commit des changements: <code>git commit -a</code>.</li>\r\n	<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\r\n	<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\r\n</ol>\r\n<h3>Mettre à jour le paquet debian</h3>\r\n<span style=\"color:red; font-style:italic\">Attention</span> : toutes les modifications sur les sources doivent se faire dans le répertoire original, tandis que les modifications relatives au package (description, version, etc) se font dans le répertoire utilisé pour le packaging. Les deux sont totalement différents, voire presque indépendants!\r\n<ol>\r\n	<li>Les sources ayant été modifiées, il s\'agit de recréer un tarball. Ce tarball représente la nouvelle <i>upstream</i> version.</li>\r\n	<li>Mettre à jour le dossier packaging via la commande <code>git-update-orig <path_to_the_new_tarball></code>.</li>\r\n	<li>Mettre à jour le changelog via <code>git-dch</code>: il faudra soit-même s\'assurer que la version est correcte, voire la modifier à la main.</li>\r\n	<li>Faire un git commit des changements</li>\r\n	<li>Créer le nouveau package via <code>debuild -us -uc</code></li>\r\n	<li>Normalement, il n\'est pas nécessaire de garder tous les packages debian précédemment créés. Tant que nous avons la dernière release et un tarball original !</li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-24 12:53:31','2013-10-24 12:53:31','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(59,3,'2013-10-24 12:55:07','2013-10-24 12:55:07','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:\r\n<ul>\r\n	<li><code>script_files</code> : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n	<li><code>create_makefile_pl</code>: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n	<li><code>version_from</code>: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...</li>\r\n</ol>\r\n<h3>Créer le paquet debian</h3>\r\n<ol>\r\n	<li>Créer le tarball original : <code>./Build dist</code></li>\r\n	<li>Copier le tarball dans un autre répertoire, en le renommant ainsi: <code><nomdumodule>_<verion>.orig.tar.gz</code>. Le underscore est très très important !</li>\r\n	<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier (qu\'on peut renommer comme bon nous semble) sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\r\n	<li>Ajouter le fichier .gitignore à la racine du nouveau dossier, avec le contenu suivant:\r\n<pre class=\"prettyprint\">META*\r\nMYMETA*\r\n_build/*\r\nblib/*</pre>\r\n</li>\r\n	<li>Exécuter la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\r\n	<li>Editer le fichier <code>debian/control</code>, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\r\n	<li>Faire un commit des changements: <code>git commit -a</code>.</li>\r\n	<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\r\n	<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\r\n</ol>\r\n<h3>Mettre à jour le paquet debian</h3>\r\n<span style=\"color:red; font-style:italic\">Attention</span> : toutes les modifications sur les sources doivent se faire dans le répertoire original, tandis que les modifications relatives au package (description, version, etc) se font dans le répertoire utilisé pour le packaging. Les deux sont totalement différents, voire presque indépendants!\r\n<ol>\r\n	<li>Les sources ayant été modifiées, il s\'agit de recréer un tarball. Ce tarball représente la nouvelle <i>upstream</i> version.</li>\r\n	<li>Mettre à jour le dossier packaging via la commande <code>git-update-orig <path_to_the_new_tarball></code>.</li>\r\n	<li>Mettre à jour le changelog via <code>git-dch</code>: il faudra soit-même s\'assurer que la version est correcte, voire la modifier à la main.</li>\r\n	<li>Faire un git commit des changements</li>\r\n	<li>Créer le nouveau package via <code>debuild -us -uc</code></li>\r\n	<li>Normalement, il n\'est pas nécessaire de garder tous les packages debian précédemment créés. Tant que nous avons la dernière release et un tarball original !</li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-24 12:55:07','2013-10-24 12:55:07','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(60,3,'2013-10-24 12:55:40','2013-10-24 12:55:40','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:<ul>\r\n	<li><code>script_files</code> : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n	<li><code>create_makefile_pl</code>: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n	<li><code>version_from</code>: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...</li>\r\n</ol>\r\n<h3>Créer le paquet debian</h3>\r\n<ol>\r\n	<li>Créer le tarball original : <code>./Build dist</code></li>\r\n	<li>Copier le tarball dans un autre répertoire, en le renommant ainsi: <code><nomdumodule>_<verion>.orig.tar.gz</code>. Le underscore est très très important !</li>\r\n	<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier (qu\'on peut renommer comme bon nous semble) sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\r\n	<li>Ajouter le fichier .gitignore à la racine du nouveau dossier, avec le contenu suivant:\r\n<pre class=\"prettyprint\">META*\r\nMYMETA*\r\n_build/*\r\nblib/*</pre>\r\n</li>\r\n	<li>Exécuter la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\r\n	<li>Editer le fichier <code>debian/control</code>, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\r\n	<li>Faire un commit des changements: <code>git commit -a</code>.</li>\r\n	<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\r\n	<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\r\n</ol>\r\n<h3>Mettre à jour le paquet debian</h3>\r\n<span style=\"color:red; font-style:italic\">Attention</span> : toutes les modifications sur les sources doivent se faire dans le répertoire original, tandis que les modifications relatives au package (description, version, etc) se font dans le répertoire utilisé pour le packaging. Les deux sont totalement différents, voire presque indépendants!\r\n<ol>\r\n	<li>Les sources ayant été modifiées, il s\'agit de recréer un tarball. Ce tarball représente la nouvelle <i>upstream</i> version.</li>\r\n	<li>Mettre à jour le dossier packaging via la commande <code>git-update-orig <path_to_the_new_tarball></code>.</li>\r\n	<li>Mettre à jour le changelog via <code>git-dch</code>: il faudra soit-même s\'assurer que la version est correcte, voire la modifier à la main.</li>\r\n	<li>Faire un git commit des changements</li>\r\n	<li>Créer le nouveau package via <code>debuild -us -uc</code></li>\r\n	<li>Normalement, il n\'est pas nécessaire de garder tous les packages debian précédemment créés. Tant que nous avons la dernière release et un tarball original !</li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-24 12:55:40','2013-10-24 12:55:40','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(61,3,'2013-10-24 13:00:27','2013-10-24 13:00:27','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:\r\n<ul>\r\n	<li><code>script_files</code> : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n	<li><code>create_makefile_pl</code>: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n	<li><code>version_from</code>: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...</li>\r\n</ol>\r\n<h3>Créer le paquet debian</h3>\r\n<ol>\r\n	<li>Créer le tarball original : <code>./Build dist</code></li>\r\n	<li>Copier le tarball dans un autre répertoire, en le renommant: <code><i>nomdumodule</i>_<i>version</i>.orig.tar.gz</code>. Le underscore est très très important ! Dans notre exemple, nous aurons <code>libcybesync-perl_1.0.orig.tar.gz</code> (le lib est la manière standard de nommer les paquets perl - si vous avez un doute, tentez la commande debuild, il vous dira ce qu\'il attend comme nom de tarball original)</li>\r\n	<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier (qu\'on peut renommer comme bon nous semble) sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\r\n	<li>Ajouter le fichier .gitignore à la racine du nouveau dossier, avec le contenu suivant:\r\n<pre class=\"prettyprint\">META*\r\nMYMETA*\r\n_build/*\r\nblib/*</pre>\r\n</li>\r\n	<li>Exécuter la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\r\n	<li>Editer le fichier <code>debian/control</code>, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\r\n	<li>Faire un commit des changements: <code>git commit -a</code>.</li>\r\n	<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\r\n	<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\r\n</ol>\r\n<h3>Mettre à jour le paquet debian</h3>\r\n<span style=\"color:red; font-style:italic\">Attention</span> : toutes les modifications sur les sources doivent se faire dans le répertoire original, tandis que les modifications relatives au package (description, version, etc) se font dans le répertoire utilisé pour le packaging. Les deux sont totalement différents, voire presque indépendants!\r\n<ol>\r\n	<li>Les sources ayant été modifiées, il s\'agit de recréer un tarball. Ce tarball représente la nouvelle <i>upstream</i> version.</li>\r\n	<li>Mettre à jour le dossier packaging via la commande <code>git-update-orig <path_to_the_new_tarball></code>.</li>\r\n	<li>Mettre à jour le changelog via <code>git-dch</code>: il faudra soit-même s\'assurer que la version est correcte, voire la modifier à la main.</li>\r\n	<li>Faire un git commit des changements</li>\r\n	<li>Créer le nouveau package via <code>debuild -us -uc</code></li>\r\n	<li>Normalement, il n\'est pas nécessaire de garder tous les packages debian précédemment créés. Tant que nous avons la dernière release et un tarball original !</li>\r\n</ol>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-10-24 13:00:27','2013-10-24 13:00:27','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(62,3,'2013-10-24 13:03:02','2013-10-24 13:03:02',' ','','','publish','closed','open','','62','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',7,'http://localhost/html/?p=62',3,'nav_menu_item','',0),(64,3,'2013-10-24 13:03:02','2013-10-24 13:03:02',' ','','','publish','closed','open','','64','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',7,'http://localhost/html/?p=64',5,'nav_menu_item','',0),(65,3,'2013-10-26 17:43:30','2013-10-26 17:43:30','<ol>\r\n	<li>clic export active diagram as image SVG</li>\r\n	<li>install imagemagick</li>\r\n	<li><code>convert -resize 4000x src.svg dest.png </code>. Le 4000x est en fait la nouvelle largeur (largeur x hauteur). On peut donc mettre 300x300 par ex.</li>\r\n</ol>\r\nDone !\r\n\r\nA noter: ne pas mettre les extensions dans latex pour les includegraphics.','VP uml - latex - pictures','','publish','closed','open','','vp-uml-latex-pictures','','','2013-10-26 17:45:58','2013-10-26 17:45:58','',0,'http://localhost/html/?p=65',0,'post','',0),(66,3,'2013-10-26 17:43:30','2013-10-26 17:43:30','<ol>\r\n	<li>clic export active diagram as image SVG</li>\r\n	<li>install imagemagick</li>\r\n	<li><code>convert -resize 4000x <src>.svg <dest>.png </code></li>\r\n</ol>','VP uml - latex - pictures','','inherit','closed','open','','65-revision-v1','','','2013-10-26 17:43:30','2013-10-26 17:43:30','',65,'http://localhost/html/65-revision-v1/',0,'revision','',0),(67,3,'2013-10-26 17:43:58','2013-10-26 17:43:58','<ol>\r\n	<li>clic export active diagram as image SVG</li>\r\n	<li>install imagemagick</li>\r\n	<li><code>convert -resize 4000x src.svg dest.png </code></li>\r\n</ol>\r\n\r\nDone !','VP uml - latex - pictures','','inherit','closed','open','','65-revision-v1','','','2013-10-26 17:43:58','2013-10-26 17:43:58','',65,'http://localhost/html/65-revision-v1/',0,'revision','',0),(68,3,'2013-10-26 17:45:00','2013-10-26 17:45:00','<ol>\n	<li>clic export active diagram as image SVG</li>\n	<li>install imagemagick</li>\n	<li><code>convert -resize 4000x src.svg dest.png </code>. Le 4000x est en fait la nouvelle largeur (?).</li>\n</ol>\nDone !\n\nA noter: ne pas mettre les extensions dans latex pour les includegraphics.','VP uml - latex - pictures','','inherit','closed','open','','65-autosave-v1','','','2013-10-26 17:45:00','2013-10-26 17:45:00','',65,'http://localhost/html/65-autosave-v1/',0,'revision','',0),(69,3,'2013-10-26 17:45:20','2013-10-26 17:45:20','<ol>\r\n	<li>clic export active diagram as image SVG</li>\r\n	<li>install imagemagick</li>\r\n	<li><code>convert -resize 4000x src.svg dest.png </code>. Le 4000x est en fait la nouvelle largeur (largeur x hauteur). On peut donc mettre 300x300 par ex.</li>\r\n</ol>\r\nDone !\r\n\r\nA noter: ne pas mettre les extensions dans latex pour les includegraphics.','VP uml - latex - pictures','','inherit','closed','open','','65-revision-v1','','','2013-10-26 17:45:20','2013-10-26 17:45:20','',65,'http://localhost/html/65-revision-v1/',0,'revision','',0),(70,3,'2013-10-30 10:31:52','2013-10-30 10:31:52','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n\r\n\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads... <br />\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}\r\n</pre>\r\n','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-30 10:31:52','2013-10-30 10:31:52','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(71,3,'2013-10-30 10:42:33','2013-10-30 10:42:33','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n\r\n\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways: <ol>\r\n<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done\r\n</li>\r\n<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...\r\n<br />\r\nIt would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative...\r\n\r\n</li>\r\n</ol>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-30 10:42:33','2013-10-30 10:42:33','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(72,3,'2013-10-30 10:43:04','2013-10-30 10:43:04','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative...</li>\r\n</ol>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-30 10:43:04','2013-10-30 10:43:04','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(73,3,'2013-10-30 10:43:59','2013-10-30 10:43:59','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...\r\n</li>\r\n</ol>\r\n\r\n<p>\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..\r\n</p>\r\n','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-30 10:43:59','2013-10-30 10:43:59','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(74,3,'2013-10-30 10:44:09','2013-10-30 10:44:09','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\n# prompts for a password and returns it.\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = $term->readline( $msg );\r\n    eval{ # remove pass from history\r\n        $term->remove_history( $term->where_history() ) \r\n    }; \r\n    ReadMode( 0 );        # back to normal\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...</li>\r\n</ol>\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-10-30 10:44:09','2013-10-30 10:44:09','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(76,3,'2013-10-30 10:52:23','2013-10-30 10:52:23','<h2>Difference between $@ and $*</h2>\r\nNothing is better than an example. Given the following code:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\n\r\necho -e \"\\n\"\'using $@\'\r\nfor i in $@; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using $*\'\r\nfor i in $*; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$@\"\'\r\nfor i in \"$@\"; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$*\"\'\r\nfor i in \"$*\"; do\r\n    echo \" -- $i\"\r\ndone</pre>\r\nIf I call the script with the command: \r\n<span style=\"padding-left:25px\"><code>./bash_test.sh normal_arg \"arg with spaces\"</code></span>\r\nI get the following output:\r\n<pre class=\"prettyprint lang-html\">\r\nusing $@\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing $*\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing \"$@\"\r\n -- normal_arg\r\n -- arg with spaces\r\n\r\nusing \"$*\"\r\n -- normal_arg arg with spaces</pre>\r\nNice uh ?','Bash tips and tricks','','publish','closed','open','','bash-tips-and-tricks','','','2014-04-02 17:30:26','2014-04-02 17:30:26','',0,'http://localhost/html/?p=76',0,'post','',0),(77,3,'2013-10-30 10:52:23','2013-10-30 10:52:23','<h2>Difference between $@ and $*</h2>\r\n\r\nNothing is better than an example. Given the following code:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\n\r\necho -e \"\\n\"\'using $@\'\r\nfor i in $@; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using $*\'\r\nfor i in $*; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$@\"\'\r\nfor i in \"$@\"; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$*\"\'\r\nfor i in \"$*\"; do\r\n    echo \" -- $i\"\r\ndone\r\n</pre>\r\n\r\nIf I call the script with the following command: <code>./bash_test.sh normal_arg \"arg with spaces\"</code>, I get the following output:\r\n<pre class=\"prettyprint\">\r\nusing $@\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing $*\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing \"$@\"\r\n -- normal_arg\r\n -- arg with spaces\r\n\r\nusing \"$*\"\r\n -- normal_arg arg with spaces\r\n</pre>\r\n\r\nNice uh ?','Bash tips and tricks','','inherit','closed','open','','76-revision-v1','','','2013-10-30 10:52:23','2013-10-30 10:52:23','',76,'http://localhost/html/76-revision-v1/',0,'revision','',0),(78,3,'2014-04-02 17:28:09','2014-04-02 17:28:09','<h2>Difference between $@ and $*</h2>\nNothing is better than an example. Given the following code:\n<pre class=\"prettyprint\">\n#!/bin/bash\n\necho -e \"\\n\"\'using $@\'\nfor i in $@; do\n    echo \" -- $i\"\ndone\n\necho -e \"\\n\"\'using $*\'\nfor i in $*; do\n    echo \" -- $i\"\ndone\n\necho -e \"\\n\"\'using \"$@\"\'\nfor i in \"$@\"; do\n    echo \" -- $i\"\ndone\n\necho -e \"\\n\"\'using \"$*\"\'\nfor i in \"$*\"; do\n    echo \" -- $i\"\ndone</pre>\nIf I call the script with the command: \n<span style=\"padding-left:25px\"><code>./bash_test.sh normal_arg \"arg with spaces\"</code></span>\nI get the following output:\n<pre class=\"prettyprint lang-html\">\nusing $@\n -- normal_arg\n -- arg\n -- with\n -- spaces\n\nusing $*\n -- normal_arg\n -- arg\n -- with\n -- spaces\n\nusing \"$@\"\n -- normal_arg\n -- arg with spaces\n\nusing \"$*\"\n -- normal_arg arg with spaces</pre>\nNice uh ?','Bash tips and tricks','','inherit','closed','open','','76-autosave-v1','','','2014-04-02 17:28:09','2014-04-02 17:28:09','',76,'http://localhost/html/76-autosave-v1/',0,'revision','',0),(79,3,'2013-10-30 10:56:20','2013-10-30 10:56:20','<h2>Difference between $@ and $*</h2>\r\nNothing is better than an example. Given the following code:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\n\r\necho -e \"\\n\"\'using $@\'\r\nfor i in $@; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using $*\'\r\nfor i in $*; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$@\"\'\r\nfor i in \"$@\"; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$*\"\'\r\nfor i in \"$*\"; do\r\n    echo \" -- $i\"\r\ndone</pre>\r\nIf I call the script with the following command: <code>./bash_test.sh normal_arg \"arg with spaces\"</code>, I get the following output:\r\n<pre class=\"prettyprint lang-html\">\r\nusing $@\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing $*\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing \"$@\"\r\n -- normal_arg\r\n -- arg with spaces\r\n\r\nusing \"$*\"\r\n -- normal_arg arg with spaces</pre>\r\nNice uh ?','Bash tips and tricks','','inherit','closed','open','','76-revision-v1','','','2013-10-30 10:56:20','2013-10-30 10:56:20','',76,'http://localhost/html/76-revision-v1/',0,'revision','',0),(80,3,'2013-10-30 10:59:56','2013-10-30 10:59:56','<h2>Difference between $@ and $*</h2>\r\nNothing is better than an example. Given the following code:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\n\r\necho -e \"\\n\"\'using $@\'\r\nfor i in $@; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using $*\'\r\nfor i in $*; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$@\"\'\r\nfor i in \"$@\"; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$*\"\'\r\nfor i in \"$*\"; do\r\n    echo \" -- $i\"\r\ndone</pre>\r\nIf I call the script with the command: \r\n<span style=\"padding-left:25px\"><code>./bash_test.sh normal_arg \"arg with spaces\"</code></span><br />\r\nI get the following output:\r\n<pre class=\"prettyprint lang-html\">\r\nusing $@\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing $*\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing \"$@\"\r\n -- normal_arg\r\n -- arg with spaces\r\n\r\nusing \"$*\"\r\n -- normal_arg arg with spaces</pre>\r\nNice uh ?','Bash tips and tricks','','inherit','closed','open','','76-revision-v1','','','2013-10-30 10:59:56','2013-10-30 10:59:56','',76,'http://localhost/html/76-revision-v1/',0,'revision','',0),(81,3,'2013-10-31 11:18:55','2013-10-31 11:18:55','<h2>bash prompt</h2>\r\nA nice function to show only the two last directories on the PWD path:\r\n<pre class=\"prettyprint\">_PS1() {\r\n    # note: with split, $_[0] is empty since pwd always begin with /\r\n    echo \"$PWD\" | perl -e \'$_ = \\&lt;&gt;; chomp; \r\n    print \"/\" and exit if $_ eq \"/\";\r\n    s|$ENV{HOME}|~|g; @_ = split \"/\", $_; \r\n    print $_ and exit if scalar @_ \\&lt; 2;\r\n    print \"/\" if $_[0] eq \"\" and scalar @_ == 3;\r\n    print \"$_[-2]/$_[-1]\";\'\r\n}</pre>\r\nYou can use it directly in the PS1= in your bashrc. For example:<code>PS1=\'[\\[\\033[00;34m\\]$(_PS1 )\\[\\033[00;37m\\]]\\[\\033[00m\\] \'</code>\r\n\r\nA really funny PS1:\r\n<pre class=\"prettyprint\">PS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>\r\n<div style=\"text-align:center\"><a href=\"/mywiki/wp-content/uploads/2013/10/funny_bash_prompt.png\"><img class=\"alignnone size-full wp-image-94\" style=\"max-width: 70%;\" alt=\"funny_bash_prompt\" src=\"/mywiki/wp-content/uploads/2013/10/funny_bash_prompt.png\" /></a></div>\r\nGot those funny ideas here: <a href=\"https://wiki.archlinux.org/index.php/Color_Bash_Prompt\">https://wiki.archlinux.org/index.php/Color_Bash_Prompt</a>\r\n\r\nGood to know : the - symbol is made from the following sequence : <code>\\342\\224\\200</code>','Linux environment tip and tricks','','publish','closed','open','','linux-environment-tip-and-tricks','','','2014-01-02 13:28:39','2014-01-02 13:28:39','',0,'http://localhost/html/?p=81',0,'post','',0),(82,3,'2013-10-31 11:18:34','2013-10-31 11:18:34','<h2>bash prompt</h2>\r\n\r\n<pre class=\"prettyprint\">\r\nPS1=\"\\n\\[\\033[0;37m\\]\\342\\224\\214\\[\\e]0;\\u@\\h: \\w\\a\\][\\[\\033[00;34m\\]$(_PS1 )\\[\\033[00;37m\\]]\\[\\033[00m\\] \\n\\[\\033[0;37m\\]\\342\\224\\224\\342\\224\\200\\342\\224\\200 \\[\\033[0m\\]\"\r\n</pre>','','','inherit','closed','open','','81-revision-v1','','','2013-10-31 11:18:34','2013-10-31 11:18:34','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(83,3,'2013-10-31 11:18:50','2013-10-31 11:18:50','<h2>bash prompt</h2>\r\n\r\n<pre class=\"prettyprint\">\r\nPS1=\"\\n\\[\\033[0;37m\\]\\342\\224\\214\\[\\e]0;\\u@\\h: \\w\\a\\][\\[\\033[00;34m\\]$(_PS1 )\\[\\033[00;37m\\]]\\[\\033[00m\\] \\n\\[\\033[0;37m\\]\\342\\224\\224\\342\\224\\200\\342\\224\\200 \\[\\033[0m\\]\"\r\n</pre>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2013-10-31 11:18:50','2013-10-31 11:18:50','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(85,3,'2013-10-31 11:19:08','2013-10-31 11:19:08','<h2>bash prompt</h2>\r\n<pre>\r\nPS1=\"\\n\\[\\033[0;37m\\]\\342\\224\\214\\[\\e]0;\\u@\\h: \\w\\a\\][\\[\\033[00;34m\\]$(_PS1 )\\[\\033[00;37m\\]]\\[\\033[00m\\] \\n\\[\\033[0;37m\\]\\342\\224\\224\\342\\224\\200\\342\\224\\200 \\[\\033[0m\\]\"</pre>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2013-10-31 11:19:08','2013-10-31 11:19:08','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(86,3,'2013-10-31 11:23:30','2013-10-31 11:23:30','<h2>bash prompt</h2>\r\n<pre>\r\nPS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2013-10-31 11:23:30','2013-10-31 11:23:30','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(88,3,'2013-10-31 12:02:03','2013-10-31 12:02:03','<h2>bash prompt</h2>\r\n<pre class=\"prettyprint\">\r\nPS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2013-10-31 12:02:03','2013-10-31 12:02:03','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(89,3,'2013-10-31 13:04:38','2013-10-31 13:04:38',' ','','','publish','closed','open','','89','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',7,'http://localhost/html/?p=89',7,'nav_menu_item','',0),(90,3,'2013-10-31 13:19:39','2013-10-31 13:19:39','<h2>bash prompt</h2>\r\n\r\nA nice function to show only the two last directories on the PWD path:\r\n\r\n<pre class=\"prettyprint\">\r\n_PS1() {\r\n    # note: with split, $_[0] is empty since pwd always begin with /\r\n    echo \"$PWD\" | perl -e \'$_ = \\<>; chomp; \r\n		print \"/\" and exit if $_ eq \"/\";\r\n        s|$ENV{HOME}|~|g; @_ = split \"/\", $_; \r\n        print $_ and exit if scalar @_ \\< 2;\r\n        print \"/\" if $_[0] eq \"\" and scalar @_ == 3;\r\n        print \"$_[-2]/$_[-1]\";\'\r\n}\r\n</pre>\r\n\r\nA really funny PS1:\r\n<pre class=\"prettyprint\">\r\nPS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2013-10-31 13:19:39','2013-10-31 13:19:39','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(91,3,'2013-10-31 13:22:27','2013-10-31 13:22:27','<h2>bash prompt</h2>\r\nA nice function to show only the two last directories on the PWD path:\r\n<pre class=\"prettyprint\">\r\n_PS1() {\r\n    # note: with split, $_[0] is empty since pwd always begin with /\r\n    echo \"$PWD\" | perl -e \'$_ = \\<>; chomp; \r\n    print \"/\" and exit if $_ eq \"/\";\r\n    s|$ENV{HOME}|~|g; @_ = split \"/\", $_; \r\n    print $_ and exit if scalar @_ \\< 2;\r\n    print \"/\" if $_[0] eq \"\" and scalar @_ == 3;\r\n    print \"$_[-2]/$_[-1]\";\'\r\n}</pre>\r\nA really funny PS1:\r\n<pre class=\"prettyprint\">\r\nPS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2013-10-31 13:22:27','2013-10-31 13:22:27','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(92,3,'2013-10-31 13:24:15','2013-10-31 13:24:15','<h2>bash prompt</h2>\r\nA nice function to show only the two last directories on the PWD path:\r\n<pre class=\"prettyprint\">\r\n_PS1() {\r\n    # note: with split, $_[0] is empty since pwd always begin with /\r\n    echo \"$PWD\" | perl -e \'$_ = \\<>; chomp; \r\n    print \"/\" and exit if $_ eq \"/\";\r\n    s|$ENV{HOME}|~|g; @_ = split \"/\", $_; \r\n    print $_ and exit if scalar @_ \\< 2;\r\n    print \"/\" if $_[0] eq \"\" and scalar @_ == 3;\r\n    print \"$_[-2]/$_[-1]\";\'\r\n}</pre>\r\nYou can use it directly in the PS1= in your bashrc. For example: <p><code>PS1=\'[\\[\\033[00;34m\\]$(_PS1 )\\[\\033[00;37m\\]]\\[\\033[00m\\] \'</code></p>\r\nA really funny PS1:\r\n<pre class=\"prettyprint\">\r\nPS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2013-10-31 13:24:15','2013-10-31 13:24:15','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(93,3,'2013-10-31 15:45:21','2013-10-31 15:45:21','<h2>bash prompt</h2>\r\nA nice function to show only the two last directories on the PWD path:\r\n<pre class=\"prettyprint\">\r\n_PS1() {\r\n    # note: with split, $_[0] is empty since pwd always begin with /\r\n    echo \"$PWD\" | perl -e \'$_ = \\<>; chomp; \r\n    print \"/\" and exit if $_ eq \"/\";\r\n    s|$ENV{HOME}|~|g; @_ = split \"/\", $_; \r\n    print $_ and exit if scalar @_ \\< 2;\r\n    print \"/\" if $_[0] eq \"\" and scalar @_ == 3;\r\n    print \"$_[-2]/$_[-1]\";\'\r\n}</pre>\r\nYou can use it directly in the PS1= in your bashrc. For example:<code>PS1=\'[\\[\\033[00;34m\\]$(_PS1 )\\[\\033[00;37m\\]]\\[\\033[00m\\] \'</code>\r\n\r\nA really funny PS1:\r\n<pre class=\"prettyprint\">\r\nPS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>\r\n\r\n\r\nGot those funny ideas here: <a href=\"https://wiki.archlinux.org/index.php/Color_Bash_Prompt\">https://wiki.archlinux.org/index.php/Color_Bash_Prompt</a>\r\n\r\nGood to know : the - symbol is made from the following sequence : <code>\\342\\224\\200</code>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2013-10-31 15:45:21','2013-10-31 15:45:21','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(94,3,'2013-10-31 15:50:25','2013-10-31 15:50:25','','funny_bash_prompt','','inherit','closed','open','','funny_bash_prompt','','','2013-10-31 15:50:25','2013-10-31 15:50:25','',81,'http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png',0,'attachment','image/png',0),(95,3,'2013-10-31 15:56:38','2013-10-31 15:56:38','<h2>bash prompt</h2>\r\nA nice function to show only the two last directories on the PWD path:\r\n<pre class=\"prettyprint\">_PS1() {\r\n    # note: with split, $_[0] is empty since pwd always begin with /\r\n    echo \"$PWD\" | perl -e \'$_ = \\&lt;&gt;; chomp; \r\n    print \"/\" and exit if $_ eq \"/\";\r\n    s|$ENV{HOME}|~|g; @_ = split \"/\", $_; \r\n    print $_ and exit if scalar @_ \\&lt; 2;\r\n    print \"/\" if $_[0] eq \"\" and scalar @_ == 3;\r\n    print \"$_[-2]/$_[-1]\";\'\r\n}</pre>\r\nYou can use it directly in the PS1= in your bashrc. For example:<code>PS1=\'[\\[\\033[00;34m\\]$(_PS1 )\\[\\033[00;37m\\]]\\[\\033[00m\\] \'</code>\r\n\r\nA really funny PS1:\r\n<pre class=\"prettyprint\">PS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>\r\n<div style=\"vertical-align:middle\">\r\n	<a href=\"http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png\"><img class=\"alignnone size-full wp-image-94\" style=\"max-width: 80%;\" alt=\"funny_bash_prompt\" src=\"http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png\" /></a></div>\r\n\r\nGot those funny ideas here: <a href=\"https://wiki.archlinux.org/index.php/Color_Bash_Prompt\">https://wiki.archlinux.org/index.php/Color_Bash_Prompt</a>\r\n\r\nGood to know : the - symbol is made from the following sequence : <code>\\342\\224\\200</code>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2013-10-31 15:56:38','2013-10-31 15:56:38','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(96,3,'2013-10-31 15:57:25','2013-10-31 15:57:25','<h2>bash prompt</h2>\r\nA nice function to show only the two last directories on the PWD path:\r\n<pre class=\"prettyprint\">_PS1() {\r\n    # note: with split, $_[0] is empty since pwd always begin with /\r\n    echo \"$PWD\" | perl -e \'$_ = \\&lt;&gt;; chomp; \r\n    print \"/\" and exit if $_ eq \"/\";\r\n    s|$ENV{HOME}|~|g; @_ = split \"/\", $_; \r\n    print $_ and exit if scalar @_ \\&lt; 2;\r\n    print \"/\" if $_[0] eq \"\" and scalar @_ == 3;\r\n    print \"$_[-2]/$_[-1]\";\'\r\n}</pre>\r\nYou can use it directly in the PS1= in your bashrc. For example:<code>PS1=\'[\\[\\033[00;34m\\]$(_PS1 )\\[\\033[00;37m\\]]\\[\\033[00m\\] \'</code>\r\n\r\nA really funny PS1:\r\n<pre class=\"prettyprint\">PS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>\r\n\r\n<div style=\"text-align:center\"><a href=\"http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png\"><img class=\"alignnone size-full wp-image-94\" style=\"max-width: 70%;\" alt=\"funny_bash_prompt\" src=\"http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png\" /></a></div>\r\nGot those funny ideas here: <a href=\"https://wiki.archlinux.org/index.php/Color_Bash_Prompt\">https://wiki.archlinux.org/index.php/Color_Bash_Prompt</a>\r\n\r\nGood to know : the - symbol is made from the following sequence : <code>\\342\\224\\200</code>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2013-10-31 15:57:25','2013-10-31 15:57:25','',81,'http://localhost/html/81-revision-v1/',0,'revision','',0),(97,3,'2013-11-09 15:55:37','2013-11-09 15:55:37','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\n\r\n# prompts for a password and returns it, without term object\r\nuse Term::ReadKey;\r\n\r\nprint \"Enter your password: \";\r\nReadMode \'noecho\';\r\n$password = ReadLine 0;\r\nchomp $password;\r\nReadMode \'normal\';\r\nprint \"\\n\";\r\n\r\n# ------------------------------\r\n# with term and routine\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n\r\n    print $msg; # don\'t know why, but it does not work with $term->...\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = ReadLine 0; \r\n    eval{ $term->remove_history( $term->where_history() ) }; # remove pass from history\r\n    ReadMode( 0 );        # back to normal\r\n\r\n    print \"\\n\";\r\n    return $password;\r\n}\r\n\r\n</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...</li>\r\n</ol>\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-11-09 15:55:37','2013-11-09 15:55:37','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(98,3,'2013-11-09 15:58:05','2013-11-09 15:58:05','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\n\r\n# prompts for a password and returns it, without term object\r\nuse Term::ReadKey;\r\n\r\nprint \"Enter your password: \";\r\nReadMode \'noecho\';\r\n$password = ReadLine 0;\r\nchomp $password;\r\nReadMode \'normal\';\r\nprint \"\\n\";\r\n</pre>\r\n\r\nThis is the easy and straight-forward way. But if we use a term object and we also want to avoid the password to be kept in history, we would rather use a more complex routine, like this one:\r\n\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name, like the name of your program\r\n\r\nsub get_pass{ # $pass (void)\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n\r\n    print $msg; # (??) it does not work with $term->...\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = ReadLine 0; \r\n\r\n    eval{ $term->remove_history( $term->where_history() ) }; # remove pass from history\r\n    ReadMode( 0 );        # back to normal\r\n\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...</li>\r\n</ol>\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-11-09 15:58:05','2013-11-09 15:58:05','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(99,3,'2013-11-09 16:00:24','2013-11-09 16:00:24','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\n\r\n# prompts for a password and returns it, without term object\r\nuse Term::ReadKey;\r\n\r\nprint \"Enter your password: \";\r\nReadMode \'noecho\';\r\n$password = ReadLine 0;\r\nchomp $password;\r\nReadMode \'normal\';\r\nprint \"\\n\";</pre>\r\nThis is the easy and straight-forward way. But if we use a term object and we also want to avoid the password to be kept in history, we would rather use a more complex routine, like this one:\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name\r\n\r\nsub get_pass{ # $pass (void)\r\n    # parse args\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n\r\n    # get password\r\n    print $msg; # (??) it does not work with $term->...\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password = ReadLine 0; \r\n    ReadMode( 0 );  # back to normal\r\n\r\n    # remove pass from history\r\n    eval{ $term->remove_history( $term->where_history() ) }; \r\n    \r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...</li>\r\n</ol>\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-11-09 16:00:24','2013-11-09 16:00:24','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(101,3,'2013-11-22 17:29:52','2013-11-22 17:29:52','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\n\r\n# prompts for a password and returns it, without term object\r\nuse Term::ReadKey;\r\n\r\nprint \"Enter your password: \";\r\nReadMode \'noecho\';\r\n$password = ReadLine 0;\r\nchomp $password;\r\nReadMode \'normal\';\r\nprint \"\\n\";</pre>\r\nThis is the easy and straight-forward way. But if we use a term object and we also want to avoid the password to be kept in history, we would rather use a more complex routine, like this one:\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name\r\n\r\nsub get_pass{ # $pass (void)\r\n    # parse args\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n\r\n    # get password\r\n    print $msg; # (??) it does not work with $term->...\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password;\r\n	chomp( $password = ReadLine 0 ); \r\n    ReadMode( 0 );  # back to normal\r\n\r\n    # remove pass from history\r\n    eval{ $term->remove_history( $term->where_history() ) }; \r\n\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I<params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...</li>\r\n</ol>\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-11-22 17:29:52','2013-11-22 17:29:52','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(103,3,'2013-12-14 10:24:37','2013-12-14 10:24:37','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h2>Installing DAVmail</h2>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint lang-sh\">sudo dpkg -i devmail.deb\r\nsudo apt-get install -f\r\ndavmail &</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h2>Configuring thunderbird</h2>\r\n<ol>\r\n	<li>create a new account: <i>Edit > Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h2>Adding the address book</h2>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h2>Adding the calendar</h2>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h2>Init script for DavMail</h2>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a class=\"add-site-prefix\" href=\"/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n\r\n<pre class=\"prettyprint lang-sh\" id=\"lala\">\r\n[display_file path=\"/wp-content/uploads/2013/12/davmail.txt\"]\r\n</pre>\r\n<style type=\"text/css\"><!--\r\ntable.small tr td{ font-size: 10pt; text-align: center; }\r\n--></style>','Microsoft Exchange through Thunderbird','','publish','closed','open','','microsoft-exchange-with-thunderbird','','','2014-09-22 06:37:07','2014-09-22 06:37:07','',0,'http://localhost/html/?p=103',0,'post','',0),(104,3,'2013-12-14 09:39:59','2013-12-14 09:39:59','<p>Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?</p> \r\n\r\n<p>To be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.</p>\r\n\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n    <li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> \r\n    and download the last deb package</li> \r\n    <li>install and start it: \r\n        <pre class=\"prettyprint\">\r\n        # sudo dpkg -i devmail....deb\r\n        # sudo apt-get install -f\r\n        # davmail &\r\n        </pre>\r\n    </li>\r\n    <li>in the window that appears, change only the URL OWA (Exchange) to  \r\n        <code>https://webmail.hefr.ch/owa</code>\r\n    </li>\r\n    </ol>\r\n','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 09:39:59','2013-12-14 09:39:59','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(105,3,'2013-12-14 09:50:22','2013-12-14 09:50:22','<p>Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?</p> \r\n\r\n<p>To be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.</p>\r\n\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n    <li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> \r\n    and download the last deb package</li> \r\n    <li>install and start it: \r\n        <pre class=\"prettyprint\">\r\n> sudo dpkg -i devmail....deb\r\n> sudo apt-get install -f\r\n> davmail &\r\n        </pre>\r\n    </li>\r\n    <li>in the window that appears, change only the URL OWA (Exchange) to  \r\n        <code>https://webmail.hefr.ch/owa</code>\r\n    </li>\r\n    </ol>\r\n    \r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on\r\n the 1143 port.\r\n\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n    <li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new nail account</i><br />\r\n    <ul>\r\n        <li>In the first window, give your edut.hefr email address and password</li>\r\n        <li>In the second window, click on <i>manual config</i> and change the following:\r\n        <table>\r\n            <tr>\r\n                <td>Incoming</td>\r\n                <td>IMAP</td> \r\n                <td>localhost</td> \r\n                <td>1143</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n        </table>\r\n        </li>\r\n</ul>\r\n    </li>\r\n</ol>\r\n','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 09:50:22','2013-12-14 09:50:22','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(106,3,'2013-12-14 10:01:29','2013-12-14 10:01:29','<p>Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?</p>\r\n\r\n<p>To be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.</p>\r\n\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n    <li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> \r\n    and download the last deb package</li> \r\n    <li>install and start it:\r\n        <pre class=\"prettyprint\">\r\n> sudo dpkg -i devmail....deb\r\n> sudo apt-get install -f\r\n> davmail &\r\n        </pre>\r\n    </li>\r\n    <li>in the window that appears, change only the URL OWA (Exchange) to \r\n        <code>https://webmail.hefr.ch/owa</code>\r\n    </li>\r\n    </ol>\r\n\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n    <li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i><br />\r\n    <ul>\r\n        <li>In the first window, give your edut.hefr email address and password</li>\r\n        <li>In the second window, click on <i>manual config</i> and change the following:\r\n        <table>\r\n            <tr>\r\n                <td>Incoming</td>\r\n                <td>IMAP</td> \r\n                <td>localhost</td>\r\n                <td>1143</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Outgoing</td>\r\n                <td>SMTP</td> \r\n                <td>localhost</td>\r\n                <td>1025</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n        </table>\r\n        </li>\r\n</ul>\r\n</li>\r\n<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n    <li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i>\r\n</li>\r\n    <li>\r\n        <table>\r\n            <tr>\r\n                <td>Name</td>\r\n                <td>Hostname</td> \r\n                <td>Base DN</td>\r\n                <td>Port number</td> \r\n                <td>Bind DN</td> \r\n            </tr>\r\n            <tr>\r\n                <td>whatever you want</td>\r\n                <td>localhost</td> \r\n                <td>OU=people</td>\r\n                <td>1389</td> \r\n                <td><i>your username (firstname.surname)</i></td> \r\n            </tr>\r\n        </table>\r\n    </li>\r\n    <li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n\r\n','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 10:01:29','2013-12-14 10:01:29','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(107,3,'2013-12-14 10:10:27','2013-12-14 10:10:27','<p>Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?</p>\r\n\r\n<p>To be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.</p>\r\n\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n    <li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> \r\n    and download the last deb package</li> \r\n    <li>install and start it:\r\n        <pre class=\"prettyprint\">\r\n> sudo dpkg -i devmail....deb\r\n> sudo apt-get install -f\r\n> davmail &\r\n        </pre>\r\n    </li>\r\n    <li>in the window that appears, change only the URL OWA (Exchange) to \r\n        <code>https://webmail.hefr.ch/owa</code>\r\n    </li>\r\n    </ol>\r\n\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n    <li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i><br />\r\n    <ul>\r\n        <li>In the first window, give your edut.hefr email address and password</li>\r\n        <li>In the second window, click on <i>manual config</i> and change the following:\r\n        <table >\r\n            <tr >\r\n                <td>Incoming</td>\r\n                <td>IMAP</td> \r\n                <td>localhost</td>\r\n                <td>1143</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Outgoing</td>\r\n                <td>SMTP</td> \r\n                <td>localhost</td>\r\n                <td>1025</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n        </table>\r\n        </li>\r\n</ul>\r\n</li>\r\n<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n    <li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i>\r\n</li>\r\n    <li>\r\n        <table style=\"font-size:11pt;text-align:center\">\r\n            <tr>\r\n                <td>Name</td>\r\n                <td>Hostname</td> \r\n                <td>Base DN</td>\r\n                <td>Port number</td> \r\n                <td>Bind DN</td> \r\n            </tr>\r\n            <tr>\r\n                <td>whatever you want</td>\r\n                <td>localhost</td> \r\n                <td>OU=people</td>\r\n                <td>1389</td> \r\n                <td><i>firstname.surname</i></td> \r\n            </tr>\r\n        </table>\r\n    </li>\r\n    <li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\">the contacts do not appear in the list. This is a bug of thunderbird. But normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences  &gt; Composition  &gt; Address autocompletion</i> settings.</div>\r\n','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 10:10:27','2013-12-14 10:10:27','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(108,3,'2013-12-14 10:13:10','2013-12-14 10:13:10','<p>Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?</p>\r\n\r\n<p>To be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.</p>\r\n\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n    <li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> \r\n    and download the last deb package</li> \r\n    <li>install and start it:\r\n        <pre class=\"prettyprint\">\r\n> sudo dpkg -i devmail....deb\r\n> sudo apt-get install -f\r\n> davmail &\r\n        </pre>\r\n    </li>\r\n    <li>in the window that appears, change only the URL OWA (Exchange) to \r\n        <code>https://webmail.hefr.ch/owa</code>\r\n    </li>\r\n    </ol>\r\n\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n    <li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i><br />\r\n    <ul>\r\n        <li>In the first window, give your edut.hefr email address and password</li>\r\n        <li>In the second window, click on <i>manual config</i> and change the following:\r\n        <table >\r\n            <tr >\r\n                <td>Incoming</td>\r\n                <td>IMAP</td> \r\n                <td>localhost</td>\r\n                <td>1143</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Outgoing</td>\r\n                <td>SMTP</td> \r\n                <td>localhost</td>\r\n                <td>1025</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n        </table>\r\n        </li>\r\n</ul>\r\n</li>\r\n<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n    <li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i>\r\n</li>\r\n    <li>\r\n        <table class=\"small\">\r\n            <tr>\r\n                <td>Name</td>\r\n                <td>Hostname</td> \r\n                <td>Base DN</td>\r\n                <td>Port number</td> \r\n                <td>Bind DN</td> \r\n            </tr>\r\n            <tr>\r\n                <td>whatever you want</td>\r\n                <td>localhost</td> \r\n                <td>OU=people</td>\r\n                <td>1389</td> \r\n                <td><i>firstname.surname</i></td> \r\n            </tr>\r\n        </table>\r\n    </li>\r\n    <li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\">the contacts do not appear in the list. This is a bug of thunderbird. But normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences  &gt; Composition  &gt; Address autocompletion</i> settings.</div>\r\n\r\n<style type=\"text/css\">\r\n    table.small tr td{\r\n        font-size: 11pt;\r\n        text-align: center;\r\n    }\r\n</style>\r\n','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 10:13:10','2013-12-14 10:13:10','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(109,3,'2013-12-14 10:16:16','2013-12-14 10:16:16','<p>Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?</p>\r\n\r\n<p>To be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.</p>\r\n\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n    <li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> \r\n    and download the last deb package</li> \r\n    <li>install and start it:\r\n        <pre class=\"prettyprint\">\r\n> sudo dpkg -i devmail....deb\r\n> sudo apt-get install -f\r\n> davmail &\r\n        </pre>\r\n    </li>\r\n    <li>in the window that appears, change only the URL OWA (Exchange) to \r\n        <code>https://webmail.hefr.ch/owa</code>\r\n    </li>\r\n    </ol>\r\n\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n    <li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i><br />\r\n    <ul>\r\n        <li>In the first window, give your edut.hefr email address and password</li>\r\n        <li>In the second window, click on <i>manual config</i> and change the following:\r\n        <table >\r\n            <tr >\r\n                <td>Incoming</td>\r\n                <td>IMAP</td> \r\n                <td>localhost</td>\r\n                <td>1143</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Outgoing</td>\r\n                <td>SMTP</td> \r\n                <td>localhost</td>\r\n                <td>1025</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n        </table>\r\n        </li>\r\n</ul>\r\n</li>\r\n<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n    <li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i>\r\n</li>\r\n    <li>\r\n        <table class=\"small\">\r\n            <tr>\r\n                <td>Name</td>\r\n                <td>Hostname</td> \r\n                <td>Base DN</td>\r\n                <td>Port number</td> \r\n                <td>Bind DN</td> \r\n            </tr>\r\n            <tr>\r\n                <td>whatever you want</td>\r\n                <td>localhost</td> \r\n                <td>OU=people</td>\r\n                <td>1389</td> \r\n                <td><i>firstname.surname</i></td> \r\n            </tr>\r\n        </table>\r\n    </li>\r\n    <li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning!</strong>the contacts do not appear in the list. This is a bug of thunderbird. But normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences  &gt; Composition  &gt; Address autocompletion</i> settings.</div>\r\n\r\n<style type=\"text/css\">\r\n    table.small tr td{\r\n        font-size: 10pt;\r\n        text-align: center;\r\n    }\r\n</style>\r\n','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 10:16:16','2013-12-14 10:16:16','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(110,3,'2013-12-14 10:22:37','2013-12-14 10:22:37','<p>Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?</p>\r\n\r\n<p>To be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.</p>\r\n\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n    <li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> \r\n    and download the last deb package</li> \r\n    <li>install and start it:\r\n        <pre class=\"prettyprint\">\r\n> sudo dpkg -i devmail....deb\r\n> sudo apt-get install -f\r\n> davmail &\r\n        </pre>\r\n    </li>\r\n    <li>in the window that appears, change only the URL OWA (Exchange) to \r\n        <code>https://webmail.hefr.ch/owa</code>\r\n    </li>\r\n    </ol>\r\n\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n    <li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i><br />\r\n    <ul>\r\n        <li>In the first window, give your edut.hefr email address and password</li>\r\n        <li>In the second window, click on <i>manual config</i> and change the following:\r\n        <table >\r\n            <tr >\r\n                <td>Incoming</td>\r\n                <td>IMAP</td> \r\n                <td>localhost</td>\r\n                <td>1143</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Outgoing</td>\r\n                <td>SMTP</td> \r\n                <td>localhost</td>\r\n                <td>1025</td> \r\n                <td>none</td> \r\n                <td>normalpassword</td>\r\n            </tr>\r\n        </table>\r\n        </li>\r\n</ul>\r\n</li>\r\n<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n    <li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i>\r\n</li>\r\n    <li> Fill the following fields:\r\n        <table class=\"small\">\r\n            <tr>\r\n                <td>Name</td>\r\n                <td>Hostname</td> \r\n                <td>Base DN</td>\r\n                <td>Port number</td> \r\n                <td>Bind DN</td> \r\n            </tr>\r\n            <tr>\r\n                <td>whatever you want</td>\r\n                <td>localhost</td> \r\n                <td>OU=people</td>\r\n                <td>1389</td> \r\n                <td><i>firstname.surname</i></td> \r\n            </tr>\r\n        </table>\r\n    </li>\r\n    <li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences  &gt; Composition  &gt; Address autocompletion</i> settings.</div>\r\n\r\n\r\n<!--h3>Adding the calendar</h3>\r\n\r\n<ol>\r\n    <li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n    <li></li>\r\n</ol-->\r\n\r\n\r\n\r\n<style type=\"text/css\">\r\n    table.small tr td{\r\n        font-size: 10pt;\r\n        text-align: center;\r\n    }\r\n</style>\r\n','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 10:22:37','2013-12-14 10:22:37','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(111,3,'2014-09-22 06:37:01','2014-09-22 06:37:01','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\n\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\n<h2>Installing DAVmail</h2>\n<ol>\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\n	<li>install and start it:\n<pre class=\"prettyprint lang-sh\">sudo dpkg -i devmail.deb\nsudo apt-get install -f\ndavmail &</pre>\n</li>\n	<li>in the window that appears, change only the URL OWA (Exchange) to\n<code>https://webmail.hefr.ch/owa</code></li>\n</ol>\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\n<h2>Configuring thunderbird</h2>\n<ol>\n	<li>create a new account: <i>Edit > Account Settings &gt; Account Actions &gt; Add new mail account</i>\n<ul>\n	<li>In the first window, give your edut.hefr email address and password</li>\n	<li>In the second window, click on <i>manual config</i> and change the following:\n<table>\n<tbody>\n<tr>\n<td>Incoming</td>\n<td>IMAP</td>\n<td>localhost</td>\n<td>1143</td>\n<td>none</td>\n<td>normalpassword</td>\n</tr>\n<tr>\n<td>Outgoing</td>\n<td>SMTP</td>\n<td>localhost</td>\n<td>1025</td>\n<td>none</td>\n<td>normalpassword</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\nbut the rest of the communications are encrypted via https</li>\n</ol>\n<h2>Adding the address book</h2>\n<ol>\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\n	<li>Fill the following fields:\n<table class=\"small\">\n<tbody>\n<tr>\n<td>Name</td>\n<td>Hostname</td>\n<td>Base DN</td>\n<td>Port number</td>\n<td>Bind DN</td>\n</tr>\n<tr>\n<td>whatever you want</td>\n<td>localhost</td>\n<td>OU=people</td>\n<td>1389</td>\n<td><i>firstname.surname</i></td>\n</tr>\n</tbody>\n</table>\n</li>\n	<li>Test it: try to type a name in the search field</li>\n</ol>\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\n<!--h2>Adding the calendar</h2>\n<ol>\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\n	<li></li>\n</ol-->\n<h2>Init script for DavMail</h2>\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\n\n<a class=\"add-site-prefix\" href=\"/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\n\n<pre class=\"prettyprint lang-sh\" id=\"lala\">\n[display_file path=\"/wp-content/uploads/2013/12/davmail.txt\"]\n</pre>\n<style type=\"text/css\"><!--\ntable.small tr td{ font-size: 10pt; text-align: center; }\n--></style>','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-autosave-v1','','','2014-09-22 06:37:01','2014-09-22 06:37:01','',103,'http://localhost/html/103-autosave-v1/',0,'revision','',0),(112,3,'2013-12-14 12:50:02','2013-12-14 12:50:02','','davmail','','inherit','closed','open','','davmail','','','2013-12-14 12:50:02','2013-12-14 12:50:02','',103,'http://localhost/html/wp-content/uploads/2013/12/davmail.txt',0,'attachment','text/plain',0),(113,3,'2013-12-14 13:09:24','2013-12-14 13:09:24','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a>\r\nand download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n\r\n<pre class=\"prettyprint\" id=\"lala\">\r\n</pre>\r\n\r\n<script type=\"text/javascript\">\r\n<!--\r\ndisplay_file_content(\"/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 13:09:24','2013-12-14 13:09:24','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(114,3,'2013-12-14 13:10:24','2013-12-14 13:10:24','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a>\r\nand download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<pre class=\"prettyprint\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 13:10:24','2013-12-14 13:10:24','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(115,3,'2013-12-14 13:13:05','2013-12-14 13:13:05','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a>\r\nand download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<pre class=\"prettyprint\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n	prettyPrint();\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 13:13:05','2013-12-14 13:13:05','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(116,3,'2013-12-14 13:18:21','2013-12-14 13:18:21','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a>\r\nand download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<pre class=\"prettyprint language-bash\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n	prettyPrint();\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 13:18:21','2013-12-14 13:18:21','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(117,3,'2013-12-14 13:20:06','2013-12-14 13:20:06','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a>\r\nand download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<pre class=\"prettyprint language-java\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n	prettyPrint();\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 13:20:06','2013-12-14 13:20:06','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(118,3,'2013-12-14 13:20:57','2013-12-14 13:20:57','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a>\r\nand download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<pre class=\"prettyprint language-sh\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n	prettyPrint();\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 13:20:57','2013-12-14 13:20:57','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(119,3,'2013-12-14 13:38:21','2013-12-14 13:38:21','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a>\r\nand download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n\r\n<pre class=\"lang-sh\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 13:38:21','2013-12-14 13:38:21','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(120,3,'2013-12-14 13:53:56','2013-12-14 13:53:56','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a>\r\nand download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n<pre class=\"lang-sh\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n//-->\r\n</script>\r\n\r\n<p>\r\n	To make it work, just copy the file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n</p>\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 13:53:56','2013-12-14 13:53:56','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(121,3,'2013-12-14 13:54:51','2013-12-14 13:54:51','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a>\r\nand download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\n\r\n	To make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n<pre class=\"lang-sh\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Utiliser Microsoft Exchange avec Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 13:54:51','2013-12-14 13:54:51','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(122,3,'2013-12-14 13:56:18','2013-12-14 13:56:18','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a>\r\nand download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n<pre class=\"lang-sh\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 13:56:18','2013-12-14 13:56:18','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(123,3,'2013-12-14 14:01:36','2013-12-14 14:01:36','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint\">&gt; sudo dpkg -i devmail....deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n<pre class=\"lang-sh\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 14:01:36','2013-12-14 14:01:36','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(124,3,'2013-12-14 14:03:10','2013-12-14 14:03:10','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h3>Installing DAVmail</h3>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint lang-sh\">\r\n> sudo dpkg -i devmail<version>.deb\r\n> sudo apt-get install -f\r\n> davmail &\r\n</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h3>Configuring thunderbird</h3>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h3>Adding the address book</h3>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h3>Adding the calendar</h3>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h3>Init script for DavMail</h3>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n<pre class=\"lang-sh\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n	display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-14 14:03:10','2013-12-14 14:03:10','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(126,3,'2013-12-15 17:33:31','2013-12-15 17:33:31','<h2>Difference between $@ and $*</h2>\r\nNothing is better than an example. Given the following code:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\n\r\necho -e \"\\n\"\'using $@\'\r\nfor i in $@; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using $*\'\r\nfor i in $*; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$@\"\'\r\nfor i in \"$@\"; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$*\"\'\r\nfor i in \"$*\"; do\r\n    echo \" -- $i\"\r\ndone</pre>\r\nIf I call the script with the command: \r\n<span style=\"padding-left:25px\"><code>./bash_test.sh normal_arg \"arg with spaces\"</code></span>\r\nI get the following output:\r\n<pre class=\"prettyprint lang-html\">\r\nusing $@\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing $*\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing \"$@\"\r\n -- normal_arg\r\n -- arg with spaces\r\n\r\nusing \"$*\"\r\n -- normal_arg arg with spaces</pre>\r\nNice uh ?\r\n\r\n\r\n<h2>Using vi key bindings in your shell</h2>\r\nBy default, most shells use Emacs style key bindings for commandline, like ctrl+A to go at the beginning of a line or ctrl+k to clear words following the cursor.\r\n\r\nBut with a simple option, it is possible to switch to vi style: \r\n<div>bash:<code>set -o vi</code></div>\r\n<div>zsh:<code>bindkey -v</code></div>\r\n\r\nThe whole set of available commands can be found with <code>bindkey -a</code>.','Bash tips and tricks','','inherit','closed','open','','76-revision-v1','','','2013-12-15 17:33:31','2013-12-15 17:33:31','',76,'http://localhost/html/76-revision-v1/',0,'revision','',0),(127,3,'2013-12-15 17:50:44','2013-12-15 17:50:44','<h2>Difference between $@ and $*</h2>\r\nNothing is better than an example. Given the following code:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\n\r\necho -e \"\\n\"\'using $@\'\r\nfor i in $@; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using $*\'\r\nfor i in $*; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$@\"\'\r\nfor i in \"$@\"; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$*\"\'\r\nfor i in \"$*\"; do\r\n    echo \" -- $i\"\r\ndone</pre>\r\nIf I call the script with the command: \r\n<span style=\"padding-left:25px\"><code>./bash_test.sh normal_arg \"arg with spaces\"</code></span>\r\nI get the following output:\r\n<pre class=\"prettyprint lang-html\">\r\nusing $@\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing $*\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing \"$@\"\r\n -- normal_arg\r\n -- arg with spaces\r\n\r\nusing \"$*\"\r\n -- normal_arg arg with spaces</pre>\r\nNice uh ?\r\n<h2>Using vi key bindings in your shell</h2>\r\nBy default, most shells use Emacs style key bindings for commandline, like ctrl+A to go at the beginning of a line or ctrl+k to clear words following the cursor.\r\n\r\nBut with a simple option, it is possible to switch to vi style:\r\n<div>bash:<code>set -o vi</code></div>\r\n<div>zsh:<code>bindkey -v</code></div>\r\nThe whole set of available commands can be found with <code>bindkey -a</code>.\r\n\r\nTo switch to Emacs mode, the option is <code>-e</code>.','Bash tips and tricks','','inherit','closed','open','','76-revision-v1','','','2013-12-15 17:50:44','2013-12-15 17:50:44','',76,'http://localhost/html/76-revision-v1/',0,'revision','',0),(128,3,'2013-12-17 16:50:17','2013-12-17 16:50:17','<h2>Difference between $@ and $*</h2>\r\nNothing is better than an example. Given the following code:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\n\r\necho -e \"\\n\"\'using $@\'\r\nfor i in $@; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using $*\'\r\nfor i in $*; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$@\"\'\r\nfor i in \"$@\"; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$*\"\'\r\nfor i in \"$*\"; do\r\n    echo \" -- $i\"\r\ndone</pre>\r\nIf I call the script with the command: \r\n<span style=\"padding-left:25px\"><code>./bash_test.sh normal_arg \"arg with spaces\"</code></span>\r\nI get the following output:\r\n<pre class=\"prettyprint lang-html\">\r\nusing $@\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing $*\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing \"$@\"\r\n -- normal_arg\r\n -- arg with spaces\r\n\r\nusing \"$*\"\r\n -- normal_arg arg with spaces</pre>\r\nNice uh ?\r\n<h2>Using vi key bindings in your shell</h2>\r\nBy default, most shells use Emacs style key bindings for commandline, like ctrl+A to go at the beginning of a line or ctrl+k to clear words following the cursor.\r\n\r\nBut with a simple option, it is possible to switch to vi style:\r\n<div>bash:<code>set -o vi</code></div>\r\n<div>zsh:<code>bindkey -v</code></div>\r\nThe whole set of available commands can be found with <code>bindkey -a</code>.\r\n\r\nTo switch to Emacs mode, the option is <code>-e</code>.\r\n\r\nto find out which keycode corresponds to what, simply type <code>cat <enter></code> in your terminal. You can then press any key and its code will be displayed.','Bash tips and tricks','','inherit','closed','open','','76-revision-v1','','','2013-12-17 16:50:17','2013-12-17 16:50:17','',76,'http://localhost/html/76-revision-v1/',0,'revision','',0),(129,3,'2013-12-18 16:56:44','2013-12-18 16:56:44','<h2>using a java installer</h2>\r\n<h3>install the oracle 8 installer</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo add-apt-repository ppa:webupd8team/java\r\nsudo apt-get update\r\nsudo apt-get install oracle-java8-installer</pre>\r\nNote that there is a similar package for java 7.\r\n<h3>switch between versions</h3>\r\nTo alternate between versions, use one of the following:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo update-java-alternatives -s java-7-oracle\r\nsudo update-java-alternatives -s java-8-oracle</pre>\r\n<h3>update your environment</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo apt-get install oracle-java8-set-default</pre>\r\n<a href=\"http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html\">source</a>\r\n<h2>Update java and javac</h2>\r\nI don\'t know why, but I ran into troubles in one of my computers because of a mismatch between java and javac.\r\n\r\nIf you have the same issue, first try those commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo update-alternatives --config java\r\nsudo update-alternatives --config javac</pre>\r\nIf one of the versions that is listed in the java is not in the javac (probably an openjdk), ensure that you have both the jre AND the jdk installed. If not, try <code>sudo apt-get install openjdk-7-jdk</code> or a similar package.\r\n\r\nIf by any chance update-alternatives tells you that no java(c) is found, you will need to add them manually:\r\n<pre class=\"prettyprint lang-text\">\r\n# add the path to javac executable and a number from 1 to ..\r\n# the number will be the index in the list of alternatives\r\nsudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \\\\\r\n   /opt/java/jdk1.7.0_40/bin/javac 1\r\n\r\n# idem for java. If two versions, simply change the number from 1 to 2\r\nsudo update-alternatives --install \"/usr/bin/java\" \"java\" \\\\\r\n   /opt/java/jdk1.7.0_40/bin/java 1\r\n\r\n# if you made a mistake, remove an entry like this:\r\nsudo update-alternatives --remove \"java\" /opt/java/jdk1.7.0_40/bin/java</pre>','java setup','','publish','closed','open','','java-8-installer','','','2014-01-30 19:53:40','2014-01-30 19:53:40','',0,'http://localhost/html/?p=129',0,'post','',0),(130,3,'2013-12-18 16:56:44','2013-12-18 16:56:44','<h2>install the installer</h2>\r\n\r\nRun the following commands:\r\n<pre class=\"prettyprint\">\r\nsudo add-apt-repository ppa:webupd8team/java\r\nsudo apt-get update\r\nsudo apt-get install oracle-java8-installer\r\n</pre>\r\n\r\n<h2>switch between versions</h2>\r\n\r\nTo alternate between versions, use one of the following:\r\n<pre class=\"prettyprint\">\r\nsudo update-java-alternatives -s java-7-oracle\r\nsudo update-java-alternatives -s java-8-oracle\r\n</pre>\r\n\r\n<h2>update your environment</h2>\r\n\r\nRun the following commands:\r\n<pre class=\"prettyprint\">\r\nsudo apt-get install oracle-java8-set-default\r\n</pre>\r\n\r\n<a href=\"http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html\">source</a>','java 8 installer','','inherit','closed','open','','129-revision-v1','','','2013-12-18 16:56:44','2013-12-18 16:56:44','',129,'http://localhost/html/129-revision-v1/',0,'revision','',0),(132,3,'2013-12-18 16:59:52','2013-12-18 16:59:52','<h3>install the installer</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo add-apt-repository ppa:webupd8team/java\r\nsudo apt-get update\r\nsudo apt-get install oracle-java8-installer</pre>\r\n<h3>switch between versions</h3>\r\nTo alternate between versions, use one of the following:\r\n<pre class=\"prettyprint\">\r\nsudo update-java-alternatives -s java-7-oracle\r\nsudo update-java-alternatives -s java-8-oracle</pre>\r\n<h3>update your environment</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint\">\r\nsudo apt-get install oracle-java8-set-default</pre>\r\n<a href=\"http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html\">source</a>','java 8 installer','','inherit','closed','open','','129-revision-v1','','','2013-12-18 16:59:52','2013-12-18 16:59:52','',129,'http://localhost/html/129-revision-v1/',0,'revision','',0),(133,3,'2013-12-18 17:00:11','2013-12-18 17:00:11','<h3>install the installer</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo add-apt-repository ppa:webupd8team/java\r\nsudo apt-get update\r\nsudo apt-get install oracle-java8-installer</pre>\r\n<h3>switch between versions</h3>\r\nTo alternate between versions, use one of the following:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo update-java-alternatives -s java-7-oracle\r\nsudo update-java-alternatives -s java-8-oracle</pre>\r\n<h3>update your environment</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo apt-get install oracle-java8-set-default</pre>\r\n<a href=\"http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html\">source</a>','java 8 installer','','inherit','closed','open','','129-revision-v1','','','2013-12-18 17:00:11','2013-12-18 17:00:11','',129,'http://localhost/html/129-revision-v1/',0,'revision','',0),(134,3,'2013-12-18 18:23:54','2013-12-18 18:23:54','<h3>install the oracle installer</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo add-apt-repository ppa:webupd8team/java\r\nsudo apt-get update\r\nsudo apt-get install oracle-java8-installer</pre>\r\n<h3>switch between versions</h3>\r\nTo alternate between versions, use one of the following:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo update-java-alternatives -s java-7-oracle\r\nsudo update-java-alternatives -s java-8-oracle</pre>\r\n<h3>update your environment</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo apt-get install oracle-java8-set-default</pre>\r\n<a href=\"http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html\">source</a>\r\n\r\n<h2>Update java and javac</h2>\r\nI don\'t know why, but I ran into troubles in one of my computers because of a mismatch between java and javac.\r\n\r\nIf you have the same issue, first try those commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo update-alternatives --config java\r\nsudo update-alternatives --config javac\r\n</pre>\r\n\r\nIf one of the versions that is listed in the java is not in the javac (probably an openjdk), ensure that you have both the jre AND the jdk installed. If not, try <code>sudo apt-get install openjdk-7-jdk</code> or a similar package.','java installer','','inherit','closed','open','','129-revision-v1','','','2013-12-18 18:23:54','2013-12-18 18:23:54','',129,'http://localhost/html/129-revision-v1/',0,'revision','',0),(135,3,'2013-12-18 18:24:59','2013-12-18 18:24:59','<h2>using a java installer</h2>\r\n<h3>install the oracle 8 installer</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo add-apt-repository ppa:webupd8team/java\r\nsudo apt-get update\r\nsudo apt-get install oracle-java8-installer</pre>\r\n\r\nNote that there is a similar package for java 7.\r\n<h3>switch between versions</h3>\r\nTo alternate between versions, use one of the following:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo update-java-alternatives -s java-7-oracle\r\nsudo update-java-alternatives -s java-8-oracle</pre>\r\n<h3>update your environment</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo apt-get install oracle-java8-set-default</pre>\r\n<a href=\"http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html\">source</a>\r\n<h2>Update java and javac</h2>\r\nI don\'t know why, but I ran into troubles in one of my computers because of a mismatch between java and javac.\r\n\r\nIf you have the same issue, first try those commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo update-alternatives --config java\r\nsudo update-alternatives --config javac</pre>\r\nIf one of the versions that is listed in the java is not in the javac (probably an openjdk), ensure that you have both the jre AND the jdk installed. If not, try <code>sudo apt-get install openjdk-7-jdk</code> or a similar package.','java setup','','inherit','closed','open','','129-revision-v1','','','2013-12-18 18:24:59','2013-12-18 18:24:59','',129,'http://localhost/html/129-revision-v1/',0,'revision','',0),(136,3,'2013-12-19 13:25:18','2013-12-19 13:25:18','[display_file path=/wp-content/themes/twentythirteen-child/post-files/gpg-blog-post.html]','GPG keypairs','','publish','closed','open','','gpg-keypairs','','','2014-04-09 15:04:01','2014-04-09 15:04:01','',0,'http://localhost/html/?p=136',0,'post','',0),(137,3,'2013-12-19 13:02:28','2013-12-19 13:02:28','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --output lala@truc.org.gpg-revocation-certificate --gen-revoke lala@truc.org\r\ncaca@laptop: gpg --export-secret-keys --armor lala@truc.org.private.gpg-key > lala@truc.org\r\ncaca@laptop: gpg --export --armor lala@truc.org.public.gpg-key > lala@truc.org\r\ncaca@laptop: gpg --export-secret-subkeys  lala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\ncaca@laptop: gpg --import /somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:02:28','2013-12-19 13:02:28','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(138,3,'2013-12-19 13:04:03','2013-12-19 13:04:03','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --output lala@truc.org.gpg-revocation-certificate --gen-revoke lala@truc.org\r\n\r\ncaca@laptop# gpg --export-secret-keys --armor lala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor lala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys  lala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import /somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:04:03','2013-12-19 13:04:03','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(139,3,'2013-12-19 13:04:19','2013-12-19 13:04:19','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --output lala@truc.org.gpg-revocation-certificate --gen-revoke lala@truc.org\r\n\r\ncaca@laptop$ gpg --export-secret-keys --armor lala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor lala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys  lala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import /somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:04:19','2013-12-19 13:04:19','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(140,3,'2013-12-19 13:05:50','2013-12-19 13:05:50','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"\">\r\ncaca@laptop: gpg --output lala@truc.org.gpg-revocation-certificate --gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor lala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor lala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys  lala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import /somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:05:50','2013-12-19 13:05:50','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(141,3,'2013-12-19 13:06:05','2013-12-19 13:06:05','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"prettyprint\">\r\ncaca@laptop: gpg --output lala@truc.org.gpg-revocation-certificate --gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor lala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor lala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys  lala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import /somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:06:05','2013-12-19 13:06:05','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(142,3,'2013-12-19 13:08:35','2013-12-19 13:08:35','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --output lala@truc.org.gpg-revocation-certificate --gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor lala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor lala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys  lala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import /somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:08:35','2013-12-19 13:08:35','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(143,3,'2013-12-19 13:09:14','2013-12-19 13:09:14','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:09:14','2013-12-19 13:09:14','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(144,3,'2013-12-19 13:09:25','2013-12-19 13:09:25','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:09:25','2013-12-19 13:09:25','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(145,3,'2013-12-19 13:09:52','2013-12-19 13:09:52','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-python\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:09:52','2013-12-19 13:09:52','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(146,3,'2013-12-19 13:23:23','2013-12-19 13:23:23','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-html\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-sh\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-sh\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:23:23','2013-12-19 13:23:23','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(147,3,'2013-12-19 13:24:39','2013-12-19 13:24:39','\r\n<h2>Create a master keypair</h2>\r\n\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long>\r\n</pre>\r\n\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save\r\n</pre>\r\n\r\n<h3>Create a set of subkeys</h3>\r\n\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y\r\n</pre>\r\n\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys\r\n</pre>\r\n\r\nTo verify everything is fine, try the following command:\r\n\r\n<pre class=\"prettyprint lang-html\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13\r\n</pre>\r\n\r\nNotice the #, which is the sign that we are now using a subkey.\r\n\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve\r\n</pre>\r\n\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746\r\n</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>: \r\n<pre class=\"prettyprint lang-html\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 13:24:39','2013-12-19 13:24:39','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(149,3,'2013-12-19 15:37:59','2013-12-19 15:37:59','[display_file path=wp-content/themes/twentythirteen-child/post-files/git.html]','Git tips and tricks','','publish','closed','open','','git-tips-and-tricks','','','2014-05-18 16:50:19','2014-05-18 16:50:19','',0,'http://localhost/html/?p=149',0,'post','',0),(150,3,'2013-12-19 15:27:00','2013-12-19 15:27:00','<h2>Replace the content of master by another branch (cleanly)</h2>\r\n\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a\r\n\r\n > git log --pretty=oneline\r\n   91751f7d9044c247edf7b3fdc96d290054e1d5c9 Merge branch \'master\' into the_branch\r\n</pre>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-19 15:27:00','2013-12-19 15:27:00','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(151,3,'2013-12-19 15:27:42','2013-12-19 15:27:42','<h2>Replace the content of master by another branch (cleanly)</h2>\r\n\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n<div class=\"nocode\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a\r\n\r\n > git log --pretty=oneline\r\n   917515c9 Merge branch \'master\' into the_branch\r\n</div>\r\n</pre>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-19 15:27:42','2013-12-19 15:27:42','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(152,3,'2013-12-19 15:27:58','2013-12-19 15:27:58','<h2>Replace the content of master by another branch (cleanly)</h2>\r\n\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n\r\n<pre class=\"prettyprint nocode\">\r\n\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a\r\n\r\n > git log --pretty=oneline\r\n   917515c9 Merge branch \'master\' into the_branch\r\n\r\n</pre>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-19 15:27:58','2013-12-19 15:27:58','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(153,3,'2013-12-19 15:28:27','2013-12-19 15:28:27','<h2>Replace the content of master by another branch (cleanly)</h2>\r\n\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n\r\n<pre class=\"prettyprint nocode\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a\r\n\r\n > git log --pretty=oneline\r\n<span class=\"nocode\">917515c9 Merge branch \'master\' into the_branch</span>\r\n</pre>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-19 15:28:27','2013-12-19 15:28:27','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(154,3,'2013-12-19 15:31:01','2013-12-19 15:31:01','<h2>Replace the content of master by another branch (cleanly)</h2>\r\n\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n\r\n<pre class=\"prettyprint prettyprinted\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a\r\n\r\n > git log --pretty=oneline\r\n<span class=\"nocode\">917515c9 Merge branch \'master\' into the_branch</span>\r\n</pre>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-19 15:31:01','2013-12-19 15:31:01','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(155,3,'2013-12-19 15:31:16','2013-12-19 15:31:16','<h2>Replace the content of master by another branch (cleanly)</h2>\r\n\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n\r\n<pre class=\"prettyprint lang-sh prettyprinted\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a\r\n\r\n > git log --pretty=oneline\r\n<span class=\"nocode\">917515c9 Merge branch \'master\' into the_branch</span>\r\n</pre>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-19 15:31:16','2013-12-19 15:31:16','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(156,3,'2013-12-19 15:37:52','2013-12-19 15:37:52','<h2>Replace the content of master by another branch (cleanly)</h2>\r\n\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a\r\n</pre>\r\nThe resulting log message should be something like <code>Merge branch \'master\' into the_branch</code>\r\n\r\n<h2>branches tips and tricks</h2>\r\n\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n # push a new branch to remote\r\n > git push origin local_branch:remote_branch\r\n\r\n # remove a branch from remote\r\n > git push origin :remote_branch\r\n</pre>\r\n','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-19 15:37:52','2013-12-19 15:37:52','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(157,3,'2014-05-18 16:49:58','2014-05-18 16:49:58','[display_file path=wp-content/themes/twentythirteen-child/post-files/git.html]','Git tips and tricks','','inherit','closed','open','','149-autosave-v1','','','2014-05-18 16:49:58','2014-05-18 16:49:58','',149,'http://localhost/html/149-autosave-v1/',0,'revision','',0),(158,3,'2013-12-19 15:39:27','2013-12-19 15:39:27','<h2>Replace the content of master by another branch (cleanly)</h2>\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n<pre class=\"prettyprint lang-text\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a</pre>\r\nThe resulting log message should be something like <code>Merge branch \'master\' into the_branch</code>\r\n<h2>branches tips and tricks</h2>\r\n<pre class=\"prettyprint lang-text\">\r\n # push a new branch to remote\r\n > git push origin local_branch:remote_branch\r\n\r\n # remove a branch from remote\r\n > git push origin :remote_branch\r\n\r\n # remove a local branch\r\n > git branch -d local_branch \r\n</pre>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-19 15:39:27','2013-12-19 15:39:27','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(159,3,'2013-12-19 16:17:20','2013-12-19 16:17:20','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkp://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to modify the keyserver url and set <code>hkp://</code> instead of <code>hkps://</code>.\r\nAlso, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x\r\n</pre>','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 16:17:20','2013-12-19 16:17:20','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(160,3,'2013-12-19 16:25:00','2013-12-19 16:25:00','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 16:25:00','2013-12-19 16:25:00','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(161,3,'2013-12-19 16:35:16','2013-12-19 16:35:16','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\ncaca@laptop: gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\ncaca@laptop: gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\ncaca@laptop: mv lala@truc.org.* /somewhere/secure/\r\n\r\ncaca@laptop: gpg --delete-secret-key lala@truc.org\r\n\r\ncaca@laptop: gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>\r\n\r\n<h2>Set the trust level of a key</h2>\r\nFor your own keys, it is a good idea to set them to ultimate trust. For the other keys, the only purpose is to avoid the \"this key is not fully trusted. Are you sure you want to ... ?\" messages.\r\n\r\nTo change the level of trust, either use the commandline or use thunderbird.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n > gpg --edit-key <keyid or email address>\r\n gpg> trust\r\n gpg> save\r\n</pre>\r\n\r\nBy convention, it is good practice to set <strong>ultimate</strong> to your own keys and <code>full</code> for the other ones.','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 16:35:16','2013-12-19 16:35:16','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(162,3,'2013-12-19 16:36:32','2013-12-19 16:36:32','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n> gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\n> gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\n> gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\n> gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\n> mv lala@truc.org.* /somewhere/secure/\r\n\r\n> gpg --delete-secret-key lala@truc.org\r\n\r\n> gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\n> gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>\r\n<h2>Set the trust level of a key</h2>\r\nFor your own keys, it is a good idea to set them to ultimate trust. For the other keys, the only purpose is to avoid the \"this key is not fully trusted. Are you sure you want to ... ?\" messages.\r\n\r\nTo change the level of trust, either use the commandline or use thunderbird.\r\n<pre class=\"prettyprint lang-text\">\r\n > gpg --edit-key <keyid or email address>\r\n gpg> trust\r\n gpg> save</pre>\r\nBy convention, it is good practice to set <strong>ultimate</strong> to your own keys and <code>full</code> for the other ones.','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 16:36:32','2013-12-19 16:36:32','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(163,3,'2013-12-19 16:38:39','2013-12-19 16:38:39','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n> gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\n> gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\n> gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\n> gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\n> mv lala@truc.org.* /somewhere/secure/\r\n\r\n> gpg --delete-secret-key lala@truc.org\r\n\r\n> gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\n> gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>\r\n<h2>Set the trust level of a key</h2>\r\nFor your own keys, it is a good idea to set them to ultimate trust. For the other keys, the only purpose is to avoid the \"this key is not fully trusted. Are you sure you want to ... ?\" messages.\r\n\r\nTo change the level of trust, either use the commandline or use thunderbird.\r\n<pre class=\"prettyprint lang-text\">\r\n > gpg --edit-key <keyid or email address>\r\n gpg> trust\r\n gpg> save</pre>\r\nBy convention, it is good practice to set <strong>ultimate</strong> to your own keys and <code>full</code> for the other ones.\r\n\r\n<h2>Generate good pseudo-random numbers</h2>\r\ninstall <code>haveged</code>, which generates entropy source using the HAVEGE algorithm.','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 16:38:39','2013-12-19 16:38:39','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(164,3,'2013-12-19 17:28:34','2013-12-19 17:28:34','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n> gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\n> gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\n> gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\n> gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\n> mv lala@truc.org.* /somewhere/secure/\r\n\r\n> gpg --delete-secret-key lala@truc.org\r\n\r\n> gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\n> gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\ncaca@laptop: gpg -K\r\n/home/caca/.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>\r\n<h2>Set the trust level of a key</h2>\r\nFor your own keys, it is a good idea to set them to ultimate trust. For the other keys, the only purpose is to avoid the \"this key is not fully trusted. Are you sure you want to ... ?\" messages.\r\n\r\nTo change the level of trust, either use the commandline or use thunderbird.\r\n<pre class=\"prettyprint lang-text\">\r\n > gpg --edit-key <keyid or email address>\r\n gpg> trust\r\n gpg> save</pre>\r\nBy convention, it is good practice to set <strong>ultimate</strong> to your own keys and <code>full</code> for the other ones.\r\n<h2>Generate good pseudo-random numbers</h2>\r\ninstall <code>haveged</code>, which generates entropy source using the HAVEGE algorithm.\r\n\r\n<h2>how to sign a key</h2>\r\n\r\n<strong>prequisite</strong> be sure that you have your master key in the keyring of the computer you use.\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n# fetch the key from the keyserver\r\n> gpg2 --search-keys <id or email>\r\n# or use the following (id only)\r\n> gpg2 --recv-keys <short id>\r\n\r\n# check the fingerprint of the key\r\n> gpg2 --fingerprint <id or email>\r\n\r\n# sign the key (using your master)\r\n> gpg2 --edit-key <id or email>\r\ngpg> uid \r\ngpg> <number>  # a * will be put after the selection\r\ngpg> sign\r\nReally sign ? Y\r\n<passphrase>\r\n\r\n# sign the key (using your master!)\r\n> gpg2 --sign-key \r\n\r\n# send the key (-a) for text file\r\n> gpg2 --export -a <id or email>\r\n</pre>\r\n\r\n\r\n<h2>Modifying the master key</h2>\r\nWhen you modify your master, you don\'t need to reimport the subkeys. The only modification which will require a new export/import is a password modification.\r\n\r\nAfter a change, don\'t forget to re-export your master in a secure location.\r\n\r\n','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 17:28:34','2013-12-19 17:28:34','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(165,3,'2013-12-19 17:34:11','2013-12-19 17:34:11','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n> gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\n> gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\n> gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\n> gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\n> mv lala@truc.org.* /somewhere/secure/\r\n\r\n> gpg --delete-secret-key lala@truc.org\r\n\r\n> gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>\r\n<h2>Set the trust level of a key</h2>\r\nFor your own keys, it is a good idea to set them to ultimate trust. For the other keys, the only purpose is to avoid the \"this key is not fully trusted. Are you sure you want to ... ?\" messages.\r\n\r\nTo change the level of trust, either use the commandline or use thunderbird.\r\n<pre class=\"prettyprint lang-text\">\r\n > gpg --edit-key <keyid or email address>\r\n gpg> trust\r\n gpg> save</pre>\r\nBy convention, it is good practice to set <strong>ultimate</strong> to your own keys and <code>full</code> for the other ones.\r\n<h2>Generate good pseudo-random numbers</h2>\r\ninstall <code>haveged</code>, which generates entropy source using the HAVEGE algorithm.\r\n<h2>how to sign a key</h2>\r\n<strong>prequisite</strong> be sure that you have your master key in the keyring of the computer you use.\r\n<pre class=\"prettyprint lang-sh\">\r\n# fetch the key from the keyserver\r\n> gpg2 --search-keys <id or email>\r\n# or use the following (id only)\r\n> gpg2 --recv-keys <short id>\r\n\r\n# check the fingerprint of the key\r\n> gpg2 --fingerprint <id or email>\r\n\r\n# sign the key (using your master)\r\n> gpg2 --edit-key <id or email>\r\ngpg> uid \r\ngpg> <number>  # a * will be put after the selection\r\ngpg> sign\r\nReally sign ? Y\r\n<passphrase>\r\n\r\n# sign the key (using your master!)\r\n> gpg2 --sign-key \r\n\r\n# send the key (-a) for text file\r\n> gpg2 --export -a <id or email> > some_file.txt\r\n</pre>\r\n\r\nNow, we need to send the newly certified key.\r\n\r\nSend an email with the text file as attachment. Don\'t forget to sign and encrypt the email, checking the <strong>PGP/MIME option</strong> (so the attachment is also crypted).\r\n\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>note that the object of an email is NEVER encrypted.</div>\r\n\r\n<h2>Modifying the master key</h2>\r\nWhen you modify your master, you don\'t need to reimport the subkeys. The only modification which will require a new export/import is a password modification.\r\n\r\nAfter a change, don\'t forget to re-export your master in a secure location.','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 17:34:11','2013-12-19 17:34:11','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(166,3,'2013-12-19 17:45:53','2013-12-19 17:45:53','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n> gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\n> gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\n> gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\n> gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\n> mv lala@truc.org.* /somewhere/secure/\r\n\r\n> gpg --delete-secret-key lala@truc.org\r\n\r\n> gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>\r\n<h2>Set the trust level of a key</h2>\r\nFor your own keys, it is a good idea to set them to ultimate trust. For the other keys, the only purpose is to avoid the \"this key is not fully trusted. Are you sure you want to ... ?\" messages.\r\n\r\nTo change the level of trust, either use the commandline or use thunderbird.\r\n<pre class=\"prettyprint lang-text\">\r\n > gpg --edit-key <keyid or email address>\r\n gpg> trust\r\n gpg> save</pre>\r\nBy convention, it is good practice to set <strong>ultimate</strong> to your own keys and <code>full</code> for the other ones.\r\n<h2>Generate good pseudo-random numbers</h2>\r\ninstall <code>haveged</code>, which generates entropy source using the HAVEGE algorithm.\r\n<h2>how to sign a key</h2>\r\n<strong>prequisite</strong> be sure that you have your master key in the keyring of the computer you use.\r\n<pre class=\"prettyprint lang-sh\">\r\n# fetch the key from the keyserver\r\n> gpg2 --search-keys <id or email>\r\n# or use the following (id only)\r\n> gpg2 --recv-keys <short id>\r\n\r\n# check the fingerprint of the key\r\n> gpg2 --fingerprint <id or email>\r\n\r\n# sign the key (using your master)\r\n> gpg2 --edit-key <id or email>\r\ngpg> uid \r\ngpg> <number>  # a * will be put after the selection\r\ngpg> sign\r\nReally sign ? Y\r\n<passphrase>\r\n\r\ngpg> save\r\ngpg> quit\r\n\r\n### send the email with the file as attachment, see below\r\n\r\n# remove the signed key from the trust\r\n> gpg2 --delete-keys <id or email>\r\n\r\n\r\n# sign the key (using your master!)\r\n> gpg2 --sign-key ???????????????\r\n\r\n# send the key (-a) for text file, ASCII mode\r\n> gpg2 --export -a <id or email> > some_file.txt</pre>\r\nNow, we need to send the newly certified key.\r\nSend an email with the text file as attachment. Don\'t forget to sign and encrypt the email, checking the <strong>PGP/MIME option</strong> (so the attachment is also crypted).\r\n\r\n\r\n\r\nWhen receiving an email with a new signature, save the attachment somewhere and do the following:\r\n\r\n<pre class=\"prettyprint lang-sh\">\r\n# import the key\r\n> gpg --import /path/to/attachment\r\n\r\n# check that there is a new signature\r\n> gpg --list-sigs <id or email>\r\n\r\n# send it to the keyservers\r\n> gpg2 --send-keys <long id>\r\n</pre>\r\n\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong> the object of an email is NEVER encrypted.</div>\r\n<h2>Modifying the master key</h2>\r\nWhen you modify your master, you don\'t need to reimport the subkeys. The only modification which will require a new export/import is a password modification.\r\n\r\nAfter a change, don\'t forget to re-export your master in a secure location.','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 17:45:53','2013-12-19 17:45:53','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(167,3,'2013-12-19 17:46:46','2013-12-19 17:46:46','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n> gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\n> gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\n> gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\n> gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\n> mv lala@truc.org.* /somewhere/secure/\r\n\r\n> gpg --delete-secret-key lala@truc.org\r\n\r\n> gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>\r\n<h2>Set the trust level of a key</h2>\r\nFor your own keys, it is a good idea to set them to ultimate trust. For the other keys, the only purpose is to avoid the \"this key is not fully trusted. Are you sure you want to ... ?\" messages.\r\n\r\nTo change the level of trust, either use the commandline or use thunderbird.\r\n<pre class=\"prettyprint lang-text\">\r\n > gpg --edit-key <keyid or email address>\r\n gpg> trust\r\n gpg> save</pre>\r\nBy convention, it is good practice to set <strong>ultimate</strong> to your own keys and <code>full</code> for the other ones.\r\n<h2>Generate good pseudo-random numbers</h2>\r\ninstall <code>haveged</code>, which generates entropy source using the HAVEGE algorithm.\r\n<h2>how to sign a key</h2>\r\n<strong>prequisite</strong> be sure that you have your master key in the keyring of the computer you use.\r\n<pre class=\"prettyprint lang-sh\">\r\n# fetch the key from the keyserver\r\n> gpg2 --search-keys <id or email>\r\n# or use the following (id only)\r\n> gpg2 --recv-keys <short id>\r\n\r\n# check the fingerprint of the key\r\n> gpg2 --fingerprint <id or email>\r\n\r\n# sign the key (using your master)\r\n> gpg2 --edit-key <id or email>\r\ngpg> uid \r\ngpg> <number>  # a * will be put after the selection\r\ngpg> sign\r\nReally sign ? Y\r\n<passphrase>\r\n\r\ngpg> save\r\ngpg> quit\r\n\r\n### send the email with the file as attachment, ###\r\n### don\'t forget to check PGP/MIME, see below   ###\r\n\r\n# remove the signed key from the trust\r\n> gpg2 --delete-keys <id or email>\r\n\r\n# sign the key (using your master!)\r\n> gpg2 --sign-key ???????????????\r\n\r\n# send the key (-a) for text file, ASCII mode\r\n> gpg2 --export -a <id or email> > some_file.txt</pre>\r\nNow, we need to send the newly certified key.\r\nSend an email with the text file as attachment. Don\'t forget to sign and encrypt the email, checking the <strong>PGP/MIME option</strong> (so the attachment is also crypted).\r\n\r\nWhen receiving an email with a new signature, save the attachment somewhere and do the following:\r\n<pre class=\"prettyprint lang-sh\">\r\n# import the key\r\n> gpg --import /path/to/attachment\r\n\r\n# check that there is a new signature\r\n> gpg --list-sigs <id or email>\r\n\r\n# send it to the keyservers\r\n> gpg2 --send-keys <long id></pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong> the object of an email is NEVER encrypted.</div>\r\n<h2>Modifying the master key</h2>\r\nWhen you modify your master, you don\'t need to reimport the subkeys. The only modification which will require a new export/import is a password modification.\r\n\r\nAfter a change, don\'t forget to re-export your master in a secure location.','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 17:46:46','2013-12-19 17:46:46','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(168,3,'2013-12-19 17:48:11','2013-12-19 17:48:11','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n> gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\n> gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\n> gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\n> gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\n> mv lala@truc.org.* /somewhere/secure/\r\n\r\n> gpg --delete-secret-key lala@truc.org\r\n\r\n> gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>\r\n<h2>Set the trust level of a key</h2>\r\nFor your own keys, it is a good idea to set them to ultimate trust. For the other keys, the only purpose is to avoid the \"this key is not fully trusted. Are you sure you want to ... ?\" messages.\r\n\r\nTo change the level of trust, either use the commandline or use thunderbird.\r\n<pre class=\"prettyprint lang-text\">\r\n > gpg --edit-key <keyid or email address>\r\n gpg> trust\r\n gpg> save</pre>\r\nBy convention, it is good practice to set <strong>ultimate</strong> to your own keys and <code>full</code> for the other ones.\r\n<h2>Generate good pseudo-random numbers</h2>\r\ninstall <code>haveged</code>, which generates entropy source using the HAVEGE algorithm.\r\n<h2>how to sign a key</h2>\r\n<strong>prequisite</strong> be sure that you have your master key in the keyring of the computer you use.\r\n<pre class=\"prettyprint lang-sh\">\r\n# fetch the key from the keyserver\r\n> gpg2 --search-keys <id or email>\r\n# or use the following (id only)\r\n> gpg2 --recv-keys <short id>\r\n\r\n# check the fingerprint of the key\r\n> gpg2 --fingerprint <id or email>\r\n\r\n# sign the key (using your master)\r\n> gpg2 --edit-key <id or email>\r\ngpg> uid \r\ngpg> <number>  # a * will be put after the selection\r\ngpg> sign\r\nReally sign ? Y\r\n<passphrase>\r\n\r\ngpg> save\r\ngpg> quit\r\n\r\n# export the signed key (-a for text file, ASCII mode)\r\n> gpg2 --export -a <id or email> > some_file.txt\r\n\r\n### send the email with the file as attachment, ###\r\n### don\'t forget to check PGP/MIME, see below   ###\r\n\r\n# remove the signed key from the trust\r\n> gpg2 --delete-keys <id or email>\r\n\r\n# sign the key (using your master!)\r\n> gpg2 --sign-key ???????????????\r\n\r\n</pre>\r\nNow, we need to send the newly certified key.\r\nSend an email with the text file as attachment. Don\'t forget to sign and encrypt the email, checking the <strong>PGP/MIME option</strong> (so the attachment is also crypted).\r\n\r\nWhen receiving an email with a new signature, save the attachment somewhere and do the following:\r\n<pre class=\"prettyprint lang-sh\">\r\n# import the key\r\n> gpg --import /path/to/attachment\r\n\r\n# check that there is a new signature\r\n> gpg --list-sigs <id or email>\r\n\r\n# send it to the keyservers\r\n> gpg2 --send-keys <long id></pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong> the object of an email is NEVER encrypted.</div>\r\n<h2>Modifying the master key</h2>\r\nWhen you modify your master, you don\'t need to reimport the subkeys. The only modification which will require a new export/import is a password modification.\r\n\r\nAfter a change, don\'t forget to re-export your master in a secure location.','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 17:48:11','2013-12-19 17:48:11','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(169,3,'2013-12-19 17:52:04','2013-12-19 17:52:04','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n> gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\n> gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\n> gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\n> gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\n> mv lala@truc.org.* /somewhere/secure/\r\n\r\n> gpg --delete-secret-key lala@truc.org\r\n\r\n> gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>\r\n<h2>Set the trust level of a key</h2>\r\nFor your own keys, it is a good idea to set them to ultimate trust. For the other keys, the only purpose is to avoid the \"this key is not fully trusted. Are you sure you want to ... ?\" messages.\r\n\r\nTo change the level of trust, either use the commandline or use thunderbird.\r\n<pre class=\"prettyprint lang-text\">\r\n > gpg --edit-key <keyid or email address>\r\n gpg> trust\r\n gpg> save</pre>\r\nBy convention, it is good practice to set <strong>ultimate</strong> to your own keys and <code>full</code> for the other ones.\r\n<h2>Generate good pseudo-random numbers</h2>\r\ninstall <code>haveged</code>, which generates entropy source using the HAVEGE algorithm.\r\n<h2>how to sign a key</h2>\r\n<strong>prequisite</strong> be sure that you have your master key in the keyring of the computer you use.\r\n<pre class=\"prettyprint lang-sh\">\r\n# fetch the key from the keyserver\r\n> gpg2 --search-keys <id or email>\r\n# or use the following (id only)\r\n> gpg2 --recv-keys <short id>\r\n\r\n# check the fingerprint of the key\r\n> gpg2 --fingerprint <id or email>\r\n\r\n# sign the key (using your master)\r\n> gpg2 --edit-key <id or email>\r\ngpg> uid \r\ngpg> <number>  # a * will be put after the selection\r\ngpg> sign\r\nReally sign ? Y\r\n<passphrase>\r\n\r\ngpg> save\r\ngpg> quit\r\n\r\n# export the signed key (-a for text file, ASCII mode)\r\n> gpg2 --export -a <id or email> > some_file.txt\r\n\r\n### send the email with the file as attachment, ###\r\n### don\'t forget to check PGP/MIME, see below   ###\r\n\r\n# remove the signed key from the trust\r\n> gpg2 --delete-keys <id or email>\r\n\r\n# sign the key (using your master!)\r\n> gpg2 --sign-key ???????????????</pre>\r\nNow, we need to send the newly certified key.\r\nSend an email with the text file as attachment. Don\'t forget to sign and encrypt the email, checking the <strong>PGP/MIME option</strong> (so the attachment is also crypted).\r\n\r\nWhen receiving an email with a new signature, save the attachment somewhere and do the following:\r\n<pre class=\"prettyprint lang-sh\">\r\n# import the key\r\n> gpg --import /path/to/attachment\r\n\r\n# check that there is a new signature\r\n> gpg --list-sigs <id or email>\r\n\r\n# send it to the keyservers\r\n> gpg2 --send-keys <long id></pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong> the object of an email is NEVER encrypted.</div>\r\n<h2>Modifying the master key</h2>\r\nWhen you modify your master, you don\'t need to reimport the subkeys. The only modification which will require a new export/import is a password modification.\r\n\r\nAfter a change, don\'t forget to re-export your master in a secure location.\r\n\r\n<h2>Keeping your keyring up to date</h2>\r\n\r\nDon\'t forget to update your keyring, in case some of the keys are revocated or ...\r\nUse the following command : <code>gpg --refresh-keys</code>\r\nor put it in a cronjob. One problem is that the server will always receive the full list of your contacts, making it easy for a bad guy to fetch the list of your contacts.\r\n\r\nIf you are a little paranoiak, you can use <code>parcimonie.sh</code>, shich will use Tor and update only one key at a time. On debian, a package also called <code>parcimonie</code> available (a huge perl script).','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 17:52:04','2013-12-19 17:52:04','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(170,3,'2013-12-19 18:03:34','2013-12-19 18:03:34','<h2>Create a master keypair</h2>\r\n<h3>Create the master key</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n> gpg --gen-key\r\n\r\nPlease select what kind of key you want:\r\n    (1) RSA and RSA (default)\r\n    (2) DSA and Elgamal\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\nYour selection? 1\r\n\r\nPlease specify how long the key should be valid.\r\n    0 = key does not expire\r\n    <n>  = key expires in n days\r\n    <n>w = key expires in n weeks\r\n    <n>m = key expires in n months\r\n    <n>y = key expires in n years\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\n\r\nYou need a user ID to identify your key; the software constructs the user ID\r\nfrom the Real Name, Comment and E-mail Address in this form:\r\n    \"Heinrich Heine (Der Dichter)<heinrichh@duesseldorf.de>\"\r\n\r\nReal name: Lala Lulu\r\nE-mail address: lala@truc.org\r\nComment: \r\nYou selected this USER-ID:\r\n    \"Lala Lulu <lala@truc.org>\"\r\n\r\nChange (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o\r\nYou need a Passphrase to protect your secret key.\r\n<your passphrase, should be long></pre>\r\n<h3>Set some options</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed\r\ngpg> save</pre>\r\n<h3>Create a set of subkeys</h3>\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --edit-key lala@truc.org\r\ngpg> addkey\r\n...\r\nPlease select what kind of key you want:\r\n    (3) DSA (sign only)\r\n    (4) RSA (sign only)\r\n    (5) Elgamal (encrypt only)\r\n    (6) RSA (encrypt only)\r\nYour selection? 4\r\n...\r\nKey is valid for? (0) 0\r\nKey does not expire at all\r\nIs this correct? (y/N) y\r\nReally create? (y/N) y</pre>\r\n<h3>Export all the important stuff</h3>\r\nTo avoid keeping sensible data to our laptop, we need to export the master keypair as well as a revocation certificate and the subkeys. \r\nWe can then clear everything, reimport the subkeys only, and we are done !\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg --output \\\r\nlala@truc.org.gpg-revocation-certificate \\\r\n--gen-revoke lala@truc.org\r\n\r\n> gpg --export-secret-keys --armor \\\r\nlala@truc.org.private.gpg-key > lala@truc.org\r\n\r\n> gpg --export --armor \\\r\nlala@truc.org.public.gpg-key > lala@truc.org\r\n\r\n> gpg --export-secret-subkeys \\\r\nlala@truc.org.subkeys > lala@truc.org\r\n\r\n> mv lala@truc.org.* /somewhere/secure/\r\n\r\n> gpg --delete-secret-key lala@truc.org\r\n\r\n> gpg --import \\\r\n/somewhere/secure/lala@truc.org.subkeys</pre>\r\nTo verify everything is fine, try the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441 2013-03-13\r\nuid                    Lala Lulu <lala@truc.org>\r\nssb   4096R/0x69B0EA85 2013-03-13\r\nssb   4096R/0xC24C2CDA 2013-03-13</pre>\r\nNotice the #, which is the sign that we are now using a subkey.\r\n<h3>export the keys to servers</h3>\r\nYou can use either the master key or the subkey as argument to the export command, the result is the same. \r\n\r\nThe easiest thing is to modify your configuration file, <code>~/.gunpg/gpg.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-html\">\r\nuse-agent\r\nkeyserver hkps://hkps.pool.sks-keyservers.net\r\nkeyserver-options ca-cert-file=/home/caca/.gnupg/sks-keyservers.netCA.pem\r\nkeyserver-options no-honor-keyserver-url\r\nkeyserver-options auto-key-retrieve</pre>\r\nIn my case, I had to download the certificate <code>sks-keyservers.netCA.pem</code> of the keyserver and add it to my home, not <code>/etc/ssl/cert</code>. \r\n\r\nThen, you just need to run the following command:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg2 --send-keys 0xDD580A819CD4B746</pre>\r\nwhere the keyid is found in the first line of the output of <code>gpg -K</code>:\r\n<pre class=\"prettyprint lang-html\">\r\n> gpg -K\r\n/home/.../.gnupg/secring.gpg\r\n-----------------------------\r\nsec#  4096R/0x488BA441  <----- this one, beginning with 0x</pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>If you run into troubles with the command gpg --send-key (protocol error), this is because only <strong>gpg2</strong> supports ssl. So, launch the latter command with <strong>gpg2</strong> !!</div>\r\n\r\n<h2>Miscellaneous</h2>\r\n\r\n<h3>Set the trust level of a key</h3>\r\nFor your own keys, it is a good idea to set them to ultimate trust. For the other keys, the only purpose is to avoid the \"this key is not fully trusted. Are you sure you want to ... ?\" messages.\r\n\r\nTo change the level of trust, either use the commandline or use thunderbird.\r\n<pre class=\"prettyprint lang-text\">\r\n > gpg --edit-key <keyid or email address>\r\n gpg> trust\r\n gpg> save</pre>\r\nBy convention, it is good practice to set <strong>ultimate</strong> to your own keys and <code>full</code> for the other ones.\r\n<h3>Generate good pseudo-random numbers</h3>\r\ninstall <code>haveged</code>, which generates entropy source using the HAVEGE algorithm.\r\n<h3>how to sign a key</h3>\r\n<strong>prequisite</strong> be sure that you have your master key in the keyring of the computer you use.\r\n<pre class=\"prettyprint lang-sh\">\r\n# fetch the key from the keyserver\r\n> gpg2 --search-keys <id or email>\r\n# or use the following (id only)\r\n> gpg2 --recv-keys <short id>\r\n\r\n# check the fingerprint of the key\r\n> gpg2 --fingerprint <id or email>\r\n\r\n# sign the key (using your master)\r\n> gpg2 --edit-key <id or email>\r\ngpg> uid \r\ngpg> <number>  # a * will be put after the selection\r\ngpg> sign\r\nReally sign ? Y\r\n<passphrase>\r\n\r\ngpg> save\r\ngpg> quit\r\n\r\n# export the signed key (-a for text file, ASCII mode)\r\n> gpg2 --export -a <id or email> > some_file.txt\r\n\r\n### send the email with the file as attachment, ###\r\n### don\'t forget to check PGP/MIME, see below   ###\r\n\r\n# remove the signed key from the trust\r\n> gpg2 --delete-keys <id or email>\r\n\r\n# or sign the key with the following ? to test\r\n> gpg2 --sign-key ???????????????</pre>\r\nNow, we need to send the newly certified key.\r\nSend an email with the text file as attachment. Don\'t forget to sign and encrypt the email, checking the <strong>PGP/MIME option</strong> (so the attachment is also crypted).\r\n\r\nWhen receiving an email with a new signature, save the attachment somewhere and do the following:\r\n<pre class=\"prettyprint lang-sh\">\r\n# import the key\r\n> gpg --import /path/to/attachment\r\n\r\n# check that there is a new signature\r\n> gpg --list-sigs <id or email>\r\n\r\n# send it to the keyservers\r\n> gpg2 --send-keys <long id></pre>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong> the object of an email is NEVER encrypted.</div>\r\n<h3>Modifying the master key</h3>\r\nWhen you modify your master, you don\'t need to reimport the subkeys. The only modification which will require a new export/import is a password modification.\r\n\r\nAfter a change, don\'t forget to re-export your master in a secure location.\r\n<h3>Keeping your keyring up to date</h3>\r\nDon\'t forget to update your keyring, in case some of the keys are revocated or ...\r\nUse the following command : <div class=\"code\">  gpg --refresh-keys</div>\r\nor put it in a cronjob. One problem is that the server will always receive the full list of your contacts, making it easy for a bad guy to fetch the list of your contacts.\r\n\r\nIf you are a little paranoiak, you can use <code>parcimonie.sh</code>, shich will use Tor and update only one key at a time. On debian, a package also called <code>parcimonie</code> available (a huge perl script).\r\n','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 18:03:34','2013-12-19 18:03:34','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(171,3,'2013-12-19 20:50:15','2013-12-19 20:50:15','<div id=\"included-post\"></div>\r\n<script type=\"text/javascript\">\r\n	//<--\r\n	include_post_file(\"/mywiki/wp-content/themes/twentythirteen-child/post-files/gpg-blog-post.html\");\r\n	//-->\r\n</script>\r\n','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-19 20:50:15','2013-12-19 20:50:15','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(172,3,'2013-12-19 21:02:36','2013-12-19 21:02:36','<h2>Replace the content of master by another branch (cleanly)</h2>\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n<pre class=\"prettyprint lang-text\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a</pre>\r\nThe resulting log message should be something like <code>Merge branch \'master\' into the_branch</code>\r\n<h2>branches tips and tricks</h2>\r\n<pre class=\"prettyprint lang-text\">\r\n # push a new branch to remote\r\n > git push origin local_branch:remote_branch\r\n\r\n # remove a branch from remote\r\n > git push origin :remote_branch\r\n\r\n # remove a local branch\r\n > git branch -d local_branch</pre>\r\n\r\n<h2>Notes about merge strategies</h2>\r\n\r\n<table>\r\n	<tr>\r\n		<td>ours</td>\r\n		<td>overrides the content ot the other branch by the current one, ignoring all changes from other branches (and their history). Useful when we want to totally replace the master by a side branch for example</td>\r\n	</tr>\r\n	<tr>\r\n		<td>theirs</td>\r\n		<td>exactly the opposite of ours. In both cases, one branch is totally superseded.</td>\r\n	</tr><tr>\r\n	<td style=\"width:115px\">recursive ours, recursive theirs</td>\r\n	<td>forces conflicting hunks to be auto-resolved cleanly by favoring the current branch/the other branch.</td>\r\n	</tr>\r\n</table>\r\n\r\nexamples:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# select ours strategy\r\n> git merge -s ours my_branch:master\r\n# select recursive ours strategy\r\n> git merge -s recursive -X ours branch1:branch2 \r\n</pre>\r\n\r\n<a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-merge.html\">Complete list of options and explanations</a>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-19 21:02:36','2013-12-19 21:02:36','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(173,3,'2013-12-19 21:03:00','2013-12-19 21:03:00','<h2>Replace the content of master by another branch (cleanly)</h2>\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n<pre class=\"prettyprint lang-text\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a</pre>\r\nThe resulting log message should be something like <code>Merge branch \'master\' into the_branch</code>\r\n<h2>branches tips and tricks</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # push a new branch to remote\r\n > git push origin local_branch:remote_branch\r\n\r\n # remove a branch from remote\r\n > git push origin :remote_branch\r\n\r\n # remove a local branch\r\n > git branch -d local_branch</pre>\r\n<h2>Notes about merge strategies</h2>\r\n<table>\r\n<tr>\r\n<td>ours</td>\r\n<td>overrides the content ot the other branch by the current one, ignoring all changes from other branches (and their history). Useful when we want to totally replace the master by a side branch for example</td>\r\n</tr>\r\n<tr>\r\n<td>theirs</td>\r\n<td>exactly the opposite of ours. In both cases, one branch is totally superseded.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:115px\">recursive ours, recursive theirs</td>\r\n<td>forces conflicting hunks to be auto-resolved cleanly by favoring the current branch/the other branch.</td>\r\n</tr>\r\n</table>\r\nexamples:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# select ours strategy\r\n> git merge -s ours my_branch:master\r\n# select recursive ours strategy\r\n> git merge -s recursive -X ours branch1:branch2</pre>\r\n<a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-merge.html\">Complete list of options and explanations</a>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-19 21:03:00','2013-12-19 21:03:00','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(174,3,'2013-12-20 06:41:55','2013-12-20 06:41:55','<h2>Replace the content of master by another branch (cleanly)</h2>\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n<pre class=\"prettyprint lang-text\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a</pre>\r\nThe resulting log message should be something like <code>Merge branch \'master\' into the_branch</code>\r\n<h2>branches tips and tricks</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # push a new branch to remote\r\n > git push origin local_branch:remote_branch\r\n\r\n # remove a branch from remote\r\n > git push origin :remote_branch\r\n\r\n # remove a local branch\r\n > git branch -d local_branch</pre>\r\n<h2>Notes about merge strategies</h2>\r\n<table>\r\n<tr>\r\n<td>ours</td>\r\n<td>overrides the content ot the other branch by the current one, ignoring all changes from other branches (and their history). Useful when we want to totally replace the master by a side branch for example</td>\r\n</tr>\r\n<tr>\r\n<td>theirs</td>\r\n<td>exactly the opposite of ours. In both cases, one branch is totally superseded.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:115px\">recursive ours, recursive theirs</td>\r\n<td>forces conflicting hunks to be auto-resolved cleanly by favoring the current branch/the other branch.</td>\r\n</tr>\r\n</table>\r\n\r\n<strong>spaces</strong>: to avoid conflict due to stupid spaces, use the options <code>ignore-all-space</code>, <code>ignore-space-change</code> or <code>ignore-space-at-eol</code> with the -X flag. Don\'t forget that they are only options, so a merge strategy should also be specified with the -s flag.\r\nexamples:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# select ours strategy\r\n> git merge -s ours my_branch:master\r\n# select recursive ours strategy\r\n> git merge -s recursive -X ours branch1:branch2\r\n# avoid conflicts due to whitespaces\r\n> git merge -s recursive -X ignore-all-space master\r\n</pre>\r\n<a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-merge.html\">Complete list of options and explanations</a>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-20 06:41:55','2013-12-20 06:41:55','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(175,3,'2013-12-20 06:43:42','2013-12-20 06:43:42','<h2>Replace the content of master by another branch (cleanly)</h2>\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n<pre class=\"prettyprint lang-text\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a</pre>\r\nThe resulting log message should be something like <code>Merge branch \'master\' into the_branch</code>\r\n<h2>branches tips and tricks</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # push a new branch to remote\r\n > git push origin local_branch:remote_branch\r\n\r\n # remove a branch from remote\r\n > git push origin :remote_branch\r\n\r\n # remove a local branch\r\n > git branch -d local_branch</pre>\r\n<h2>Notes about merge strategies</h2>\r\n<table>\r\n<tr>\r\n<td>ours</td>\r\n<td>overrides the content ot the other branch by the current one, ignoring all changes from other branches (and their history). Useful when we want to totally replace the master by a side branch for example</td>\r\n</tr>\r\n<tr>\r\n<td>theirs</td>\r\n<td>exactly the opposite of ours. In both cases, one branch is totally superseded.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:115px\">recursive ours, recursive theirs</td>\r\n<td>forces conflicting hunks to be auto-resolved cleanly by favoring the current branch/the other branch.</td>\r\n</tr>\r\n	<tr>\r\n		<td>retursive patience</td>\r\n		<td>With this option, merge-recursive spends a little extra time to avoid mismerges that sometimes occur due to unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged have diverged wildly (sic).</td>\r\n	</tr>\r\n</table>\r\n<strong>spaces</strong>: to avoid conflict due to stupid spaces, use the options <code>ignore-all-space</code>, <code>ignore-space-change</code> or <code>ignore-space-at-eol</code> with the -X flag. Don\'t forget that they are only options, so a merge strategy should also be specified with the -s flag.\r\nexamples:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# select ours strategy\r\n> git merge -s ours my_branch:master\r\n# select recursive ours strategy\r\n> git merge -s recursive -X ours branch1:branch2\r\n# avoid conflicts due to whitespaces\r\n> git merge -s recursive -X ignore-all-space master</pre>\r\n<a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-merge.html\">Complete list of options and explanations</a>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-20 06:43:42','2013-12-20 06:43:42','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(176,3,'2013-12-20 06:44:09','2013-12-20 06:44:09','<h2>Replace the content of master by another branch (cleanly)</h2>\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n<pre class=\"prettyprint lang-text\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a</pre>\r\nThe resulting log message should be something like <code>Merge branch \'master\' into the_branch</code>\r\n<h2>branches tips and tricks</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # push a new branch to remote\r\n > git push origin local_branch:remote_branch\r\n\r\n # remove a branch from remote\r\n > git push origin :remote_branch\r\n\r\n # remove a local branch\r\n > git branch -d local_branch</pre>\r\n<h2>Notes about merge strategies</h2>\r\n<table>\r\n<tr>\r\n<td>ours</td>\r\n<td>overrides the content ot the other branch by the current one, ignoring all changes from other branches (and their history). Useful when we want to totally replace the master by a side branch for example</td>\r\n</tr>\r\n<tr>\r\n<td>theirs</td>\r\n<td>exactly the opposite of ours. In both cases, one branch is totally superseded.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:125px\">recursive ours, recursive theirs</td>\r\n<td>forces conflicting hunks to be auto-resolved cleanly by favoring the current branch/the other branch.</td>\r\n</tr>\r\n<tr>\r\n<td>retursive patience</td>\r\n<td>With this option, merge-recursive spends a little extra time to avoid mismerges that sometimes occur due to unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged have diverged wildly (sic).</td>\r\n</tr>\r\n</table>\r\n<strong>spaces</strong>: to avoid conflict due to stupid spaces, use the options <code>ignore-all-space</code>, <code>ignore-space-change</code> or <code>ignore-space-at-eol</code> with the -X flag. Don\'t forget that they are only options, so a merge strategy should also be specified with the -s flag.\r\nexamples:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# select ours strategy\r\n> git merge -s ours my_branch:master\r\n# select recursive ours strategy\r\n> git merge -s recursive -X ours branch1:branch2\r\n# avoid conflicts due to whitespaces\r\n> git merge -s recursive -X ignore-all-space master</pre>\r\n<a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-merge.html\">Complete list of options and explanations</a>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-20 06:44:09','2013-12-20 06:44:09','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(177,3,'2013-12-21 15:44:22','2013-12-21 15:44:22','<h2>Replace the content of master by another branch (cleanly)</h2>\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n<pre class=\"prettyprint lang-text\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a</pre>\r\nThe resulting log message should be something like <code>Merge branch \'master\' into the_branch</code>\r\n<h2>branches tips and tricks</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # push a new branch to remote\r\n > git push origin local_branch:remote_branch\r\n\r\n # remove a branch from remote\r\n > git push origin :remote_branch\r\n\r\n # remove a local branch\r\n > git branch -d local_branch</pre>\r\n<h2>Notes about merge strategies</h2>\r\n<table>\r\n<tr>\r\n<td>ours</td>\r\n<td>overrides the content ot the other branch by the current one, ignoring all changes from other branches (and their history). Useful when we want to totally replace the master by a side branch for example</td>\r\n</tr>\r\n<tr>\r\n<td>theirs</td>\r\n<td>exactly the opposite of ours. In both cases, one branch is totally superseded.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:125px\">recursive ours, recursive theirs</td>\r\n<td>forces conflicting hunks to be auto-resolved cleanly by favoring the current branch/the other branch.</td>\r\n</tr>\r\n<tr>\r\n<td>retursive patience</td>\r\n<td>With this option, merge-recursive spends a little extra time to avoid mismerges that sometimes occur due to unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged have diverged wildly (sic).</td>\r\n</tr>\r\n</table>\r\n<strong>spaces</strong>: to avoid conflict due to stupid spaces, use the options <code>ignore-all-space</code>, <code>ignore-space-change</code> or <code>ignore-space-at-eol</code> with the -X flag. Don\'t forget that they are only options, so a merge strategy should also be specified with the -s flag.\r\nexamples:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# select ours strategy\r\n> git merge -s ours my_branch:master\r\n# select recursive ours strategy\r\n> git merge -s recursive -X ours branch1:branch2\r\n# avoid conflicts due to whitespaces\r\n> git merge -s recursive -X ignore-all-space master</pre>\r\n<a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-merge.html\">Complete list of options and explanations</a>\r\n\r\n\r\n<h2>Miscellaneous</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# consult a file from a previous commit or another branch\r\n> git show &lt;head|branch&gt;file\r\n</pre>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-21 15:44:22','2013-12-21 15:44:22','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(178,3,'2013-12-21 15:45:27','2013-12-21 15:45:27','<h2>Replace the content of master by another branch (cleanly)</h2>\r\nSometimes, we worked a lot on a branch and, for an obscure reason, the default merge is not working as expected. One ugly way to proceed is to override the master branch by <code>git push origin local_branch:master -f</code>. Another approach, way cleaner, is to use the <strong>ours</strong> merge strategy:\r\n<pre class=\"prettyprint lang-text\">\r\n > git checkout the_branch\r\n > git merge -s ours master\r\n > git checkout master\r\n > git merge the_branch\r\n\r\n > git commit -a</pre>\r\nThe resulting log message should be something like <code>Merge branch \'master\' into the_branch</code>\r\n<h2>branches tips and tricks</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # push a new branch to remote\r\n > git push origin local_branch:remote_branch\r\n\r\n # remove a branch from remote\r\n > git push origin :remote_branch\r\n\r\n # remove a local branch\r\n > git branch -d local_branch</pre>\r\n<h2>Notes about merge strategies</h2>\r\n<table>\r\n<tr>\r\n<td>ours</td>\r\n<td>overrides the content ot the other branch by the current one, ignoring all changes from other branches (and their history). Useful when we want to totally replace the master by a side branch for example</td>\r\n</tr>\r\n<tr>\r\n<td>theirs</td>\r\n<td>exactly the opposite of ours. In both cases, one branch is totally superseded.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:125px\">recursive ours, recursive theirs</td>\r\n<td>forces conflicting hunks to be auto-resolved cleanly by favoring the current branch/the other branch.</td>\r\n</tr>\r\n<tr>\r\n<td>retursive patience</td>\r\n<td>With this option, merge-recursive spends a little extra time to avoid mismerges that sometimes occur due to unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged have diverged wildly (sic).</td>\r\n</tr>\r\n</table>\r\n<strong>spaces</strong>: to avoid conflict due to stupid spaces, use the options <code>ignore-all-space</code>, <code>ignore-space-change</code> or <code>ignore-space-at-eol</code> with the -X flag. Don\'t forget that they are only options, so a merge strategy should also be specified with the -s flag.\r\nexamples:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# select ours strategy\r\n> git merge -s ours my_branch:master\r\n# select recursive ours strategy\r\n> git merge -s recursive -X ours branch1:branch2\r\n# avoid conflicts due to whitespaces\r\n> git merge -s recursive -X ignore-all-space master</pre>\r\n<a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-merge.html\">Complete list of options and explanations</a>\r\n<h2>Miscellaneous</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# consult a file from a previous commit or another branch\r\n> git show <head|branch>:file</pre>','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2013-12-21 15:45:27','2013-12-21 15:45:27','',149,'http://localhost/html/149-revision-v1/',0,'revision','',0),(179,3,'2013-12-21 16:53:14','2013-12-21 16:53:14','[display_file path=/wp-content/themes/twentythirteen-child/post-files/dns-dhcp.html]','Local DHCP - DNS with bind9 ','','publish','closed','open','','local-dhcp-dns-with-bind9','','','2014-04-09 15:04:01','2014-04-09 15:04:01','',0,'http://localhost/html/?p=179',0,'post','',0),(180,3,'2013-12-21 16:39:56','2013-12-21 16:39:56','<div id=\"included-post\"></div>\r\n<script type=\"text/javascript\">\r\n	//<--\r\n	include_post_file(\"/mywiki/wp-content/themes/twentythirteen-child/post-files/dns-dhcp.html\");\r\n	//-->\r\n</script>','','','inherit','closed','open','','179-revision-v1','','','2013-12-21 16:39:56','2013-12-21 16:39:56','',179,'http://localhost/html/179-revision-v1/',0,'revision','',0),(181,3,'2013-12-21 16:53:14','2013-12-21 16:53:14','<div id=\"included-post\"></div>\r\n<script type=\"text/javascript\">\r\n	//<--\r\n	include_post_file(\"/mywiki/wp-content/themes/twentythirteen-child/post-files/dns-dhcp.html\");\r\n	//-->\r\n</script>','Local DHCP - DNS with bind9 ','','inherit','closed','open','','179-revision-v1','','','2013-12-21 16:53:14','2013-12-21 16:53:14','',179,'http://localhost/html/179-revision-v1/',0,'revision','',0),(182,3,'2013-12-21 17:16:13','2013-12-21 17:16:13','\r\n<h6>Authentication</h6>\r\nWe will need to authenticate with a valid gmail username before proceeding. For that, we use the smtp command <code>auth <mode> </code>, as long as the server supports it. \r\n\r\nTo check the server capability, use <code>ehlo</code> instead of the classic <code>helo</code>, which will display the list of the server capabilities. \r\n\r\nIf the list contains the keyword <strong>AUTH PLAIN</strong>, it means that we can authenticate using a simple string base64-encoded. \r\n\r\nThe easiest way to generate this string is to use perl:\r\n<pre class=\"prettyprint\">\r\n> perl -MMIME::Base64 -e \'print encode_base64(\"lucy.derlin\\@gmail.com\\0lucy.derlin\\@gmail.com\\0motdepasse\")\';\r\nbHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh</pre>\r\nNotice the escape character before the @, as well as the null characters (\\0) used as fields separators. They are really important !\r\n\r\n\r\n<h6>Actually send a mail</h6>\r\nSince the server uses SSL, it is a good idea to use <code>openssl</code> directly.\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # connect to gmail smtp server through openssl\r\n> openssl s_client -crlf -connect smtp.gmail.com:465 \r\n220 mx.google.com ESMTP y10sm59601148eev.3 - gsmtp\r\n\r\n # send helo and list the capabilities of the server\r\nehlo \r\n250-mx.google.com at your service, [77.56.233.245]\r\n250-SIZE 35882577\r\n250-8BITMIME\r\n250-AUTH LOGIN PLAIN XOAUTH XOAUTH2  # AUTH PLAIN present !\r\n250 ENHANCEDSTATUSCODES\r\n\r\n# send the base64-encoded credentials \r\nauth plain bHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n235 2.7.0 Accepted\r\n\r\n# set the expeditor (from) -- don\'t forget the < >\r\nmail from: <lucy.derlin@gmail.com>\r\n250 2.1.0 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# set the recipient -- don\'t forget the < >\r\nrcpt to: <lucy.derlin@gmail.com>\r\n250 2.1.5 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# begin the message with data and end it with \r\n# a newline + a dot\r\ndata\r\n354  Go ahead y10sm59601148eev.3 - gsmtp\r\n# notice how we add meta info inside the data\r\nSubject: test	\r\nFrom: lucy linder <lucy.derlin@gmail.com>\r\nTo: me <lucy.derlin@prout.com>\r\nDate: 30 May 2013 03:40:31 -0700 (PDT)\r\n\r\nHello !	# the actual message\r\n\r\n.       # newline + dot => end of data\r\n250 2.0.0 OK 1369912614 y10sm59601148eev.3 - gsmtp</pre>\r\nAnd we are done ! The message is sent.\r\n\r\nThe source code of the message we just sent is of this form:\r\n<pre>\r\n	Return-Path: <lucy.derlin@gmail.com>\r\n	Received: from  (77-56-233-245.dclient.hispeed.ch. [77.56.233.245])\r\n	        by mx.google.com with ESMTPSA id y10sm59601148eev.3.2013.05.30.04.15.20\r\n	        for <lucy.derlin@gmail.com>\r\n	        (version=TLSv1.1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\r\n	        Thu, 30 May 2013 04:16:54 -0700 (PDT)\r\n	Message-ID: <51a73526.0a2c0f0a.2cee.ffffbc84@mx.google.com>\r\n	Subject: test\r\n	From: lucy linder <lucy.derlin@gmail.com>\r\n	To: me <lucy.derlin@prout.com>\r\n	Date: Thu, 30 May 2013 04:16:54 -0700 (PDT)\r\n\r\n	Hello !</pre>\r\n<a href=\"http://qmail.jms1.net/test-auth.shtml\">further reading</a>','Send mails from terminal through google smtp server','','publish','closed','open','','send-mails-from-terminal-through-google-smtp-server','','','2013-12-21 17:17:18','2013-12-21 17:17:18','',0,'http://localhost/html/?p=182',0,'post','',0),(183,3,'2013-12-21 17:07:02','2013-12-21 17:07:02','Since the server uses SSL, it is a good idea to use <code>openssl</code> directly.\r\n\r\n\r\n<h6>Authentication</h6>\r\nWe will need to authenticate with a valid gmail username before proceeding. For that, we use the smtp command <code>auth <mode> </code>, as long as the server supports it. \r\n\r\nTo check the server capability, use <code>ehlo</code> instead of the classic <code>helo</code>, which will display the list of the server capabilities. \r\n\r\nIf the list contains the keyword <strong>AUTH PLAIN</strong>, it means that we can authenticate using a simple string base64-encoded. \r\n\r\nThe easiest way to generate this string is to use perl:\r\n<pre class=\"prettyprint\">\r\n> perl -MMIME::Base64 -e \'print encode_base64(\"lucy.derlin\\@gmail.com\\0lucy.derlin\\@gmail.com\\0motdepasse\")\';\r\nbHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n</pre>\r\nNotice the escape character before the @, as well as the null characters (\\0) used as fields separators. They are really important !\r\n\r\n<h6>Actually send a mail</h6>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # connect to gmail smtp server through openssl\r\n> openssl s_client -crlf -connect smtp.gmail.com:465 \r\n220 mx.google.com ESMTP y10sm59601148eev.3 - gsmtp\r\n<strong>ehlo</strong>\r\n250-mx.google.com at your service, [77.56.233.245]\r\n250-SIZE 35882577\r\n250-8BITMIME\r\n250-AUTH LOGIN PLAIN XOAUTH XOAUTH2\r\n250 ENHANCEDSTATUSCODES\r\nauth plain bHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n235 2.7.0 Accepted\r\nmail from: lucy.derlin@gmail.com\r\n555 5.5.2 Syntax error. y10sm59601148eev.3 - gsmtp\r\nmail from: <lucy.derlin@gmail.com>\r\n250 2.1.0 OK y10sm59601148eev.3 - gsmtp\r\nrcpt to: <lucy.derlin@gmail.com>\r\n250 2.1.5 OK y10sm59601148eev.3 - gsmtp\r\ndata\r\n354  Go ahead y10sm59601148eev.3 - gsmtp\r\nSubject: test\r\nFrom: lucy linder <lucy.derlin@gmail.com>\r\nTo: me <lucy.derlin@prout.com>\r\nDate: 30 May 2013 03:40:31 -0700 (PDT)\r\n\r\nHello !\r\n\r\n.\r\n250 2.0.0 OK 1369912614 y10sm59601148eev.3 - gsmtp\r\n\r\n</pre>','Send mails from terminal through google smtp server','','inherit','closed','open','','182-revision-v1','','','2013-12-21 17:07:02','2013-12-21 17:07:02','',182,'http://localhost/html/182-revision-v1/',0,'revision','',0),(184,3,'2013-12-21 17:08:32','2013-12-21 17:08:32','Since the server uses SSL, it is a good idea to use <code>openssl</code> directly.\r\n\r\n\r\n<h6>Authentication</h6>\r\nWe will need to authenticate with a valid gmail username before proceeding. For that, we use the smtp command <code>auth <mode> </code>, as long as the server supports it. \r\n\r\nTo check the server capability, use <code>ehlo</code> instead of the classic <code>helo</code>, which will display the list of the server capabilities. \r\n\r\nIf the list contains the keyword <strong>AUTH PLAIN</strong>, it means that we can authenticate using a simple string base64-encoded. \r\n\r\nThe easiest way to generate this string is to use perl:\r\n<pre class=\"prettyprint\">\r\n> perl -MMIME::Base64 -e \'print encode_base64(\"lucy.derlin\\@gmail.com\\0lucy.derlin\\@gmail.com\\0motdepasse\")\';\r\nbHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n</pre>\r\nNotice the escape character before the @, as well as the null characters (\\0) used as fields separators. They are really important !\r\n\r\n<h6>Actually send a mail</h6>\r\n<?prettify?>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # connect to gmail smtp server through openssl\r\n> openssl s_client -crlf -connect smtp.gmail.com:465 \r\n220 mx.google.com ESMTP y10sm59601148eev.3 - gsmtp\r\n<strong>ehlo</strong>\r\n250-mx.google.com at your service, [77.56.233.245]\r\n250-SIZE 35882577\r\n250-8BITMIME\r\n250-AUTH LOGIN PLAIN XOAUTH XOAUTH2\r\n250 ENHANCEDSTATUSCODES\r\nauth plain bHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n235 2.7.0 Accepted\r\nmail from: lucy.derlin@gmail.com\r\n555 5.5.2 Syntax error. y10sm59601148eev.3 - gsmtp\r\nmail from: <lucy.derlin@gmail.com>\r\n250 2.1.0 OK y10sm59601148eev.3 - gsmtp\r\nrcpt to: <lucy.derlin@gmail.com>\r\n250 2.1.5 OK y10sm59601148eev.3 - gsmtp\r\ndata\r\n354  Go ahead y10sm59601148eev.3 - gsmtp\r\nSubject: test\r\nFrom: lucy linder <lucy.derlin@gmail.com>\r\nTo: me <lucy.derlin@prout.com>\r\nDate: 30 May 2013 03:40:31 -0700 (PDT)\r\n\r\nHello !\r\n\r\n.\r\n250 2.0.0 OK 1369912614 y10sm59601148eev.3 - gsmtp\r\n\r\n</pre>','Send mails from terminal through google smtp server','','inherit','closed','open','','182-revision-v1','','','2013-12-21 17:08:32','2013-12-21 17:08:32','',182,'http://localhost/html/182-revision-v1/',0,'revision','',0),(185,3,'2013-12-21 17:13:22','2013-12-21 17:13:22','Since the server uses SSL, it is a good idea to use <code>openssl</code> directly.\r\n\r\n\r\n<h6>Authentication</h6>\r\nWe will need to authenticate with a valid gmail username before proceeding. For that, we use the smtp command <code>auth <mode> </code>, as long as the server supports it. \r\n\r\nTo check the server capability, use <code>ehlo</code> instead of the classic <code>helo</code>, which will display the list of the server capabilities. \r\n\r\nIf the list contains the keyword <strong>AUTH PLAIN</strong>, it means that we can authenticate using a simple string base64-encoded. \r\n\r\nThe easiest way to generate this string is to use perl:\r\n<pre class=\"prettyprint\">\r\n> perl -MMIME::Base64 -e \'print encode_base64(\"lucy.derlin\\@gmail.com\\0lucy.derlin\\@gmail.com\\0motdepasse\")\';\r\nbHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n</pre>\r\nNotice the escape character before the @, as well as the null characters (\\0) used as fields separators. They are really important !\r\n\r\n<h6>Actually send a mail</h6>\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # connect to gmail smtp server through openssl\r\n> openssl s_client -crlf -connect smtp.gmail.com:465 \r\n220 mx.google.com ESMTP y10sm59601148eev.3 - gsmtp\r\n\r\n # send helo and list the capabilities of the server\r\nehlo \r\n250-mx.google.com at your service, [77.56.233.245]\r\n250-SIZE 35882577\r\n250-8BITMIME\r\n250-AUTH LOGIN PLAIN XOAUTH XOAUTH2  # AUTH PLAIN present !\r\n250 ENHANCEDSTATUSCODES\r\n\r\n# send the base64-encoded credentials \r\nauth plain bHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n235 2.7.0 Accepted\r\n\r\n# set the expeditor (from) -- don\'t forget the < >\r\nmail from: <lucy.derlin@gmail.com>\r\n250 2.1.0 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# set the recipient -- don\'t forget the < >\r\nrcpt to: <lucy.derlin@gmail.com>\r\n250 2.1.5 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# begin the message with data and end it with \r\n# a newline + a dot\r\ndata\r\n354  Go ahead y10sm59601148eev.3 - gsmtp\r\n# notice how we add meta info inside the data\r\nSubject: test	\r\nFrom: lucy linder <lucy.derlin@gmail.com>\r\nTo: me <lucy.derlin@prout.com>\r\nDate: 30 May 2013 03:40:31 -0700 (PDT)\r\n\r\nHello !	# the actual message\r\n\r\n.		# newline + dot => end of data\r\n250 2.0.0 OK 1369912614 y10sm59601148eev.3 - gsmtp\r\n</pre>','Send mails from terminal through google smtp server','','inherit','closed','open','','182-revision-v1','','','2013-12-21 17:13:22','2013-12-21 17:13:22','',182,'http://localhost/html/182-revision-v1/',0,'revision','',0),(186,3,'2013-12-21 17:15:38','2013-12-21 17:15:38','Since the server uses SSL, it is a good idea to use <code>openssl</code> directly.\r\n\r\n\r\n<h6>Authentication</h6>\r\nWe will need to authenticate with a valid gmail username before proceeding. For that, we use the smtp command <code>auth <mode> </code>, as long as the server supports it. \r\n\r\nTo check the server capability, use <code>ehlo</code> instead of the classic <code>helo</code>, which will display the list of the server capabilities. \r\n\r\nIf the list contains the keyword <strong>AUTH PLAIN</strong>, it means that we can authenticate using a simple string base64-encoded. \r\n\r\nThe easiest way to generate this string is to use perl:\r\n<pre class=\"prettyprint\">\r\n> perl -MMIME::Base64 -e \'print encode_base64(\"lucy.derlin\\@gmail.com\\0lucy.derlin\\@gmail.com\\0motdepasse\")\';\r\nbHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n</pre>\r\nNotice the escape character before the @, as well as the null characters (\\0) used as fields separators. They are really important !\r\n\r\n<h6>Actually send a mail</h6>\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # connect to gmail smtp server through openssl\r\n> openssl s_client -crlf -connect smtp.gmail.com:465 \r\n220 mx.google.com ESMTP y10sm59601148eev.3 - gsmtp\r\n\r\n # send helo and list the capabilities of the server\r\nehlo \r\n250-mx.google.com at your service, [77.56.233.245]\r\n250-SIZE 35882577\r\n250-8BITMIME\r\n250-AUTH LOGIN PLAIN XOAUTH XOAUTH2  # AUTH PLAIN present !\r\n250 ENHANCEDSTATUSCODES\r\n\r\n# send the base64-encoded credentials \r\nauth plain bHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n235 2.7.0 Accepted\r\n\r\n# set the expeditor (from) -- don\'t forget the < >\r\nmail from: <lucy.derlin@gmail.com>\r\n250 2.1.0 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# set the recipient -- don\'t forget the < >\r\nrcpt to: <lucy.derlin@gmail.com>\r\n250 2.1.5 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# begin the message with data and end it with \r\n# a newline + a dot\r\ndata\r\n354  Go ahead y10sm59601148eev.3 - gsmtp\r\n# notice how we add meta info inside the data\r\nSubject: test	\r\nFrom: lucy linder <lucy.derlin@gmail.com>\r\nTo: me <lucy.derlin@prout.com>\r\nDate: 30 May 2013 03:40:31 -0700 (PDT)\r\n\r\nHello !	# the actual message\r\n\r\n.       # newline + dot => end of data\r\n250 2.0.0 OK 1369912614 y10sm59601148eev.3 - gsmtp\r\n</pre>\r\n\r\nAnd we are done ! The message is sent.\r\n\r\nThe source code of the message we just sent is of this form:\r\n\r\n<pre>\r\n	Return-Path: <lucy.derlin@gmail.com>\r\n	Received: from  (77-56-233-245.dclient.hispeed.ch. [77.56.233.245])\r\n	        by mx.google.com with ESMTPSA id y10sm59601148eev.3.2013.05.30.04.15.20\r\n	        for <lucy.derlin@gmail.com>\r\n	        (version=TLSv1.1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\r\n	        Thu, 30 May 2013 04:16:54 -0700 (PDT)\r\n	Message-ID: <51a73526.0a2c0f0a.2cee.ffffbc84@mx.google.com>\r\n	Subject: test\r\n	From: lucy linder <lucy.derlin@gmail.com>\r\n	To: me <lucy.derlin@prout.com>\r\n	Date: Thu, 30 May 2013 04:16:54 -0700 (PDT)\r\n	\r\n	Hello !\r\n\r\n</pre>\r\n','Send mails from terminal through google smtp server','','inherit','closed','open','','182-revision-v1','','','2013-12-21 17:15:38','2013-12-21 17:15:38','',182,'http://localhost/html/182-revision-v1/',0,'revision','',0),(187,3,'2013-12-21 17:16:13','2013-12-21 17:16:13','Since the server uses SSL, it is a good idea to use <code>openssl</code> directly.\r\n\r\n\r\n<h6>Authentication</h6>\r\nWe will need to authenticate with a valid gmail username before proceeding. For that, we use the smtp command <code>auth <mode> </code>, as long as the server supports it. \r\n\r\nTo check the server capability, use <code>ehlo</code> instead of the classic <code>helo</code>, which will display the list of the server capabilities. \r\n\r\nIf the list contains the keyword <strong>AUTH PLAIN</strong>, it means that we can authenticate using a simple string base64-encoded. \r\n\r\nThe easiest way to generate this string is to use perl:\r\n<pre class=\"prettyprint\">\r\n> perl -MMIME::Base64 -e \'print encode_base64(\"lucy.derlin\\@gmail.com\\0lucy.derlin\\@gmail.com\\0motdepasse\")\';\r\nbHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n</pre>\r\nNotice the escape character before the @, as well as the null characters (\\0) used as fields separators. They are really important !\r\n\r\n<h6>Actually send a mail</h6>\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # connect to gmail smtp server through openssl\r\n> openssl s_client -crlf -connect smtp.gmail.com:465 \r\n220 mx.google.com ESMTP y10sm59601148eev.3 - gsmtp\r\n\r\n # send helo and list the capabilities of the server\r\nehlo \r\n250-mx.google.com at your service, [77.56.233.245]\r\n250-SIZE 35882577\r\n250-8BITMIME\r\n250-AUTH LOGIN PLAIN XOAUTH XOAUTH2  # AUTH PLAIN present !\r\n250 ENHANCEDSTATUSCODES\r\n\r\n# send the base64-encoded credentials \r\nauth plain bHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n235 2.7.0 Accepted\r\n\r\n# set the expeditor (from) -- don\'t forget the < >\r\nmail from: <lucy.derlin@gmail.com>\r\n250 2.1.0 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# set the recipient -- don\'t forget the < >\r\nrcpt to: <lucy.derlin@gmail.com>\r\n250 2.1.5 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# begin the message with data and end it with \r\n# a newline + a dot\r\ndata\r\n354  Go ahead y10sm59601148eev.3 - gsmtp\r\n# notice how we add meta info inside the data\r\nSubject: test	\r\nFrom: lucy linder <lucy.derlin@gmail.com>\r\nTo: me <lucy.derlin@prout.com>\r\nDate: 30 May 2013 03:40:31 -0700 (PDT)\r\n\r\nHello !	# the actual message\r\n\r\n.       # newline + dot => end of data\r\n250 2.0.0 OK 1369912614 y10sm59601148eev.3 - gsmtp\r\n</pre>\r\n\r\nAnd we are done ! The message is sent.\r\n\r\nThe source code of the message we just sent is of this form:\r\n\r\n<pre>\r\n	Return-Path: <lucy.derlin@gmail.com>\r\n	Received: from  (77-56-233-245.dclient.hispeed.ch. [77.56.233.245])\r\n	        by mx.google.com with ESMTPSA id y10sm59601148eev.3.2013.05.30.04.15.20\r\n	        for <lucy.derlin@gmail.com>\r\n	        (version=TLSv1.1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\r\n	        Thu, 30 May 2013 04:16:54 -0700 (PDT)\r\n	Message-ID: <51a73526.0a2c0f0a.2cee.ffffbc84@mx.google.com>\r\n	Subject: test\r\n	From: lucy linder <lucy.derlin@gmail.com>\r\n	To: me <lucy.derlin@prout.com>\r\n	Date: Thu, 30 May 2013 04:16:54 -0700 (PDT)\r\n	\r\n	Hello !\r\n\r\n</pre>\r\n\r\n\r\n<a href=\"http://qmail.jms1.net/test-auth.shtml\">further reading</a>','Send mails from terminal through google smtp server','','inherit','closed','open','','182-revision-v1','','','2013-12-21 17:16:13','2013-12-21 17:16:13','',182,'http://localhost/html/182-revision-v1/',0,'revision','',0),(188,3,'2013-12-21 17:16:39','2013-12-21 17:16:39','Since the server uses SSL, it is a good idea to use <code>openssl</code> directly.\r\n<h6>Authentication</h6>\r\nWe will need to authenticate with a valid gmail username before proceeding. For that, we use the smtp command <code>auth <mode> </code>, as long as the server supports it. \r\n\r\nTo check the server capability, use <code>ehlo</code> instead of the classic <code>helo</code>, which will display the list of the server capabilities. \r\n\r\nIf the list contains the keyword <strong>AUTH PLAIN</strong>, it means that we can authenticate using a simple string base64-encoded. \r\n\r\nThe easiest way to generate this string is to use perl:\r\n<pre class=\"prettyprint\">\r\n> perl -MMIME::Base64 -e \'print encode_base64(\"lucy.derlin\\@gmail.com\\0lucy.derlin\\@gmail.com\\0motdepasse\")\';\r\nbHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh</pre>\r\nNotice the escape character before the @, as well as the null characters (\\0) used as fields separators. They are really important !\r\n<h6>Actually send a mail</h6>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # connect to gmail smtp server through openssl\r\n> openssl s_client -crlf -connect smtp.gmail.com:465 \r\n220 mx.google.com ESMTP y10sm59601148eev.3 - gsmtp\r\n\r\n # send helo and list the capabilities of the server\r\nehlo \r\n250-mx.google.com at your service, [77.56.233.245]\r\n250-SIZE 35882577\r\n250-8BITMIME\r\n250-AUTH LOGIN PLAIN XOAUTH XOAUTH2  # AUTH PLAIN present !\r\n250 ENHANCEDSTATUSCODES\r\n\r\n# send the base64-encoded credentials \r\nauth plain bHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n235 2.7.0 Accepted\r\n\r\n# set the expeditor (from) -- don\'t forget the < >\r\nmail from: <lucy.derlin@gmail.com>\r\n250 2.1.0 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# set the recipient -- don\'t forget the < >\r\nrcpt to: <lucy.derlin@gmail.com>\r\n250 2.1.5 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# begin the message with data and end it with \r\n# a newline + a dot\r\ndata\r\n354  Go ahead y10sm59601148eev.3 - gsmtp\r\n# notice how we add meta info inside the data\r\nSubject: test	\r\nFrom: lucy linder <lucy.derlin@gmail.com>\r\nTo: me <lucy.derlin@prout.com>\r\nDate: 30 May 2013 03:40:31 -0700 (PDT)\r\n\r\nHello !	# the actual message\r\n\r\n.       # newline + dot => end of data\r\n250 2.0.0 OK 1369912614 y10sm59601148eev.3 - gsmtp</pre>\r\nAnd we are done ! The message is sent.\r\n\r\nThe source code of the message we just sent is of this form:\r\n<pre>\r\n	Return-Path: <lucy.derlin@gmail.com>\r\n	Received: from  (77-56-233-245.dclient.hispeed.ch. [77.56.233.245])\r\n	        by mx.google.com with ESMTPSA id y10sm59601148eev.3.2013.05.30.04.15.20\r\n	        for <lucy.derlin@gmail.com>\r\n	        (version=TLSv1.1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\r\n	        Thu, 30 May 2013 04:16:54 -0700 (PDT)\r\n	Message-ID: <51a73526.0a2c0f0a.2cee.ffffbc84@mx.google.com>\r\n	Subject: test\r\n	From: lucy linder <lucy.derlin@gmail.com>\r\n	To: me <lucy.derlin@prout.com>\r\n	Date: Thu, 30 May 2013 04:16:54 -0700 (PDT)\r\n\r\n	Hello !</pre>\r\n<a href=\"http://qmail.jms1.net/test-auth.shtml\">further reading</a>','Send mails from terminal through google smtp server','','inherit','closed','open','','182-revision-v1','','','2013-12-21 17:16:39','2013-12-21 17:16:39','',182,'http://localhost/html/182-revision-v1/',0,'revision','',0),(189,3,'2013-12-21 17:17:18','2013-12-21 17:17:18','\r\n<h6>Authentication</h6>\r\nWe will need to authenticate with a valid gmail username before proceeding. For that, we use the smtp command <code>auth <mode> </code>, as long as the server supports it. \r\n\r\nTo check the server capability, use <code>ehlo</code> instead of the classic <code>helo</code>, which will display the list of the server capabilities. \r\n\r\nIf the list contains the keyword <strong>AUTH PLAIN</strong>, it means that we can authenticate using a simple string base64-encoded. \r\n\r\nThe easiest way to generate this string is to use perl:\r\n<pre class=\"prettyprint\">\r\n> perl -MMIME::Base64 -e \'print encode_base64(\"lucy.derlin\\@gmail.com\\0lucy.derlin\\@gmail.com\\0motdepasse\")\';\r\nbHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh</pre>\r\nNotice the escape character before the @, as well as the null characters (\\0) used as fields separators. They are really important !\r\n\r\n\r\n<h6>Actually send a mail</h6>\r\nSince the server uses SSL, it is a good idea to use <code>openssl</code> directly.\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n # connect to gmail smtp server through openssl\r\n> openssl s_client -crlf -connect smtp.gmail.com:465 \r\n220 mx.google.com ESMTP y10sm59601148eev.3 - gsmtp\r\n\r\n # send helo and list the capabilities of the server\r\nehlo \r\n250-mx.google.com at your service, [77.56.233.245]\r\n250-SIZE 35882577\r\n250-8BITMIME\r\n250-AUTH LOGIN PLAIN XOAUTH XOAUTH2  # AUTH PLAIN present !\r\n250 ENHANCEDSTATUSCODES\r\n\r\n# send the base64-encoded credentials \r\nauth plain bHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\r\n235 2.7.0 Accepted\r\n\r\n# set the expeditor (from) -- don\'t forget the < >\r\nmail from: <lucy.derlin@gmail.com>\r\n250 2.1.0 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# set the recipient -- don\'t forget the < >\r\nrcpt to: <lucy.derlin@gmail.com>\r\n250 2.1.5 OK y10sm59601148eev.3 - gsmtp\r\n\r\n# begin the message with data and end it with \r\n# a newline + a dot\r\ndata\r\n354  Go ahead y10sm59601148eev.3 - gsmtp\r\n# notice how we add meta info inside the data\r\nSubject: test	\r\nFrom: lucy linder <lucy.derlin@gmail.com>\r\nTo: me <lucy.derlin@prout.com>\r\nDate: 30 May 2013 03:40:31 -0700 (PDT)\r\n\r\nHello !	# the actual message\r\n\r\n.       # newline + dot => end of data\r\n250 2.0.0 OK 1369912614 y10sm59601148eev.3 - gsmtp</pre>\r\nAnd we are done ! The message is sent.\r\n\r\nThe source code of the message we just sent is of this form:\r\n<pre>\r\n	Return-Path: <lucy.derlin@gmail.com>\r\n	Received: from  (77-56-233-245.dclient.hispeed.ch. [77.56.233.245])\r\n	        by mx.google.com with ESMTPSA id y10sm59601148eev.3.2013.05.30.04.15.20\r\n	        for <lucy.derlin@gmail.com>\r\n	        (version=TLSv1.1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\r\n	        Thu, 30 May 2013 04:16:54 -0700 (PDT)\r\n	Message-ID: <51a73526.0a2c0f0a.2cee.ffffbc84@mx.google.com>\r\n	Subject: test\r\n	From: lucy linder <lucy.derlin@gmail.com>\r\n	To: me <lucy.derlin@prout.com>\r\n	Date: Thu, 30 May 2013 04:16:54 -0700 (PDT)\r\n\r\n	Hello !</pre>\r\n<a href=\"http://qmail.jms1.net/test-auth.shtml\">further reading</a>','Send mails from terminal through google smtp server','','inherit','closed','open','','182-revision-v1','','','2013-12-21 17:17:18','2013-12-21 17:17:18','',182,'http://localhost/html/182-revision-v1/',0,'revision','',0),(190,3,'2013-12-21 17:18:21','2013-12-21 17:18:21','<h6>Authentication</h6>\nWe will need to authenticate with a valid gmail username before proceeding. For that, we use the smtp command <code>auth <mode> </code>, as long as the server supports it. \n\nTo check the server capability, use <code>ehlo</code> instead of the classic <code>helo</code>, which will display the list of the server capabilities. \n\nIf the list contains the keyword <strong>AUTH PLAIN</strong>, it means that we can authenticate using a simple string base64-encoded. \n\nThe easiest way to generate this string is to use perl:\n<pre class=\"prettyprint\">\n> perl -MMIME::Base64 -e \'print encode_base64(\"lucy.derlin\\@gmail.com\\0lucy.derlin\\@gmail.com\\0motdepasse\")\';\nbHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh</pre>\nNotice the escape character before the @, as well as the null characters (\\0) used as fields separators. They are really important !\n<h6>Actually send a mail</h6>\nSince the server uses SSL, it is a good idea to use <code>openssl</code> directly.\n<pre class=\"prettyprint lang-text with-comments\">\n # connect to gmail smtp server through openssl\n> openssl s_client -crlf -connect smtp.gmail.com:465 \n220 mx.google.com ESMTP y10sm59601148eev.3 - gsmtp\n\n # send helo and list the capabilities of the server\nehlo \n250-mx.google.com at your service, [77.56.233.245]\n250-SIZE 35882577\n250-8BITMIME\n250-AUTH LOGIN PLAIN XOAUTH XOAUTH2  # AUTH PLAIN present !\n250 ENHANCEDSTATUSCODES\n\n# send the base64-encoded credentials \nauth plain bHVjeS5kZXJsaW5AZ21haWwuY29tAGx1Y3kuZGVybGluQGdtYWlsLmNvbQBDQUNBcHJvdXQh\n235 2.7.0 Accepted\n\n# set the expeditor (from) -- don\'t forget the < >\nmail from: <lucy.derlin@gmail.com>\n250 2.1.0 OK y10sm59601148eev.3 - gsmtp\n\n# set the recipient -- don\'t forget the < >\nrcpt to: <lucy.derlin@gmail.com>\n250 2.1.5 OK y10sm59601148eev.3 - gsmtp\n\n# begin the message with data and end it with \n# a newline + a dot\ndata\n354  Go ahead y10sm59601148eev.3 - gsmtp\n# notice how we add meta info inside the data\nSubject: test	\nFrom: lucy linder <lucy.derlin@gmail.com>\nTo: me <lucy.derlin@prout.com>\nDate: 30 May 2013 03:40:31 -0700 (PDT)\n\nHello !	# the actual message\n\n.       # newline + dot => end of data\n250 2.0.0 OK 1369912614 y10sm59601148eev.3 - gsmtp</pre>\nAnd we are done ! The message is sent.\n\nThe source code of the message we just sent is of this form:\n<pre>\n	Return-Path: <lucy.derlin@gmail.com>\n	Received: from  (77-56-233-245.dclient.hispeed.ch. [77.56.233.245])\n	        by mx.google.com with ESMTPSA id y10sm59601148eev.3.2013.05.30.04.15.20\n	        for <lucy.derlin@gmail.com>\n	        (version=TLSv1.1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\n	        Thu, 30 May 2013 04:16:54 -0700 (PDT)\n	Message-ID: <51a73526.0a2c0f0a.2cee.ffffbc84@mx.google.com>\n	Subject: test\n	From: lucy linder <lucy.derlin@gmail.com>\n	To: me <lucy.derlin@prout.com>\n	Date: Thu, 30 May 2013 04:16:54 -0700 (PDT)\n\n	Hello !</pre>\n<a href=\"http://qmail.jms1.net/test-auth.shtml\">further reading</a>','Send mails from terminal through google smtp server','','inherit','closed','open','','182-autosave-v1','','','2013-12-21 17:18:21','2013-12-21 17:18:21','',182,'http://localhost/html/182-autosave-v1/',0,'revision','',0),(191,3,'2013-12-21 19:06:42','2013-12-21 19:06:42','[display_file path=/wp-content/themes/twentythirteen-child/post-files/openvpn.html]','OpenVPN','','publish','closed','open','','openvpn','','','2013-12-28 13:52:02','2013-12-28 13:52:02','',0,'http://localhost/html/?p=191',0,'post','',0),(192,3,'2013-12-21 19:04:40','2013-12-21 19:04:40','<h2>Server-side</h2>\r\n    <h6>install openvpn</h6>\r\n    Type <code>sudo apt-get install openvpn</code> in your terminal.\r\n\r\n    <h6>prepare your environment</h6>\r\n    Before generating the certificates, you will need to go through the following steps.\r\n\r\n    Copy the easy-rsa examples:\r\n    <pre class=\"prettyprint lang-text with-comments\">\r\n > cd /etc/openvpn\r\n > mkdir easy-rsa\r\n > cp -R /usr/share/doc/openvpn/examples/easy-rsa/2.0/* easy-rsa/\r\n    </pre>\r\n\r\n    Edit the global variables contained in <code>/etc/openvpn/easy-rsa/vars</code> according to your organization. You can set whatever you want (or leave it with defaults), but remember they will appear in your certificates!\r\n\r\n    Finally, run the following:\r\n    <pre class=\"prettyprint lang-text with-comments\">\r\n> cd easy-rsa/\r\n>. ./vars  # set environment variables\r\n> ./clean-all\r\n    </pre>\r\n\r\n\r\n    <h6>Generate the certificates</h6>\r\n\r\nFor the server, you will need the following:\r\n    <pre class=\"prettyprint lang-text with-comments\">\r\n# build the CERTIFICATE AUTHORITY (CA) cert/key\r\n# this will create ca.crt and ca.key in the \r\n# /etc/openvpn/easy-rsa/keys directory\r\n> ./build-ca \r\n\r\n# (optional)\r\n# build the INTERMEDIATE CERTIFICATE AUTHORITY cert/key\r\n# this will create server.crt and server.key in the \r\n# /etc/openvpn/easy-rsa/keys directory\r\n> ./build-key-server server\r\n\r\n# build BUILD DIFFIE-HELLMAN PARAMETERS \r\n# (necessary for the server end of a SSL/TLS connection)\r\n> ./build-dh\r\n\r\n    </pre>\r\n\r\nFor each client, you will also generate a distinct certificate:\r\n    <pre class=\"prettyprint lang-text with-comments\">\r\n> ./buil-key < the client name >\r\n    </pre>\r\n\r\nEach client will have to copy the <strong>ca.crt</strong>, <strong>clientname.crt</strong>\r\nand <strong>clientname.key</strong> to its machine, in the <code>/etc/openvpn/easy-rsa/keys</code> directory.\r\n\r\n<h6>Edit the configuration</h6>\r\n\r\nOpen the <code>/etc/openvpn/server.conf</code>:\r\n    <pre class=\"prettyprint lang-text with-comments\">\r\n    # Config OpenVPN\r\n    # http://wiki.debian.org/OpenVPN\r\n    \r\n    mode server\r\n    proto tcp\r\n    port 1154\r\n    dev tun\r\n    \r\n    # specify the path to the files previously created\r\n    ca ca.crt\r\n    cert server.crt\r\n    key server.key\r\n    dh dh1024.pem\r\n    tls-auth ta.key 0\r\n\r\n    cipher AES-256-CBC\r\n    \r\n    # specify the ip pool adress\r\n    server 10.8.0.0 255.255.255.0\r\n    push \"redirect-gateway def1 bypass-dhcp\"\r\n    \r\n    # can maybe remove \" bypass-dhcp\"\r\n    # for routing to work, put this in /etc/rc.local:\r\n    # iptables -t nat -I POSTROUTING -o wlan0 -j MASQUERADE\r\n    # (wlan0 is my network interface going to \r\n    # the Internet / gateway going to the Internet 172.16.0.3)\r\n    \r\n    push \"dhcp-option DNS 172.16.0.3\"\r\n    keepalive 10 120\r\n    \r\n    #user nobody\r\n    #group nogroup\r\n    #chroot /etc/openvpn/jail\r\n    persist-key\r\n    persist-tun\r\n    comp-lzo\r\n    \r\n    verb 3\r\n    mute 20\r\n    status openvpn-status.log\r\n    log-append /var/log/openvpn.log\r\n \r\n    </pre>\r\n\r\n    <h6>Final touch</h6>\r\nCopy the following line in <code>/etc/rc.local</code>, just before <code>exit 0</code>:\r\n    <pre class=\"prettyprint lang-text with-comments\">\r\n# set eth0 or wlan0 depending of the interface you use\r\niptables -t nat -I POSTROUTING -o wlan0 -j MASQUERADE\r\n    </pre>\r\n\r\nEdit the <code>/etc/sysctl.conf</code> file and uncomment the line:\r\n    <pre class=\"prettyprint lang-text with-comments\">\r\nnet.ipv4.ip_forward=1\r\n    </pre>\r\n\r\n    <h2>Client side</h2>\r\nThe authentication is possible through the certificate previously generated. The client should thus have the following files in his machine:\r\n<ul>\r\n<li><code>ca.crt</code></li>\r\n<li><code>clientname.crt</code></li>\r\n<li><code>clientname.key</code></li>\r\n<li><code>ta.key</code></li>\r\n<li>a configuration file, see below</li>\r\n</ul>\r\n\r\n<strong>On Linux</strong>: install openvpn and run the following command:\r\n    <pre class=\"prettyprint lang-text with-comments\">\r\n# the file must imperatively end with .conf\r\n> openvpn <path-to-client-config.conf>\r\n    </pre>\r\n\r\n<strong>On Windows</strong>: isntall openvpnclient, copy the mentioned files in <code>Program Files/openvpn/config</code>. The configuration file must imperatively end with <strong>.opvn</strong>.\r\n\r\n<h6>The configuration file</h6>\r\n\r\n    <pre class=\"prettyprint lang-text with-comments\">\r\n    client \r\n    dev tun\r\n    proto tcp-client\r\n\r\n    remote error418.no-ip.org 8989  # server\'s ip and port\r\n\r\n    resolv-retry infinite\r\n    cipher AES-256-CBC\r\n    \r\n    # Keys and certificates\r\n    ## !! relative path !!\r\n    ca       ca.crt\r\n    cert     clientname.crt    # replace clientname by your own\r\n    key      clientname.key\r\n    tls-auth ta.key 1\r\n    \r\n    nobind\r\n    persist-key\r\n    persist-tun\r\n    comp-lzo\r\n    verb 4 # or less... but 4 is useful for troubleshooting!\r\n \r\n    </pre>\r\n\r\n\r\n','OpenVPN sur le pi','','inherit','closed','open','','191-revision-v1','','','2013-12-21 19:04:40','2013-12-21 19:04:40','',191,'http://localhost/html/191-revision-v1/',0,'revision','',0),(193,3,'2013-12-21 19:06:35','2013-12-21 19:06:35','<div id=\"included-post\"></div>\r\n<script type=\"text/javascript\">\r\n	//<--\r\n	include_post_file(\"/mywiki/wp-content/themes/twentythirteen-child/post-files/openvpn.html\");\r\n	//-->\r\n</script>','OpenVPN','','inherit','closed','open','','191-revision-v1','','','2013-12-21 19:06:35','2013-12-21 19:06:35','',191,'http://localhost/html/191-revision-v1/',0,'revision','',0),(195,3,'2013-12-21 20:40:17','2013-12-21 20:40:17',' ','','','publish','closed','open','','195','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',0,'http://localhost/html/?p=195',9,'nav_menu_item','',0),(196,3,'2013-12-21 20:43:04','2013-12-21 20:43:04','<div id=\"dns-post\"></div>\r\n<script type=\"text/javascript\">\r\n	//<--\r\n	include_post_file(\"/mywiki/wp-content/themes/twentythirteen-child/post-files/dns-dhcp.html\", \"#dns-post\");\r\n	//-->\r\n</script>','Local DHCP - DNS with bind9 ','','inherit','closed','open','','179-revision-v1','','','2013-12-21 20:43:04','2013-12-21 20:43:04','',179,'http://localhost/html/179-revision-v1/',0,'revision','',0),(197,3,'2013-12-21 20:44:27','2013-12-21 20:44:27','<div id=\"gpg-post\"></div>\r\n<script type=\"text/javascript\">\r\n	//<--\r\n	include_post_file(\"/mywiki/wp-content/themes/twentythirteen-child/post-files/gpg-blog-post.html\", \"#gpg-post\");\r\n	//-->\r\n</script>','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-21 20:44:27','2013-12-21 20:44:27','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(198,3,'2013-12-27 16:47:31','2013-12-27 16:47:31','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl/<code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\n\r\n# prompts for a password and returns it, without term object\r\nuse Term::ReadKey;\r\n\r\nprint \"Enter your password: \";\r\nReadMode \'noecho\';\r\n$password = ReadLine 0;\r\nchomp $password;\r\nReadMode \'normal\';\r\nprint \"\\n\";</pre>\r\nThis is the easy and straight-forward way. But if we use a term object and we also want to avoid the password to be kept in history, we would rather use a more complex routine, like this one:\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name\r\n\r\nsub get_pass{ # $pass (void)\r\n    # parse args\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n\r\n    # get password\r\n    print $msg; # (??) it does not work with $term->...\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password;\r\n	chomp( $password = ReadLine 0 ); \r\n    ReadMode( 0 );  # back to normal\r\n\r\n    # remove pass from history\r\n    eval{ $term->remove_history( $term->where_history() ) }; \r\n\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I< params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I< params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I< params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I< params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...</li>\r\n</ol>\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-12-27 16:47:31','2013-12-27 16:47:31','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(199,3,'2013-12-27 16:48:35','2013-12-27 16:48:35','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl</code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\n\r\n# prompts for a password and returns it, without term object\r\nuse Term::ReadKey;\r\n\r\nprint \"Enter your password: \";\r\nReadMode \'noecho\';\r\n$password = ReadLine 0;\r\nchomp $password;\r\nReadMode \'normal\';\r\nprint \"\\n\";</pre>\r\nThis is the easy and straight-forward way. But if we use a term object and we also want to avoid the password to be kept in history, we would rather use a more complex routine, like this one:\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name\r\n\r\nsub get_pass{ # $pass (void)\r\n    # parse args\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n\r\n    # get password\r\n    print $msg; # (??) it does not work with $term->...\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password;\r\n	chomp( $password = ReadLine 0 ); \r\n    ReadMode( 0 );  # back to normal\r\n\r\n    # remove pass from history\r\n    eval{ $term->remove_history( $term->where_history() ) }; \r\n\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I< params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...</li>\r\n</ol>\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-12-27 16:48:35','2013-12-27 16:48:35','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(200,3,'2013-12-27 18:02:12','2013-12-27 18:02:12','<h2>Use the dollar sign instead of \'jQuery\'</h2>\r\nTwo solutions.\r\n<ul>\r\n	<li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\r\n	<li>you need the $ sign somewhere else, like a named function</li>\r\n</ul>\r\nInside an anonymous function, you can simply pass the $ directly to the function:\r\n<pre class=\"prettyprint\">// pass the $ as an argument of the an. function\r\njQuery( document ).ready( function( $ ){\r\n		$(\'my-selector\').doStuff();\r\n	});\r\n});</pre>\r\nOtherwise, you can declare the $ variable and assign jQuery to it:\r\n<pre class=\"prettyprint\">function marvellousFunction(){\r\n    var $ = jQuery;\r\n// more code\r\n}</pre>\r\n<h2>Enqueue scripts and styles from a child theme</h2>\r\nSimply add the following in your <code>functions.php</code>:\r\n<pre class=\"prettyprint\">\r\n<?php\r\n	// CHILD_DIR = path the the child theme \r\n    define( \'CHILD_DIR\', get_stylesheet_directory_uri() );\r\n\r\nfunction nameofchildtheme_enqueue() {\r\n    // enqueue a stylesheet \r\n    wp_enqueue_style( \'bootstrap.css\', \r\n        CHILD_DIR . \'/css/bootstrap.css\' );\r\n    // script loaded AFTER jquery >= 1.0.0\r\n    wp_enqueue_script( \'bootstrap.min.js\', \r\n        CHILD_DIR . \'/js/bootstrap.js\', \r\n        array(\'jquery\'), \r\n        \'1.0.0\', true );\r\n    // script depending on both jquery and bootstrap \r\n    wp_enqueue_script(\'myutils\', \r\n        CHILD_DIR. \'/js/myutils.js\', \r\n        array( \'jquery\', \'bootstrap.min.js\' ) );\r\n}\r\n\r\n// register the hook\r\nadd_action( \'wp_enqueue_scripts\', \'nameofchildtheme_enqueue\' );\r\n?></pre>\r\n<h2 id=\"add-a-loginlogout-menu-item\">add a login/logout menu item</h2>\r\nFor that, we can use the filter hook <code>wp_nav_menu_items</code>.\r\n\r\nOpen your theme <code>function.php</code> and copy-paste the following:\r\n<pre class=\"prettyprint lang-php\">add_filter( \'wp_nav_menu_items\',\'wpsites_loginout_menu_link\' );\r\n\r\nfunction wpsites_loginout_menu_link( $menu ) { \r\n    $loginout = wp_loginout($_SERVER[\'REQUEST_URI\'], false );\r\n    $menu .= \'\r\n\r\n	<li>\' . $loginout . \'</li>\r\n\r\n\';\r\n    return $menu;\r\n}\r\n</pre>\r\nNote that based on your theme, you need to customize the li classes. For twenty-thirteen for example, we would have:\r\n<pre class=\"prettyprint lang-php\">$loginout = \'\r\n\r\n	<li class=\"nav-menu\" class=\"menu-item\">\' . \r\n                wp_loginout($_SERVER[\'REQUEST_URI\'], false ) . \'</li>\r\n\r\n\';\r\n</pre>\r\n<h2 id=\"use-sshsftp-to-update-your-wordpress-apache2\">Use ssh/sftp to update your wordpress (apache2)</h2>\r\n<ol>\r\n	<li>Ensure that apache2 has the <tt>ssh</tt> extension installed and enabled. If not:\r\n<pre class=\"prettyprint lang-text\">apt-get install libssh2-php\r\necho extension=ssh2.so | sudo tee -a /etc/php5/apache2/php.ini\r\nservice apache2 restart\r\n</pre>\r\n</li>\r\n	<li>Create an ssh key for your wordpress user\r\n<pre class=\"prettyprint lang-text\">sudo mkdir /home/wp-user/.ssh\r\nsudo chown wp-user:wp-user /home/wp-user/.ssh/\r\n\r\nsu wp-user\r\nssh-keygen -t rsa -b 4096\r\n</pre>\r\n</li>\r\n	<li>Add the correct permissions\r\n<pre class=\"prettyprint lang-text\">sudo chmod 0700 /home/wp-user/.ssh/\r\nsudo chown wp-user:www-data /home/wp-user/id_rsa*\r\nsudo chmod 0640 /home/wp-user/id_rsa*\r\n</pre>\r\n</li>\r\n	<li>add your user to the authorized keys\r\n<pre class=\"prettyprint lang-text\">cat /home/wp-user/.ssh/wp_rsa.pub >> /home/wp-user/.ssh/authorized_keys\r\n</pre>\r\n</li>\r\n</ol>\r\nNow, if you try to update wordpress, you will get the possibility to use ssh2. Note that I could only achieve the update from localhost (<tt>host=localhost, user=wp-user, password=, paths=/home/wp-user/.ssh/id_rda*</tt>).\r\n<h3 id=\"automatize-the-process\">Automatize the process</h3>\r\n<pre class=\"prettyprint lang-php\">define(\'FTP_PUBKEY\',\'/home/wp-user/.ssh/id_rsa.pub\');\r\ndefine(\'FTP_PRIKEY\',\'/home/wp-user/.ssh/id_rsa\');\r\ndefine(\'FTP_USER\',\'wp-user\');\r\ndefine(\'FTP_PASS\',\'\');\r\ndefine(\'FTP_HOST\',\'localhost\');\r\n</pre>\r\n<h3 id=\"a-word-about-permissions\">A word about permissions</h3>\r\nNormally, the wordpress files should be owned by the ftp/ssh user. In our case, we should have created a new user (wp-user), and chowned all the site content to him. Note that there is a security breach if you use sudo while logged-in as your user !!\r\n<h3 id=\"some-sources\">some sources</h3>\r\nSSH2:\r\n<ul>\r\n	<li><a href=\"http://www.jonathan.vc/2009/02/09/wordpress-install-upgrade-ssh/\">http://www.jonathan.vc/2009/02/09/wordpress-install-upgrade-ssh/</a></li>\r\n	<li><a href=\"http://www.htpcbeginner.com/enable-wordpress-ssh-access/\">http://www.htpcbeginner.com/enable-wordpress-ssh-access/</a></li>\r\n	<li><a href=\"http://code.tutsplus.com/articles/quick-tip-upgrade-your-wordpress-site-via-ssh--wp-27691\">http://code.tutsplus.com/articles/quick-tip-upgrade-your-wordpress-site-via-ssh–wp-27691</a></li>\r\n	<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-secure-updates-and-installations-in-wordpress-on-ubuntu\">https://www.digitalocean.com/community/tutorials/how-to-configure-secure-updates-and-installations-in-wordpress-on-ubuntu</a></li>\r\n</ul>\r\npermissions:\r\n<ul>\r\n	<li><a href=\"http://codex.wordpress.org/Changing_File_Permissions\">http://codex.wordpress.org/Changing_File_Permissions</a></li>\r\n	<li><a href=\"http://codex.wordpress.org/Hardening_WordPress#File_Permissions\">http://codex.wordpress.org/Hardening_WordPress#File_Permissions</a></li>\r\n</ul>\r\n\r\n\r\n<h2>Backup/restore database</h2>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n# backup db\r\nmysqldump -u <user> -p <dbname> > dbname.sql \r\n\r\n# restore db\r\n# if the database does not exist, create it before running\r\n# the following:\r\nmysql -u <user> -p <dbname> < dbname.sql \r\n</pre>','Wordpress general tricks','','publish','closed','open','','jquery-for-wordpress','','','2014-09-14 08:49:34','2014-09-14 08:49:34','',0,'http://localhost/html/?p=200',0,'post','',0),(201,3,'2013-12-27 18:01:41','2013-12-27 18:01:41','<h2>Use the dollar sign instead of \'jQuery\'</h2>\r\n\r\nTwo solutions. <br />\r\n<ul><li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\r\n	<li>you need the $ sign somewhere else, like a named function</li></ul>\r\n\r\nInside an anonymous function, you can simply pass the $ directly to the function:\r\n<pre class=\"prettyprint\">\r\n// pass the $ as an argument of the an. function\r\njQuery( document ).ready( function( $ ){\r\n		$(\'my-selector\').doStuff();\r\n	});\r\n});\r\n</pre>\r\n\r\nOtherwise, you can declare the $ variable and assign jQuery to it:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n// more code\r\n}\r\n</pre>','jQuery for wordpress','','inherit','closed','open','','200-revision-v1','','','2013-12-27 18:01:41','2013-12-27 18:01:41','',200,'http://localhost/html/200-revision-v1/',0,'revision','',0),(202,3,'2013-12-27 18:02:12','2013-12-27 18:02:12','<h2>Use the dollar sign instead of \'jQuery\'</h2>\r\n\r\nTwo solutions. <br />\r\n<ul><li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\r\n	<li>you need the $ sign somewhere else, like a named function</li></ul>\r\n\r\nInside an anonymous function, you can simply pass the $ directly to the function:\r\n<pre class=\"prettyprint\">\r\n// pass the $ as an argument of the an. function\r\njQuery( document ).ready( function( $ ){\r\n		$(\'my-selector\').doStuff();\r\n	});\r\n});\r\n</pre>\r\n\r\nOtherwise, you can declare the $ variable and assign jQuery to it:\r\n<pre class=\"prettyprint\">\r\nfunction marvellousFunction(){\r\n    var $ = jQuery;\r\n// more code\r\n}\r\n</pre>','jQuery for wordpress','','inherit','closed','open','','200-revision-v1','','','2013-12-27 18:02:12','2013-12-27 18:02:12','',200,'http://localhost/html/200-revision-v1/',0,'revision','',0),(203,3,'2014-09-14 08:48:25','2014-09-14 08:48:25','<h2>Use the dollar sign instead of \'jQuery\'</h2>\nTwo solutions.\n<ul>\n	<li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\n	<li>you need the $ sign somewhere else, like a named function</li>\n</ul>\nInside an anonymous function, you can simply pass the $ directly to the function:\n<pre class=\"prettyprint\">// pass the $ as an argument of the an. function\njQuery( document ).ready( function( $ ){\n		$(\'my-selector\').doStuff();\n	});\n});</pre>\nOtherwise, you can declare the $ variable and assign jQuery to it:\n<pre class=\"prettyprint\">function marvellousFunction(){\n    var $ = jQuery;\n// more code\n}</pre>\n<h2>Enqueue scripts and styles from a child theme</h2>\nSimply add the following in your <code>functions.php</code>:\n<pre class=\"prettyprint\">\n<?php\n	// CHILD_DIR = path the the child theme \n    define( \'CHILD_DIR\', get_stylesheet_directory_uri() );\n\nfunction nameofchildtheme_enqueue() {\n    // enqueue a stylesheet \n    wp_enqueue_style( \'bootstrap.css\', \n        CHILD_DIR . \'/css/bootstrap.css\' );\n    // script loaded AFTER jquery >= 1.0.0\n    wp_enqueue_script( \'bootstrap.min.js\', \n        CHILD_DIR . \'/js/bootstrap.js\', \n        array(\'jquery\'), \n        \'1.0.0\', true );\n    // script depending on both jquery and bootstrap \n    wp_enqueue_script(\'myutils\', \n        CHILD_DIR. \'/js/myutils.js\', \n        array( \'jquery\', \'bootstrap.min.js\' ) );\n}\n\n// register the hook\nadd_action( \'wp_enqueue_scripts\', \'nameofchildtheme_enqueue\' );\n?></pre>\n<h2 id=\"add-a-loginlogout-menu-item\">add a login/logout menu item</h2>\nFor that, we can use the filter hook <code>wp_nav_menu_items</code>.\n\nOpen your theme <code>function.php</code> and copy-paste the following:\n<pre class=\"prettyprint lang-php\">add_filter( \'wp_nav_menu_items\',\'wpsites_loginout_menu_link\' );\n\nfunction wpsites_loginout_menu_link( $menu ) { \n    $loginout = wp_loginout($_SERVER[\'REQUEST_URI\'], false );\n    $menu .= \'\n\n	<li>\' . $loginout . \'</li>\n\n\';\n    return $menu;\n}\n</pre>\nNote that based on your theme, you need to customize the li classes. For twenty-thirteen for example, we would have:\n<pre class=\"prettyprint lang-php\">$loginout = \'\n\n	<li class=\"nav-menu\" class=\"menu-item\">\' . \n                wp_loginout($_SERVER[\'REQUEST_URI\'], false ) . \'</li>\n\n\';\n</pre>\n<h2 id=\"use-sshsftp-to-update-your-wordpress-apache2\">Use ssh/sftp to update your wordpress (apache2)</h2>\n<ol>\n	<li>Ensure that apache2 has the <tt>ssh</tt> extension installed and enabled. If not:\n<pre class=\"prettyprint lang-text\">apt-get install libssh2-php\necho extension=ssh2.so | sudo tee -a /etc/php5/apache2/php.ini\nservice apache2 restart\n</pre>\n</li>\n	<li>Create an ssh key for your wordpress user\n<pre class=\"prettyprint lang-text\">sudo mkdir /home/wp-user/.ssh\nsudo chown wp-user:wp-user /home/wp-user/.ssh/\n\nsu wp-user\nssh-keygen -t rsa -b 4096\n</pre>\n</li>\n	<li>Add the correct permissions\n<pre class=\"prettyprint lang-text\">sudo chmod 0700 /home/wp-user/.ssh/\nsudo chown wp-user:www-data /home/wp-user/id_rsa*\nsudo chmod 0640 /home/wp-user/id_rsa*\n</pre>\n</li>\n	<li>add your user to the authorized keys\n<pre class=\"prettyprint lang-text\">cat /home/wp-user/.ssh/wp_rsa.pub >> /home/wp-user/.ssh/authorized_keys\n</pre>\n</li>\n</ol>\nNow, if you try to update wordpress, you will get the possibility to use ssh2. Note that I could only achieve the update from localhost (<tt>host=localhost, user=wp-user, password=, paths=/home/wp-user/.ssh/id_rda*</tt>).\n<h3 id=\"automatize-the-process\">Automatize the process</h3>\n<pre class=\"prettyprint lang-php\">define(\'FTP_PUBKEY\',\'/home/wp-user/.ssh/id_rsa.pub\');\ndefine(\'FTP_PRIKEY\',\'/home/wp-user/.ssh/id_rsa\');\ndefine(\'FTP_USER\',\'wp-user\');\ndefine(\'FTP_PASS\',\'\');\ndefine(\'FTP_HOST\',\'localhost\');\n</pre>\n<h3 id=\"a-word-about-permissions\">A word about permissions</h3>\nNormally, the wordpress files should be owned by the ftp/ssh user. In our case, we should have created a new user (wp-user), and chowned all the site content to him. Note that there is a security breach if you use sudo while logged-in as your user !!\n<h3 id=\"some-sources\">some sources</h3>\nSSH2:\n<ul>\n	<li><a href=\"http://www.jonathan.vc/2009/02/09/wordpress-install-upgrade-ssh/\">http://www.jonathan.vc/2009/02/09/wordpress-install-upgrade-ssh/</a></li>\n	<li><a href=\"http://www.htpcbeginner.com/enable-wordpress-ssh-access/\">http://www.htpcbeginner.com/enable-wordpress-ssh-access/</a></li>\n	<li><a href=\"http://code.tutsplus.com/articles/quick-tip-upgrade-your-wordpress-site-via-ssh--wp-27691\">http://code.tutsplus.com/articles/quick-tip-upgrade-your-wordpress-site-via-ssh–wp-27691</a></li>\n	<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-secure-updates-and-installations-in-wordpress-on-ubuntu\">https://www.digitalocean.com/community/tutorials/how-to-configure-secure-updates-and-installations-in-wordpress-on-ubuntu</a></li>\n</ul>\npermissions:\n<ul>\n	<li><a href=\"http://codex.wordpress.org/Changing_File_Permissions\">http://codex.wordpress.org/Changing_File_Permissions</a></li>\n	<li><a href=\"http://codex.wordpress.org/Hardening_WordPress#File_Permissions\">http://codex.wordpress.org/Hardening_WordPress#File_Permissions</a></li>\n</ul>\n\n\n<h2>Backup/restore database</h2>\n\n<pre class=\"prettyprint lang-text\">\nmysqldump -u <user> -p <dbname> > dbname.sql # \n</pre>','Wordpress general tricks','','inherit','closed','open','','200-autosave-v1','','','2014-09-14 08:48:25','2014-09-14 08:48:25','',200,'http://localhost/html/200-autosave-v1/',0,'revision','',0),(204,3,'2013-12-27 18:07:24','2013-12-27 18:07:24','<h2>Use the dollar sign instead of \'jQuery\'</h2>\r\nTwo solutions.\r\n<ul>\r\n	<li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\r\n	<li>you need the $ sign somewhere else, like a named function</li>\r\n</ul>\r\nInside an anonymous function, you can simply pass the $ directly to the function:\r\n<pre class=\"prettyprint\">\r\n// pass the $ as an argument of the an. function\r\njQuery( document ).ready( function( $ ){\r\n		$(\'my-selector\').doStuff();\r\n	});\r\n});</pre>\r\nOtherwise, you can declare the $ variable and assign jQuery to it:\r\n<pre class=\"prettyprint\">\r\nfunction marvellousFunction(){\r\n    var $ = jQuery;\r\n// more code\r\n}</pre>\r\n\r\n<h2>Enqueue scripts and styles from a child theme</h2>\r\nSimply add the following in your <code>functions.php</code>:\r\n<pre class=\"prettyprint\">\r\n<?php\r\n	// CHILD_DIR = path the the child theme \r\n    define( \'CHILD_DIR\', get_stylesheet_directory_uri() );\r\n/**\r\n * Proper way to enqueue scripts and styles\r\n */\r\nfunction nameofchildtheme_enqueue() {\r\n    wp_enqueue_style( \'bootstrap.css\', CHILD_DIR . \'/css/bootstrap.css\' );\r\n	// script loaded AFTER jquery >= 1.0.0\r\n    wp_enqueue_script( \'bootstrap.min.js\', CHILD_DIR . \'/js/bootstrap.js\', array(\'jquery\'), \'1.0.0\', true );\r\n	// script depending on both jquery and bootstrap \r\n    wp_enqueue_script(\'myutils\', CHILD_DIR. \'/js/myutils.js\', array( \'jquery\', \'bootstrap.min.js\' ));\r\n}\r\n// register the hook\r\nadd_action( \'wp_enqueue_scripts\', \'nameofchildtheme_enqueue\' );\r\n?>\r\n\r\n</pre>','Wordpress general tricks','','inherit','closed','open','','200-revision-v1','','','2013-12-27 18:07:24','2013-12-27 18:07:24','',200,'http://localhost/html/200-revision-v1/',0,'revision','',0),(205,3,'2013-12-27 18:08:19','2013-12-27 18:08:19','<h2>Use the dollar sign instead of \'jQuery\'</h2>\r\nTwo solutions.\r\n<ul>\r\n	<li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\r\n	<li>you need the $ sign somewhere else, like a named function</li>\r\n</ul>\r\nInside an anonymous function, you can simply pass the $ directly to the function:\r\n<pre class=\"prettyprint\">\r\n// pass the $ as an argument of the an. function\r\njQuery( document ).ready( function( $ ){\r\n		$(\'my-selector\').doStuff();\r\n	});\r\n});</pre>\r\nOtherwise, you can declare the $ variable and assign jQuery to it:\r\n<pre class=\"prettyprint\">\r\nfunction marvellousFunction(){\r\n    var $ = jQuery;\r\n// more code\r\n}</pre>\r\n<h2>Enqueue scripts and styles from a child theme</h2>\r\nSimply add the following in your <code>functions.php</code>:\r\n<pre class=\"prettyprint\">\r\n<?php\r\n	// CHILD_DIR = path the the child theme \r\n    define( \'CHILD_DIR\', get_stylesheet_directory_uri() );\r\n/**\r\n * Proper way to enqueue scripts and styles\r\n */\r\nfunction nameofchildtheme_enqueue() {\r\n    wp_enqueue_style( \'bootstrap.css\', CHILD_DIR . \'/css/bootstrap.css\' );\r\n	// script loaded AFTER jquery >= 1.0.0\r\n    wp_enqueue_script( \'bootstrap.min.js\', CHILD_DIR . \'/js/bootstrap.js\', array(\'jquery\'), \'1.0.0\', true );\r\n	// script depending on both jquery and bootstrap \r\n    wp_enqueue_script(\'myutils\', CHILD_DIR. \'/js/myutils.js\', array( \'jquery\', \'bootstrap.min.js\' ));\r\n}\r\n// register the hook\r\nadd_action( \'wp_enqueue_scripts\', \'nameofchildtheme_enqueue\' );\r\n?></pre>','Wordpress general tricks','','inherit','closed','open','','200-revision-v1','','','2013-12-27 18:08:19','2013-12-27 18:08:19','',200,'http://localhost/html/200-revision-v1/',0,'revision','',0),(206,3,'2013-12-27 18:12:47','2013-12-27 18:12:47','<h2>Use the dollar sign instead of \'jQuery\'</h2>\r\nTwo solutions.\r\n<ul>\r\n	<li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\r\n	<li>you need the $ sign somewhere else, like a named function</li>\r\n</ul>\r\nInside an anonymous function, you can simply pass the $ directly to the function:\r\n<pre class=\"prettyprint\">\r\n// pass the $ as an argument of the an. function\r\njQuery( document ).ready( function( $ ){\r\n		$(\'my-selector\').doStuff();\r\n	});\r\n});</pre>\r\nOtherwise, you can declare the $ variable and assign jQuery to it:\r\n<pre class=\"prettyprint\">\r\nfunction marvellousFunction(){\r\n    var $ = jQuery;\r\n// more code\r\n}</pre>\r\n<h2>Enqueue scripts and styles from a child theme</h2>\r\nSimply add the following in your <code>functions.php</code>:\r\n<pre class=\"prettyprint\">\r\n<?php\r\n	// CHILD_DIR = path the the child theme \r\n    define( \'CHILD_DIR\', get_stylesheet_directory_uri() );\r\n/**\r\n * Proper way to enqueue scripts and styles\r\n */\r\nfunction nameofchildtheme_enqueue() {\r\n    // enqueue a stylesheet \r\n    wp_enqueue_style( \'bootstrap.css\', \r\n        CHILD_DIR . \'/css/bootstrap.css\' );\r\n    // script loaded AFTER jquery >= 1.0.0\r\n    wp_enqueue_script( \'bootstrap.min.js\', \r\n        CHILD_DIR . \'/js/bootstrap.js\', \r\n        array(\'jquery\'), \r\n        \'1.0.0\', true );\r\n    // script depending on both jquery and bootstrap \r\n    wp_enqueue_script(\'myutils\', \r\n        CHILD_DIR. \'/js/myutils.js\', \r\n        array( \'jquery\', \'bootstrap.min.js\' ) );\r\n}\r\n\r\n// register the hook\r\nadd_action( \'wp_enqueue_scripts\', \'nameofchildtheme_enqueue\' );\r\n?></pre>','Wordpress general tricks','','inherit','closed','open','','200-revision-v1','','','2013-12-27 18:12:47','2013-12-27 18:12:47','',200,'http://localhost/html/200-revision-v1/',0,'revision','',0),(207,3,'2013-12-27 18:13:29','2013-12-27 18:13:29','<h2>Use the dollar sign instead of \'jQuery\'</h2>\r\nTwo solutions.\r\n<ul>\r\n	<li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\r\n	<li>you need the $ sign somewhere else, like a named function</li>\r\n</ul>\r\nInside an anonymous function, you can simply pass the $ directly to the function:\r\n<pre class=\"prettyprint\">\r\n// pass the $ as an argument of the an. function\r\njQuery( document ).ready( function( $ ){\r\n		$(\'my-selector\').doStuff();\r\n	});\r\n});</pre>\r\nOtherwise, you can declare the $ variable and assign jQuery to it:\r\n<pre class=\"prettyprint\">\r\nfunction marvellousFunction(){\r\n    var $ = jQuery;\r\n// more code\r\n}</pre>\r\n<h2>Enqueue scripts and styles from a child theme</h2>\r\nSimply add the following in your <code>functions.php</code>:\r\n<pre class=\"prettyprint\">\r\n<?php\r\n	// CHILD_DIR = path the the child theme \r\n    define( \'CHILD_DIR\', get_stylesheet_directory_uri() );\r\n\r\nfunction nameofchildtheme_enqueue() {\r\n    // enqueue a stylesheet \r\n    wp_enqueue_style( \'bootstrap.css\', \r\n        CHILD_DIR . \'/css/bootstrap.css\' );\r\n    // script loaded AFTER jquery >= 1.0.0\r\n    wp_enqueue_script( \'bootstrap.min.js\', \r\n        CHILD_DIR . \'/js/bootstrap.js\', \r\n        array(\'jquery\'), \r\n        \'1.0.0\', true );\r\n    // script depending on both jquery and bootstrap \r\n    wp_enqueue_script(\'myutils\', \r\n        CHILD_DIR. \'/js/myutils.js\', \r\n        array( \'jquery\', \'bootstrap.min.js\' ) );\r\n}\r\n\r\n// register the hook\r\nadd_action( \'wp_enqueue_scripts\', \'nameofchildtheme_enqueue\' );\r\n?></pre>','Wordpress general tricks','','inherit','closed','open','','200-revision-v1','','','2013-12-27 18:13:29','2013-12-27 18:13:29','',200,'http://localhost/html/200-revision-v1/',0,'revision','',0),(208,3,'2013-12-27 20:32:21','2013-12-27 20:32:21','<h2>Prerequisites</h2>\r\nYou need the following scripts and css included/enqueued:\r\n<ul>\r\n	<li><code>bootstrap.css</code></li>\r\n	<li><code>bootstrap.[min].js</code>, including the affix and scrollspy plugins</li>\r\n	<li><code>jquery.[min].js</code></li>\r\n	<li><code>docs.css</code>: the css used in bootstrap\'s official site</li>\r\n</ul>\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning ! </strong> I implemented it on the twenty thirteen theme. Be sure to adapt the jquery selectors present in this post to yours.</div>\r\n<h2>ScrollSpy functionality</h2>\r\n<h5>The js</h5>\r\nFirst, you need the following html structure, or at lead one ul element:\r\n<pre class=\"prettyprint\">\r\n<div class=\" the-sidebar-container\">\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\r\n<ul class=\"nav bs-sidebar\"></ul>\r\n</div>\r\n</div></pre>\r\nWe\'ll use a script to dynamically create the list and initialise the scrollspy:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n\r\n    // if no sidebar div > ul, create one\r\n    if( $(\'#sidebar\').size() == 0 ){\r\n        $(\'article\').wrapAll(\r\n            \'\r\n<div class=\"row\">\r\n<div class=\"col-md-8\" role=\"main\">\' + \r\n            \'</div>\r\n</div>\r\n\');\r\n        $(\'div.row\').prepend(            \'\r\n<div class=\"col-md-2 the-sidebar-container\">\' +            \'\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\' +            \'\r\n<ul class=\"nav bs-sidebar\">\' +\r\n            \'</ul>\r\n</div>\r\n</div>\r\n\');\r\n    }else{ // else, start fresh\r\n        $(\'#sidebar > ul\').html(\"\");\r\n    }\r\n\r\n    $(\'article\').each(function(){\r\n        // grab the title of the article\r\n        str = $(this).find(\'h1:first\').text();\r\n        li = $(\'\r\n	<li><a href=\"#\' + $(this).attr(\'id\') + \'\">\' + str + \r\n            \'</a></li>\r\n\' );\r\n        ul = $(\'\r\n<ul class=\"nav\"></ul>\r\n\');\r\n        // each h2 becomes a second-level menu item\r\n        $( \"#\" + $(this).attr(\'id\') + \" h2\" ).each(function(){\r\n            str = $(this).text().toLowerCase().trim()\r\n            .replace(/ /g, \"-\").replace(/[^a-z]/gi, \"\");\r\n        $(this).attr(\'id\', str);\r\n        $(ul).append(\'\r\n	<li><a href=\"#\' + str + \'\">\'\r\n            + $(this).text() + \'</a></li>\r\n\' );\r\n        });\r\n        $(li).append(ul);\r\n        $(\'#sidebar > ul\').append(li);\r\n    });\r\n\r\n    // simply init the scrollspy on the body\r\n    // !! the body must have a position: relative attribute\r\n    $(\'body\').scrollspy({ \r\n        target: \'#sidebar\' \r\n    });\r\n    // the first link is selected by default\r\n    $(\'#sidebar li:first\').addClass(\"active\");\r\n}</pre>\r\nBe sure to have the body position set to relative.\r\n\r\nAlso, to allow the title to be at the top of the page (and not out of screen) when you click on an anchor link, here is a simple trick that works pretty well:\r\n<pre class=\"prettyprint\">\r\n/* \r\n   assuming that all the titles have the class anchored \r\n   you can of course replace the selector to whatever\r\n   you want\r\n*/\r\n.anchored:before {\r\n    content:\"\";\r\n    display:block;\r\n    height:50px;\r\n    margin:-30px 0 0;\r\n}</pre>\r\n<h2>Affix functionality</h2>\r\nThe initialisation:\r\n<pre class=\"prettyprint\">\r\nfunction init_affix(){\r\n\r\n    var $ = jQuery;\r\n\r\n    $(\'#sidebar\').affix({\r\n    offset: {\r\n        top: function () {\r\n            // the offset is relative to the document \r\n            return (this.top = $(\'article:first\').offset().top)\r\n        }, \r\n        bottom: function () {\r\n            // try to calculate dynamically the size of the footer\r\n            return (this.bottom = $(\'#colophon\').outerHeight(true) + \r\n                $(\'.navigation:last\').outerHeight(true) + 40 );\r\n        }\r\n    }\r\n    });\r\n}</pre>\r\nThe bugfix to do in the jquery, version line 1553, in the if (affix == \'bottom\') block:\r\n<pre class=\"prettyprint\">\r\n    if (affix == \'bottom\') {\r\n      // WRONG\r\n      this.$element.offset({ \r\n        top: document.body.offsetHeight // this one must be changed\r\n            - offsetBottom - this.$element.height() })\r\n      // RIGHT\r\n      this.$element.offset({ \r\n        top: scrollHeight // this one works\r\n            - offsetBottom - this.$element.height() })\r\n    }\r\n  }</pre>\r\nFinally, add the following css and you are done! Note that I changed the colors from the orginal one in the bootstrap\'s site.\r\n//TODO','Bootstrap sidebar in wordpress','','publish','closed','open','','bootstrap-sidebar-in-wordpress','','','2013-12-28 17:31:38','2013-12-28 17:31:38','',0,'http://localhost/html/?p=208',0,'post','',0),(209,3,'2013-12-27 20:28:46','2013-12-27 20:28:46','    <li><code>.[min].css</code></li>\r\n<h2>Prerequisites</h2>\r\nYou need the following scripts and css included/enqueued:\r\n<ul>\r\n    <li><code>bootstrap..css</code></li>\r\n    <li><code>bootstrap.[min].js</code>, including the affix and scrollspy plugins</li>\r\n    <li><code>jquery.[min].js</code></li>\r\n</ul>\r\n\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning ! </strong> I implemented it on the twenty thirteen theme. Be sure to adapt the jquery selectors present in this post to yours.\r\n</div>\r\n\r\n<h2>ScrollSpy functionality</h2>\r\n<h5>The js</h5>\r\nFirst, you need the following html structure, or at lead one ul element:\r\n<pre class=\"prettyprint\">\r\n<div class=\" the-sidebar-container\">\r\n    <div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\r\n        <ul class=\"nav bs-sidebar\">\r\n        </ul>\r\n    </div>\r\n</div>\r\n</pre>\r\n\r\nWe\'ll use a script to dynamically create the list and initialise the scrollspy:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n\r\n    // if no sidebar div > ul, create one\r\n    if( $(\'#sidebar\').size() == 0 ){\r\n        $(\'article\').wrapAll(\r\n            \'<div class=\"row\"><div class=\"col-md-8\" role=\"main\">\' + \r\n            \'</div></div>\');\r\n        $(\'div.row\').prepend(\r\n            \'<div class=\"col-md-2 the-sidebar-container\">\' + \r\n            \'<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\' + \r\n            \'<ul class=\"nav bs-sidebar\">\' +\r\n            \'</ul></div></div>\');\r\n    }else{ // else, start fresh\r\n        $(\'#sidebar > ul\').html(\"\");\r\n    }\r\n\r\n\r\n    $(\'article\').each(function(){\r\n        // grab the title of the article\r\n        str = $(this).find(\'h1:first\').text();\r\n        li = $(\'<li><a href=\"#\' + $(this).attr(\'id\') + \'\">\' + str + \r\n            \'</a></li>\' );\r\n        ul = $(\'<ul class=\"nav\"></ul>\');\r\n        // each h2 becomes a second-level menu item\r\n        $( \"#\" + $(this).attr(\'id\') + \" h2\" ).each(function(){\r\n            str = $(this).text().toLowerCase().trim()\r\n            .replace(/ /g, \"-\").replace(/[^a-z]/gi, \"\");\r\n        $(this).attr(\'id\', str);\r\n        $(ul).append(\'<li><a href=\"#\' + str + \'\">\'\r\n            + $(this).text() + \'</a></li>\' );\r\n        });\r\n        $(li).append(ul);\r\n        $(\'#sidebar > ul\').append(li);\r\n    });\r\n\r\n\r\n    // simply init the scrollspy on the body\r\n    // !! the body must have a position: relative attribute\r\n    $(\'body\').scrollspy({ \r\n        target: \'#sidebar\' \r\n    });\r\n    // the first link is selected by default\r\n    $(\'#sidebar li:first\').addClass(\"active\");\r\n}\r\n</pre>\r\n\r\nBe sure to have the body position set to relative.\r\n\r\n<h2>Affix</h2>\r\nThe initialisation:\r\n<pre class=\"prettyprint\">\r\nfunction init_affix(){\r\n\r\n    var $ = jQuery;\r\n\r\n    $(\'#sidebar\').affix({\r\n        offset: {\r\n            top: function () {\r\n                // the offset is relative to the document \r\n                return (this.top = $(\'article:first\').offset().top)\r\n            }, \r\n            bottom: function () {\r\n                // try to calculate dynamically the size of the footer\r\n                return (this.bottom = $(\'#colophon\').outerHeight(true) + \r\n                    $(\'.navigation:last\').outerHeight(true) + 40 );\r\n            }\r\n        }\r\n    });\r\n}\r\n</pre>\r\n\r\nThe bugfix to do in the jquery, version line 1553, in the if (affix == \'bottom\') block:\r\n<pre class=\"prettyprint\">\r\n    if (affix == \'bottom\') {\r\n      // WRONG\r\n      this.$element.offset({ \r\n        top: document.body.offsetHeight // this one must be changed\r\n            - offsetBottom - this.$element.height() })\r\n      // RIGHT\r\n      this.$element.offset({ \r\n        top: scrollHeight // this one works\r\n            - offsetBottom - this.$element.height() })\r\n    }\r\n  }\r\n</pre>\r\n\r\nFinally, add the following css and you are done! Note that I changed the colors from the orginal one in the bootstrap\'s site.\r\n//TODO\r\n','bootstrap sidebar in wordpress','','inherit','closed','open','','208-revision-v1','','','2013-12-27 20:28:46','2013-12-27 20:28:46','',208,'http://localhost/html/208-revision-v1/',0,'revision','',0),(210,3,'2013-12-27 20:29:03','2013-12-27 20:29:03','<h2>Prerequisites</h2>\r\nYou need the following scripts and css included/enqueued:\r\n<ul>\r\n    <li><code>bootstrap..css</code></li>\r\n    <li><code>bootstrap.[min].js</code>, including the affix and scrollspy plugins</li>\r\n    <li><code>jquery.[min].js</code></li>\r\n</ul>\r\n\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning ! </strong> I implemented it on the twenty thirteen theme. Be sure to adapt the jquery selectors present in this post to yours.\r\n</div>\r\n\r\n<h2>ScrollSpy functionality</h2>\r\n<h5>The js</h5>\r\nFirst, you need the following html structure, or at lead one ul element:\r\n<pre class=\"prettyprint\">\r\n<div class=\" the-sidebar-container\">\r\n    <div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\r\n        <ul class=\"nav bs-sidebar\">\r\n        </ul>\r\n    </div>\r\n</div>\r\n</pre>\r\n\r\nWe\'ll use a script to dynamically create the list and initialise the scrollspy:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n\r\n    // if no sidebar div > ul, create one\r\n    if( $(\'#sidebar\').size() == 0 ){\r\n        $(\'article\').wrapAll(\r\n            \'<div class=\"row\"><div class=\"col-md-8\" role=\"main\">\' + \r\n            \'</div></div>\');\r\n        $(\'div.row\').prepend(\r\n            \'<div class=\"col-md-2 the-sidebar-container\">\' + \r\n            \'<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\' + \r\n            \'<ul class=\"nav bs-sidebar\">\' +\r\n            \'</ul></div></div>\');\r\n    }else{ // else, start fresh\r\n        $(\'#sidebar > ul\').html(\"\");\r\n    }\r\n\r\n\r\n    $(\'article\').each(function(){\r\n        // grab the title of the article\r\n        str = $(this).find(\'h1:first\').text();\r\n        li = $(\'<li><a href=\"#\' + $(this).attr(\'id\') + \'\">\' + str + \r\n            \'</a></li>\' );\r\n        ul = $(\'<ul class=\"nav\"></ul>\');\r\n        // each h2 becomes a second-level menu item\r\n        $( \"#\" + $(this).attr(\'id\') + \" h2\" ).each(function(){\r\n            str = $(this).text().toLowerCase().trim()\r\n            .replace(/ /g, \"-\").replace(/[^a-z]/gi, \"\");\r\n        $(this).attr(\'id\', str);\r\n        $(ul).append(\'<li><a href=\"#\' + str + \'\">\'\r\n            + $(this).text() + \'</a></li>\' );\r\n        });\r\n        $(li).append(ul);\r\n        $(\'#sidebar > ul\').append(li);\r\n    });\r\n\r\n\r\n    // simply init the scrollspy on the body\r\n    // !! the body must have a position: relative attribute\r\n    $(\'body\').scrollspy({ \r\n        target: \'#sidebar\' \r\n    });\r\n    // the first link is selected by default\r\n    $(\'#sidebar li:first\').addClass(\"active\");\r\n}\r\n</pre>\r\n\r\nBe sure to have the body position set to relative.\r\n\r\n<h2>Affix</h2>\r\nThe initialisation:\r\n<pre class=\"prettyprint\">\r\nfunction init_affix(){\r\n\r\n    var $ = jQuery;\r\n\r\n    $(\'#sidebar\').affix({\r\n        offset: {\r\n            top: function () {\r\n                // the offset is relative to the document \r\n                return (this.top = $(\'article:first\').offset().top)\r\n            }, \r\n            bottom: function () {\r\n                // try to calculate dynamically the size of the footer\r\n                return (this.bottom = $(\'#colophon\').outerHeight(true) + \r\n                    $(\'.navigation:last\').outerHeight(true) + 40 );\r\n            }\r\n        }\r\n    });\r\n}\r\n</pre>\r\n\r\nThe bugfix to do in the jquery, version line 1553, in the if (affix == \'bottom\') block:\r\n<pre class=\"prettyprint\">\r\n    if (affix == \'bottom\') {\r\n      // WRONG\r\n      this.$element.offset({ \r\n        top: document.body.offsetHeight // this one must be changed\r\n            - offsetBottom - this.$element.height() })\r\n      // RIGHT\r\n      this.$element.offset({ \r\n        top: scrollHeight // this one works\r\n            - offsetBottom - this.$element.height() })\r\n    }\r\n  }\r\n</pre>\r\n\r\nFinally, add the following css and you are done! Note that I changed the colors from the orginal one in the bootstrap\'s site.\r\n//TODO\r\n','bootstrap sidebar in wordpress','','inherit','closed','open','','208-revision-v1','','','2013-12-27 20:29:03','2013-12-27 20:29:03','',208,'http://localhost/html/208-revision-v1/',0,'revision','',0),(211,3,'2013-12-27 20:31:05','2013-12-27 20:31:05','<h2>Prerequisites</h2>\r\nYou need the following scripts and css included/enqueued:\r\n<ul>\r\n    <li><code>bootstrap..css</code></li>\r\n    <li><code>bootstrap.[min].js</code>, including the affix and scrollspy plugins</li>\r\n    <li><code>jquery.[min].js</code></li>\r\n</ul>\r\n\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning ! </strong> I implemented it on the twenty thirteen theme. Be sure to adapt the jquery selectors present in this post to yours.\r\n</div>\r\n\r\n<h2>ScrollSpy functionality</h2>\r\n<h5>The js</h5>\r\nFirst, you need the following html structure, or at lead one ul element:\r\n<pre class=\"prettyprint\">\r\n<div class=\" the-sidebar-container\">\r\n    <div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\r\n        <ul class=\"nav bs-sidebar\">\r\n        </ul>\r\n    </div>\r\n</div>\r\n</pre>\r\n\r\nWe\'ll use a script to dynamically create the list and initialise the scrollspy:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n\r\n    // if no sidebar div > ul, create one\r\n    if( $(\'#sidebar\').size() == 0 ){\r\n        $(\'article\').wrapAll(\r\n            \'<div class=\"row\"><div class=\"col-md-8\" role=\"main\">\' + \r\n            \'</div></div>\');\r\n        $(\'div.row\').prepend(\r\n            \'<div class=\"col-md-2 the-sidebar-container\">\' + \r\n            \'<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\' + \r\n            \'<ul class=\"nav bs-sidebar\">\' +\r\n            \'</ul></div></div>\');\r\n    }else{ // else, start fresh\r\n        $(\'#sidebar > ul\').html(\"\");\r\n    }\r\n\r\n\r\n    $(\'article\').each(function(){\r\n        // grab the title of the article\r\n        str = $(this).find(\'h1:first\').text();\r\n        li = $(\'<li><a href=\"#\' + $(this).attr(\'id\') + \'\">\' + str + \r\n            \'</a></li>\' );\r\n        ul = $(\'<ul class=\"nav\"></ul>\');\r\n        // each h2 becomes a second-level menu item\r\n        $( \"#\" + $(this).attr(\'id\') + \" h2\" ).each(function(){\r\n            str = $(this).text().toLowerCase().trim()\r\n            .replace(/ /g, \"-\").replace(/[^a-z]/gi, \"\");\r\n        $(this).attr(\'id\', str);\r\n        $(ul).append(\'<li><a href=\"#\' + str + \'\">\'\r\n            + $(this).text() + \'</a></li>\' );\r\n        });\r\n        $(li).append(ul);\r\n        $(\'#sidebar > ul\').append(li);\r\n    });\r\n\r\n\r\n    // simply init the scrollspy on the body\r\n    // !! the body must have a position: relative attribute\r\n    $(\'body\').scrollspy({ \r\n        target: \'#sidebar\' \r\n    });\r\n    // the first link is selected by default\r\n    $(\'#sidebar li:first\').addClass(\"active\");\r\n}\r\n</pre>\r\n\r\nBe sure to have the body position set to relative.\r\n\r\n<h2>Affix functionality</h2>\r\nThe initialisation:\r\n<pre class=\"prettyprint\">\r\nfunction init_affix(){\r\n\r\n    var $ = jQuery;\r\n\r\n    $(\'#sidebar\').affix({\r\n    offset: {\r\n        top: function () {\r\n            // the offset is relative to the document \r\n            return (this.top = $(\'article:first\').offset().top)\r\n        }, \r\n        bottom: function () {\r\n            // try to calculate dynamically the size of the footer\r\n            return (this.bottom = $(\'#colophon\').outerHeight(true) + \r\n                $(\'.navigation:last\').outerHeight(true) + 40 );\r\n        }\r\n    }\r\n    });\r\n}\r\n</pre>\r\n\r\nThe bugfix to do in the jquery, version line 1553, in the if (affix == \'bottom\') block:\r\n<pre class=\"prettyprint\">\r\n    if (affix == \'bottom\') {\r\n      // WRONG\r\n      this.$element.offset({ \r\n        top: document.body.offsetHeight // this one must be changed\r\n            - offsetBottom - this.$element.height() })\r\n      // RIGHT\r\n      this.$element.offset({ \r\n        top: scrollHeight // this one works\r\n            - offsetBottom - this.$element.height() })\r\n    }\r\n  }\r\n</pre>\r\n\r\nFinally, add the following css and you are done! Note that I changed the colors from the orginal one in the bootstrap\'s site.\r\n//TODO\r\n','bootstrap sidebar in wordpress','','inherit','closed','open','','208-revision-v1','','','2013-12-27 20:31:05','2013-12-27 20:31:05','',208,'http://localhost/html/208-revision-v1/',0,'revision','',0),(212,3,'2013-12-27 20:32:21','2013-12-27 20:32:21','<h2>Prerequisites</h2>\r\nYou need the following scripts and css included/enqueued:\r\n<ul>\r\n    <li><code>bootstrap.css</code></li>\r\n    <li><code>bootstrap.[min].js</code>, including the affix and scrollspy plugins</li>\r\n    <li><code>jquery.[min].js</code></li>\r\n    <li><code>docs.css</code>: the css used in bootstrap\'s official site</li>\r\n</ul>\r\n\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning ! </strong> I implemented it on the twenty thirteen theme. Be sure to adapt the jquery selectors present in this post to yours.\r\n</div>\r\n\r\n<h2>ScrollSpy functionality</h2>\r\n<h5>The js</h5>\r\nFirst, you need the following html structure, or at lead one ul element:\r\n<pre class=\"prettyprint\">\r\n<div class=\" the-sidebar-container\">\r\n    <div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\r\n        <ul class=\"nav bs-sidebar\">\r\n        </ul>\r\n    </div>\r\n</div>\r\n</pre>\r\n\r\nWe\'ll use a script to dynamically create the list and initialise the scrollspy:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n\r\n    // if no sidebar div > ul, create one\r\n    if( $(\'#sidebar\').size() == 0 ){\r\n        $(\'article\').wrapAll(\r\n            \'<div class=\"row\"><div class=\"col-md-8\" role=\"main\">\' + \r\n            \'</div></div>\');\r\n        $(\'div.row\').prepend(\r\n            \'<div class=\"col-md-2 the-sidebar-container\">\' + \r\n            \'<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\' + \r\n            \'<ul class=\"nav bs-sidebar\">\' +\r\n            \'</ul></div></div>\');\r\n    }else{ // else, start fresh\r\n        $(\'#sidebar > ul\').html(\"\");\r\n    }\r\n\r\n\r\n    $(\'article\').each(function(){\r\n        // grab the title of the article\r\n        str = $(this).find(\'h1:first\').text();\r\n        li = $(\'<li><a href=\"#\' + $(this).attr(\'id\') + \'\">\' + str + \r\n            \'</a></li>\' );\r\n        ul = $(\'<ul class=\"nav\"></ul>\');\r\n        // each h2 becomes a second-level menu item\r\n        $( \"#\" + $(this).attr(\'id\') + \" h2\" ).each(function(){\r\n            str = $(this).text().toLowerCase().trim()\r\n            .replace(/ /g, \"-\").replace(/[^a-z]/gi, \"\");\r\n        $(this).attr(\'id\', str);\r\n        $(ul).append(\'<li><a href=\"#\' + str + \'\">\'\r\n            + $(this).text() + \'</a></li>\' );\r\n        });\r\n        $(li).append(ul);\r\n        $(\'#sidebar > ul\').append(li);\r\n    });\r\n\r\n\r\n    // simply init the scrollspy on the body\r\n    // !! the body must have a position: relative attribute\r\n    $(\'body\').scrollspy({ \r\n        target: \'#sidebar\' \r\n    });\r\n    // the first link is selected by default\r\n    $(\'#sidebar li:first\').addClass(\"active\");\r\n}\r\n</pre>\r\n\r\nBe sure to have the body position set to relative.\r\n\r\n<h2>Affix functionality</h2>\r\nThe initialisation:\r\n<pre class=\"prettyprint\">\r\nfunction init_affix(){\r\n\r\n    var $ = jQuery;\r\n\r\n    $(\'#sidebar\').affix({\r\n    offset: {\r\n        top: function () {\r\n            // the offset is relative to the document \r\n            return (this.top = $(\'article:first\').offset().top)\r\n        }, \r\n        bottom: function () {\r\n            // try to calculate dynamically the size of the footer\r\n            return (this.bottom = $(\'#colophon\').outerHeight(true) + \r\n                $(\'.navigation:last\').outerHeight(true) + 40 );\r\n        }\r\n    }\r\n    });\r\n}\r\n</pre>\r\n\r\nThe bugfix to do in the jquery, version line 1553, in the if (affix == \'bottom\') block:\r\n<pre class=\"prettyprint\">\r\n    if (affix == \'bottom\') {\r\n      // WRONG\r\n      this.$element.offset({ \r\n        top: document.body.offsetHeight // this one must be changed\r\n            - offsetBottom - this.$element.height() })\r\n      // RIGHT\r\n      this.$element.offset({ \r\n        top: scrollHeight // this one works\r\n            - offsetBottom - this.$element.height() })\r\n    }\r\n  }\r\n</pre>\r\n\r\nFinally, add the following css and you are done! Note that I changed the colors from the orginal one in the bootstrap\'s site.\r\n//TODO\r\n','bootstrap sidebar in wordpress','','inherit','closed','open','','208-revision-v1','','','2013-12-27 20:32:21','2013-12-27 20:32:21','',208,'http://localhost/html/208-revision-v1/',0,'revision','',0),(213,3,'2013-12-28 13:57:42','2013-12-28 13:57:42','<h2>Prerequisites</h2>\r\nYou need the following scripts and css included/enqueued:\r\n<ul>\r\n	<li><code>bootstrap.css</code></li>\r\n	<li><code>bootstrap.[min].js</code>, including the affix and scrollspy plugins</li>\r\n	<li><code>jquery.[min].js</code></li>\r\n	<li><code>docs.css</code>: the css used in bootstrap\'s official site</li>\r\n</ul>\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning ! </strong> I implemented it on the twenty thirteen theme. Be sure to adapt the jquery selectors present in this post to yours.</div>\r\n<h2>ScrollSpy functionality</h2>\r\n<h5>The js</h5>\r\nFirst, you need the following html structure, or at lead one ul element:\r\n<pre class=\"prettyprint\">\r\n<div class=\" the-sidebar-container\">\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\r\n<ul class=\"nav bs-sidebar\"></ul>\r\n</div>\r\n</div></pre>\r\nWe\'ll use a script to dynamically create the list and initialise the scrollspy:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n\r\n    // if no sidebar div > ul, create one\r\n    if( $(\'#sidebar\').size() == 0 ){\r\n        $(\'article\').wrapAll(\r\n            \'\r\n<div class=\"row\">\r\n<div class=\"col-md-8\" role=\"main\">\' + \r\n            \'</div>\r\n</div>\r\n\');\r\n        $(\'div.row\').prepend(\r\n            \'\r\n<div class=\"col-md-2 the-sidebar-container\">\' + \r\n            \'\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\' + \r\n            \'\r\n<ul class=\"nav bs-sidebar\">\' +\r\n            \'</ul>\r\n</div>\r\n</div>\r\n\');\r\n    }else{ // else, start fresh\r\n        $(\'#sidebar > ul\').html(\"\");\r\n    }\r\n\r\n    $(\'article\').each(function(){\r\n        // grab the title of the article\r\n        str = $(this).find(\'h1:first\').text();\r\n        li = $(\'\r\n	<li><a href=\"#\' + $(this).attr(\'id\') + \'\">\' + str + \r\n            \'</a></li>\r\n\' );\r\n        ul = $(\'\r\n<ul class=\"nav\"></ul>\r\n\');\r\n        // each h2 becomes a second-level menu item\r\n        $( \"#\" + $(this).attr(\'id\') + \" h2\" ).each(function(){\r\n            str = $(this).text().toLowerCase().trim()\r\n            .replace(/ /g, \"-\").replace(/[^a-z]/gi, \"\");\r\n        $(this).attr(\'id\', str);\r\n        $(ul).append(\'\r\n	<li><a href=\"#\' + str + \'\">\'\r\n            + $(this).text() + \'</a></li>\r\n\' );\r\n        });\r\n        $(li).append(ul);\r\n        $(\'#sidebar > ul\').append(li);\r\n    });\r\n\r\n    // simply init the scrollspy on the body\r\n    // !! the body must have a position: relative attribute\r\n    $(\'body\').scrollspy({ \r\n        target: \'#sidebar\' \r\n    });\r\n    // the first link is selected by default\r\n    $(\'#sidebar li:first\').addClass(\"active\");\r\n}</pre>\r\nBe sure to have the body position set to relative.\r\n\r\nAlso, to allow the title to be at the top of the page (and not out of screen) when you click on an anchor link, here is a simple trick that works pretty well:\r\n<pre class=\"prettyprint\">\r\n/* assuming that all the titles have the class anchored \r\n   you can of course replace the selector to whatever\r\n   you want\r\n*/\r\n.anchored:before {\r\n    content:\"\";\r\n    display:block;\r\n    height:50px;\r\n    margin:-30px 0 0;\r\n}\r\n</pre>\r\n\r\n<h2>Affix functionality</h2>\r\nThe initialisation:\r\n<pre class=\"prettyprint\">\r\nfunction init_affix(){\r\n\r\n    var $ = jQuery;\r\n\r\n    $(\'#sidebar\').affix({\r\n    offset: {\r\n        top: function () {\r\n            // the offset is relative to the document \r\n            return (this.top = $(\'article:first\').offset().top)\r\n        }, \r\n        bottom: function () {\r\n            // try to calculate dynamically the size of the footer\r\n            return (this.bottom = $(\'#colophon\').outerHeight(true) + \r\n                $(\'.navigation:last\').outerHeight(true) + 40 );\r\n        }\r\n    }\r\n    });\r\n}</pre>\r\nThe bugfix to do in the jquery, version line 1553, in the if (affix == \'bottom\') block:\r\n<pre class=\"prettyprint\">\r\n    if (affix == \'bottom\') {\r\n      // WRONG\r\n      this.$element.offset({ \r\n        top: document.body.offsetHeight // this one must be changed\r\n            - offsetBottom - this.$element.height() })\r\n      // RIGHT\r\n      this.$element.offset({ \r\n        top: scrollHeight // this one works\r\n            - offsetBottom - this.$element.height() })\r\n    }\r\n  }</pre>\r\nFinally, add the following css and you are done! Note that I changed the colors from the orginal one in the bootstrap\'s site.\r\n//TODO','bootstrap sidebar in wordpress','','inherit','closed','open','','208-autosave-v1','','','2013-12-28 13:57:42','2013-12-28 13:57:42','',208,'http://localhost/html/208-autosave-v1/',0,'revision','',0),(214,3,'2013-12-27 20:58:28','2013-12-27 20:58:28','<div id=\"gpg-post\"></div>\r\n<script type=\"text/javascript\">\r\n	//<--\r\n	//include_post_file(\"/mywiki/wp-content/themes/twentythirteen-child/post-files/gpg-blog-post.html\", \"#gpg-post\");\r\n	//-->\r\n</script>\r\n\r\n[display_file path=/wp-content/themes/twentythirteen-child/post-files/gpg-blog-post.html]','GPG keypairs','','inherit','closed','open','','136-autosave-v1','','','2013-12-27 20:58:28','2013-12-27 20:58:28','',136,'http://localhost/html/136-autosave-v1/',0,'revision','',0),(215,3,'2013-12-27 21:03:01','2013-12-27 21:03:01','[display_file path=/wp-content/themes/twentythirteen-child/post-files/gpg-blog-post.html]','GPG keypairs','','inherit','closed','open','','136-revision-v1','','','2013-12-27 21:03:01','2013-12-27 21:03:01','',136,'http://localhost/html/136-revision-v1/',0,'revision','',0),(216,3,'2013-12-27 21:03:33','2013-12-27 21:03:33','[display_file path=/wp-content/themes/twentythirteen-child/post-files/dns-dhcp.html]','Local DHCP - DNS with bind9 ','','inherit','closed','open','','179-revision-v1','','','2013-12-27 21:03:33','2013-12-27 21:03:33','',179,'http://localhost/html/179-revision-v1/',0,'revision','',0),(217,3,'2013-12-28 13:51:38','2013-12-28 13:51:38','[display_file path=/wp-content/themes/twentythirteen-child/post-files/gopenvpn.html]','OpenVPN','','inherit','closed','open','','191-revision-v1','','','2013-12-28 13:51:38','2013-12-28 13:51:38','',191,'http://localhost/html/191-revision-v1/',0,'revision','',0),(218,3,'2013-12-28 13:51:59','2013-12-28 13:51:59','[display_file path=/wp-content/themes/twentythirteen-child/post-files/openvpn.html]','OpenVPN','','inherit','closed','open','','191-autosave-v1','','','2013-12-28 13:51:59','2013-12-28 13:51:59','',191,'http://localhost/html/191-autosave-v1/',0,'revision','',0),(219,3,'2013-12-28 13:52:02','2013-12-28 13:52:02','[display_file path=/wp-content/themes/twentythirteen-child/post-files/openvpn.html]','OpenVPN','','inherit','closed','open','','191-revision-v1','','','2013-12-28 13:52:02','2013-12-28 13:52:02','',191,'http://localhost/html/191-revision-v1/',0,'revision','',0),(220,3,'2013-12-28 13:57:51','2013-12-28 13:57:51','<h2>Prerequisites</h2>\r\nYou need the following scripts and css included/enqueued:\r\n<ul>\r\n	<li><code>bootstrap.css</code></li>\r\n	<li><code>bootstrap.[min].js</code>, including the affix and scrollspy plugins</li>\r\n	<li><code>jquery.[min].js</code></li>\r\n	<li><code>docs.css</code>: the css used in bootstrap\'s official site</li>\r\n</ul>\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning ! </strong> I implemented it on the twenty thirteen theme. Be sure to adapt the jquery selectors present in this post to yours.</div>\r\n<h2>ScrollSpy functionality</h2>\r\n<h5>The js</h5>\r\nFirst, you need the following html structure, or at lead one ul element:\r\n<pre class=\"prettyprint\">\r\n<div class=\" the-sidebar-container\">\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\r\n<ul class=\"nav bs-sidebar\"></ul>\r\n</div>\r\n</div></pre>\r\nWe\'ll use a script to dynamically create the list and initialise the scrollspy:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n\r\n    // if no sidebar div > ul, create one\r\n    if( $(\'#sidebar\').size() == 0 ){\r\n        $(\'article\').wrapAll(\r\n            \'\r\n<div class=\"row\">\r\n<div class=\"col-md-8\" role=\"main\">\' + \r\n            \'</div>\r\n</div>\r\n\');\r\n        $(\'div.row\').prepend(\r\n            \'\r\n<div class=\"col-md-2 the-sidebar-container\">\' + \r\n            \'\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\' + \r\n            \'\r\n<ul class=\"nav bs-sidebar\">\' +\r\n            \'</ul>\r\n</div>\r\n</div>\r\n\');\r\n    }else{ // else, start fresh\r\n        $(\'#sidebar > ul\').html(\"\");\r\n    }\r\n\r\n    $(\'article\').each(function(){\r\n        // grab the title of the article\r\n        str = $(this).find(\'h1:first\').text();\r\n        li = $(\'\r\n	<li><a href=\"#\' + $(this).attr(\'id\') + \'\">\' + str + \r\n            \'</a></li>\r\n\' );\r\n        ul = $(\'\r\n<ul class=\"nav\"></ul>\r\n\');\r\n        // each h2 becomes a second-level menu item\r\n        $( \"#\" + $(this).attr(\'id\') + \" h2\" ).each(function(){\r\n            str = $(this).text().toLowerCase().trim()\r\n            .replace(/ /g, \"-\").replace(/[^a-z]/gi, \"\");\r\n        $(this).attr(\'id\', str);\r\n        $(ul).append(\'\r\n	<li><a href=\"#\' + str + \'\">\'\r\n            + $(this).text() + \'</a></li>\r\n\' );\r\n        });\r\n        $(li).append(ul);\r\n        $(\'#sidebar > ul\').append(li);\r\n    });\r\n\r\n    // simply init the scrollspy on the body\r\n    // !! the body must have a position: relative attribute\r\n    $(\'body\').scrollspy({ \r\n        target: \'#sidebar\' \r\n    });\r\n    // the first link is selected by default\r\n    $(\'#sidebar li:first\').addClass(\"active\");\r\n}</pre>\r\nBe sure to have the body position set to relative.\r\n\r\nAlso, to allow the title to be at the top of the page (and not out of screen) when you click on an anchor link, here is a simple trick that works pretty well:\r\n<pre class=\"prettyprint\">\r\n/* \r\n   assuming that all the titles have the class anchored \r\n   you can of course replace the selector to whatever\r\n   you want\r\n*/\r\n.anchored:before {\r\n    content:\"\";\r\n    display:block;\r\n    height:50px;\r\n    margin:-30px 0 0;\r\n}\r\n</pre>\r\n\r\n<h2>Affix functionality</h2>\r\nThe initialisation:\r\n<pre class=\"prettyprint\">\r\nfunction init_affix(){\r\n\r\n    var $ = jQuery;\r\n\r\n    $(\'#sidebar\').affix({\r\n    offset: {\r\n        top: function () {\r\n            // the offset is relative to the document \r\n            return (this.top = $(\'article:first\').offset().top)\r\n        }, \r\n        bottom: function () {\r\n            // try to calculate dynamically the size of the footer\r\n            return (this.bottom = $(\'#colophon\').outerHeight(true) + \r\n                $(\'.navigation:last\').outerHeight(true) + 40 );\r\n        }\r\n    }\r\n    });\r\n}</pre>\r\nThe bugfix to do in the jquery, version line 1553, in the if (affix == \'bottom\') block:\r\n<pre class=\"prettyprint\">\r\n    if (affix == \'bottom\') {\r\n      // WRONG\r\n      this.$element.offset({ \r\n        top: document.body.offsetHeight // this one must be changed\r\n            - offsetBottom - this.$element.height() })\r\n      // RIGHT\r\n      this.$element.offset({ \r\n        top: scrollHeight // this one works\r\n            - offsetBottom - this.$element.height() })\r\n    }\r\n  }</pre>\r\nFinally, add the following css and you are done! Note that I changed the colors from the orginal one in the bootstrap\'s site.\r\n//TODO','bootstrap sidebar in wordpress','','inherit','closed','open','','208-revision-v1','','','2013-12-28 13:57:51','2013-12-28 13:57:51','',208,'http://localhost/html/208-revision-v1/',0,'revision','',0),(221,3,'2013-12-28 13:58:43','2013-12-28 13:58:43','<h2>Prerequisites</h2>\r\nYou need the following scripts and css included/enqueued:\r\n<ul>\r\n	<li><code>bootstrap.css</code></li>\r\n	<li><code>bootstrap.[min].js</code>, including the affix and scrollspy plugins</li>\r\n	<li><code>jquery.[min].js</code></li>\r\n	<li><code>docs.css</code>: the css used in bootstrap\'s official site</li>\r\n</ul>\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning ! </strong> I implemented it on the twenty thirteen theme. Be sure to adapt the jquery selectors present in this post to yours.</div>\r\n<h2>ScrollSpy functionality</h2>\r\n<h5>The js</h5>\r\nFirst, you need the following html structure, or at lead one ul element:\r\n<pre class=\"prettyprint\">\r\n<div class=\" the-sidebar-container\">\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\r\n<ul class=\"nav bs-sidebar\"></ul>\r\n</div>\r\n</div></pre>\r\nWe\'ll use a script to dynamically create the list and initialise the scrollspy:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n\r\n    // if no sidebar div > ul, create one\r\n    if( $(\'#sidebar\').size() == 0 ){\r\n        $(\'article\').wrapAll(\r\n            \'\r\n<div class=\"row\">\r\n<div class=\"col-md-8\" role=\"main\">\' + \r\n            \'</div>\r\n</div>\r\n\');\r\n        $(\'div.row\').prepend(            \'\r\n           <div class=\"col-md-2 the-sidebar-container\">\' +            \'\r\n           <div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\' +            \'\r\n           <ul class=\"nav bs-sidebar\">\' +\r\n            \'</ul></div></div>\');\r\n    }else{ // else, start fresh\r\n        $(\'#sidebar > ul\').html(\"\");\r\n    }\r\n\r\n    $(\'article\').each(function(){\r\n        // grab the title of the article\r\n        str = $(this).find(\'h1:first\').text();\r\n        li = $(\'\r\n	<li><a href=\"#\' + $(this).attr(\'id\') + \'\">\' + str + \r\n            \'</a></li>\r\n\' );\r\n        ul = $(\'\r\n<ul class=\"nav\"></ul>\r\n\');\r\n        // each h2 becomes a second-level menu item\r\n        $( \"#\" + $(this).attr(\'id\') + \" h2\" ).each(function(){\r\n            str = $(this).text().toLowerCase().trim()\r\n            .replace(/ /g, \"-\").replace(/[^a-z]/gi, \"\");\r\n        $(this).attr(\'id\', str);\r\n        $(ul).append(\'\r\n	<li><a href=\"#\' + str + \'\">\'\r\n            + $(this).text() + \'</a></li>\r\n\' );\r\n        });\r\n        $(li).append(ul);\r\n        $(\'#sidebar > ul\').append(li);\r\n    });\r\n\r\n    // simply init the scrollspy on the body\r\n    // !! the body must have a position: relative attribute\r\n    $(\'body\').scrollspy({ \r\n        target: \'#sidebar\' \r\n    });\r\n    // the first link is selected by default\r\n    $(\'#sidebar li:first\').addClass(\"active\");\r\n}</pre>\r\nBe sure to have the body position set to relative.\r\n\r\nAlso, to allow the title to be at the top of the page (and not out of screen) when you click on an anchor link, here is a simple trick that works pretty well:\r\n<pre class=\"prettyprint\">\r\n/* \r\n   assuming that all the titles have the class anchored \r\n   you can of course replace the selector to whatever\r\n   you want\r\n*/\r\n.anchored:before {\r\n    content:\"\";\r\n    display:block;\r\n    height:50px;\r\n    margin:-30px 0 0;\r\n}</pre>\r\n<h2>Affix functionality</h2>\r\nThe initialisation:\r\n<pre class=\"prettyprint\">\r\nfunction init_affix(){\r\n\r\n    var $ = jQuery;\r\n\r\n    $(\'#sidebar\').affix({\r\n    offset: {\r\n        top: function () {\r\n            // the offset is relative to the document \r\n            return (this.top = $(\'article:first\').offset().top)\r\n        }, \r\n        bottom: function () {\r\n            // try to calculate dynamically the size of the footer\r\n            return (this.bottom = $(\'#colophon\').outerHeight(true) + \r\n                $(\'.navigation:last\').outerHeight(true) + 40 );\r\n        }\r\n    }\r\n    });\r\n}</pre>\r\nThe bugfix to do in the jquery, version line 1553, in the if (affix == \'bottom\') block:\r\n<pre class=\"prettyprint\">\r\n    if (affix == \'bottom\') {\r\n      // WRONG\r\n      this.$element.offset({ \r\n        top: document.body.offsetHeight // this one must be changed\r\n            - offsetBottom - this.$element.height() })\r\n      // RIGHT\r\n      this.$element.offset({ \r\n        top: scrollHeight // this one works\r\n            - offsetBottom - this.$element.height() })\r\n    }\r\n  }</pre>\r\nFinally, add the following css and you are done! Note that I changed the colors from the orginal one in the bootstrap\'s site.\r\n//TODO','bootstrap sidebar in wordpress','','inherit','closed','open','','208-revision-v1','','','2013-12-28 13:58:43','2013-12-28 13:58:43','',208,'http://localhost/html/208-revision-v1/',0,'revision','',0),(222,3,'2013-12-28 13:59:27','2013-12-28 13:59:27','<h2>Prerequisites</h2>\r\nYou need the following scripts and css included/enqueued:\r\n<ul>\r\n	<li><code>bootstrap.css</code></li>\r\n	<li><code>bootstrap.[min].js</code>, including the affix and scrollspy plugins</li>\r\n	<li><code>jquery.[min].js</code></li>\r\n	<li><code>docs.css</code>: the css used in bootstrap\'s official site</li>\r\n</ul>\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning ! </strong> I implemented it on the twenty thirteen theme. Be sure to adapt the jquery selectors present in this post to yours.</div>\r\n<h2>ScrollSpy functionality</h2>\r\n<h5>The js</h5>\r\nFirst, you need the following html structure, or at lead one ul element:\r\n<pre class=\"prettyprint\">\r\n<div class=\" the-sidebar-container\">\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\r\n<ul class=\"nav bs-sidebar\"></ul>\r\n</div>\r\n</div></pre>\r\nWe\'ll use a script to dynamically create the list and initialise the scrollspy:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n\r\n    // if no sidebar div > ul, create one\r\n    if( $(\'#sidebar\').size() == 0 ){\r\n        $(\'article\').wrapAll(\r\n            \'\r\n<div class=\"row\">\r\n<div class=\"col-md-8\" role=\"main\">\' + \r\n            \'</div>\r\n</div>\r\n\');\r\n        $(\'div.row\').prepend(            \'\r\n<div class=\"col-md-2 the-sidebar-container\">\' +            \'\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\' +            \'\r\n<ul class=\"nav bs-sidebar\">\' +\r\n            \'</ul>\r\n</div>\r\n</div>\r\n\');\r\n    }else{ // else, start fresh\r\n        $(\'#sidebar > ul\').html(\"\");\r\n    }\r\n\r\n    $(\'article\').each(function(){\r\n        // grab the title of the article\r\n        str = $(this).find(\'h1:first\').text();\r\n        li = $(\'\r\n	<li><a href=\"#\' + $(this).attr(\'id\') + \'\">\' + str + \r\n            \'</a></li>\r\n\' );\r\n        ul = $(\'\r\n<ul class=\"nav\"></ul>\r\n\');\r\n        // each h2 becomes a second-level menu item\r\n        $( \"#\" + $(this).attr(\'id\') + \" h2\" ).each(function(){\r\n            str = $(this).text().toLowerCase().trim()\r\n            .replace(/ /g, \"-\").replace(/[^a-z]/gi, \"\");\r\n        $(this).attr(\'id\', str);\r\n        $(ul).append(\'\r\n	<li><a href=\"#\' + str + \'\">\'\r\n            + $(this).text() + \'</a></li>\r\n\' );\r\n        });\r\n        $(li).append(ul);\r\n        $(\'#sidebar > ul\').append(li);\r\n    });\r\n\r\n    // simply init the scrollspy on the body\r\n    // !! the body must have a position: relative attribute\r\n    $(\'body\').scrollspy({ \r\n        target: \'#sidebar\' \r\n    });\r\n    // the first link is selected by default\r\n    $(\'#sidebar li:first\').addClass(\"active\");\r\n}</pre>\r\nBe sure to have the body position set to relative.\r\n\r\nAlso, to allow the title to be at the top of the page (and not out of screen) when you click on an anchor link, here is a simple trick that works pretty well:\r\n<pre class=\"prettyprint\">\r\n/* \r\n   assuming that all the titles have the class anchored \r\n   you can of course replace the selector to whatever\r\n   you want\r\n*/\r\n.anchored:before {\r\n    content:\"\";\r\n    display:block;\r\n    height:50px;\r\n    margin:-30px 0 0;\r\n}</pre>\r\n<h2>Affix functionality</h2>\r\nThe initialisation:\r\n<pre class=\"prettyprint\">\r\nfunction init_affix(){\r\n\r\n    var $ = jQuery;\r\n\r\n    $(\'#sidebar\').affix({\r\n    offset: {\r\n        top: function () {\r\n            // the offset is relative to the document \r\n            return (this.top = $(\'article:first\').offset().top)\r\n        }, \r\n        bottom: function () {\r\n            // try to calculate dynamically the size of the footer\r\n            return (this.bottom = $(\'#colophon\').outerHeight(true) + \r\n                $(\'.navigation:last\').outerHeight(true) + 40 );\r\n        }\r\n    }\r\n    });\r\n}</pre>\r\nThe bugfix to do in the jquery, version line 1553, in the if (affix == \'bottom\') block:\r\n<pre class=\"prettyprint\">\r\n    if (affix == \'bottom\') {\r\n      // WRONG\r\n      this.$element.offset({ \r\n        top: document.body.offsetHeight // this one must be changed\r\n            - offsetBottom - this.$element.height() })\r\n      // RIGHT\r\n      this.$element.offset({ \r\n        top: scrollHeight // this one works\r\n            - offsetBottom - this.$element.height() })\r\n    }\r\n  }</pre>\r\nFinally, add the following css and you are done! Note that I changed the colors from the orginal one in the bootstrap\'s site.\r\n//TODO','bootstrap sidebar in wordpress','','inherit','closed','open','','208-revision-v1','','','2013-12-28 13:59:27','2013-12-28 13:59:27','',208,'http://localhost/html/208-revision-v1/',0,'revision','',0),(223,3,'2013-12-28 14:37:05','2013-12-28 14:37:05','Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!\r\n\r\n&nbsp;\r\n\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png\"><img class=\"alignnone size-full wp-image-94\" alt=\"funny_bash_prompt\" src=\"http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png\" width=\"576\" height=\"163\" /></a>','Hello world!','','inherit','closed','open','','1-revision-v1','','','2013-12-28 14:37:05','2013-12-28 14:37:05','',1,'http://localhost/html/1-revision-v1/',0,'revision','',0),(224,3,'2013-12-28 14:39:48','2013-12-28 14:39:48','Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!\r\nhttp://error418.no-ip.org:4320\r\nerror418.no-ip.org\r\n&nbsp;\r\n\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png\"><img class=\"alignnone size-full wp-image-94\" alt=\"funny_bash_prompt\" src=\"http://localhost/html/wp-content/uploads/2013/10/funny_bash_prompt.png\" width=\"576\" height=\"163\" /></a>','Hello world!','','inherit','closed','open','','1-revision-v1','','','2013-12-28 14:39:48','2013-12-28 14:39:48','',1,'http://localhost/html/1-revision-v1/',0,'revision','',0),(225,3,'2013-12-28 17:31:38','2013-12-28 17:31:38','<h2>Prerequisites</h2>\r\nYou need the following scripts and css included/enqueued:\r\n<ul>\r\n	<li><code>bootstrap.css</code></li>\r\n	<li><code>bootstrap.[min].js</code>, including the affix and scrollspy plugins</li>\r\n	<li><code>jquery.[min].js</code></li>\r\n	<li><code>docs.css</code>: the css used in bootstrap\'s official site</li>\r\n</ul>\r\n<div class=\"alert alert-warning\">\r\n    <strong>Warning ! </strong> I implemented it on the twenty thirteen theme. Be sure to adapt the jquery selectors present in this post to yours.</div>\r\n<h2>ScrollSpy functionality</h2>\r\n<h5>The js</h5>\r\nFirst, you need the following html structure, or at lead one ul element:\r\n<pre class=\"prettyprint\">\r\n<div class=\" the-sidebar-container\">\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\r\n<ul class=\"nav bs-sidebar\"></ul>\r\n</div>\r\n</div></pre>\r\nWe\'ll use a script to dynamically create the list and initialise the scrollspy:\r\n<pre class=\"prettyprint\">\r\nfunction init_scrollspy(){\r\n    var $ = jQuery;\r\n\r\n    // if no sidebar div > ul, create one\r\n    if( $(\'#sidebar\').size() == 0 ){\r\n        $(\'article\').wrapAll(\r\n            \'\r\n<div class=\"row\">\r\n<div class=\"col-md-8\" role=\"main\">\' + \r\n            \'</div>\r\n</div>\r\n\');\r\n        $(\'div.row\').prepend(            \'\r\n<div class=\"col-md-2 the-sidebar-container\">\' +            \'\r\n<div id=\"sidebar\" class=\"bs-sidebar\" data-spy=\"affix\">\' +            \'\r\n<ul class=\"nav bs-sidebar\">\' +\r\n            \'</ul>\r\n</div>\r\n</div>\r\n\');\r\n    }else{ // else, start fresh\r\n        $(\'#sidebar > ul\').html(\"\");\r\n    }\r\n\r\n    $(\'article\').each(function(){\r\n        // grab the title of the article\r\n        str = $(this).find(\'h1:first\').text();\r\n        li = $(\'\r\n	<li><a href=\"#\' + $(this).attr(\'id\') + \'\">\' + str + \r\n            \'</a></li>\r\n\' );\r\n        ul = $(\'\r\n<ul class=\"nav\"></ul>\r\n\');\r\n        // each h2 becomes a second-level menu item\r\n        $( \"#\" + $(this).attr(\'id\') + \" h2\" ).each(function(){\r\n            str = $(this).text().toLowerCase().trim()\r\n            .replace(/ /g, \"-\").replace(/[^a-z]/gi, \"\");\r\n        $(this).attr(\'id\', str);\r\n        $(ul).append(\'\r\n	<li><a href=\"#\' + str + \'\">\'\r\n            + $(this).text() + \'</a></li>\r\n\' );\r\n        });\r\n        $(li).append(ul);\r\n        $(\'#sidebar > ul\').append(li);\r\n    });\r\n\r\n    // simply init the scrollspy on the body\r\n    // !! the body must have a position: relative attribute\r\n    $(\'body\').scrollspy({ \r\n        target: \'#sidebar\' \r\n    });\r\n    // the first link is selected by default\r\n    $(\'#sidebar li:first\').addClass(\"active\");\r\n}</pre>\r\nBe sure to have the body position set to relative.\r\n\r\nAlso, to allow the title to be at the top of the page (and not out of screen) when you click on an anchor link, here is a simple trick that works pretty well:\r\n<pre class=\"prettyprint\">\r\n/* \r\n   assuming that all the titles have the class anchored \r\n   you can of course replace the selector to whatever\r\n   you want\r\n*/\r\n.anchored:before {\r\n    content:\"\";\r\n    display:block;\r\n    height:50px;\r\n    margin:-30px 0 0;\r\n}</pre>\r\n<h2>Affix functionality</h2>\r\nThe initialisation:\r\n<pre class=\"prettyprint\">\r\nfunction init_affix(){\r\n\r\n    var $ = jQuery;\r\n\r\n    $(\'#sidebar\').affix({\r\n    offset: {\r\n        top: function () {\r\n            // the offset is relative to the document \r\n            return (this.top = $(\'article:first\').offset().top)\r\n        }, \r\n        bottom: function () {\r\n            // try to calculate dynamically the size of the footer\r\n            return (this.bottom = $(\'#colophon\').outerHeight(true) + \r\n                $(\'.navigation:last\').outerHeight(true) + 40 );\r\n        }\r\n    }\r\n    });\r\n}</pre>\r\nThe bugfix to do in the jquery, version line 1553, in the if (affix == \'bottom\') block:\r\n<pre class=\"prettyprint\">\r\n    if (affix == \'bottom\') {\r\n      // WRONG\r\n      this.$element.offset({ \r\n        top: document.body.offsetHeight // this one must be changed\r\n            - offsetBottom - this.$element.height() })\r\n      // RIGHT\r\n      this.$element.offset({ \r\n        top: scrollHeight // this one works\r\n            - offsetBottom - this.$element.height() })\r\n    }\r\n  }</pre>\r\nFinally, add the following css and you are done! Note that I changed the colors from the orginal one in the bootstrap\'s site.\r\n//TODO','Bootstrap sidebar in wordpress','','inherit','closed','open','','208-revision-v1','','','2013-12-28 17:31:38','2013-12-28 17:31:38','',208,'http://localhost/html/208-revision-v1/',0,'revision','',0),(227,3,'2013-12-29 15:18:54','2013-12-29 15:18:54','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h2>Installing DAVmail</h2>\r\n<ol>\r\n    <li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\r\n    <li>install and start it:\r\n<pre class=\"prettyprint lang-sh\">\r\n> sudo dpkg -i devmail<version>.deb\r\n> sudo apt-get install -f\r\n> davmail &</pre>\r\n</li>\r\n    <li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h2>Configuring thunderbird</h2>\r\n<ol>\r\n    <li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n    <li>In the first window, give your edut.hefr email address and password</li>\r\n    <li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n    <li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n    <li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h2>Adding the address book</h2>\r\n<ol>\r\n    <li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n    <li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n    <li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h2>Adding the calendar</h2>\r\n<ol>\r\n    <li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n    <li></li>\r\n</ol-->\r\n<h2>Init script for DavMail</h2>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a href=\"http://localhost/html/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n<pre class=\"lang-sh\" id=\"lala\"></pre>\r\n<script type=\"text/javascript\">\r\n<!--\r\n    display_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n//-->\r\n</script>\r\n\r\n<style type=\"text/css\"><!--\r\n    table.small tr td{\r\nfont-size: 10pt;\r\ntext-align: center;\r\n}\r\n--></style>\r\n','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-revision-v1','','','2013-12-29 15:18:54','2013-12-29 15:18:54','',103,'http://localhost/html/103-revision-v1/',0,'revision','',0),(229,3,'2013-12-29 18:42:08','2013-12-29 18:42:08','<h2>Fixing vim strange behavior</h2>\r\nWhen using vim inside a screen session, I noticed two annoying things:\r\n<ol>\r\n	<li>My color scheme disappreared</li>\r\n	<li>The console was not cleared after exiting vim (buffer full)</li>\r\n</ol>\r\n<h3>The not-so-working solution from the internet</h3>\r\nBy default, screen is not configured to take advantage of the 256 color mode of the terminal. To change this behavior, I read throughout the internet that I could simply add those lines to my <code>.screenrc</code> file in my home directory:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# specify the term to use:\r\nterm screen-256color\r\n# allow bold colors - necessary for some reason\r\nattrcolor b \".I\"\r\n# tell screen how to set colors. AB = background, AF=foreground\r\ntermcapinfo xterm \'Co#256:AB=\\E[48;5;%dm:AF=\\E[38;5;%dm\'\r\n# use current bg color for erased chars\r\ndefbce on</pre>\r\nThis would normally fix the 256 color/vim scheme problem.\r\n\r\nTo fix the clear on exit problem, just add the following line to your .vimrc. It basically tells vim to clear the screen after close:\r\n<pre class=\"prettyprint lang-text\">\r\nau VimLeave * :!clear</pre>\r\n<h3>The solution that worked for me</h3>\r\nEven if for a lot of people this solution works, for me it was not enough: vim kept messing up with the colors, and my terminal had some strange behavior.\r\n\r\nI finally got rid of all the problems by simply setting my <code>$TERM</code> environment variable to <code>xterm-256color</code> instead of <code>xterm</code> (I added one line in my .zshrc).\r\n\r\nWith this change, when I launched the screen program, the TERM was correctly set to screen-256color. \r\n\r\nSo, finally, my <code>.screenrc</code> looks like:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# turn off the splash screen\r\nstartup_message off\r\n\r\n# allow LESS to be launch in an overlay screen\r\naltscreen\r\n\r\n# specify the term to use, just in case\r\nterm screen-256color</pre>','Screen','','publish','closed','open','','screen','','','2014-04-09 15:04:01','2014-04-09 15:04:01','',0,'http://localhost/html/?p=229',0,'post','',0),(230,3,'2013-12-29 18:41:52','2013-12-29 18:41:52','<h2>Fixing vim strange behavior</h2>\r\nWhen using vim inside a screen session, I noticed two annoying things:\r\n<ol>\r\n    <li>My color scheme disappreared</li>\r\n    <li>The console was not cleared after exiting vim (buffer full)</li>\r\n</ol>\r\n\r\n<p>\r\nBy default, screen is not configured to take advantage of the 256 color mode of the terminal. To change this behavior, create a <code>.screenrc</code> file in your home directory and add the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# turn off the splash screen\r\nstartup_message off\r\n\r\n# specify the term to use:\r\nterm screen-256color\r\n# allow bold colors - necessary for some reason\r\nattrcolor b \".I\"\r\n# tell screen how to set colors. AB = background, AF=foreground\r\ntermcapinfo xterm \'Co#256:AB=\\E[48;5;%dm:AF=\\E[38;5;%dm\'\r\n# use current bg color for erased chars\r\ndefbce on\r\n</pre>\r\nThis will fix the 256 color/vim scheme problem.\r\n</p>\r\n\r\n\r\n<p>\r\nTo fix the clear on exit problem, just add the following line to your .vimrc. It basically tells vim to clear the screen after close:\r\n<pre class=\"prettyprint lang-text\">\r\nau VimLeave * :!clear\r\n</pre>\r\nAnd we are done!\r\n</p>\r\n','Screen','','inherit','closed','open','','229-revision-v1','','','2013-12-29 18:41:52','2013-12-29 18:41:52','',229,'http://localhost/html/229-revision-v1/',0,'revision','',0),(231,3,'2013-12-29 20:50:47','2013-12-29 20:50:47','<h2>Fixing vim strange behavior</h2>\nWhen using vim inside a screen session, I noticed two annoying things:\n<ol>\n	<li>My color scheme disappreared</li>\n	<li>The console was not cleared after exiting vim (buffer full)</li>\n</ol>\n\n<h3>The not so working solution from the internet</h3>\nBy default, screen is not configured to take advantage of the 256 color mode of the terminal. To change this behavior, I read throughout the internet that I could simply add those lines to my <code>.screenrc</code> file in my home directory:\n<pre class=\"prettyprint lang-text with-comments\">\n# specify the term to use:\nterm screen-256color\n# allow bold colors - necessary for some reason\nattrcolor b \".I\"\n# tell screen how to set colors. AB = background, AF=foreground\ntermcapinfo xterm \'Co#256:AB=\\E[48;5;%dm:AF=\\E[38;5;%dm\'\n# use current bg color for erased chars\ndefbce on</pre>\nThis would normally fix the 256 color/vim scheme problem.\n\nTo fix the clear on exit problem, just add the following line to your .vimrc. It basically tells vim to clear the screen after close:\n<pre class=\"prettyprint lang-text\">\nau VimLeave * :!clear</pre>\nEven if for a lot of people this solution works, for me it was not enough: vim kept messing up with the colors, and my terminal had some strange behavior.\n\nI finally got rid of all the problems by simply setting my <code>$TERM</code> environment variable to <code>xterm-256color</code> instead of <code>xterm</code> (I added one line in my .zshrc).\n\nWith this change, when I launched the screen program, the TERM was correctly set to screen-256color. \n\nSo, finally, my <code>.screenrc</code> looks like:\n<pre class=\"prettyprint lang-text with-comments\">\n# turn off the splash screen\nstartup_message off\n\n# allow LESS to be launch in an overlay screen\naltscreen\n\n# specify the term to use, just in case\nterm screen-256color</pre>','Screen','','inherit','closed','open','','229-autosave-v1','','','2013-12-29 20:50:47','2013-12-29 20:50:47','',229,'http://localhost/html/229-autosave-v1/',0,'revision','',0),(232,3,'2013-12-29 20:42:33','2013-12-29 20:42:33','<h2>Import a module from a custom path</h2>\r\nWhen you write custom modules, it is normally in order to use them in other files.\r\nTo import them properly, i.e. in a way that they are always found, you should proceed like this :\r\n<pre class=\"prettyprint\">\r\nuse Cwd;\r\npush @INC, ( Cwd::abs_path($0) =~ /(.*\\\\/)[^\\\\/]*/ and $1 );\r\nrequire MyModule;</pre>\r\nThe idea is to push the path of the running file into the @INC variable (containing the paths perl will use to locate modules) before importing your module.\r\nThe <strong>require</strong> is the oldest way to load code. Its advantage is that it is evaluated at runtime and works with any piec of code (library, module, text file) while the <code>use</code> keyword is evaluated at compile time, so before you modified the @INC array, and works only with modules (you cannot write something like <code>use aFile.pl</code>.\r\n	Another difference between use and import is the Export handling. Here are some examples :\r\n<pre class=\"prettyprint\">\r\nuse Foo();\r\n# equivalent to:\r\nrequire Foo;\r\n# ie don\'t import anything, not even the default things\r\n\r\nuse Foo;\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import();\r\n}\r\nuse Foo qw (foo bar);\r\n# equivalent to:\r\nBEGIN{\r\n   require Foo; Foo->import(qw(foo bar));\r\n}</pre>\r\n<h2>Readline, terminal interactions, ...</h2>\r\n<h3>Get password from commandline</h3>\r\nFor that to work, you should first have a proper environment:\r\n<ol>\r\n	<li>Check that you have proper readline support. The packages libreadline* and libterm-readline-gnu-perl should installed on your system</li>\r\n	<li>In your ~.bashrc, add the following line : \r\n<code>export \"PERL_RL= o=0\"</code></li>\r\n</ol>\r\nThen, you can use this code :\r\n<pre class=\"prettyprint\">\r\n\r\n# prompts for a password and returns it, without term object\r\nuse Term::ReadKey;\r\n\r\nprint \"Enter your password: \";\r\nReadMode \'noecho\';\r\n$password = ReadLine 0;\r\nchomp $password;\r\nReadMode \'normal\';\r\nprint \"\\n\";</pre>\r\nThis is the easy and straight-forward way. But if we use a term object and we also want to avoid the password to be kept in history, we would rather use a more complex routine, like this one:\r\n<pre class=\"prettyprint\">\r\nuse Term::ReadKey;\r\nuse Term::ReadLine;\r\n\r\nmy $term = Term::ReadLine->new(\"a name\"); # give it a name\r\n\r\nsub get_pass{ # $pass (void)\r\n    # parse args\r\n    my $msg = shift;\r\n    $msg = \"Type your password : \" unless defined $msg;\r\n\r\n    # get password\r\n    print $msg; # (??) it does not work with $term->...\r\n    ReadMode(\'noecho\'); # don\'t echo\r\n    my $password;\r\n	chomp( $password = ReadLine 0 ); \r\n    ReadMode( 0 );  # back to normal\r\n\r\n    # remove pass from history\r\n    eval{ $term->remove_history( $term->where_history() ) }; \r\n\r\n    print \"\\n\";\r\n    return $password;\r\n}</pre>\r\n<h3>Autocompletion</h3>\r\nFirst, check those links:\r\n<ul>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Custom_Completion</a></li>\r\n	<li><a href=\"http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions\">http://search.cpan.org/~hayashi/Term-ReadLine-Gnu-1.20/Gnu.pm#Term::ReadLine::Gnu_Functions</a></li>\r\n</ul>\r\nSample example, autocompletion:\r\n<pre class=\"prettyprint\">\r\nmy $term = Term::ReadLine->new(\"a name\"); \r\n$term->Attribs->{completion_function} = sub{\r\n    my ($text, $line, $start) = @_;\r\n\r\n    if( $line =~ /^\\s*$/ ){ # first word\r\n        @_ = grep{ /^$text/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    if( $line =~ /^\\s*(copy|find)\\s*\\w*$/ ){\r\n        return grep { /^$text/ } @HEADERS_FOR_COMPLETION if( $text );\r\n        return @HEADERS_FOR_COMPLETION;\r\n    }\r\n\r\n    if( $line =~ /^(\\w+)$/ ){\r\n        @_ = grep{ /^$1/ } @COMMANDS;\r\n        return @_ if( scalar(@_) );\r\n    }\r\n\r\n    return undef;\r\n};</pre>\r\n<h3>Coloring</h3>\r\nA simple and useful package is available on CPAN to use the built-in colors of the terminal : <a href=\"https://www.google.ch/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQFjAA&url=http%3A%2F%2Fperldoc.perl.org%2FTerm%2FANSIColor.html&ei=ucJaUpK1G4nOtAaOsIHYDQ&usg=AFQjCNH6owAQsw7x6Xg6PUAvXEteRH_f6Q&sig2=iTXqlxeQW6AcyQYWv_fuVQ&bvm=bv.53899372,d.Yms\">Term::ANSIColor</a>.\r\n<pre class=\"prettyprint\">\r\n# prints an error message (in red) to stdout\r\n# I<params>: the message to print\r\nsub print_error{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'red\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}\r\n\r\n# prints an info message to stdout\r\n# I<params>: the message to print\r\nsub print_info{ # void ( $message )\r\n    my $msg = shift;\r\n    print \"  --- \", color( \'magenta\' ), $msg, color( \"reset\" ), \" ---\" , \"\\n\" \r\n        unless not defined $msg;\r\n}</pre>\r\n<h2>Utilities</h2>\r\n<h3>Remove duplicates from arrays</h3>\r\n<pre class=\"prettyprint\">\r\n# removes the duplicates from the given array\r\n# I<params>: the array\r\nsub distinct{ # \\@ ( \\@ )\r\n    # the idea is to convert the array into a hash, since hash keys \r\n    # must be unique, and then get the keys back\r\n    my %h;\r\n    return grep { !$h{$_}++ } @_\r\n}</pre>\r\n<h3>trim strings</h3>\r\n<pre class=\"prettyprint\">\r\n# simple trim function\r\n# I< params>: the string to trim \r\nsub trim { # $ ($)\r\n   return $_[0] =~ s/^\\s+|\\s+$//rg;\r\n}</pre>\r\n<h2>Catch signals</h2>\r\nNothing easier in Perl, although I didn\'t test it with multiple threads...\r\nThe variable $SIG is a hash containing pointer to the routines used for each signal.\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\n\r\nour $SIG;\r\n\r\nSIG{\"INT\"} = \"catch_signal\";\r\n\r\nwhile (1){\r\n    print \"waiting for signal ... press ctl+c to catch the interrupt signal \\n\";\r\n    sleep(10);\r\n}\r\n\r\nsub catch_signal {\r\n    print \"\\n Kool, I am able to handle interrupt signal \\n\";\r\n    exit();\r\n}</pre>\r\n<h2>Get rid of the warning \"SmartMatch is experimental\"</h2>\r\nThis warning comes from the use of the ~~ operator, which is \r\nTwo ways:\r\n<ol>\r\n	<li>A smart guy developped a package, <a href=\"https://metacpan.org/module/experimental\"><code>experimental</code></a>, which provide macros to enable/disable experimental features. After installing it, we can\r\nsimply write:\r\n<pre class=\"prettyprint\">use experimental \'smartmatch\';</pre>\r\nand we are done</li>\r\n	<li>A second way is to disable smartmatch warning by an ugly macro:\r\n<pre class=\"prettyprint\">no if $] >= 5.017011, warnings => \'experimental::smartmatch\';</pre>\r\nNotice that we must take the perl version into account, since the experimental::smartmatch is not defined in earlier versions, which will result in an explicit error...</li>\r\n</ol>\r\n<i>Note:</i>It would be interesting to use the construct <a href=\"http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when\"><code>given ... when</code></a> as an alternative..\r\n\r\n<h2>Common troubles with perl-related tools</h2>\r\nIf the <code>perldoc</code> command outputs something like:\r\n<pre>\r\nESC[1mNAMEESC[0m\r\n    ESC[4mcybeESC[0m - Cyberlearn Sync Utility.\r\n\r\n    Simple utility to keep in sync with a course from Cyberlearn.\r\n\r\nESC[1mDESCRIPTIONESC[0m\r\n    ...\r\n</pre>\r\nthe problem here is that the \"pager\" (probably \'less\') is \"catching\" (ie, printing \"ESC\" instead the actual escape character) the escape sequences, preventing your terminal from displaying the text correctly [<a href=\"https://groups.google.com/forum/#!topic/comp.lang.perl.misc/9fv3yDB_ipM\">sic</a>]. The cleanest solution is to set perldoc to use \'less\' with the \'-r\' (=\"raw\" output) option.\r\n\r\nYou can add this line to your .bashrc or .zshrc:\r\n<pre class=\"prettyprint lang-text\">\r\nexport PERLDOC_PAGER=\'less -r\'\r\n</pre>','Perl tips and tricks','','inherit','closed','open','','27-revision-v1','','','2013-12-29 20:42:33','2013-12-29 20:42:33','',27,'http://localhost/html/27-revision-v1/',0,'revision','',0),(233,3,'2013-12-29 20:49:43','2013-12-29 20:49:43','<h2>Fixing vim strange behavior</h2>\r\nWhen using vim inside a screen session, I noticed two annoying things:\r\n<ol>\r\n	<li>My color scheme disappreared</li>\r\n	<li>The console was not cleared after exiting vim (buffer full)</li>\r\n</ol>\r\nBy default, screen is not configured to take advantage of the 256 color mode of the terminal. To change this behavior, I read throughout the internet that I could simply add those lines to my <code>.screenrc</code> file in my home directory:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# specify the term to use:\r\nterm screen-256color\r\n# allow bold colors - necessary for some reason\r\nattrcolor b \".I\"\r\n# tell screen how to set colors. AB = background, AF=foreground\r\ntermcapinfo xterm \'Co#256:AB=\\E[48;5;%dm:AF=\\E[38;5;%dm\'\r\n# use current bg color for erased chars\r\ndefbce on</pre>\r\nThis would normally fix the 256 color/vim scheme problem.\r\n\r\nTo fix the clear on exit problem, just add the following line to your .vimrc. It basically tells vim to clear the screen after close:\r\n<pre class=\"prettyprint lang-text\">\r\nau VimLeave * :!clear</pre>\r\n\r\nEven if for a lot of people this solution works, for me it was not enough: vim kept messing up with the colors, and my terminal had some strange behavior.\r\n\r\nI finally got rid of all the problems by simply setting my <code>$TERM</code> environment variable to <code>xterm-256color</code> instead of <code>xterm</code> (I added one line in my .zshrc).\r\n\r\nWith this change, when I launched the screen program, the TERM was correctly set to screen-256color. \r\n\r\nSo, finally, my <code>.screenrc</code> looks like:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# turn off the splash screen\r\nstartup_message off\r\n\r\n# allow LESS to be launch in an overlay screen\r\naltscreen\r\n\r\n# specify the term to use, just in case\r\nterm screen-256color\r\n</pre>','Screen','','inherit','closed','open','','229-revision-v1','','','2013-12-29 20:49:43','2013-12-29 20:49:43','',229,'http://localhost/html/229-revision-v1/',0,'revision','',0),(234,3,'2013-12-29 20:51:12','2013-12-29 20:51:12','<h2>Fixing vim strange behavior</h2>\r\nWhen using vim inside a screen session, I noticed two annoying things:\r\n<ol>\r\n	<li>My color scheme disappreared</li>\r\n	<li>The console was not cleared after exiting vim (buffer full)</li>\r\n</ol>\r\n\r\n<h3>The not so working solution from the internet</h3>\r\nBy default, screen is not configured to take advantage of the 256 color mode of the terminal. To change this behavior, I read throughout the internet that I could simply add those lines to my <code>.screenrc</code> file in my home directory:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# specify the term to use:\r\nterm screen-256color\r\n# allow bold colors - necessary for some reason\r\nattrcolor b \".I\"\r\n# tell screen how to set colors. AB = background, AF=foreground\r\ntermcapinfo xterm \'Co#256:AB=\\E[48;5;%dm:AF=\\E[38;5;%dm\'\r\n# use current bg color for erased chars\r\ndefbce on</pre>\r\nThis would normally fix the 256 color/vim scheme problem.\r\n\r\nTo fix the clear on exit problem, just add the following line to your .vimrc. It basically tells vim to clear the screen after close:\r\n<pre class=\"prettyprint lang-text\">\r\nau VimLeave * :!clear</pre>\r\n\r\n\r\n<h3>The solution that worked for me</h3>\r\nEven if for a lot of people this solution works, for me it was not enough: vim kept messing up with the colors, and my terminal had some strange behavior.\r\n\r\nI finally got rid of all the problems by simply setting my <code>$TERM</code> environment variable to <code>xterm-256color</code> instead of <code>xterm</code> (I added one line in my .zshrc).\r\n\r\nWith this change, when I launched the screen program, the TERM was correctly set to screen-256color. \r\n\r\nSo, finally, my <code>.screenrc</code> looks like:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# turn off the splash screen\r\nstartup_message off\r\n\r\n# allow LESS to be launch in an overlay screen\r\naltscreen\r\n\r\n# specify the term to use, just in case\r\nterm screen-256color</pre>','Screen','','inherit','closed','open','','229-revision-v1','','','2013-12-29 20:51:12','2013-12-29 20:51:12','',229,'http://localhost/html/229-revision-v1/',0,'revision','',0),(235,3,'2013-12-29 20:51:29','2013-12-29 20:51:29','<h2>Fixing vim strange behavior</h2>\r\nWhen using vim inside a screen session, I noticed two annoying things:\r\n<ol>\r\n	<li>My color scheme disappreared</li>\r\n	<li>The console was not cleared after exiting vim (buffer full)</li>\r\n</ol>\r\n<h3>The not-so-working solution from the internet</h3>\r\nBy default, screen is not configured to take advantage of the 256 color mode of the terminal. To change this behavior, I read throughout the internet that I could simply add those lines to my <code>.screenrc</code> file in my home directory:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# specify the term to use:\r\nterm screen-256color\r\n# allow bold colors - necessary for some reason\r\nattrcolor b \".I\"\r\n# tell screen how to set colors. AB = background, AF=foreground\r\ntermcapinfo xterm \'Co#256:AB=\\E[48;5;%dm:AF=\\E[38;5;%dm\'\r\n# use current bg color for erased chars\r\ndefbce on</pre>\r\nThis would normally fix the 256 color/vim scheme problem.\r\n\r\nTo fix the clear on exit problem, just add the following line to your .vimrc. It basically tells vim to clear the screen after close:\r\n<pre class=\"prettyprint lang-text\">\r\nau VimLeave * :!clear</pre>\r\n<h3>The solution that worked for me</h3>\r\nEven if for a lot of people this solution works, for me it was not enough: vim kept messing up with the colors, and my terminal had some strange behavior.\r\n\r\nI finally got rid of all the problems by simply setting my <code>$TERM</code> environment variable to <code>xterm-256color</code> instead of <code>xterm</code> (I added one line in my .zshrc).\r\n\r\nWith this change, when I launched the screen program, the TERM was correctly set to screen-256color. \r\n\r\nSo, finally, my <code>.screenrc</code> looks like:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# turn off the splash screen\r\nstartup_message off\r\n\r\n# allow LESS to be launch in an overlay screen\r\naltscreen\r\n\r\n# specify the term to use, just in case\r\nterm screen-256color</pre>','Screen','','inherit','closed','open','','229-revision-v1','','','2013-12-29 20:51:29','2013-12-29 20:51:29','',229,'http://localhost/html/229-revision-v1/',0,'revision','',0),(236,3,'2013-12-29 20:56:14','2013-12-29 20:56:14','<h2>Créer un module \"CPAN-compatible\"</h2>\r\n<ol>\r\n	<li>Utiliser l\'utilitaire module-starter pour créer la structure de base :\r\n<code>module-starter --module=MyModule::Name \\\r\n                 --author=\"Your Name\" --email=theemail@domain.net -mb</code>\r\n		le flag <em>-mb</em> spécifie qu\'on utilisera Module::Builder. Il est possible de spécifier <em>-mi</em> à la place, ce qui générera un Makefile.PL utilisé par Module::Install.</li>\r\n	<li>\r\n		Copier les .pm dans lib. Si des scripts sont présents (à installer dans bin plutôt que perl), il faut créer un dossier <code>scripts</code> et y déposer les scripts .pl en omettant l\'extension.</li>\r\n	<li>\r\n		Editer le fichier Build.PL (on part du principe qu\'on utilise Module::Builder). Pour un module possédant des scripts et des modules, nous pourrions avoir, par exemple,\r\n		la configuration suivante:\r\n<pre class=\"prettyprint\">\r\nuse 5.006;\r\nuse strict;\r\nuse warnings FATAL => \'all\';\r\nuse Module::Build;\r\n\r\nmy $builder = Module::Build->new(\r\n    module_name         => \'CybeSync\',\r\n    license             => \'perl\',\r\n    dist_author         => q{lucy linder <lucy.derlin@gmail.com>},\r\n    dist_version_from   => \'lib/CybeSync.pm\',\r\n    dist_abstract       => \'Cyberlearn Sync Commandline Tool\',\r\n    version_from        => \'lib/CybeSync.pm\',\r\n    abstract_from       => \'script/cybe\',\r\n    release_status      => \'stable\',\r\n    configure_requires => {\r\n        \'Module::Build\' => 0,\r\n    },\r\n    build_requires => {\r\n        \'Test::More\' => 0\r\n    },\r\n    requires => {\r\n        \'Term::ReadLine\' => 0,\r\n        \'Term::ReadKey\' => 0,\r\n        \'Data::Dumper\' => 0,\r\n        \'Carp\' => 0,\r\n        \'JSON\' => 0,\r\n        \'Pod::Usage\' => 0,\r\n        \'LWP::UserAgent\' => 0,\r\n        \'LWP::Protocol::https\' => 0,\r\n        \'HTTP::Request\' => 0,\r\n        \'HTTP::Cookies\' => 0,\r\n        \'URI::Escape\' => 0,\r\n        \'File::Spec\' => 0,\r\n        \'HTML::TokeParser::Simple\' => 0,\r\n        \'Cwd\' => 0\r\n    },\r\n    script_files       => [\'scripts/cybe\'], \r\n    add_to_cleanup     => [ \'CybeSync-*\' ],\r\n    create_makefile_pl => \'traditional\',\r\n    create_readme      => 1\r\n);\r\n\r\n$builder->create_build_script();</pre>\r\nÀ noter les choses suivantes:\r\n<ul>\r\n	<li><code>script_files</code> : permet de spécifier les scripts additionnels, à ne metter que si on en a.</li>\r\n	<li><code>create_makefile_pl</code>: permet de créer le Makefile.PL (normalement obligatoire pour un module CPAN) grâce à la commande <code>./Build distmeta</code></li>\r\n	<li><code>version_from</code>: pour créer ensuite des paquets debian, il est plus judicieux d\'utiliser <code>version</code> et de le mettre à jour à la main</li>\r\n</ul>\r\n</li>\r\n	<li>\r\n		Pour générer le script de Build, il suffit de taper <code>perl Build.PL</code> dans la console. Cela génère un script exécutable nommé Build, qui possède de nombreuses options intéressantes, telles que distmeta (crée entre autres le Makefile.PL), fakeinstall (simule une installation), dist (créer le tarball)...</li>\r\n</ol>\r\n<h3>Créer le paquet debian</h3>\r\n<ol>\r\n	<li>Créer le tarball original : <code>./Build dist</code></li>\r\n	<li>Copier le tarball dans un autre répertoire, en le renommant: <code><i>nomdumodule</i>_<i>version</i>.orig.tar.gz</code>. Le underscore est très très important ! Dans notre exemple, nous aurons <code>libcybesync-perl_1.0.orig.tar.gz</code> (le lib est la manière standard de nommer les paquets perl - si vous avez un doute, tentez la commande debuild, il vous dira ce qu\'il attend comme nom de tarball original)</li>\r\n	<li>Extraire le contenu du tarball + cd new_folder. Ce nouveau dossier (qu\'on peut renommer comme bon nous semble) sera celui utilisé pour mettre à jour le package. Il ne faudra donc pas l\'effacer après la création du premier paquet !</li>\r\n	<li>Ajouter le fichier .gitignore à la racine du nouveau dossier, avec le contenu suivant:\r\n<pre class=\"prettyprint\">META*\r\nMYMETA*\r\n_build/*\r\nblib/*</pre>\r\n</li>\r\n	<li>Exécuter la commande <code>dh-make-perl</code>, qui va créer tous les fichiers debian dont nous aurons besoin.</li>\r\n	<li>Editer le fichier <code>debian/control</code>, en s\'assurant que l\'architecture, la version et la description sont correctes.</li>\r\n	<li>Faire un commit des changements: <code>git commit -a</code>.</li>\r\n	<li>Créer le paquet debian via la commande <code>debuild -us -uc</code>. L\'option -us permet d\'éviter la signature du package (qui peut poser des problèmes si on ne possède pas de clé pgp).</li>\r\n	<li>Vérifier que tout est correct avec la commande <code>dpkg -I ../<modulename etc>.deb</code></li>\r\n</ol>\r\n<h3>Mettre à jour le paquet debian</h3>\r\n<span style=\"color:red; font-style:italic\">Attention</span> : toutes les modifications sur les sources doivent se faire dans le répertoire original, tandis que les modifications relatives au package (description, version, etc) se font dans le répertoire utilisé pour le packaging. Les deux sont totalement différents, voire presque indépendants!\r\n<ol>\r\n	<li>Les sources ayant été modifiées, il s\'agit de recréer un tarball. Ce tarball représente la nouvelle <i>upstream</i> version.</li>\r\n	<li>Mettre à jour le dossier packaging via la commande <code>git-update-orig <path_to_the_new_tarball></code>.</li>\r\n	<li>Mettre à jour le changelog via <code>git-dch</code>: il faudra soit-même s\'assurer que la version est correcte, voire la modifier à la main.</li>\r\n	<li>Faire un git commit des changements</li>\r\n	<li>Créer le nouveau package via <code>debuild -us -uc</code></li>\r\n	<li>Normalement, il n\'est pas nécessaire de garder tous les packages debian précédemment créés. Tant que nous avons la dernière release et un tarball original !</li>\r\n</ol>\r\n\r\n\r\n<h2>Other utilities</h2>\r\n<h3>readme.md file</h3>\r\nThe plugin <code>Pod::Markdown</code> includes a nice util, <code>pod2markdown</code>, which convert your POD to md file format.\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# convert POD to md file\r\n> pod2markdown MyModule.pm > README.md\r\n# convert POD to text file\r\n> pod2text MyModule.pm > README\r\n# convert POD to html\r\n> pod2html MyModule.pm > README.html\r\n\r\n# display POD\r\n> perldoc MyModule.pm\r\n</pre>','Créer un package debian avec Perl','','inherit','closed','open','','45-revision-v1','','','2013-12-29 20:56:14','2013-12-29 20:56:14','',45,'http://localhost/html/45-revision-v1/',0,'revision','',0),(237,3,'2014-01-01 15:03:31','2014-01-01 15:03:31','<div>\r\n<blockquote>Même si tous les ennuis du monde devaient me tomber dessus demain [...], je voulais d\'abord dormir tout mon soûl [...]. Comme ça, je pourrais faire face à mes nouveaux ennuis avec un sentiment de désespoir tout neuf.\r\n<div>Haruki Murakami, La fin des temps p.240</div></blockquote>\r\n</div>\r\n<div>\r\n<blockquote>The real danger is not that computers will begin to think like men, but that men will begin to think like computers\r\n<div>Sydney J. Harris</div></blockquote>\r\n</div>\r\n<div>\r\n<blockquote>The code that is the hardest to debug is the code that you know cannot possibly be wrong...\r\n<div>?</div></blockquote>\r\n	<blockquote>Vous attendez de moi que je déclenche chez vous cet espèce de reflux gastro-oesophagien festif, cette exhibition bucco-plombaire, cette trépidation rhino-pharyngée, ce mélange sordide entre une gastro-entérite et une crise d\'épilepsie qui vous emmeneront dans un monde merveilleux tout en gardant par miracle fermé votre clapet fécal\r\n<div>Gaspard Proust</div></blockquote>\r\n</div>\r\n<div></div>','Quotes','','private','closed','open','','quotes','','','2014-01-05 15:18:01','2014-01-05 15:18:01','',0,'http://error418.no-ip.info/mywiki/?p=237',0,'post','',0),(238,3,'2014-01-01 14:47:03','2014-01-01 14:47:03','<blockquote>Même si tous les ennuis du monde devaient me tomber dessus demain [...], je voulais d\'abord dormir tout mon soûl [...]. Comme ça, je pourrais faire face à mes nouveaux ennuis avec un sentiment de désespoir tout neuf.</blockquote>\r\n&nbsp;','Quotes','','inherit','closed','open','','237-revision-v1','','','2014-01-01 14:47:03','2014-01-01 14:47:03','',237,'http://error418.no-ip.info/mywiki/237-revision-v1/',0,'revision','',0),(239,3,'2014-01-01 14:53:44','2014-01-01 14:53:44','<div>\r\n<blockquote>Même si tous les ennuis du monde devaient me tomber dessus demain [...], je voulais d\'abord dormir tout mon soûl [...]. Comme ça, je pourrais faire face à mes nouveaux ennuis avec un sentiment de désespoir tout neuf.\r\n<div>Haruki Murakami, La fin des temps p.240</div></blockquote>\r\n</div>\r\n&nbsp;','Quotes','','inherit','closed','open','','237-revision-v1','','','2014-01-01 14:53:44','2014-01-01 14:53:44','',237,'http://error418.no-ip.info/mywiki/237-revision-v1/',0,'revision','',0),(240,3,'2014-01-01 15:03:31','2014-01-01 15:03:31','<div>\r\n<blockquote>Même si tous les ennuis du monde devaient me tomber dessus demain [...], je voulais d\'abord dormir tout mon soûl [...]. Comme ça, je pourrais faire face à mes nouveaux ennuis avec un sentiment de désespoir tout neuf.\r\n<div>Haruki Murakami, La fin des temps p.240</div></blockquote>\r\n</div>\r\n<div>\r\n<blockquote>The real danger is not that computers will begin to think like men, but that men will begin to think like computers\r\n<div>Sydney J. Harris</div></blockquote>\r\n</div>\r\n<div>\r\n<blockquote>The code that is the hardest to debug is the code that you know cannot possibly be wrong...\r\n<div>?</div></blockquote>\r\n</div>\r\n<div></div>','Quotes','','inherit','closed','open','','237-revision-v1','','','2014-01-01 15:03:31','2014-01-01 15:03:31','',237,'http://error418.no-ip.info/mywiki/237-revision-v1/',0,'revision','',0),(242,3,'2014-01-01 16:10:51','2014-01-01 16:10:51','','languages','','publish','closed','open','','languages','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',0,'http://error418.no-ip.info/mywiki/?p=242',2,'nav_menu_item','',0),(243,3,'2014-01-02 10:55:53','2014-01-02 10:55:53','Strings in C are kind of a pain in the ass.\r\n<blockquote>Char pointers defined with an initialization value [may] go into a read-only segment</blockquote>\r\nconsider the following:\r\n<pre class=\"prettyprint\">    char * s1 = \"Hello Word\";       \\\\1  \r\n    const char * s2 = \"Hello Word\"; \\\\2\r\n\r\n    char s3[] = \"Hello Word\"; \\\\3\r\n    char s4[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\n\' }; \\\\4</pre>\r\nIn the first case, s1 is a [modifiable] pointer to a <strong>read-only</strong> string literal / array of char: we can do <code>s1 = \"another string\";</code>, but <code>s1[1] = \'a\'</code> will result in an undefined behavior: segfault or can work 50% of the time. So 1 and 2 are equivalent.\r\n\r\nThe 3 and 4 initialisations are equivalent: we create an array of char, not a pointer, which means that the adress it references is <strong>non-modifiable</strong>: indeed, an array can be thought of as a <i>non-modifiable pointer to a specific block of memory</i>.\r\n\r\nThe difference between a pointer and an array is important if we plan to use the variable in a static context. Consider the following:\r\n<pre class=\"prettyprint\">// 1\r\nchar *hi = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n\r\n// 2\r\nchar hi[] = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};</pre>\r\nThe first block triggers an <code>error: initializer element is not constant</code>, while the second works as expected.\r\n<h2>Initializing modifiable strings</h2>\r\nIn C, litterals are read-only. If we really want a modifiable string, two choices: either use malloc and then sprintf or such, or use strdup or asnprintf which take care of the malloc part for us. In either case, we should think of freeing the string when we are done.\r\n<pre class=\"prettyprint\">char * modifiable; // easiest way \r\nmodifiable = strdup(\"A litteral\");</pre>\r\nIf you are worried that you don\'t have strdup available, add\r\n<code>AC_CHECK_FUNCS([asprintf strdup])</code> in your configure.ac and use this block:\r\n<pre class=\"prettyprint\">#ifndef HAVE_STRDUP\r\nchar *strdup( char const * in ){\r\n    if(!in) return NULL;\r\n    char * out;\r\n    asprintf( &amp;out, \"%s\", in );\r\n    return out;\r\n}\r\n#endif</pre>\r\n\r\n','C strings ','','publish','closed','open','','c-strings','','','2014-12-17 17:07:30','2014-12-17 17:07:30','',0,'http://error418.no-ip.info/mywiki/?p=243',0,'post','',0),(244,3,'2014-01-02 10:46:39','2014-01-02 10:46:39','Strings in C are kind of a pain in the ass.\r\n\r\n<blockquote>Char pointers defined with an initialization value [may] go into a read-only\r\nsegment</blockquote>\r\n\r\nconsider the following:\r\n<pre class=\"prettyprint\">\r\n    char * s1 = \"Hello Word\";       \\\\1  \r\n    const char * s2 = \"Hello Word\"; \\\\2\r\n\r\n    char s3[] = \"Hello Word\"; \\\\3\r\n    char s4[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\n\' }; \\\\4\r\n</pre>\r\n\r\nIn the first case, s1 is a [modifiable] pointer to a\r\n<strong>read-only</strong> string literal / array of char: we can do <code>s1 = \"another\r\n    string\";</code>, but <code>s1[1] = \'a\'</code> will result in an undefined\r\nbehavior: segfault or can work 50% of the time. So 1 and 2 are equivalent.\r\n\r\nThe 3 and 4 initialisations are equivalent: we\r\ncreate an array of char, not a pointer, which means that the adress it\r\nreferences is <strong>non-modifiable</strong>: indeed, an array can be thought\r\nof as a <i>non-modifiable pointer to a specific block of memory</i>.\r\n\r\nThe difference between a pointer and an array is important if we plan to use\r\nthe variable in a static context. Consider the following:\r\n<code class=\"prettyprint\">\r\n// 1\r\nchar *hi = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n\r\n// 2\r\nchar hi[] = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n</code>\r\n\r\nThe first block triggers an <code>error: initializer element is not\r\n    constant</code>, while the second works as expected. \r\n\r\n<h2>Initializing modifiable strings</h2>\r\nIn C, litterals are read-only. If we really want a modifiable string, two\r\nchoices: either use malloc and then sprintf or such, or use strdup or asnprintf which take care of the malloc part for us. In either case, we should think of freeing the string when we are done.\r\n\r\n<pre class=\"prettyprint\">\r\nchar * modifiable; // easiest way \r\nmodifiable = strdup(\"A litteral\");\r\n</pre>\r\nIf you are worried that you don\'t have strdup available, add\r\n<code>AC_CHECK_FUNCS([asprintf strdup])</code> in your configure.ac and use this block:\r\n<pre class=\"prettyprint\">\r\n#ifndef HAVE_STRDUP\r\nchar *strdup( char const * in ){\r\n    if(!in) return NULL;\r\n    char * out;\r\n    asprintf( &out, \"%s\", in );\r\n    return out;\r\n}\r\n#endif\r\n</pre>\r\n\r\n\r\n<h2>A code which resumes everything</h2>\r\n[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/c_strings.c]\r\n','C strings ','','inherit','closed','open','','243-revision-v1','','','2014-01-02 10:46:39','2014-01-02 10:46:39','',243,'http://error418.no-ip.info/mywiki/243-revision-v1/',0,'revision','',0),(245,3,'2014-01-02 10:50:13','2014-01-02 10:50:13','Strings in C are kind of a pain in the ass.\r\n\r\n<blockquote>Char pointers defined with an initialization value [may] go into a read-only\r\nsegment</blockquote>\r\n\r\nconsider the following:\r\n<pre class=\"prettyprint\">\r\n    char * s1 = \"Hello Word\";       \\\\1  \r\n    const char * s2 = \"Hello Word\"; \\\\2\r\n\r\n    char s3[] = \"Hello Word\"; \\\\3\r\n    char s4[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\n\' }; \\\\4\r\n</pre>\r\n\r\nIn the first case, s1 is a [modifiable] pointer to a\r\n<strong>read-only</strong> string literal / array of char: we can do <code>s1 = \"another\r\n    string\";</code>, but <code>s1[1] = \'a\'</code> will result in an undefined\r\nbehavior: segfault or can work 50% of the time. So 1 and 2 are equivalent.\r\n\r\nThe 3 and 4 initialisations are equivalent: we\r\ncreate an array of char, not a pointer, which means that the adress it\r\nreferences is <strong>non-modifiable</strong>: indeed, an array can be thought\r\nof as a <i>non-modifiable pointer to a specific block of memory</i>.\r\n\r\nThe difference between a pointer and an array is important if we plan to use\r\nthe variable in a static context. Consider the following:\r\n<code class=\"prettyprint\">\r\n// 1\r\nchar *hi = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n\r\n// 2\r\nchar hi[] = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n</code>\r\n\r\nThe first block triggers an <code>error: initializer element is not\r\n    constant</code>, while the second works as expected. \r\n\r\n<h2>Initializing modifiable strings</h2>\r\nIn C, litterals are read-only. If we really want a modifiable string, two\r\nchoices: either use malloc and then sprintf or such, or use strdup or asnprintf which take care of the malloc part for us. In either case, we should think of freeing the string when we are done.\r\n\r\n<pre class=\"prettyprint\">\r\nchar * modifiable; // easiest way \r\nmodifiable = strdup(\"A litteral\");\r\n</pre>\r\nIf you are worried that you don\'t have strdup available, add\r\n<code>AC_CHECK_FUNCS([asprintf strdup])</code> in your configure.ac and use this block:\r\n<pre class=\"prettyprint\">\r\n#ifndef HAVE_STRDUP\r\nchar *strdup( char const * in ){\r\n    if(!in) return NULL;\r\n    char * out;\r\n    asprintf( &out, \"%s\", in );\r\n    return out;\r\n}\r\n#endif\r\n</pre>\r\n\r\n\r\n<h2>A code which resumes everything</h2>\r\n<pre class=\"prettyprint\">\r\n[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/c_strings.c]\r\n</pre>\r\n','C strings ','','inherit','closed','open','','243-revision-v1','','','2014-01-02 10:50:13','2014-01-02 10:50:13','',243,'http://error418.no-ip.info/mywiki/243-revision-v1/',0,'revision','',0),(246,3,'2014-01-02 10:51:29','2014-01-02 10:51:29','Strings in C are kind of a pain in the ass.\r\n\r\n<blockquote>Char pointers defined with an initialization value [may] go into a read-only\r\nsegment</blockquote>\r\n\r\nconsider the following:\r\n<pre class=\"prettyprint\">\r\n    char * s1 = \"Hello Word\";       \\\\1  \r\n    const char * s2 = \"Hello Word\"; \\\\2\r\n\r\n    char s3[] = \"Hello Word\"; \\\\3\r\n    char s4[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\n\' }; \\\\4\r\n</pre>\r\n\r\nIn the first case, s1 is a [modifiable] pointer to a\r\n<strong>read-only</strong> string literal / array of char: we can do <code>s1 = \"another\r\n    string\";</code>, but <code>s1[1] = \'a\'</code> will result in an undefined\r\nbehavior: segfault or can work 50% of the time. So 1 and 2 are equivalent.\r\n\r\nThe 3 and 4 initialisations are equivalent: we\r\ncreate an array of char, not a pointer, which means that the adress it\r\nreferences is <strong>non-modifiable</strong>: indeed, an array can be thought\r\nof as a <i>non-modifiable pointer to a specific block of memory</i>.\r\n\r\nThe difference between a pointer and an array is important if we plan to use\r\nthe variable in a static context. Consider the following:\r\n<pre class=\"prettyprint\">\r\n// 1\r\nchar *hi = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n\r\n// 2\r\nchar hi[] = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n</pre>\r\n\r\nThe first block triggers an <code>error: initializer element is not\r\n    constant</code>, while the second works as expected. \r\n\r\n<h2>Initializing modifiable strings</h2>\r\nIn C, litterals are read-only. If we really want a modifiable string, two\r\nchoices: either use malloc and then sprintf or such, or use strdup or asnprintf which take care of the malloc part for us. In either case, we should think of freeing the string when we are done.\r\n\r\n<pre class=\"prettyprint\">\r\nchar * modifiable; // easiest way \r\nmodifiable = strdup(\"A litteral\");\r\n</pre>\r\nIf you are worried that you don\'t have strdup available, add\r\n<code>AC_CHECK_FUNCS([asprintf strdup])</code> in your configure.ac and use this block:\r\n<pre class=\"prettyprint\">\r\n#ifndef HAVE_STRDUP\r\nchar *strdup( char const * in ){\r\n    if(!in) return NULL;\r\n    char * out;\r\n    asprintf( &out, \"%s\", in );\r\n    return out;\r\n}\r\n#endif\r\n</pre>\r\n\r\n\r\n<h2>A code which resumes everything</h2>\r\n<pre class=\"prettyprint\">\r\n[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/c_strings.c]\r\n</pre>\r\n','C strings ','','inherit','closed','open','','243-revision-v1','','','2014-01-02 10:51:29','2014-01-02 10:51:29','',243,'http://error418.no-ip.info/mywiki/243-revision-v1/',0,'revision','',0),(247,3,'2014-01-02 10:52:33','2014-01-02 10:52:33','Strings in C are kind of a pain in the ass.  <blockquote>Char pointers defined with an initialization value [may] go into a read-only segment</blockquote>\r\n\r\nconsider the following: <pre class=\"prettyprint\"> char * s1 = \"Hello Word\";       \\\\1  const char * s2 = \"Hello Word\"; \\\\2 char s3[] = \"Hello Word\"; \\\\3 char s4[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\n\' }; \\\\4 </pre>\r\n\r\nIn the first case, s1 is a [modifiable] pointer to a <strong>read-only</strong> string literal / array of char: we can do <code>s1 = \"another string\";</code>, but <code>s1[1] = \'a\'</code> will result in an undefined behavior: segfault or can work 50% of the time. So 1 and 2 are equivalent.\r\n\r\nThe 3 and 4 initialisations are equivalent: we create an array of char, not a pointer, which means that the adress it references is <strong>non-modifiable</strong>: indeed, an array can be thought of as a <i>non-modifiable pointer to a specific block of memory</i>.  The difference between a pointer and an array is important if we plan to use the variable in a static context. Consider the following: <pre class=\"prettyprint\"> // 1 char *hi = \"hello\"; char *array[3] = { hi, \"world\", \"there.\" };\r\n\r\n// 2 char hi[] = \"hello\"; char *array[3] = { hi, \"world\", \"there.\" }; </pre>\r\n\r\nThe first block triggers an <code>error: initializer element is not constant</code>, while the second works as expected.  <h2>Initializing modifiable strings</h2> In C, litterals are read-only. If we really want a modifiable string, two choices: either use malloc and then sprintf or such, or use strdup or asnprintf which take care of the malloc part for us. In either case, we should think of freeing the string when we are done.\r\n\r\n<pre class=\"prettyprint\"> char * modifiable; // easiest way modifiable = strdup(\"A litteral\"); </pre> If you are worried that you don\'t have strdup available, add <code>AC_CHECK_FUNCS([asprintf strdup])</code> in your configure.ac and use this block: <pre class=\"prettyprint\"> #ifndef HAVE_STRDUP char *strdup( char const * in ){ if(!in) return NULL; char * out; asprintf( &out, \"%s\", in ); return out; } #endif </pre>\r\n\r\n<h2>A code which resumes everything</h2> <pre class=\"prettyprint\"> [display_file path=/wp-content/themes/twentythirteen-child/post-files/c_strings.c] </pre>\r\n','C strings ','','inherit','closed','open','','243-revision-v1','','','2014-01-02 10:52:33','2014-01-02 10:52:33','',243,'http://error418.no-ip.info/mywiki/243-revision-v1/',0,'revision','',0),(248,3,'2014-01-02 10:54:43','2014-01-02 10:54:43','Strings in C are kind of a pain in the ass.\r\n\r\n<blockquote>Char pointers defined with an initialization value [may] go into a read-only segment</blockquote>\r\n\r\nconsider the following:\r\n<pre class=\"prettyprint\">\r\n    char * s1 = \"Hello Word\";       \\\\1  \r\n    const char * s2 = \"Hello Word\"; \\\\2\r\n\r\n    char s3[] = \"Hello Word\"; \\\\3\r\n    char s4[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\n\' }; \\\\4\r\n</pre>\r\n\r\nIn the first case, s1 is a [modifiable] pointer to a <strong>read-only</strong> string literal / array of char: we can do <code>s1 = \"another\r\n    string\";</code>, but <code>s1[1] = \'a\'</code> will result in an undefined\r\nbehavior: segfault or can work 50% of the time. So 1 and 2 are equivalent.\r\n\r\nThe 3 and 4 initialisations are equivalent: we create an array of char, not a pointer, which means that the adress it references is <strong>non-modifiable</strong>: indeed, an array can be thought\r\nof as a <i>non-modifiable pointer to a specific block of memory</i>.\r\nThe difference between a pointer and an array is important if we plan to use\r\nthe variable in a static context. Consider the following:\r\n<pre class=\"prettyprint\">\r\n// 1\r\nchar *hi = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n\r\n// 2\r\nchar hi[] = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n</pre>\r\n\r\nThe first block triggers an <code>error: initializer element is not\r\n    constant</code>, while the second works as expected. \r\n\r\n<h2>Initializing modifiable strings</h2>\r\nIn C, litterals are read-only. If we really want a modifiable string, two choices: either use malloc and then sprintf or such, or use strdup or asnprintf which take care of the malloc part for us. In either case, we should think of freeing the string when we are done.\r\n\r\n<pre class=\"prettyprint\">\r\nchar * modifiable; // easiest way \r\nmodifiable = strdup(\"A litteral\");\r\n</pre>\r\nIf you are worried that you don\'t have strdup available, add\r\n<code>AC_CHECK_FUNCS([asprintf strdup])</code> in your configure.ac and use this block:\r\n<pre class=\"prettyprint\">\r\n#ifndef HAVE_STRDUP\r\nchar *strdup( char const * in ){\r\n    if(!in) return NULL;\r\n    char * out;\r\n    asprintf( &out, \"%s\", in );\r\n    return out;\r\n}\r\n#endif\r\n</pre>\r\n\r\n\r\n<h2>A code which resumes everything</h2>\r\n<pre class=\"prettyprint\">\r\n[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/c_strings.c]\r\n</pre>\r\n','C strings ','','inherit','closed','open','','243-revision-v1','','','2014-01-02 10:54:43','2014-01-02 10:54:43','',243,'http://error418.no-ip.info/mywiki/243-revision-v1/',0,'revision','',0),(249,3,'2014-01-02 10:55:34','2014-01-02 10:55:34','Strings in C are kind of a pain in the ass.\r\n\r\n<blockquote>Char pointers defined with an initialization value [may] go into a read-only segment</blockquote>\r\n\r\nconsider the following:\r\n<pre class=\"prettyprint\">\r\n    char * s1 = \"Hello Word\";       \\\\1  \r\n    const char * s2 = \"Hello Word\"; \\\\2\r\n\r\n    char s3[] = \"Hello Word\"; \\\\3\r\n    char s4[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\n\' }; \\\\4\r\n</pre>\r\n\r\nIn the first case, s1 is a [modifiable] pointer to a <strong>read-only</strong> string literal / array of char: we can do <code>s1 = \"another string\";</code>, but <code>s1[1] = \'a\'</code> will result in an undefined behavior: segfault or can work 50% of the time. So 1 and 2 are equivalent.\r\n\r\nThe 3 and 4 initialisations are equivalent: we create an array of char, not a pointer, which means that the adress it references is <strong>non-modifiable</strong>: indeed, an array can be thought of as a <i>non-modifiable pointer to a specific block of memory</i>.\r\n\r\nThe difference between a pointer and an array is important if we plan to use the variable in a static context. Consider the following:\r\n<pre class=\"prettyprint\">\r\n// 1\r\nchar *hi = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n\r\n// 2\r\nchar hi[] = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n</pre>\r\n\r\nThe first block triggers an <code>error: initializer element is not constant</code>, while the second works as expected. \r\n\r\n<h2>Initializing modifiable strings</h2>\r\nIn C, litterals are read-only. If we really want a modifiable string, two choices: either use malloc and then sprintf or such, or use strdup or asnprintf which take care of the malloc part for us. In either case, we should think of freeing the string when we are done.\r\n\r\n<pre class=\"prettyprint\">\r\nchar * modifiable; // easiest way \r\nmodifiable = strdup(\"A litteral\");\r\n</pre>\r\nIf you are worried that you don\'t have strdup available, add\r\n<code>AC_CHECK_FUNCS([asprintf strdup])</code> in your configure.ac and use this block:\r\n<pre class=\"prettyprint\">\r\n#ifndef HAVE_STRDUP\r\nchar *strdup( char const * in ){\r\n    if(!in) return NULL;\r\n    char * out;\r\n    asprintf( &out, \"%s\", in );\r\n    return out;\r\n}\r\n#endif\r\n</pre>\r\n\r\n\r\n<h2>A code which resumes everything</h2>\r\n<pre class=\"prettyprint\">\r\n[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/c_strings.c]\r\n</pre>\r\n','C strings ','','inherit','closed','open','','243-revision-v1','','','2014-01-02 10:55:34','2014-01-02 10:55:34','',243,'http://error418.no-ip.info/mywiki/243-revision-v1/',0,'revision','',0),(250,3,'2014-01-02 10:56:27','2014-01-02 10:56:27','Strings in C are kind of a pain in the ass.\r\n<blockquote>Char pointers defined with an initialization value [may] go into a read-only segment</blockquote>\r\nconsider the following:\r\n<pre class=\"prettyprint\">\r\n    char * s1 = \"Hello Word\";       \\\\1  \r\n    const char * s2 = \"Hello Word\"; \\\\2\r\n\r\n    char s3[] = \"Hello Word\"; \\\\3\r\n    char s4[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\n\' }; \\\\4</pre>\r\nIn the first case, s1 is a [modifiable] pointer to a <strong>read-only</strong> string literal / array of char: we can do <code>s1 = \"another string\";</code>, but <code>s1[1] = \'a\'</code> will result in an undefined behavior: segfault or can work 50% of the time. So 1 and 2 are equivalent.\r\n\r\nThe 3 and 4 initialisations are equivalent: we create an array of char, not a pointer, which means that the adress it references is <strong>non-modifiable</strong>: indeed, an array can be thought of as a <i>non-modifiable pointer to a specific block of memory</i>.\r\n\r\nThe difference between a pointer and an array is important if we plan to use the variable in a static context. Consider the following:\r\n<pre class=\"prettyprint\">\r\n// 1\r\nchar *hi = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n\r\n// 2\r\nchar hi[] = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};</pre>\r\nThe first block triggers an <code>error: initializer element is not constant</code>, while the second works as expected.\r\n<h2>Initializing modifiable strings</h2>\r\nIn C, litterals are read-only. If we really want a modifiable string, two choices: either use malloc and then sprintf or such, or use strdup or asnprintf which take care of the malloc part for us. In either case, we should think of freeing the string when we are done.\r\n<pre class=\"prettyprint\">\r\nchar * modifiable; // easiest way \r\nmodifiable = strdup(\"A litteral\");</pre>\r\nIf you are worried that you don\'t have strdup available, add\r\n<code>AC_CHECK_FUNCS([asprintf strdup])</code> in your configure.ac and use this block:\r\n<pre class=\"prettyprint\">\r\n#ifndef HAVE_STRDUP\r\nchar *strdup( char const * in ){\r\n    if(!in) return NULL;\r\n    char * out;\r\n    asprintf( &out, \"%s\", in );\r\n    return out;\r\n}\r\n#endif</pre>\r\n<h2>A code which resumes everything</h2>\r\n<pre class=\"prettyprint\">\r\n[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/c_strings.c]</pre>','C strings ','','inherit','closed','open','','243-revision-v1','','','2014-01-02 10:56:27','2014-01-02 10:56:27','',243,'http://error418.no-ip.info/mywiki/243-revision-v1/',0,'revision','',0),(251,3,'2014-01-02 13:27:39','2014-01-02 13:27:39','<h2>bash prompt</h2>\nA nice function to show only the two last directories on the PWD path:\n<pre class=\"prettyprint\">_PS1() {\n    # note: with split, $_[0] is empty since pwd always begin with /\n    echo \"$PWD\" | perl -e \'$_ = \\&lt;&gt;; chomp; \n    print \"/\" and exit if $_ eq \"/\";\n    s|$ENV{HOME}|~|g; @_ = split \"/\", $_; \n    print $_ and exit if scalar @_ \\&lt; 2;\n    print \"/\" if $_[0] eq \"\" and scalar @_ == 3;\n    print \"$_[-2]/$_[-1]\";\'\n}</pre>\nYou can use it directly in the PS1= in your bashrc. For example:<code>PS1=\'[\\[\\033[00;34m\\]$(_PS1 )\\[\\033[00;37m\\]]\\[\\033[00m\\] \'</code>\n\nA really funny PS1:\n<pre class=\"prettyprint\">PS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>\n<div style=\"text-align:center\"><a href=\"http://ywiki/wp-content/uploads/2013/10/funny_bash_prompt.png\"><img class=\"alignnone size-full wp-image-94\" style=\"max-width: 70%;\" alt=\"funny_bash_prompt\" src=\"/mywiki/wp-content/uploads/2013/10/funny_bash_prompt.png\" /></a></div>\nGot those funny ideas here: <a href=\"https://wiki.archlinux.org/index.php/Color_Bash_Prompt\">https://wiki.archlinux.org/index.php/Color_Bash_Prompt</a>\n\nGood to know : the - symbol is made from the following sequence : <code>\\342\\224\\200</code>','Linux environment tip and tricks','','inherit','closed','open','','81-autosave-v1','','','2014-01-02 13:27:39','2014-01-02 13:27:39','',81,'http://error418.no-ip.info/mywiki/81-autosave-v1/',0,'revision','',0),(252,3,'2014-01-02 13:28:39','2014-01-02 13:28:39','<h2>bash prompt</h2>\r\nA nice function to show only the two last directories on the PWD path:\r\n<pre class=\"prettyprint\">_PS1() {\r\n    # note: with split, $_[0] is empty since pwd always begin with /\r\n    echo \"$PWD\" | perl -e \'$_ = \\&lt;&gt;; chomp; \r\n    print \"/\" and exit if $_ eq \"/\";\r\n    s|$ENV{HOME}|~|g; @_ = split \"/\", $_; \r\n    print $_ and exit if scalar @_ \\&lt; 2;\r\n    print \"/\" if $_[0] eq \"\" and scalar @_ == 3;\r\n    print \"$_[-2]/$_[-1]\";\'\r\n}</pre>\r\nYou can use it directly in the PS1= in your bashrc. For example:<code>PS1=\'[\\[\\033[00;34m\\]$(_PS1 )\\[\\033[00;37m\\]]\\[\\033[00m\\] \'</code>\r\n\r\nA really funny PS1:\r\n<pre class=\"prettyprint\">PS1=\"\\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\214\\\\[\\\\e]0;\\\\u@\\\\h: \\\\w\\\\a\\\\][\\\\[\\\\033[00;34m\\\\]$(_PS1 )\\\\[\\\\033[00;37m\\\\]]\\\\[\\\\033[00m\\\\] \\\\n\\\\[\\\\033[0;37m\\\\]\\\\342\\\\224\\\\224\\\\342\\\\224\\\\200\\\\342\\\\224\\\\200 \\\\[\\\\033[0m\\\\]\"</pre>\r\n<div style=\"text-align:center\"><a href=\"/mywiki/wp-content/uploads/2013/10/funny_bash_prompt.png\"><img class=\"alignnone size-full wp-image-94\" style=\"max-width: 70%;\" alt=\"funny_bash_prompt\" src=\"/mywiki/wp-content/uploads/2013/10/funny_bash_prompt.png\" /></a></div>\r\nGot those funny ideas here: <a href=\"https://wiki.archlinux.org/index.php/Color_Bash_Prompt\">https://wiki.archlinux.org/index.php/Color_Bash_Prompt</a>\r\n\r\nGood to know : the - symbol is made from the following sequence : <code>\\342\\224\\200</code>','Linux environment tip and tricks','','inherit','closed','open','','81-revision-v1','','','2014-01-02 13:28:39','2014-01-02 13:28:39','',81,'http://error418.no-ip.info/mywiki/81-revision-v1/',0,'revision','',0),(253,3,'2014-01-03 17:37:32','2014-01-03 17:37:32','<h2>Debug and stuff</h2>\r\n<ul>\r\n	<li>run only the preprocessor: <code>gcc -std=c99 -E source.c</code></li>\r\n</ul>\r\n<h2>GDB</h2>\r\n<ul>\r\n	<li>print the type of a variable:  <code>ptype <em>var</em></code> or <code>whatis <em>var</em></code></li>\r\n	<li>change a variable\'s value:  <code>set <em>var=value</em></code></li>\r\n	<li>use an internal variable, for example to iterate throught a linked list:\r\n<pre class=\"prettyprint lang-text with-comments\"># with an array\r\n(gdb) set $p = the_array\r\n(gdb) p *($p++)\r\n(gdb) # enter to repeat the last command\r\n# with a linked list\r\n(gdb) define do_iter\r\n&gt; p $p-&gt;value\r\n&gt; set $p = $p-&gt;next\r\n&gt; end\r\n(gdb) set $p = list-&gt;head\r\n(gdb) do_iter\r\n(gdb) # press enter until the last elt</pre>\r\n</li>\r\n</ul>','C development tricks ','','publish','closed','open','','c-development-tricks','','','2014-01-04 11:12:06','2014-01-04 11:12:06','',0,'http://error418.no-ip.info/mywiki/?p=253',0,'post','',0),(254,3,'2014-01-03 17:37:08','2014-01-03 17:37:08','<h2>Debug and stuff</h2>\r\n<ul>\r\n	<li>run only the preprocessor: <code>gcc -std=c99 -E source.c</code></li>\r\n</ul>\r\n<h2>GDB</h2>\r\n<ul>\r\n	<li>print the type of a variable:  <code>ptype <em>var</em></code> or <code>whatis <em>var</em></code></li>\r\n	<li>change a variable\'s value:  <code>set <em>var=value</em></code></li>\r\n	<li></li>\r\n</ul>','C development tricks ','','inherit','closed','open','','253-revision-v1','','','2014-01-03 17:37:08','2014-01-03 17:37:08','',253,'http://error418.no-ip.info/mywiki/253-revision-v1/',0,'revision','',0),(255,3,'2014-01-03 17:37:32','2014-01-03 17:37:32','<h2>Debug and stuff</h2>\r\n<ul>\r\n	<li>run only the preprocessor: <code>gcc -std=c99 -E source.c</code></li>\r\n</ul>\r\n<h2>GDB</h2>\r\n<ul>\r\n	<li>print the type of a variable:  <code>ptype <em>var</em></code> or <code>whatis <em>var</em></code></li>\r\n	<li>change a variable\'s value:  <code>set <em>var=value</em></code></li>\r\n	<li>use an internal variable, for example to iterate throught a linked list:\r\n<pre class=\"prettyprint lang-text with-comments\"># with an array\r\n(gdb) set $p = the_array\r\n(gdb) p *($p++)\r\n(gdb) # enter to repeat the last command\r\n# with a linked list\r\n(gdb) define do_iter\r\n&gt; p $p-&gt;value\r\n&gt; set $p = $p-&gt;next\r\n&gt; end\r\n(gdb) set $p = list-&gt;head\r\n(gdb) do_iter\r\n(gdb) # press enter until the last elt</pre>\r\n</li>\r\n</ul>','C development tricks ','','inherit','closed','open','','253-revision-v1','','','2014-01-03 17:37:32','2014-01-03 17:37:32','',253,'http://error418.no-ip.info/mywiki/253-revision-v1/',0,'revision','',0),(256,3,'2014-01-04 10:19:04','2014-01-04 10:19:04','<h2>Enable the console to support UTF-8</h2>\r\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\r\n<ol>\r\n	<li>open a console</li>\r\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\r\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\r\n</ol>\r\nTo set your console to unicode once and for all, type the following in your console and restart your computer. But be aware that some old applications might behave incorrectly:\r\n<pre class=\"prettyprint lang-text with-comments\"># set the console to use latin1 character set by default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 65001\r\n# come back to default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 437</pre>\r\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.\r\nIBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\r\n\r\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often use different code pages (thanks to the DOS legacy):\r\n<ul>\r\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\r\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...\r\n<blockquote>Back in the days of MS-DOS, there was only one code page, namely, the code page that was provided by the original equipment manufacturer in the form of glyphs embedded in the character generator on the video card.\r\nWhen Windows came along, the so-called ANSI code page was introduced and the name \"OEM\" was used to refer to the MS-DOS code page.\r\n\r\nOver the years, Windows has relied less and less on the character generator embedded in the video card, to the point where the term \"OEM character set\" no longer has anything to do with the original equipment manufacturer. It is just a convenient term to refer to \"the character set used by MS-DOS and console programs.\"</blockquote>\r\n</li>\r\n</ul>\r\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1). By default, the console use cp 855, which is Cyrillic (try to type <code>chcp</code> in the console to know the active OEM).\r\n<h2>Handle files with accented letters</h2>\r\nAfter trying a lot of different solutions, here is what worked for me.\r\n<ul>\r\n	<li>always begin your perl script with the directive <code>use utf8</code></li>\r\n	<li>for the console, set the encoding stdout should use with <code>binmode STDOUT \":encoding(...)\"</code></li>\r\n	<li>for strings or filenames, always ensure that you convert all strings from outside (internet, ...) to utf8. Then, texts used for filenames or written to a file should be converted to latin1 (cp1252). Note that for the console, utf8 should be ok, as long as you set the binmode of stdout.</li>\r\n</ul>\r\nThe following script tries to resume everything:\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse utf8;	# always use utf8 internally\r\n\r\nuse URI::Escape; \r\nuse Encode qw(encode decode); # import the functions encode/decode\r\n\r\nbinmode STDOUT, \":encoding(UTF-8)\"; # stdout set to utf8\r\n\r\n# handle existing files\r\nsub list_dirs {\r\n	my ($path) = @_;\r\n	my @resources;\r\n	opendir( D, $path ) or die \"Could not open directory \'$path\'\\n\"; \r\n	map {  \r\n		push @resources, \r\n		decode( \"cp1252\", $_)  # decode: latin1 => utf8\r\n	} readdir D;\r\n	closedir D;\r\n\r\n	# accents will be correctly handled\r\n	map { print $_, \"\\n\" } @resources; \r\n\r\n	return \\@resources;	\r\n}\r\n\r\n# download a pdf with accented letters in title + content\r\nsub download_pdf {\r\n	my ($url) = @_;\r\n	my $resp = LWP::UserAgent->new()->get( $url );\r\n	# ensure you have utf8\r\n	$_ = decode(\"utf8\", uri_unescape( $1 )) \r\n		if $url =~ m/([^\\/]+pdf)/; \r\n\r\n	# filename converted to latin1 + for pdfs, \r\n	# be sure to write RAW BYTES to file\r\n	open F, \">:raw\", encode( \"cp1252\", $_ ) \r\n		or die(\"Could not write file \'$_\'\\n\"); \r\n	print F  $resp->content;\r\n	close F;	\r\n}</pre>','Perl encoding on windows','','publish','closed','open','','perl-encoding-on-windows','','','2014-01-04 11:22:04','2014-01-04 11:22:04','',0,'http://error418.no-ip.info/mywiki/?p=256',0,'post','',0),(257,3,'2014-01-04 10:16:00','2014-01-04 10:16:00','<h2>Enable the console to support UTF-8</h2>\r\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\r\n<ol>\r\n	<li>open a console</li>\r\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\r\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\r\n</ol>\r\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.\r\n\r\nIBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\r\n\r\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often used different code pages (thanks to the DOS legacy):\r\n<ul>\r\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\r\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...</li>\r\n</ul>\r\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1).','Perl encoding on windows','','inherit','closed','open','','256-revision-v1','','','2014-01-04 10:16:00','2014-01-04 10:16:00','',256,'http://error418.no-ip.info/mywiki/256-revision-v1/',0,'revision','',0),(258,3,'2014-01-04 10:16:43','2014-01-04 10:16:43','<h2>Enable the console to support UTF-8</h2>\r\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\r\n<ol>\r\n	<li>open a console</li>\r\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\r\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\r\n</ol>\r\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.\r\n\r\nIBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\r\n\r\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often use different code pages (thanks to the DOS legacy):\r\n<ul>\r\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\r\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...</li>\r\n</ul>\r\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1).','Perl encoding on windows','','inherit','closed','open','','256-revision-v1','','','2014-01-04 10:16:43','2014-01-04 10:16:43','',256,'http://error418.no-ip.info/mywiki/256-revision-v1/',0,'revision','',0),(259,3,'2014-01-04 10:19:04','2014-01-04 10:19:04','<h2>Enable the console to support UTF-8</h2>\r\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\r\n<ol>\r\n	<li>open a console</li>\r\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\r\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\r\n</ol>\r\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.<br />IBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\r\n\r\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often use different code pages (thanks to the DOS legacy):\r\n<ul>\r\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\r\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...\r\n		<blockquote>Back in the days of MS-DOS, there was only one code page, namely, the code page that was provided by the original equipment manufacturer in the form of glyphs embedded in the character generator on the video card. When Windows came along, the so-called ANSI code page was introduced and the name \"OEM\" was used to refer to the MS-DOS code page. Over the years, Windows has relied less and less on the character generator embedded in the video card, to the point where the term \"OEM character set\" no longer has anything to do with the original equipment manufacturer. It is just a convenient term to refer to \"the character set used by MS-DOS and console programs.\"</blockquote>\r\n	</li>\r\n</ul>\r\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1).','Perl encoding on windows','','inherit','closed','open','','256-revision-v1','','','2014-01-04 10:19:04','2014-01-04 10:19:04','',256,'http://error418.no-ip.info/mywiki/256-revision-v1/',0,'revision','',0),(260,3,'2014-01-04 11:03:51','2014-01-04 11:03:51','<h2>Enable the console to support UTF-8</h2>\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\n<ol>\n	<li>open a console</li>\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\n</ol>\nTo set your console to unicode once and for all, type the following in your console and restart your computer. But be aware that some old applications might behave incorrectly:\n<pre class=\"prettyprint lang-text with-comments\"># set the console to use latin1 character set by default\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 65001\n# come back to default\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 437</pre>\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.\nIBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\n\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often use different code pages (thanks to the DOS legacy):\n<ul>\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...\n<blockquote>Back in the days of MS-DOS, there was only one code page, namely, the code page that was provided by the original equipment manufacturer in the form of glyphs embedded in the character generator on the video card.\nWhen Windows came along, the so-called ANSI code page was introduced and the name \"OEM\" was used to refer to the MS-DOS code page.\n\nOver the years, Windows has relied less and less on the character generator embedded in the video card, to the point where the term \"OEM character set\" no longer has anything to do with the original equipment manufacturer. It is just a convenient term to refer to \"the character set used by MS-DOS and console programs.\"</blockquote>\n</li>\n</ul>\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1). By default, the console use cp 855, which is Cyrillic (try to type <code>chcp</code> in the console to know the active OEM).\n<h2>Handle files with accented letters</h2>\nAfter trying a lot of different solutions, here is what worked for me.\n<ul>\n	<li>always begin your perl script with the directive <code>use utf8</code></li>\n	<li>for the console, set the encoding stdout should use with <code>binmode STDOUT \":encoding(...)\"</code></li>\n	<li>for strings or filenames, always ensure that you convert all strings from outside (internet, ...) to utf8. Then, texts used for filenames or written to a file should be converted to latin1 (cp1252). Note that for the console, utf8 should be ok, as long as you set the binmode of stdout.</li>\n</ul>\nThe following script tries to resume everything:\n<pre class=\"prettyprint\">\n#!/usr/bin/env perl\n\nuse warnings;\nuse utf8;	# always use utf8 internally\n\nuse URI::Escape; \nuse Encode qw(encode decode); # import the functions encode/decode\n\nbinmode STDOUT, \":encoding(UTF-8)\"; # stdout set to utf8\n\n# handle existing files\nsub list_dirs {\n	my ($path) = @_;\n	my @resources;\n	opendir( D, $path ) or die \"Could not open directory \'$path\'\\n\"; \n	map {  \n		push @resources, \n		decode( \"cp1252\", $_)  # decode: latin1 => utf8\n	} readdir D;\n	closedir D;\n\n	# accents will be correctly handled\n	map { print $_, \"\\n\" } @resources; \n\n	return \\@resources;	\n}\n\n# download a pdf with accented letters in title + content\nsub download_pdf {\n	my ($url) = @_;\n	my $resp = LWP::UserAgent->new()->get( $url );\n	# ensure you have utf9\n	$_ = decode(\"utf8\", uri_unescape( $1 ))   # utf8 !!\n		if $url =~ m/([^\\/]+pdf)/; \n\n	# filename converted to latin1 + for pdfs, \n	# be sure to write RAW BYTES to file\n	open F, \">:raw\", encode( \"cp1252\", $_ ) \n		or die(\"Could not write file \'$_\'\\n\"); \n	print F  $resp->content;\n	close F;	\n}</pre>','Perl encoding on windows','','inherit','closed','open','','256-autosave-v1','','','2014-01-04 11:03:51','2014-01-04 11:03:51','',256,'http://error418.no-ip.info/mywiki/256-autosave-v1/',0,'revision','',0),(261,3,'2014-01-04 10:21:21','2014-01-04 10:21:21','<h2>Enable the console to support UTF-8</h2>\r\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\r\n<ol>\r\n	<li>open a console</li>\r\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\r\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\r\n</ol>\r\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.\r\nIBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\r\n\r\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often use different code pages (thanks to the DOS legacy):\r\n<ul>\r\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\r\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...\r\n<blockquote>Back in the days of MS-DOS, there was only one code page, namely, the code page that was provided by the original equipment manufacturer in the form of glyphs embedded in the character generator on the video card. \r\n	When Windows came along, the so-called ANSI code page was introduced and the name \"OEM\" was used to refer to the MS-DOS code page. \r\n	\r\n	Over the years, Windows has relied less and less on the character generator embedded in the video card, to the point where the term \"OEM character set\" no longer has anything to do with the original equipment manufacturer. It is just a convenient term to refer to \"the character set used by MS-DOS and console programs.\"</blockquote>\r\n</li>\r\n</ul>\r\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1). By default, the console use cp 855, which is Cyrillic (try to type <code>chcp</code> in the console to know the active OEM).','Perl encoding on windows','','inherit','closed','open','','256-revision-v1','','','2014-01-04 10:21:21','2014-01-04 10:21:21','',256,'http://error418.no-ip.info/mywiki/256-revision-v1/',0,'revision','',0),(262,3,'2014-01-04 10:26:19','2014-01-04 10:26:19','<h2>Enable the console to support UTF-8</h2>\r\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\r\n<ol>\r\n	<li>open a console</li>\r\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\r\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\r\n</ol>\r\n\r\nTo set your console to unicode once and for all, type the following in your console and restart your computer. But be aware that some old applications might behave incorrectly:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# set the console to use latin1 character set by default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 65001\r\n# come back to default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 437\r\n</pre>\r\n\r\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.\r\nIBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\r\n\r\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often use different code pages (thanks to the DOS legacy):\r\n<ul>\r\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\r\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...\r\n<blockquote>Back in the days of MS-DOS, there was only one code page, namely, the code page that was provided by the original equipment manufacturer in the form of glyphs embedded in the character generator on the video card. \r\n	When Windows came along, the so-called ANSI code page was introduced and the name \"OEM\" was used to refer to the MS-DOS code page. \r\n\r\n	Over the years, Windows has relied less and less on the character generator embedded in the video card, to the point where the term \"OEM character set\" no longer has anything to do with the original equipment manufacturer. It is just a convenient term to refer to \"the character set used by MS-DOS and console programs.\"</blockquote>\r\n</li>\r\n</ul>\r\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1). By default, the console use cp 855, which is Cyrillic (try to type <code>chcp</code> in the console to know the active OEM).','Perl encoding on windows','','inherit','closed','open','','256-revision-v1','','','2014-01-04 10:26:19','2014-01-04 10:26:19','',256,'http://error418.no-ip.info/mywiki/256-revision-v1/',0,'revision','',0),(263,3,'2014-01-04 10:50:19','2014-01-04 10:50:19','<h2>Enable the console to support UTF-8</h2>\r\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\r\n<ol>\r\n	<li>open a console</li>\r\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\r\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\r\n</ol>\r\nTo set your console to unicode once and for all, type the following in your console and restart your computer. But be aware that some old applications might behave incorrectly:\r\n<pre class=\"prettyprint lang-text with-comments\"># set the console to use latin1 character set by default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 65001\r\n# come back to default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 437</pre>\r\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.\r\nIBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\r\n\r\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often use different code pages (thanks to the DOS legacy):\r\n<ul>\r\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\r\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...\r\n<blockquote>Back in the days of MS-DOS, there was only one code page, namely, the code page that was provided by the original equipment manufacturer in the form of glyphs embedded in the character generator on the video card.\r\nWhen Windows came along, the so-called ANSI code page was introduced and the name \"OEM\" was used to refer to the MS-DOS code page.\r\n\r\nOver the years, Windows has relied less and less on the character generator embedded in the video card, to the point where the term \"OEM character set\" no longer has anything to do with the original equipment manufacturer. It is just a convenient term to refer to \"the character set used by MS-DOS and console programs.\"</blockquote>\r\n</li>\r\n</ul>\r\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1). By default, the console use cp 855, which is Cyrillic (try to type <code>chcp</code> in the console to know the active OEM).\r\n<h2>Handle files with accented letters</h2>\r\nAfter trying a lot of different solutions, here is what worked for me.\r\n<ul>\r\n	<li>always begin your perl script with the directive <code>use utf8</code></li>\r\n	<li>for the console, set the encoding stdout should use with <code>binmode STDOUT \":encoding(...)\"</code></li>\r\n	<li>for strings or filenames, always ensure that you convert all strings from outside (internet, ...) to utf8. Then, texts used for filenames or written to a file should be converted to latin1 (cp1252). Note that for the console, utf8 should be ok, as long as you set the binmode of stdout.</li>\r\n</ul>\r\nThe following script tries to resume everything:\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse utf8;	# always use utf8 internally\r\n\r\nuse URI::Escape; \r\nuse Encode qw(encode decode); # import the functions encode/decode\r\n\r\nbinmode STDOUT, \":encoding(UTF-8)\"; # stdout set to utf8\r\n\r\n# handle existing files\r\nsub list_dirs {\r\n	my ($path) = @_;\r\n	my @resources;\r\n	opendir( D, $path ) or die \"Could not open directory \'$path\'\\n\"; \r\n	map {  \r\n		push @resources, \r\n	    decode( \"cp1252\", $_)  # decode from latin1 win. code point to utf8\r\n	} readdir D;\r\n	closedir D;\r\n	return \\@resources;	\r\n}\r\n\r\nmap { print $_, \"\\n\" } @resources; # accents will be correctly handled\r\n\r\n# download a pdf with accented letters in title + content\r\nsub download_pdf {\r\n	my ($url) = @_;\r\n	my $resp = LWP::UserAgent->new()->get( $url );\r\n	$_ = decode( \"utf8\", uri_unescape( $1 )) # be sure to have utf8\r\n		if $url =~ m/([^\\/]+pdf)/; \r\n\r\n	# filename converted to latin1 + for pdfs, be sure to write RAW BYTES\r\n	# to file, or it won\'t work\r\n	open F, \">:raw\", encode( \"cp1252\", $_ ) \r\n		or die(\"Could not write file \'$_\'\\n\"); \r\n	print F  $resp->content;\r\n	close F;	\r\n}\r\n</pre>','Perl encoding on windows','','inherit','closed','open','','256-revision-v1','','','2014-01-04 10:50:19','2014-01-04 10:50:19','',256,'http://error418.no-ip.info/mywiki/256-revision-v1/',0,'revision','',0),(264,3,'2014-01-04 10:53:26','2014-01-04 10:53:26','<h2>Enable the console to support UTF-8</h2>\r\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\r\n<ol>\r\n	<li>open a console</li>\r\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\r\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\r\n</ol>\r\nTo set your console to unicode once and for all, type the following in your console and restart your computer. But be aware that some old applications might behave incorrectly:\r\n<pre class=\"prettyprint lang-text with-comments\"># set the console to use latin1 character set by default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 65001\r\n# come back to default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 437</pre>\r\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.\r\nIBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\r\n\r\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often use different code pages (thanks to the DOS legacy):\r\n<ul>\r\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\r\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...\r\n<blockquote>Back in the days of MS-DOS, there was only one code page, namely, the code page that was provided by the original equipment manufacturer in the form of glyphs embedded in the character generator on the video card.\r\nWhen Windows came along, the so-called ANSI code page was introduced and the name \"OEM\" was used to refer to the MS-DOS code page.\r\n\r\nOver the years, Windows has relied less and less on the character generator embedded in the video card, to the point where the term \"OEM character set\" no longer has anything to do with the original equipment manufacturer. It is just a convenient term to refer to \"the character set used by MS-DOS and console programs.\"</blockquote>\r\n</li>\r\n</ul>\r\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1). By default, the console use cp 855, which is Cyrillic (try to type <code>chcp</code> in the console to know the active OEM).\r\n<h2>Handle files with accented letters</h2>\r\nAfter trying a lot of different solutions, here is what worked for me.\r\n<ul>\r\n	<li>always begin your perl script with the directive <code>use utf8</code></li>\r\n	<li>for the console, set the encoding stdout should use with <code>binmode STDOUT \":encoding(...)\"</code></li>\r\n	<li>for strings or filenames, always ensure that you convert all strings from outside (internet, ...) to utf8. Then, texts used for filenames or written to a file should be converted to latin1 (cp1252). Note that for the console, utf8 should be ok, as long as you set the binmode of stdout.</li>\r\n</ul>\r\nThe following script tries to resume everything:\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse utf8;	# always use utf8 internally\r\n\r\nuse URI::Escape; \r\nuse Encode qw(encode decode); # import the functions encode/decode\r\n\r\nbinmode STDOUT, \":encoding(UTF-8)\"; # stdout set to utf8\r\n\r\n# handle existing files\r\nsub list_dirs {\r\n	my ($path) = @_;\r\n	my @resources;\r\n	opendir( D, $path )\r\n		or die \"Could not open directory \'$path\'\\n\"; \r\n	map {  \r\n		push @resources, \r\n		decode( \"cp1252\", $_)  # decode: latin1 => utf8\r\n	} readdir D;\r\n	closedir D;\r\n\r\n	# accents will be correctly handled\r\n	map { print $_, \"\\n\" } @resources; \r\n\r\n	return \\@resources;	\r\n}\r\n\r\n\r\n\r\n# download a pdf with accented letters in title + content\r\nsub download_pdf {\r\n	my ($url) = @_;\r\n	my $resp = LWP::UserAgent->new()->get( $url );\r\n	$_ = decode(\"utf8\", uri_unescape( $1 ))   # utf8 !!\r\n		if $url =~ m/([^\\/]+pdf)/; \r\n\r\n	# filename converted to latin1 + for pdfs, \r\n	# be sure to write RAW BYTES to file\r\n	open F, \">:raw\", encode( \"cp1252\", $_ ) \r\n		or die(\"Could not write file \'$_\'\\n\"); \r\n	print F  $resp->content;\r\n	close F;	\r\n}</pre>','Perl encoding on windows','','inherit','closed','open','','256-revision-v1','','','2014-01-04 10:53:26','2014-01-04 10:53:26','',256,'http://error418.no-ip.info/mywiki/256-revision-v1/',0,'revision','',0),(265,3,'2014-01-04 11:02:47','2014-01-04 11:02:47','<h2>Enable the console to support UTF-8</h2>\r\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\r\n<ol>\r\n	<li>open a console</li>\r\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\r\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\r\n</ol>\r\nTo set your console to unicode once and for all, type the following in your console and restart your computer. But be aware that some old applications might behave incorrectly:\r\n<pre class=\"prettyprint lang-text with-comments\"># set the console to use latin1 character set by default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 65001\r\n# come back to default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 437</pre>\r\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.\r\nIBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\r\n\r\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often use different code pages (thanks to the DOS legacy):\r\n<ul>\r\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\r\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...\r\n<blockquote>Back in the days of MS-DOS, there was only one code page, namely, the code page that was provided by the original equipment manufacturer in the form of glyphs embedded in the character generator on the video card.\r\nWhen Windows came along, the so-called ANSI code page was introduced and the name \"OEM\" was used to refer to the MS-DOS code page.\r\n\r\nOver the years, Windows has relied less and less on the character generator embedded in the video card, to the point where the term \"OEM character set\" no longer has anything to do with the original equipment manufacturer. It is just a convenient term to refer to \"the character set used by MS-DOS and console programs.\"</blockquote>\r\n</li>\r\n</ul>\r\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1). By default, the console use cp 855, which is Cyrillic (try to type <code>chcp</code> in the console to know the active OEM).\r\n<h2>Handle files with accented letters</h2>\r\nAfter trying a lot of different solutions, here is what worked for me.\r\n<ul>\r\n	<li>always begin your perl script with the directive <code>use utf8</code></li>\r\n	<li>for the console, set the encoding stdout should use with <code>binmode STDOUT \":encoding(...)\"</code></li>\r\n	<li>for strings or filenames, always ensure that you convert all strings from outside (internet, ...) to utf8. Then, texts used for filenames or written to a file should be converted to latin1 (cp1252). Note that for the console, utf8 should be ok, as long as you set the binmode of stdout.</li>\r\n</ul>\r\nThe following script tries to resume everything:\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse utf8;	# always use utf8 internally\r\n\r\nuse URI::Escape; \r\nuse Encode qw(encode decode); # import the functions encode/decode\r\n\r\nbinmode STDOUT, \":encoding(UTF-8)\"; # stdout set to utf8\r\n\r\n# handle existing files\r\nsub list_dirs {\r\n	my ($path) = @_;\r\n	my @resources;\r\n	opendir( D, $path ) or die \"Could not open directory \'$path\'\\n\"; \r\n	map {  \r\n		push @resources, \r\n		decode( \"cp1252\", $_)  # decode: latin1 => utf8\r\n	} readdir D;\r\n	closedir D;\r\n\r\n	# accents will be correctly handled\r\n	map { print $_, \"\\n\" } @resources; \r\n\r\n	return \\@resources;	\r\n}\r\n\r\n# download a pdf with accented letters in title + content\r\nsub download_pdf {\r\n	my ($url) = @_;\r\n	my $resp = LWP::UserAgent->new()->get( $url );\r\n	$_ = decode(\"utf8\", uri_unescape( $1 ))   # utf8 !!\r\n		if $url =~ m/([^\\/]+pdf)/; \r\n\r\n	# filename converted to latin1 + for pdfs, \r\n	# be sure to write RAW BYTES to file\r\n	open F, \">:raw\", encode( \"cp1252\", $_ ) \r\n		or die(\"Could not write file \'$_\'\\n\"); \r\n	print F  $resp->content;\r\n	close F;	\r\n}</pre>','Perl encoding on windows','','inherit','closed','open','','256-revision-v1','','','2014-01-04 11:02:47','2014-01-04 11:02:47','',256,'http://error418.no-ip.info/mywiki/256-revision-v1/',0,'revision','',0),(266,3,'2014-01-04 11:04:13','2014-01-04 11:04:13','<h2>Enable the console to support UTF-8</h2>\r\nBy default, windows console does only support ASCII characters. But we can easily change this default behavior, in three steps:\r\n<ol>\r\n	<li>open a console</li>\r\n	<li>change the default font from Raster Fonts to Lucida or Consolas by clicking on the upper left icon &gt;  defaults &gt; fonts. Indeed, raster fonts does not include extended character sets</li>\r\n	<li>change the code point used by typing <code>chcp 65001</code> in the console</li>\r\n</ol>\r\nTo set your console to unicode once and for all, type the following in your console and restart your computer. But be aware that some old applications might behave incorrectly:\r\n<pre class=\"prettyprint lang-text with-comments\"># set the console to use latin1 character set by default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 65001\r\n# come back to default\r\nreg add hklm\\system\\currentcontrolset\\control\\nls\\codepage -v oemcp -d 437</pre>\r\nFor the little story, the term <strong>code page</strong> is another term for <em>character encoding</em>.\r\nIBM was the first to use it and created a table of code values describing the encoding for different languages. At first, Windows collaborated with IBM and used the same codes, but after their break-up in the nineties, the two tables evolved separately.\r\n\r\nWindows code pages are unfortunately not well documented and it seems that the Console and the GUI often use different code pages (thanks to the DOS legacy):\r\n<ul>\r\n	<li><strong>Windows Code Page</strong>: used by the system and the applications. These are ANSI code pages (Windows-1252), which support accented letters and such.</li>\r\n	<li><strong>OEM Code Page</strong>: stands for<em> Original Equipment Manufacturer</em>. These are the character sets used and supported by MS-DOS and they are actually still the default for the Windows console...\r\n<blockquote>Back in the days of MS-DOS, there was only one code page, namely, the code page that was provided by the original equipment manufacturer in the form of glyphs embedded in the character generator on the video card.\r\nWhen Windows came along, the so-called ANSI code page was introduced and the name \"OEM\" was used to refer to the MS-DOS code page.\r\n\r\nOver the years, Windows has relied less and less on the character generator embedded in the video card, to the point where the term \"OEM character set\" no longer has anything to do with the original equipment manufacturer. It is just a convenient term to refer to \"the character set used by MS-DOS and console programs.\"</blockquote>\r\n</li>\r\n</ul>\r\nThe more useful are <strong>65001</strong> (for the console - utf8) and <strong>cp1252</strong> (for file names with accented letters and such - latin1). By default, the console use cp 855, which is Cyrillic (try to type <code>chcp</code> in the console to know the active OEM).\r\n<h2>Handle files with accented letters</h2>\r\nAfter trying a lot of different solutions, here is what worked for me.\r\n<ul>\r\n	<li>always begin your perl script with the directive <code>use utf8</code></li>\r\n	<li>for the console, set the encoding stdout should use with <code>binmode STDOUT \":encoding(...)\"</code></li>\r\n	<li>for strings or filenames, always ensure that you convert all strings from outside (internet, ...) to utf8. Then, texts used for filenames or written to a file should be converted to latin1 (cp1252). Note that for the console, utf8 should be ok, as long as you set the binmode of stdout.</li>\r\n</ul>\r\nThe following script tries to resume everything:\r\n<pre class=\"prettyprint\">\r\n#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse utf8;	# always use utf8 internally\r\n\r\nuse URI::Escape; \r\nuse Encode qw(encode decode); # import the functions encode/decode\r\n\r\nbinmode STDOUT, \":encoding(UTF-8)\"; # stdout set to utf8\r\n\r\n# handle existing files\r\nsub list_dirs {\r\n	my ($path) = @_;\r\n	my @resources;\r\n	opendir( D, $path ) or die \"Could not open directory \'$path\'\\n\"; \r\n	map {  \r\n		push @resources, \r\n		decode( \"cp1252\", $_)  # decode: latin1 => utf8\r\n	} readdir D;\r\n	closedir D;\r\n\r\n	# accents will be correctly handled\r\n	map { print $_, \"\\n\" } @resources; \r\n\r\n	return \\@resources;	\r\n}\r\n\r\n# download a pdf with accented letters in title + content\r\nsub download_pdf {\r\n	my ($url) = @_;\r\n	my $resp = LWP::UserAgent->new()->get( $url );\r\n	# ensure you have utf8\r\n	$_ = decode(\"utf8\", uri_unescape( $1 )) \r\n		if $url =~ m/([^\\/]+pdf)/; \r\n\r\n	# filename converted to latin1 + for pdfs, \r\n	# be sure to write RAW BYTES to file\r\n	open F, \">:raw\", encode( \"cp1252\", $_ ) \r\n		or die(\"Could not write file \'$_\'\\n\"); \r\n	print F  $resp->content;\r\n	close F;	\r\n}</pre>','Perl encoding on windows','','inherit','closed','open','','256-revision-v1','','','2014-01-04 11:04:13','2014-01-04 11:04:13','',256,'http://error418.no-ip.info/mywiki/256-revision-v1/',0,'revision','',0),(268,3,'2014-01-04 11:12:36','2014-01-04 11:12:36',' ','','','publish','closed','open','','268','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',7,'http://error418.no-ip.info/mywiki/?p=268',4,'nav_menu_item','',0),(269,3,'2014-01-04 11:16:00','2014-01-04 11:16:00',' ','','','publish','closed','open','','269','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',7,'http://error418.no-ip.info/mywiki/?p=269',8,'nav_menu_item','',0),(270,3,'2014-01-04 11:17:58','2014-01-04 11:17:58',' ','','','publish','closed','open','','270','','','2014-04-09 15:08:40','2014-04-09 15:08:40','',0,'http://error418.no-ip.info/mywiki/?p=270',15,'nav_menu_item','',0),(271,3,'2014-01-04 11:23:06','0000-00-00 00:00:00','sdkfjah sdf\r\nasd fas\r\ndf as\r\ndf as\r\n','','','draft','closed','open','','','','','2014-01-04 11:23:06','2014-01-04 11:23:06','',0,'http://error418.no-ip.info/mywiki/?p=271',0,'post','',0),(272,3,'2014-01-04 11:22:52','2014-01-04 11:22:52','sdkfjah sdf\r\nasd fas\r\ndf as\r\ndf as\r\n','','','inherit','closed','open','','271-revision-v1','','','2014-01-04 11:22:52','2014-01-04 11:22:52','',271,'http://error418.no-ip.info/mywiki/271-revision-v1/',0,'revision','',0),(274,3,'2014-01-04 19:04:03','0000-00-00 00:00:00','','gfh','','draft','closed','open','','','','','2014-01-04 19:04:03','2014-01-04 19:04:03','',0,'http://error418.no-ip.info/mywiki/?page_id=274',0,'page','',0),(275,3,'2014-01-04 19:04:03','2014-01-04 19:04:03','','gfh','','inherit','closed','open','','274-revision-v1','','','2014-01-04 19:04:03','2014-01-04 19:04:03','',274,'http://error418.no-ip.info/mywiki/274-revision-v1/',0,'revision','',0),(277,3,'2014-01-04 19:13:40','2014-01-04 19:13:40','funny','funny','','publish','closed','closed','','funny','','','2014-01-08 08:41:28','2014-01-08 08:41:28','',0,'http://error418.no-ip.info/mywiki/?post_type=members_only&#038;p=277',0,'members_only','',0),(280,3,'2014-01-08 08:48:48','2014-01-08 08:48:48','<div>\n<blockquote>Même si tous les ennuis du monde devaient me tomber dessus demain [...], je voulais d\'abord dormir tout mon soûl [...]. Comme ça, je pourrais faire face à mes nouveaux ennuis avec un sentiment de désespoir tout neuf.\n<div>Haruki Murakami, La fin des temps p.240</div></blockquote>\n</div>\n<div>\n<blockquote>The real danger is not that computers will begin to think like men, but that men will begin to think like computers\n<div>Sydney J. Harris</div></blockquote>\n</div>\n<div>\n<blockquote>The code that is the hardest to debug is the code that you know cannot possibly be wrong...\n<div>?</div></blockquote>\n<blockquote>Vous attendez de moi que je déclenche chez vous cet espèce de reflux gastro-oesophagien festif, cette exhibition bucco-plombaire, cette trépidation rhino-pharyngée, ce mélange sordide entre une gastro-entérite et une crise d\'épilepsie qui vous emmeneront dans un monde merveilleux tout en gardant par miracle fermé votre clapet fécal\n<div>Gaspard Proust</div></blockquote>\n</div>\n<div></div>','Quotes','','inherit','closed','open','','237-autosave-v1','','','2014-01-08 08:48:48','2014-01-08 08:48:48','',237,'http://error418.no-ip.info/mywiki/?p=280',0,'revision','',0),(281,3,'2014-01-05 15:18:01','2014-01-05 15:18:01','<div>\r\n<blockquote>Même si tous les ennuis du monde devaient me tomber dessus demain [...], je voulais d\'abord dormir tout mon soûl [...]. Comme ça, je pourrais faire face à mes nouveaux ennuis avec un sentiment de désespoir tout neuf.\r\n<div>Haruki Murakami, La fin des temps p.240</div></blockquote>\r\n</div>\r\n<div>\r\n<blockquote>The real danger is not that computers will begin to think like men, but that men will begin to think like computers\r\n<div>Sydney J. Harris</div></blockquote>\r\n</div>\r\n<div>\r\n<blockquote>The code that is the hardest to debug is the code that you know cannot possibly be wrong...\r\n<div>?</div></blockquote>\r\n	<blockquote>Vous attendez de moi que je déclenche chez vous cet espèce de reflux gastro-oesophagien festif, cette exhibition bucco-plombaire, cette trépidation rhino-pharyngée, ce mélange sordide entre une gastro-entérite et une crise d\'épilepsie qui vous emmeneront dans un monde merveilleux tout en gardant par miracle fermé votre clapet fécal\r\n<div>Gaspard Proust</div></blockquote>\r\n</div>\r\n<div></div>','Quotes','','inherit','closed','open','','237-revision-v1','','','2014-01-05 15:18:01','2014-01-05 15:18:01','',237,'http://error418.no-ip.info/mywiki/?p=281',0,'revision','',0),(283,3,'2014-01-08 08:53:22','2014-01-08 08:53:22','<div>\r\n<blockquote>Même si tous les ennuis du monde devaient me tomber dessus demain [...], je voulais d\'abord dormir tout mon soûl [...]. Comme ça, je pourrais faire face à mes nouveaux ennuis avec un sentiment de désespoir tout neuf.\r\n<div>Haruki Murakami, La fin des temps p.240</div></blockquote>\r\n</div>\r\n<div>\r\n<blockquote>The real danger is not that computers will begin to think like men, but that men will begin to think like computers\r\n<div>Sydney J. Harris</div></blockquote>\r\n</div>\r\n<div>\r\n<blockquote>The code that is the hardest to debug is the code that you know cannot possibly be wrong...\r\n<div>?</div></blockquote>\r\n<blockquote>Vous attendez de moi que je déclenche chez vous cet espèce de reflux gastro-oesophagien festif, cette exhibition bucco-plombaire, cette trépidation rhino-pharyngée, ce mélange sordide entre une gastro-entérite et une crise d\'épilepsie qui vous emmeneront dans un monde merveilleux tout en gardant par miracle fermé votre clapet fécal\r\n<div>Gaspard Proust</div></blockquote>\r\n</div>\r\n<div></div>','Quotes','','publish','closed','closed','','quotes','','','2014-01-08 09:05:54','2014-01-08 09:05:54','',0,'http://error418.no-ip.info/mywiki/?post_type=members_only&#038;p=283',0,'members_only','',0),(284,3,'2014-01-09 13:40:09','2014-01-09 13:40:09','<h2>What is a here document</h2>\r\nA here document uses I/O redirection tricks to feed a command expecting a file without actually creating one.\r\nThe purpose is thus to avoid temp files and still use <code>cat, ftp, </code> etc.\r\n<h2>Usage</h2>\r\n<h3>A simple example</h3>\r\nA simple Here document:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# use cat (file), not echo (chars) !! \r\ncat <<UNIQ_SEQUENCE   \r\n    Hi, I am a here document\r\na second line\r\n            a third\r\nUNIQ_SEQUENCE  # end of doc</pre>\r\nSo, we use the <code><<</code> symbol directly followed by a <strong>unique string</strong> (not used anywhere in the here doc). The same unique string <strong>at the beginning of the line</strong> marks the end of the document.\r\n<h3>Operator variations</h3>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n aVar=value\r\n cat <<LALA\r\n    with a tab $aVar\r\nLALA\r\n# will print \"   with a tab value\"\r\n\r\n# using the operator <<- instead of <<,\r\n# leading tabs (not spaces) are wiped off\r\ncat <<-LALA\r\n    with a tab\r\nLALA\r\n# will print \"with a tab value\"\r\n\r\n# prevent variable substitution by enclosing\r\n# the string symbol by single or double quotes\r\ncat <<\'LALA\'\r\n    $aVar not substituted\r\nLALA\r\n# will print \"$aVar not substituted\"\r\n\r\n# with multiple redirections:\r\nf=/path/to/file; cat > $f <<<LALA\r\nnew content of file\r\nLALA</pre>\r\n<h3>Usages</h3>\r\nUse here documents to create simple self-extracted archives:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\nfilename=sh$$.arch\r\n\r\nif [ -z \"$1\" ]; then\r\n    echo \"Usage $0 [file, <files..>]\"\r\n    exit 1\r\nfi\r\n\r\nif [ \"$1\" == \"-n\" ]; then\r\n    [ -z \"$3\" ] && echo \"-n requires an argument\" && exit 1\r\n    filename=\"$2\"\r\n    shift 2\r\nfi\r\n\r\necho \'#!/bin/bash\' >> \"$filename\"\r\n\r\nwhile [ -n \"$1\" ]; do\r\n\r\n    f=\"${1##.*/}\" # get the filename\r\n\r\n    # ensure that the file does not already exist before extracting it\r\n    echo \"if [ -e \\\"$f\\\" ]; then echo \'The file $f already exists. Skipping\'; else \" >> \"$filename\"\r\n    # add a char to the beginnig of each line to escape the \r\n    # here string\r\n    echo \"sed \'s/^X//\' > \\\"$f\\\" <<\'miamlecacacestdelicieux\'\" >> \"$filename\"\r\n    # don\'t forget to remove the escape char during the extraction\r\n    cat \"$1\" | sed \'s/^/X/\' >> \"$filename\"\r\n    echo \"miamlecacacestdelicieux\" >> \"$filename\"\r\n    echo \"fi\" >> \"$filename\"\r\n    shift\r\ndone</pre>\r\nComment out easily a block of codes by using <code>: <<...</code>. The \":\" are mandatory !\r\nOr do a self-explanatory shell script:\r\n<pre class=\"prettyprint\">\r\nif [ \"$1\" = \"-h\" ]     # Request help.\r\nthen\r\n  echo; echo \"Usage: $0 [directory-name]\"; echo\r\n  sed --silent -e \'/DOCUMENTATIONXX$/,/^DOCUMENTATIONXX$/p\' \"$0\" |\r\n  sed -e \'/DOCUMENTATIONXX$/d\'; exit $DOC_REQUEST; fi\r\n\r\n: <<DOCUMENTATIONXX\r\nList the statistics of a specified directory in tabular format.\r\n---------------------------------------------------------------\r\nThe command line parameter gives the directory to be listed.\r\nIf no directory specified or directory specified cannot be read,\r\nthen list the current working directory.\r\n\r\nDOCUMENTATIONXX</pre>\r\n<h2>Here strings</h2>\r\nHere strings are quite similar to here documents and allow a short string to be treated as a file by the interactive program. For example, <code>tr</code> only accepts files:\r\n<pre class=\"prettyprint\">\r\ntr a-z A-Z <<< string # yields STRING\r\n\r\ntr a-z A-Z <<< \'string with \r\nspaces and such\' \r\n# is equivalent to :\r\necho \'string with\r\nspaces and such\' | tr a-z A-Z \r\n\r\n# with double quotes, variable substitution occurs:\r\ntr a-z A-Z <<< \"your path is:\r\n$PATH\"</pre>','Here documents','','publish','closed','open','','here-documents','','','2014-01-09 16:05:29','2014-01-09 16:05:29','',0,'http://error418.no-ip.info/mywiki/?p=284',0,'post','',0),(285,3,'2014-01-09 13:39:23','2014-01-09 13:39:23','r do a self-explanatory shell script:\r\nA here document uses I/O redirection tricks to feed a command expecting a file without actually creating one.\r\n\r\nThe purpose is thus to avoid temp files and still use <code>cat, ftp, </code> etc.\r\n\r\n<h2>Usage</h2>\r\n\r\n<h3>A simple example</h3>\r\nA simple Here document:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# use cat (file), not echo (chars) !! \r\ncat <<UNIQ_SEQUENCE   \r\n    Hi, I am a here document\r\na second line\r\n            a third\r\nUNIQ_SEQUENCE  # end of doc\r\n</pre>\r\n\r\nSo, we use the <code><<</code> symbol directly followed by a <strong>unique string</strong> (not used anywhere in the here doc). The same unique string <strong>at the beginning of the line</strong> marks the end of the document.\r\n\r\n<h3>Operator variations</h3>\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n aVar=value\r\n cat <<LALA\r\n    with a tab $aVar\r\nLALA\r\n# will print \"   with a tab value\"\r\n\r\n# using the operator <<- instead of <<,\r\n# leading tabs (not spaces) are wiped off\r\ncat <<-LALA\r\n    with a tab\r\nLALA\r\n# will print \"with a tab value\"\r\n\r\n# prevent variable substitution by enclosing\r\n# the string symbol by \'\'\r\ncat <<\'LALA\'\r\n    $aVar not substituted\r\nLALA\r\n# will print \"$aVar not substituted\"\r\n</pre>\r\n\r\n\r\n<h3>Usages</h3>\r\n\r\nComment out easily a block of codes by using <code>: <<...</code>. The \":\" are mandatory !\r\nOr do a self-explanatory shell script:\r\n\r\n<pre class=\"prettyprint\">\r\nif [ \"$1\" = \"-h\" ]     # Request help.\r\nthen\r\n  echo; echo \"Usage: $0 [directory-name]\"; echo\r\n  sed --silent -e \'/DOCUMENTATIONXX$/,/^DOCUMENTATIONXX$/p\' \"$0\" |\r\n  sed -e \'/DOCUMENTATIONXX$/d\'; exit $DOC_REQUEST; fi\r\n\r\n\r\n: <<DOCUMENTATIONXX\r\nList the statistics of a specified directory in tabular format.\r\n---------------------------------------------------------------\r\nThe command line parameter gives the directory to be listed.\r\nIf no directory specified or directory specified cannot be read,\r\nthen list the current working directory.\r\n\r\nDOCUMENTATIONXX    \r\n</pre>\r\n\r\n\r\n<h2>What is a here document</h2>\r\nOr do a self-explanatory shell script:\r\nA here document uses I/O redirection tricks to feed a command expecting a file without actually creating one.\r\n\r\nThe purpose is thus to avoid temp files and still use <code>cat, ftp, </code> etc.\r\n\r\n<h2>Usage</h2>\r\n\r\n<h3>A simple example</h3>\r\nA simple Here document:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# use cat (file), not echo (chars) !! \r\ncat <<UNIQ_SEQUENCE   \r\n    Hi, I am a here document\r\na second line\r\n            a third\r\nUNIQ_SEQUENCE  # end of doc\r\n</pre>\r\n\r\nSo, we use the <code><<</code> symbol directly followed by a <strong>unique string</strong> (not used anywhere in the here doc). The same unique string <strong>at the beginning of the line</strong> marks the end of the document.\r\n\r\n<h3>Operator variations</h3>\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n aVar=value\r\n cat <<LALA\r\n    with a tab $aVar\r\nLALA\r\n# will print \"   with a tab value\"\r\n\r\n# using the operator <<- instead of <<,\r\n# leading tabs (not spaces) are wiped off\r\ncat <<-LALA\r\n    with a tab\r\nLALA\r\n# will print \"with a tab value\"\r\n\r\n# prevent variable substitution by enclosing\r\n# the string symbol by \'\'\r\ncat <<\'LALA\'\r\n    $aVar not substituted\r\nLALA\r\n# will print \"$aVar not substituted\"\r\n</pre>\r\n\r\n\r\n<h3>Usages</h3>\r\n\r\nComment out easily a block of codes by using <code>: <<...</code>. The \":\" are mandatory !\r\nOr do a self-explanatory shell script:\r\n\r\n<pre class=\"prettyprint\">\r\nif [ \"$1\" = \"-h\" ]     # Request help.\r\nthen\r\n  echo; echo \"Usage: $0 [directory-name]\"; echo\r\n  sed --silent -e \'/DOCUMENTATIONXX$/,/^DOCUMENTATIONXX$/p\' \"$0\" |\r\n  sed -e \'/DOCUMENTATIONXX$/d\'; exit $DOC_REQUEST; fi\r\n\r\n\r\n: <<DOCUMENTATIONXX\r\nList the statistics of a specified directory in tabular format.\r\n---------------------------------------------------------------\r\nThe command line parameter gives the directory to be listed.\r\nIf no directory specified or directory specified cannot be read,\r\nthen list the current working directory.\r\n\r\nDOCUMENTATIONXX    \r\n</pre>\r\n\r\n','Here documents','','inherit','closed','open','','284-revision-v1','','','2014-01-09 13:39:23','2014-01-09 13:39:23','',284,'http://error418.no-ip.info/mywiki/?p=285',0,'revision','',0),(286,3,'2014-01-09 13:39:54','2014-01-09 13:39:54','<h2>What is a here document</h2>\r\nOr do a self-explanatory shell script:\r\nA here document uses I/O redirection tricks to feed a command expecting a file without actually creating one.\r\n\r\nThe purpose is thus to avoid temp files and still use <code>cat, ftp, </code> etc.\r\n\r\n<h2>Usage</h2>\r\n\r\n<h3>A simple example</h3>\r\nA simple Here document:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# use cat (file), not echo (chars) !! \r\ncat <<UNIQ_SEQUENCE   \r\n    Hi, I am a here document\r\na second line\r\n            a third\r\nUNIQ_SEQUENCE  # end of doc\r\n</pre>\r\n\r\nSo, we use the <code><<</code> symbol directly followed by a <strong>unique string</strong> (not used anywhere in the here doc). The same unique string <strong>at the beginning of the line</strong> marks the end of the document.\r\n\r\n<h3>Operator variations</h3>\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n aVar=value\r\n cat <<LALA\r\n    with a tab $aVar\r\nLALA\r\n# will print \"   with a tab value\"\r\n\r\n# using the operator <<- instead of <<,\r\n# leading tabs (not spaces) are wiped off\r\ncat <<-LALA\r\n    with a tab\r\nLALA\r\n# will print \"with a tab value\"\r\n\r\n# prevent variable substitution by enclosing\r\n# the string symbol by \'\'\r\ncat <<\'LALA\'\r\n    $aVar not substituted\r\nLALA\r\n# will print \"$aVar not substituted\"\r\n</pre>\r\n\r\n\r\n<h3>Usages</h3>\r\n\r\nComment out easily a block of codes by using <code>: <<...</code>. The \":\" are mandatory !\r\nOr do a self-explanatory shell script:\r\n\r\n<pre class=\"prettyprint\">\r\nif [ \"$1\" = \"-h\" ]     # Request help.\r\nthen\r\n  echo; echo \"Usage: $0 [directory-name]\"; echo\r\n  sed --silent -e \'/DOCUMENTATIONXX$/,/^DOCUMENTATIONXX$/p\' \"$0\" |\r\n  sed -e \'/DOCUMENTATIONXX$/d\'; exit $DOC_REQUEST; fi\r\n\r\n\r\n: <<DOCUMENTATIONXX\r\nList the statistics of a specified directory in tabular format.\r\n---------------------------------------------------------------\r\nThe command line parameter gives the directory to be listed.\r\nIf no directory specified or directory specified cannot be read,\r\nthen list the current working directory.\r\n\r\nDOCUMENTATIONXX    \r\n</pre>\r\n\r\n','Here documents','','inherit','closed','open','','284-revision-v1','','','2014-01-09 13:39:54','2014-01-09 13:39:54','',284,'http://error418.no-ip.info/mywiki/?p=286',0,'revision','',0),(287,3,'2014-01-09 16:04:58','2014-01-09 16:04:58','<h2>What is a here document</h2>\nA here document uses I/O redirection tricks to feed a command expecting a file without actually creating one.\nThe purpose is thus to avoid temp files and still use <code>cat, ftp, </code> etc.\n<h2>Usage</h2>\n<h3>A simple example</h3>\nA simple Here document:\n<pre class=\"prettyprint lang-text with-comments\">\n# use cat (file), not echo (chars) !! \ncat <<UNIQ_SEQUENCE   \n    Hi, I am a here document\na second line\n            a third\nUNIQ_SEQUENCE  # end of doc</pre>\nSo, we use the <code><<</code> symbol directly followed by a <strong>unique string</strong> (not used anywhere in the here doc). The same unique string <strong>at the beginning of the line</strong> marks the end of the document.\n<h3>Operator variations</h3>\n<pre class=\"prettyprint lang-text with-comments\">\n aVar=value\n cat <<LALA\n    with a tab $aVar\nLALA\n# will print \"   with a tab value\"\n\n# using the operator <<- instead of <<,\n# leading tabs (not spaces) are wiped off\ncat <<-LALA\n    with a tab\nLALA\n# will print \"with a tab value\"\n\n# prevent variable substitution by enclosing\n# the string symbol by single or double quotes\ncat <<\'LALA\'\n    $aVar not substituted\nLALA\n# will print \"$aVar not substituted\"\n\n# with multiple redirections:\nf=/path/to/file; cat > $f <<<LALA\nnew content of file\nLALA</pre>\n<h3>Usages</h3>\nUse here documents to create simple self-extracted archives:\n<pre class=\"prettyprint\">\n#!/bin/bash\nfilename=sh$$.arch\n\nif [ -z \"$1\" ]; then\n    echo \"Usage $0 [file, <files..>]\"\n    exit 1\nfi\n\nif [ \"$1\" == \"-n\" ]; then\n    [ -z \"$3\" ] && echo \"-n requires an argument\" && exit 1\n    filename=\"$2\"\n    shift 2\nfi\n\necho \'#!/bin/bash\' >> \"$filename\"\n\nwhile [ -n \"$1\" ]; do\n\n    f=\"${1##.*/}\" # get the filename\n\n    # ensure that the file does not already exist before extracting it\n    echo \"if [ -e \\\"$f\\\" ]; then echo \'The file $f already exists. Skipping\'; else \" >> \"$filename\"\n    # add a char to the beginnig of each line to escape the \n    # here string\n    echo \"sed \'s/^X//\' > \\\"$f\\\" <<\'miamlecacacestdelicieux\'\" >> \"$filename\"\n    # don\'t forget to remove the escape char during the extraction\n    cat \"$1\" | sed \'s/^/X/\' >> \"$filename\"\n    echo \"miamlecacacestdelicieux\" >> \"$filename\"\n    echo \"fi\" >> \"$filename\"\n    shift\ndone</pre>\nComment out easily a block of codes by using <code>: <<...</code>. The \":\" are mandatory !\nOr do a self-explanatory shell script:\n<pre class=\"prettyprint\">\nif [ \"$1\" = \"-h\" ]     # Request help.\nthen\n  echo; echo \"Usage: $0 [directory-name]\"; echo\n  sed --silent -e \'/DOCUMENTATIONXX$/,/^DOCUMENTATIONXX$/p\' \"$0\" |\n  sed -e \'/DOCUMENTATIONXX$/d\'; exit $DOC_REQUEST; fi\n\n: <<DOCUMENTATIONXX\nList the statistics of a specified directory in tabular format.\n---------------------------------------------------------------\nThe command line parameter gives the directory to be listed.\nIf no directory specified or directory specified cannot be read,\nthen list the current working directory.\n\nDOCUMENTATIONXX</pre>\n<h2>Here strings</h2>\nHere strings are quite similar to here documents and allow a short string to be treated as a file by the interactive program. For example, <code>tr</code> only accepts files:\n<pre class=\"prettyprint\">\ntr a-z A-Z <<< string # yields STRING\ntr a-z A-Z <<< \'string with \nspaces and such\' \n# is equivalent to :\necho \'string with\nspaces and such\' | tr a-z A-Z \n\n# with double quotes, variable substitution occurs:\ntr a-z A-Z <<< \"your path is:\n$PATH\"</pre>','Here documents','','inherit','closed','open','','284-autosave-v1','','','2014-01-09 16:04:58','2014-01-09 16:04:58','',284,'http://error418.no-ip.info/mywiki/?p=287',0,'revision','',0),(288,3,'2014-01-09 16:03:54','2014-01-09 16:03:54','<h2>What is a here document</h2>\r\n\r\nA here document uses I/O redirection tricks to feed a command expecting a file without actually creating one.\r\nThe purpose is thus to avoid temp files and still use <code>cat, ftp, </code> etc.\r\n\r\n<h2>Usage</h2>\r\n<h3>A simple example</h3>\r\nA simple Here document:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# use cat (file), not echo (chars) !! \r\ncat <<UNIQ_SEQUENCE   \r\n    Hi, I am a here document\r\na second line\r\n            a third\r\nUNIQ_SEQUENCE  # end of doc</pre>\r\nSo, we use the <code><<</code> symbol directly followed by a <strong>unique string</strong> (not used anywhere in the here doc). The same unique string <strong>at the beginning of the line</strong> marks the end of the document.\r\n\r\n<h3>Operator variations</h3>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n aVar=value\r\n cat <<LALA\r\n    with a tab $aVar\r\nLALA\r\n# will print \"   with a tab value\"\r\n\r\n# using the operator <<- instead of <<,\r\n# leading tabs (not spaces) are wiped off\r\ncat <<-LALA\r\n    with a tab\r\nLALA\r\n# will print \"with a tab value\"\r\n\r\n# prevent variable substitution by enclosing\r\n# the string symbol by single or double quotes\r\ncat <<\'LALA\'\r\n    $aVar not substituted\r\nLALA\r\n# will print \"$aVar not substituted\"\r\n\r\n# with multiple redirections:\r\nf=/path/to/file; cat > $f <<<LALA\r\nnew content of file\r\nLALA\r\n</pre>\r\n\r\n<h3>Usages</h3>\r\n\r\nUse here documents to create simple self-extracted archives:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\nfilename=sh$$.arch\r\n\r\nif [ -z \"$1\" ]; then\r\n    echo \"Usage $0 [file, <files..>]\"\r\n    exit 1\r\nfi\r\n\r\nif [ \"$1\" == \"-n\" ]; then\r\n    [ -z \"$3\" ] && echo \"-n requires an argument\" && exit 1\r\n    filename=\"$2\"\r\n    shift 2\r\nfi\r\n\r\necho \'#!/bin/bash\' >> \"$filename\"\r\n\r\nwhile [ -n \"$1\" ]; do\r\n\r\n    f=\"${1##.*/}\" # get the filename\r\n\r\n    # ensure that the file does not already exist before extracting it\r\n    echo \"if [ -e \\\"$f\\\" ]; then echo \'The file $f already exists. Skipping\'; else \" >> \"$filename\"\r\n    # add a char to the beginnig of each line to escape the \r\n    # here string\r\n    echo \"sed \'s/^X//\' > \\\"$f\\\" <<\'miamlecacacestdelicieux\'\" >> \"$filename\"\r\n    # don\'t forget to remove the escape char during the extraction\r\n    cat \"$1\" | sed \'s/^/X/\' >> \"$filename\"\r\n    echo \"miamlecacacestdelicieux\" >> \"$filename\"\r\n    echo \"fi\" >> \"$filename\"\r\n    shift\r\ndone\r\n</pre>\r\n\r\nComment out easily a block of codes by using <code>: <<...</code>. The \":\" are mandatory !\r\nOr do a self-explanatory shell script:\r\n<pre class=\"prettyprint\">\r\nif [ \"$1\" = \"-h\" ]     # Request help.\r\nthen\r\n  echo; echo \"Usage: $0 [directory-name]\"; echo\r\n  sed --silent -e \'/DOCUMENTATIONXX$/,/^DOCUMENTATIONXX$/p\' \"$0\" |\r\n  sed -e \'/DOCUMENTATIONXX$/d\'; exit $DOC_REQUEST; fi\r\n\r\n: <<DOCUMENTATIONXX\r\nList the statistics of a specified directory in tabular format.\r\n---------------------------------------------------------------\r\nThe command line parameter gives the directory to be listed.\r\nIf no directory specified or directory specified cannot be read,\r\nthen list the current working directory.\r\n\r\nDOCUMENTATIONXX</pre>\r\n\r\n\r\n<h2>Here strings</h2>\r\nHere strings are quite similar to here documents and allow a short string to be \r\ntreated as a file by the interactive program. For example, <code>tr</code> only \r\naccepts files:\r\n\r\n<pre class=\"prettyprint\">\r\ntr a-z A-Z <<< string # yields STRING\r\ntr a-z A-Z <<< \'string with \r\nspaces and such\' \r\n# is equivalent to :\r\necho \'string with\r\nspaces and such\' | tr a-z A-Z \r\n\r\n# with double quotes, variable substitution occurs:\r\ntr a-z A-Z <<< \"your path is:\r\n$PATH\"   \r\n\r\n</pre>\r\n','Here documents','','inherit','closed','open','','284-revision-v1','','','2014-01-09 16:03:54','2014-01-09 16:03:54','',284,'http://error418.no-ip.info/mywiki/?p=288',0,'revision','',0),(289,3,'2014-01-09 16:05:07','2014-01-09 16:05:07','<h2>What is a here document</h2>\r\nA here document uses I/O redirection tricks to feed a command expecting a file without actually creating one.\r\nThe purpose is thus to avoid temp files and still use <code>cat, ftp, </code> etc.\r\n<h2>Usage</h2>\r\n<h3>A simple example</h3>\r\nA simple Here document:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# use cat (file), not echo (chars) !! \r\ncat <<UNIQ_SEQUENCE   \r\n    Hi, I am a here document\r\na second line\r\n            a third\r\nUNIQ_SEQUENCE  # end of doc</pre>\r\nSo, we use the <code><<</code> symbol directly followed by a <strong>unique string</strong> (not used anywhere in the here doc). The same unique string <strong>at the beginning of the line</strong> marks the end of the document.\r\n<h3>Operator variations</h3>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n aVar=value\r\n cat <<LALA\r\n    with a tab $aVar\r\nLALA\r\n# will print \"   with a tab value\"\r\n\r\n# using the operator <<- instead of <<,\r\n# leading tabs (not spaces) are wiped off\r\ncat <<-LALA\r\n    with a tab\r\nLALA\r\n# will print \"with a tab value\"\r\n\r\n# prevent variable substitution by enclosing\r\n# the string symbol by single or double quotes\r\ncat <<\'LALA\'\r\n    $aVar not substituted\r\nLALA\r\n# will print \"$aVar not substituted\"\r\n\r\n# with multiple redirections:\r\nf=/path/to/file; cat > $f <<<LALA\r\nnew content of file\r\nLALA</pre>\r\n<h3>Usages</h3>\r\nUse here documents to create simple self-extracted archives:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\nfilename=sh$$.arch\r\n\r\nif [ -z \"$1\" ]; then\r\n    echo \"Usage $0 [file, <files..>]\"\r\n    exit 1\r\nfi\r\n\r\nif [ \"$1\" == \"-n\" ]; then\r\n    [ -z \"$3\" ] && echo \"-n requires an argument\" && exit 1\r\n    filename=\"$2\"\r\n    shift 2\r\nfi\r\n\r\necho \'#!/bin/bash\' >> \"$filename\"\r\n\r\nwhile [ -n \"$1\" ]; do\r\n\r\n    f=\"${1##.*/}\" # get the filename\r\n\r\n    # ensure that the file does not already exist before extracting it\r\n    echo \"if [ -e \\\"$f\\\" ]; then echo \'The file $f already exists. Skipping\'; else \" >> \"$filename\"\r\n    # add a char to the beginnig of each line to escape the \r\n    # here string\r\n    echo \"sed \'s/^X//\' > \\\"$f\\\" <<\'miamlecacacestdelicieux\'\" >> \"$filename\"\r\n    # don\'t forget to remove the escape char during the extraction\r\n    cat \"$1\" | sed \'s/^/X/\' >> \"$filename\"\r\n    echo \"miamlecacacestdelicieux\" >> \"$filename\"\r\n    echo \"fi\" >> \"$filename\"\r\n    shift\r\ndone</pre>\r\nComment out easily a block of codes by using <code>: <<...</code>. The \":\" are mandatory !\r\nOr do a self-explanatory shell script:\r\n<pre class=\"prettyprint\">\r\nif [ \"$1\" = \"-h\" ]     # Request help.\r\nthen\r\n  echo; echo \"Usage: $0 [directory-name]\"; echo\r\n  sed --silent -e \'/DOCUMENTATIONXX$/,/^DOCUMENTATIONXX$/p\' \"$0\" |\r\n  sed -e \'/DOCUMENTATIONXX$/d\'; exit $DOC_REQUEST; fi\r\n\r\n: <<DOCUMENTATIONXX\r\nList the statistics of a specified directory in tabular format.\r\n---------------------------------------------------------------\r\nThe command line parameter gives the directory to be listed.\r\nIf no directory specified or directory specified cannot be read,\r\nthen list the current working directory.\r\n\r\nDOCUMENTATIONXX</pre>\r\n<h2>Here strings</h2>\r\nHere strings are quite similar to here documents and allow a short string to be treated as a file by the interactive program. For example, <code>tr</code> only accepts files:\r\n<pre class=\"prettyprint\">\r\ntr a-z A-Z <<< string # yields STRING\r\ntr a-z A-Z <<< \'string with \r\nspaces and such\' \r\n# is equivalent to :\r\necho \'string with\r\nspaces and such\' | tr a-z A-Z \r\n\r\n# with double quotes, variable substitution occurs:\r\ntr a-z A-Z <<< \"your path is:\r\n$PATH\"</pre>','Here documents','','inherit','closed','open','','284-revision-v1','','','2014-01-09 16:05:07','2014-01-09 16:05:07','',284,'http://error418.no-ip.info/mywiki/?p=289',0,'revision','',0),(290,3,'2014-01-11 09:01:50','0000-00-00 00:00:00','lala','','','draft','closed','open','','','','','2014-01-11 09:01:50','2014-01-11 09:01:50','',0,'http://error418.no-ip.info/mywiki/?p=290',0,'post','',0),(291,3,'2014-01-11 09:26:13','0000-00-00 00:00:00','kjlh','','','draft','closed','open','','','','','2014-01-11 09:26:13','2014-01-11 09:26:13','',0,'http://error418.no-ip.info/mywiki/?p=291',0,'post','',0),(298,3,'2014-01-11 09:33:11','0000-00-00 00:00:00','uzt','','','draft','closed','open','','','','','2014-01-11 09:33:11','2014-01-11 09:33:11','',0,'http://error418.no-ip.info/mywiki/?p=298',0,'post','',0),(304,3,'2014-01-11 09:40:21','0000-00-00 00:00:00','jklh','','','draft','closed','open','','','','','2014-01-11 09:40:21','2014-01-11 09:40:21','',0,'http://error418.no-ip.info/mywiki/?p=304',0,'post','',0),(307,3,'2014-01-11 09:44:28','0000-00-00 00:00:00','ku','','','draft','closed','open','','','','','2014-01-11 09:44:28','2014-01-11 09:44:28','',0,'http://error418.no-ip.info/mywiki/?p=307',0,'post','',0),(308,3,'2014-01-11 09:47:59','0000-00-00 00:00:00','ih','','','draft','closed','open','','','','','2014-01-11 09:47:59','2014-01-11 09:47:59','',0,'http://error418.no-ip.info/mywiki/?p=308',0,'post','',0),(313,3,'2014-01-11 09:53:49','0000-00-00 00:00:00','kjh','','','draft','closed','open','','','','','2014-01-11 09:53:49','2014-01-11 09:53:49','',0,'http://error418.no-ip.info/mywiki/?p=313',0,'post','',0),(315,3,'2014-01-11 09:56:22','0000-00-00 00:00:00','jh','','','draft','closed','open','','','','','2014-01-11 09:56:22','2014-01-11 09:56:22','',0,'http://error418.no-ip.info/mywiki/?p=315',0,'post','',0),(316,3,'2014-01-11 09:58:05','0000-00-00 00:00:00','kjh','','','draft','closed','open','','','','','2014-01-11 09:58:05','2014-01-11 09:58:05','',0,'http://error418.no-ip.info/mywiki/?p=316',0,'post','',0),(328,3,'2014-01-11 10:11:05','0000-00-00 00:00:00','khj','','','draft','closed','open','','','','','2014-01-11 10:11:05','2014-01-11 10:11:05','',0,'http://error418.no-ip.info/mywiki/?p=328',0,'post','',0),(330,3,'2014-01-11 10:13:03','0000-00-00 00:00:00','h','','','draft','closed','open','','','','','2014-01-11 10:13:03','2014-01-11 10:13:03','',0,'http://error418.no-ip.info/mywiki/?p=330',0,'post','',0),(333,3,'2014-01-11 10:15:20','0000-00-00 00:00:00','klj','','','draft','closed','open','','','','','2014-01-11 10:15:20','2014-01-11 10:15:20','',0,'http://error418.no-ip.info/mywiki/?p=333',0,'post','',0),(336,3,'2014-01-15 20:45:30','2014-01-15 20:45:30','<h2>Wrapping, indenting</h2>\r\nHere are some useful options:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# stop indenting {,( and such\r\n:set nocindent\r\n\r\n# enable spell-checker\r\n:setlocal spell spelllang=en\r\n\r\n# auto wrapping\r\n# wrap lines that are too long with \"visual\" newlines \r\n# rather than adding an actual newline character t\r\n# The \'list\' option must be off because it automatically \r\n# disables the \'linebreak\' option:\r\n:set wrap nolist inebreak\r\n\r\n# width of wrap to 60 chars\r\n:set textwidth=60\r\n\r\n# to test, not sure of the impact\r\n:set formatoptions+=n # numbered-list\r\n:set formatoptions+=a #</pre>\r\n<h2>Vim spell check</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# enable spell-checker\r\n:setlocal spell spelllang=en # or fr, ...</pre>\r\nTo use the french dictionary, download the following files and add them either in <code>/usr/share/vim/spell</code> or in your <code>~/.vim/spell</code> folder:\r\n<pre class=\"prettyprint lang-text raw\">\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.spl\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.sug\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.spl\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.sug</pre>\r\nNote that you can also choose juste the utf8 or the latin1, not both, if you plan to use only one encoding.\r\n\r\nTo autocorrect a word, use <code>z=</code>. To mark a word as correct and update the dictionary, use <code>zg</code>; <code> zw</code> does the opposite, i.e. mark a word as mispelled.','edit simple text with vim','','publish','closed','open','','edit-simple-text-with-vim','','','2014-01-24 06:57:47','2014-01-24 06:57:47','',0,'http://error418.no-ip.info/mywiki/?p=336',0,'post','',0),(337,3,'2014-01-15 20:45:30','2014-01-15 20:45:30','<h2>wrapping, indenting, spell-checking</h2>\r\n\r\nHere are some useful options:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# stop indenting {,( and such\r\n:set nocindent\r\n\r\n# enable spell-checker\r\n:setlocal spell spelllang=en_us\r\n\r\n# auto wrapping\r\n# wrap lines that are too long with \"visual\" newlines \r\n# rather than adding an actual newline character t\r\n# The \'list\' option must be off because it automatically \r\n# disables the \'linebreak\' option:\r\n:set wrap nolist inebreak\r\n\r\n# width of wrap to 60 chars\r\n:set textwidth=60\r\n\r\n# to test, not sure of the impact\r\n:set formatoptions+=n # numbered-list\r\n:set formatoptions+=a # \r\n</pre>','edit simple text with vim','','inherit','closed','open','','336-revision-v1','','','2014-01-15 20:45:30','2014-01-15 20:45:30','',336,'http://error418.no-ip.info/mywiki/?p=337',0,'revision','',0),(338,3,'2014-01-16 13:22:23','2014-01-16 13:22:23','<h2>wrapping, indenting, spell-checking</h2>\nHere are some useful options:\n<pre class=\"prettyprint lang-text with-comments\">\n# stop indenting {,( and such\n:set nocindent\n\n# enable spell-checker\n:setlocal spell spelllang=en\n\n# auto wrapping\n# wrap lines that are too long with \"visual\" newlines \n# rather than adding an actual newline character t\n# The \'list\' option must be off because it automatically \n# disables the \'linebreak\' option:\n:set wrap nolist inebreak\n\n# width of wrap to 60 chars\n:set textwidth=60\n\n# to test, not sure of the impact\n:set formatoptions+=n # numbered-list\n:set formatoptions+=a #</pre>\n<h2>Vim spell check</h2>\n<pre class=\"prettyprint lang-text with-comments\">\n# enable spell-checker\n:setlocal spell spelllang=en # or fr, ...</pre>\nTo use the french dictionary, download the following files and add them either in <code>/usr/share/vim/spell</code> or in your <code>~/.vim/spell</code> folder:\n<pre class=\"prettyprint lang-text\">\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.spl\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.sug\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.spl\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.sug</pre>\nNote that you can also choose juste the utf8 or the latin1, not both, if you plan to use only one encoding.\n\nTo autocorrect a word, use <code>z=</code>. To mark a word as correct and update the dictionary, use <code>zg</code>; <code> zw</code> does the opposite, i.e. mark a word as mispelled.','edit simple text with vim','','inherit','closed','open','','336-autosave-v1','','','2014-01-16 13:22:23','2014-01-16 13:22:23','',336,'http://error418.no-ip.info/mywiki/?p=338',0,'revision','',0),(340,3,'2014-01-16 13:15:38','2014-01-16 13:15:38','<h2>wrapping, indenting, spell-checking</h2>\r\nHere are some useful options:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# stop indenting {,( and such\r\n:set nocindent\r\n\r\n# enable spell-checker\r\n:setlocal spell spelllang=en\r\n\r\n# auto wrapping\r\n# wrap lines that are too long with \"visual\" newlines \r\n# rather than adding an actual newline character t\r\n# The \'list\' option must be off because it automatically \r\n# disables the \'linebreak\' option:\r\n:set wrap nolist inebreak\r\n\r\n# width of wrap to 60 chars\r\n:set textwidth=60\r\n\r\n# to test, not sure of the impact\r\n:set formatoptions+=n # numbered-list\r\n:set formatoptions+=a #</pre>\r\n\r\nTo use the french dictionary, download the following files and add them either in <code>/usr/share/vim/spell</code> or in your <code>~/.vim/spell</code> folder:\r\n<pre class=\"prettyprint lang-text\">\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.spl\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.sug\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.spl\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.sug\r\n</pre>\r\nNote that you can also choose juste the utf8 or the latin1, not both, if you plan to use only one encoding.','edit simple text with vim','','inherit','closed','open','','336-revision-v1','','','2014-01-16 13:15:38','2014-01-16 13:15:38','',336,'http://error418.no-ip.info/mywiki/?p=340',0,'revision','',0),(341,3,'2014-01-16 13:21:18','2014-01-16 13:21:18','<h2>wrapping, indenting, spell-checking</h2>\r\nHere are some useful options:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# stop indenting {,( and such\r\n:set nocindent\r\n\r\n# enable spell-checker\r\n:setlocal spell spelllang=en\r\n\r\n# auto wrapping\r\n# wrap lines that are too long with \"visual\" newlines \r\n# rather than adding an actual newline character t\r\n# The \'list\' option must be off because it automatically \r\n# disables the \'linebreak\' option:\r\n:set wrap nolist inebreak\r\n\r\n# width of wrap to 60 chars\r\n:set textwidth=60\r\n\r\n# to test, not sure of the impact\r\n:set formatoptions+=n # numbered-list\r\n:set formatoptions+=a #</pre>\r\n\r\n<h2>Vim spell check</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# enable spell-checker\r\n:setlocal spell spelllang=en # or fr, ...\r\n</pre>\r\n\r\nTo use the french dictionary, download the following files and add them either in <code>/usr/share/vim/spell</code> or in your <code>~/.vim/spell</code> folder:\r\n<pre class=\"prettyprint lang-text\">\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.spl\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.sug\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.spl\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.sug</pre>\r\nNote that you can also choose juste the utf8 or the latin1, not both, if you plan to use only one encoding.\r\n\r\nTo autocorrect a word, use <code>z=</code>. To mark a word as correct and update the dictionary, use <code>zg</code>; <code> zw</code> does the opposite, i.e. mark a word as mispelled.','edit simple text with vim','','inherit','closed','open','','336-revision-v1','','','2014-01-16 13:21:18','2014-01-16 13:21:18','',336,'http://error418.no-ip.info/mywiki/?p=341',0,'revision','',0),(342,3,'2014-01-16 13:22:35','2014-01-16 13:22:35','<h2>Wrapping, indenting</h2>\r\nHere are some useful options:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# stop indenting {,( and such\r\n:set nocindent\r\n\r\n# enable spell-checker\r\n:setlocal spell spelllang=en\r\n\r\n# auto wrapping\r\n# wrap lines that are too long with \"visual\" newlines \r\n# rather than adding an actual newline character t\r\n# The \'list\' option must be off because it automatically \r\n# disables the \'linebreak\' option:\r\n:set wrap nolist inebreak\r\n\r\n# width of wrap to 60 chars\r\n:set textwidth=60\r\n\r\n# to test, not sure of the impact\r\n:set formatoptions+=n # numbered-list\r\n:set formatoptions+=a #</pre>\r\n<h2>Vim spell check</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# enable spell-checker\r\n:setlocal spell spelllang=en # or fr, ...</pre>\r\nTo use the french dictionary, download the following files and add them either in <code>/usr/share/vim/spell</code> or in your <code>~/.vim/spell</code> folder:\r\n<pre class=\"prettyprint lang-text\">\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.spl\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.sug\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.spl\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.sug</pre>\r\nNote that you can also choose juste the utf8 or the latin1, not both, if you plan to use only one encoding.\r\n\r\nTo autocorrect a word, use <code>z=</code>. To mark a word as correct and update the dictionary, use <code>zg</code>; <code> zw</code> does the opposite, i.e. mark a word as mispelled.','edit simple text with vim','','inherit','closed','open','','336-revision-v1','','','2014-01-16 13:22:35','2014-01-16 13:22:35','',336,'http://error418.no-ip.info/mywiki/?p=342',0,'revision','',0),(343,3,'2014-01-17 14:53:11','2014-01-17 14:53:11','I you are like me, it is a pain in the *** to write an effective binary search: is the condition of the loop a low &lt; high or a low &lt;= high ? Where to put the + 1 and the - 1 ?\r\n\r\nHere is a simple way of remembering the algorithm.\r\n\r\nTo sort an array, we use to pointer: one, <code>low</code>, moves to the upper indexes of the array and the other, <code>high</code>, begins at the end and goes from right to left (moves to the lower indexes).\r\n\r\nWe pose to constraints:\r\n<pre class=\"prettyprint lang-text\">\r\narray[ low ]  <  X\r\narray[ high ] >= X</pre>\r\nwhatever the values of <code>low</code> and <code>low</code>.\r\n\r\nAt the beginning, <code>low</code> points to a phantom case located before the first case and <code>high</code> points to the case after the last case of the array:\r\n<pre class=\"prettyprint lang-text\">\r\nBEGIN:\r\nlow = -1\r\nhigh = array.length</pre>\r\nWe then want to move the two pointers towards each other until they point to contiguous cases, namely <code>low + 1 == high</code> or <code>low == high - 1</code>. At this point, we have searched the whole array; if the element to find exists, it will be in either  <code>array[ low ]</code> or <code>array[ high ]</code>, depending on the operators we used (see below).\r\n\r\nFinally, the code is rather simple:\r\n<pre class=\"prettyprint\">\r\nint low = -1;\r\nint high = array.length;\r\n\r\nwhile( low + 1 < high ){\r\nint middle = low + (low + high ) / 2;\r\n\r\nif( array[ middle ] < X ) // (1)\r\nlow = middle;\r\nelse\r\nhigh = middle;\r\n}\r\n\r\nif( low < high && \r\narray[ high ] == X ) // (2)\r\nreturn X;\r\n\r\nreturn -1;</pre>\r\nOne of the advantages of this method is that there is no +1 or -1 anymore. Moreover, we can choose which element we return in case it appears multiple times in the array. We just need to recall our constraint! \r\nBy stating that all elements equals are on the right, we will return the first match; if we change the constraint and put all the elements equals to the left, at the end <code>array[ low ]</code> will return the last match...\r\n\r\nSo to resume, to return the first match:\r\n<ul>\r\n	<li>if( array[ middle ] &lt; low )</li>\r\n	<li>return array[ high ]</li>\r\n</ul>\r\nto return the last match:\r\n<ul>\r\n	<li>if( array[ middle ] &lt;= low )</li>\r\n	<li>return array[ low ]</li>\r\n</ul>','Never skrew up a binary search again','','publish','closed','open','','never-skrew-up-a-binary-search-again','','','2014-01-17 14:54:04','2014-01-17 14:54:04','',0,'http://error418.no-ip.info/mywiki/?p=343',0,'post','',0),(344,3,'2014-01-17 14:51:09','2014-01-17 14:51:09','<h2>Never skrew a binary search again</h2>\r\n\r\nI you are like me, it is a pain in the *** to write an effective binary search: is the condition of the loop a low &lt; high or a low &lt;= high ? Where to put the + 1 and the - 1 ?\r\n\r\nHere is a simple way of remembering the algorithm.\r\n\r\nTo sort an array, we use to pointer: one, <code>low</code>, moves to the upper indexes of the array and the other, <code>high</code>, begins at the end and goes from right to left (moves to the lower indexes).\r\n\r\nWe pose to constraints:\r\n<pre class=\"prettyprint lang-text\">\r\n    array[ low ] < X\r\n    array[ high ] >= X\r\n</pre>\r\nwhatever the values of <code>low</code> and <code>low</code>.\r\n\r\nAt the beginning, <code>low</code> points to a phantom case located before the first case and <code>high</code> points to the case after the last case of the array:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n    BEGIN:\r\n      low = -1\r\n      high = array.length\r\n</pre>\r\n\r\nWe then want to move the two pointers towards each other until they point to contiguous cases, namely <code>low + 1 == high</code> or <code>low == high - 1</code>. At this point, we have searched the whole array; if the element to find exists, it will be in either  <code>array[ low ]</code> or <code>array[ high ]</code>, depending on the operators we used (see below).\r\n\r\n\r\nFinally, the code is rather simple:\r\n<pre class=\"prettyprint\">\r\n\r\n  int low = -1;\r\n  int high = array.length;\r\n  \r\n  while( low + 1 < high ){\r\n    int middle = low + (low + high ) / 2;\r\n    \r\n    // since we use <, in case of multiple X,\r\n    // we will return the first match \r\n    // use <= for the last match \r\n    if( array[ middle ] < X ) \r\n        low = middle;\r\n    else\r\n        high = middle;\r\n  }\r\n  \r\n  if( low < high && array[ high ] == X )\r\n    return X;\r\n    \r\n  return -1;\r\n  \r\n</pre>\r\n\r\nOne of the advantages of this method is that there is no +1 or -1 anymore. Moreover, we can choose which element we return in case it appears multiple times in the array. We just need to recall our constraint~! By stating that all elements equals are on the right, we will return the first match; if we change the constraint and put all the elements equals to the left, at the end <code>array[ low ]</code> will return the last match...\r\n\r\nSo to resume, to return the first match:\r\n<ul>\r\n    <li>if( array[ middle ] &lt; low )</li>\r\n    <li>return array[ high ]</li>\r\n</ul>\r\nto return the last match:\r\n<ul>\r\n    <li>if( array[ middle ] &lt;= low )</li>\r\n    <li>return array[ low ]</li>\r\n</ul>','','','inherit','closed','open','','343-revision-v1','','','2014-01-17 14:51:09','2014-01-17 14:51:09','',343,'http://error418.no-ip.info/mywiki/?p=344',0,'revision','',0),(345,3,'2014-01-17 14:52:29','2014-01-17 14:52:29','I you are like me, it is a pain in the *** to write an effective binary search: is the condition of the loop a low &lt; high or a low &lt;= high ? Where to put the + 1 and the - 1 ?\r\n\r\nHere is a simple way of remembering the algorithm.\r\n\r\nTo sort an array, we use to pointer: one, <code>low</code>, moves to the upper indexes of the array and the other, <code>high</code>, begins at the end and goes from right to left (moves to the lower indexes).\r\n\r\nWe pose to constraints:\r\n<pre class=\"prettyprint lang-text\">\r\n    array[ low ] < X\r\n    array[ high ] >= X\r\n</pre>\r\nwhatever the values of <code>low</code> and <code>low</code>.\r\n\r\nAt the beginning, <code>low</code> points to a phantom case located before the first case and <code>high</code> points to the case after the last case of the array:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n    BEGIN:\r\n      low = -1\r\n      high = array.length\r\n</pre>\r\n\r\nWe then want to move the two pointers towards each other until they point to contiguous cases, namely <code>low + 1 == high</code> or <code>low == high - 1</code>. At this point, we have searched the whole array; if the element to find exists, it will be in either  <code>array[ low ]</code> or <code>array[ high ]</code>, depending on the operators we used (see below).\r\n\r\n\r\nFinally, the code is rather simple:\r\n<pre class=\"prettyprint\">\r\n\r\n  int low = -1;\r\n  int high = array.length;\r\n  \r\n  while( low + 1 < high ){\r\n    int middle = low + (low + high ) / 2;\r\n    \r\n    if( array[ middle ] < X ) // (1)\r\n        low = middle;\r\n    else\r\n        high = middle;\r\n  }\r\n  \r\n  if( low < high && \r\n        array[ high ] == X ) // (2)\r\n    return X;\r\n    \r\n  return -1;\r\n  \r\n</pre>\r\n\r\nOne of the advantages of this method is that there is no +1 or -1 anymore. Moreover, we can choose which element we return in case it appears multiple times in the array. We just need to recall our constraint~! By stating that all elements equals are on the right, we will return the first match; if we change the constraint and put all the elements equals to the left, at the end <code>array[ low ]</code> will return the last match...\r\n\r\nSo to resume, to return the first match:\r\n<ul>\r\n    <li>if( array[ middle ] &lt; low )</li>\r\n    <li>return array[ high ]</li>\r\n</ul>\r\nto return the last match:\r\n<ul>\r\n    <li>if( array[ middle ] &lt;= low )</li>\r\n    <li>return array[ low ]</li>\r\n</ul>','Never skrew up a binary search again','','inherit','closed','open','','343-revision-v1','','','2014-01-17 14:52:29','2014-01-17 14:52:29','',343,'http://error418.no-ip.info/mywiki/?p=345',0,'revision','',0),(346,3,'2014-01-17 14:53:11','2014-01-17 14:53:11','I you are like me, it is a pain in the *** to write an effective binary search: is the condition of the loop a low &lt; high or a low &lt;= high ? Where to put the + 1 and the - 1 ?\r\n\r\nHere is a simple way of remembering the algorithm.\r\n\r\nTo sort an array, we use to pointer: one, <code>low</code>, moves to the upper indexes of the array and the other, <code>high</code>, begins at the end and goes from right to left (moves to the lower indexes).\r\n\r\nWe pose to constraints:\r\n<pre class=\"prettyprint lang-text\">\r\narray[ low ]  <  X\r\narray[ high ] >= X\r\n</pre>\r\nwhatever the values of <code>low</code> and <code>low</code>.\r\n\r\nAt the beginning, <code>low</code> points to a phantom case located before the first case and <code>high</code> points to the case after the last case of the array:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nBEGIN:\r\nlow = -1\r\nhigh = array.length\r\n</pre>\r\n\r\nWe then want to move the two pointers towards each other until they point to contiguous cases, namely <code>low + 1 == high</code> or <code>low == high - 1</code>. At this point, we have searched the whole array; if the element to find exists, it will be in either  <code>array[ low ]</code> or <code>array[ high ]</code>, depending on the operators we used (see below).\r\n\r\n\r\nFinally, the code is rather simple:\r\n<pre class=\"prettyprint\">\r\nint low = -1;\r\nint high = array.length;\r\n\r\nwhile( low + 1 < high ){\r\nint middle = low + (low + high ) / 2;\r\n\r\nif( array[ middle ] < X ) // (1)\r\nlow = middle;\r\nelse\r\nhigh = middle;\r\n}\r\n\r\nif( low < high && \r\narray[ high ] == X ) // (2)\r\nreturn X;\r\n\r\nreturn -1; \r\n</pre>\r\n\r\nOne of the advantages of this method is that there is no +1 or -1 anymore. Moreover, we can choose which element we return in case it appears multiple times in the array. We just need to recall our constraint~! By stating that all elements equals are on the right, we will return the first match; if we change the constraint and put all the elements equals to the left, at the end <code>array[ low ]</code> will return the last match...\r\n\r\nSo to resume, to return the first match:\r\n<ul>\r\n    <li>if( array[ middle ] &lt; low )</li>\r\n    <li>return array[ high ]</li>\r\n</ul>\r\nto return the last match:\r\n<ul>\r\n    <li>if( array[ middle ] &lt;= low )</li>\r\n    <li>return array[ low ]</li>\r\n</ul>','Never skrew up a binary search again','','inherit','closed','open','','343-revision-v1','','','2014-01-17 14:53:11','2014-01-17 14:53:11','',343,'http://error418.no-ip.info/mywiki/?p=346',0,'revision','',0),(347,3,'2014-01-17 14:53:26','2014-01-17 14:53:26','I you are like me, it is a pain in the *** to write an effective binary search: is the condition of the loop a low &lt; high or a low &lt;= high ? Where to put the + 1 and the - 1 ?\r\n\r\nHere is a simple way of remembering the algorithm.\r\n\r\nTo sort an array, we use to pointer: one, <code>low</code>, moves to the upper indexes of the array and the other, <code>high</code>, begins at the end and goes from right to left (moves to the lower indexes).\r\n\r\nWe pose to constraints:\r\n<pre class=\"prettyprint lang-text\">\r\narray[ low ]  <  X\r\narray[ high ] >= X</pre>\r\nwhatever the values of <code>low</code> and <code>low</code>.\r\n\r\nAt the beginning, <code>low</code> points to a phantom case located before the first case and <code>high</code> points to the case after the last case of the array:\r\n<pre class=\"prettyprint lang-text\">\r\nBEGIN:\r\nlow = -1\r\nhigh = array.length</pre>\r\nWe then want to move the two pointers towards each other until they point to contiguous cases, namely <code>low + 1 == high</code> or <code>low == high - 1</code>. At this point, we have searched the whole array; if the element to find exists, it will be in either  <code>array[ low ]</code> or <code>array[ high ]</code>, depending on the operators we used (see below).\r\n\r\nFinally, the code is rather simple:\r\n<pre class=\"prettyprint\">\r\nint low = -1;\r\nint high = array.length;\r\n\r\nwhile( low + 1 < high ){\r\nint middle = low + (low + high ) / 2;\r\n\r\nif( array[ middle ] < X ) // (1)\r\nlow = middle;\r\nelse\r\nhigh = middle;\r\n}\r\n\r\nif( low < high && \r\narray[ high ] == X ) // (2)\r\nreturn X;\r\n\r\nreturn -1;</pre>\r\nOne of the advantages of this method is that there is no +1 or -1 anymore. Moreover, we can choose which element we return in case it appears multiple times in the array. We just need to recall our constraint~! By stating that all elements equals are on the right, we will return the first match; if we change the constraint and put all the elements equals to the left, at the end <code>array[ low ]</code> will return the last match...\r\n\r\nSo to resume, to return the first match:\r\n<ul>\r\n	<li>if( array[ middle ] &lt; low )</li>\r\n	<li>return array[ high ]</li>\r\n</ul>\r\nto return the last match:\r\n<ul>\r\n	<li>if( array[ middle ] &lt;= low )</li>\r\n	<li>return array[ low ]</li>\r\n</ul>','Never skrew up a binary search again','','inherit','closed','open','','343-revision-v1','','','2014-01-17 14:53:26','2014-01-17 14:53:26','',343,'http://error418.no-ip.info/mywiki/?p=347',0,'revision','',0),(348,3,'2014-01-17 14:53:56','2014-01-17 14:53:56','I you are like me, it is a pain in the *** to write an effective binary search: is the condition of the loop a low &lt; high or a low &lt;= high ? Where to put the + 1 and the - 1 ?\r\n\r\nHere is a simple way of remembering the algorithm.\r\n\r\nTo sort an array, we use to pointer: one, <code>low</code>, moves to the upper indexes of the array and the other, <code>high</code>, begins at the end and goes from right to left (moves to the lower indexes).\r\n\r\nWe pose to constraints:\r\n<pre class=\"prettyprint lang-text\">\r\narray[ low ]  <  X\r\narray[ high ] >= X</pre>\r\nwhatever the values of <code>low</code> and <code>low</code>.\r\n\r\nAt the beginning, <code>low</code> points to a phantom case located before the first case and <code>high</code> points to the case after the last case of the array:\r\n<pre class=\"prettyprint lang-text\">\r\nBEGIN:\r\nlow = -1\r\nhigh = array.length</pre>\r\nWe then want to move the two pointers towards each other until they point to contiguous cases, namely <code>low + 1 == high</code> or <code>low == high - 1</code>. At this point, we have searched the whole array; if the element to find exists, it will be in either  <code>array[ low ]</code> or <code>array[ high ]</code>, depending on the operators we used (see below).\r\n\r\nFinally, the code is rather simple:\r\n<pre class=\"prettyprint\">\r\nint low = -1;\r\nint high = array.length;\r\n\r\nwhile( low + 1 < high ){\r\nint middle = low + (low + high ) / 2;\r\n\r\nif( array[ middle ] < X ) // (1)\r\nlow = middle;\r\nelse\r\nhigh = middle;\r\n}\r\n\r\nif( low < high && \r\narray[ high ] == X ) // (2)\r\nreturn X;\r\n\r\nreturn -1;</pre>\r\nOne of the advantages of this method is that there is no +1 or -1 anymore. Moreover, we can choose which element we return in case it appears multiple times in the array. We just need to recall our constraint! \r\nBy stating that all elements equals are on the right, we will return the first match; if we change the constraint and put all the elements equals to the left, at the end <code>array[ low ]</code> will return the last match...\r\n\r\nSo to resume, to return the first match:\r\n<ul>\r\n	<li>if( array[ middle ] &lt; low )</li>\r\n	<li>return array[ high ]</li>\r\n</ul>\r\nto return the last match:\r\n<ul>\r\n	<li>if( array[ middle ] &lt;= low )</li>\r\n	<li>return array[ low ]</li>\r\n</ul>','Never skrew up a binary search again','','inherit','closed','open','','343-autosave-v1','','','2014-01-17 14:53:56','2014-01-17 14:53:56','',343,'http://error418.no-ip.info/mywiki/?p=348',0,'revision','',0),(349,3,'2014-01-17 14:54:04','2014-01-17 14:54:04','I you are like me, it is a pain in the *** to write an effective binary search: is the condition of the loop a low &lt; high or a low &lt;= high ? Where to put the + 1 and the - 1 ?\r\n\r\nHere is a simple way of remembering the algorithm.\r\n\r\nTo sort an array, we use to pointer: one, <code>low</code>, moves to the upper indexes of the array and the other, <code>high</code>, begins at the end and goes from right to left (moves to the lower indexes).\r\n\r\nWe pose to constraints:\r\n<pre class=\"prettyprint lang-text\">\r\narray[ low ]  <  X\r\narray[ high ] >= X</pre>\r\nwhatever the values of <code>low</code> and <code>low</code>.\r\n\r\nAt the beginning, <code>low</code> points to a phantom case located before the first case and <code>high</code> points to the case after the last case of the array:\r\n<pre class=\"prettyprint lang-text\">\r\nBEGIN:\r\nlow = -1\r\nhigh = array.length</pre>\r\nWe then want to move the two pointers towards each other until they point to contiguous cases, namely <code>low + 1 == high</code> or <code>low == high - 1</code>. At this point, we have searched the whole array; if the element to find exists, it will be in either  <code>array[ low ]</code> or <code>array[ high ]</code>, depending on the operators we used (see below).\r\n\r\nFinally, the code is rather simple:\r\n<pre class=\"prettyprint\">\r\nint low = -1;\r\nint high = array.length;\r\n\r\nwhile( low + 1 < high ){\r\nint middle = low + (low + high ) / 2;\r\n\r\nif( array[ middle ] < X ) // (1)\r\nlow = middle;\r\nelse\r\nhigh = middle;\r\n}\r\n\r\nif( low < high && \r\narray[ high ] == X ) // (2)\r\nreturn X;\r\n\r\nreturn -1;</pre>\r\nOne of the advantages of this method is that there is no +1 or -1 anymore. Moreover, we can choose which element we return in case it appears multiple times in the array. We just need to recall our constraint! \r\nBy stating that all elements equals are on the right, we will return the first match; if we change the constraint and put all the elements equals to the left, at the end <code>array[ low ]</code> will return the last match...\r\n\r\nSo to resume, to return the first match:\r\n<ul>\r\n	<li>if( array[ middle ] &lt; low )</li>\r\n	<li>return array[ high ]</li>\r\n</ul>\r\nto return the last match:\r\n<ul>\r\n	<li>if( array[ middle ] &lt;= low )</li>\r\n	<li>return array[ low ]</li>\r\n</ul>','Never skrew up a binary search again','','inherit','closed','open','','343-revision-v1','','','2014-01-17 14:54:04','2014-01-17 14:54:04','',343,'http://error418.no-ip.info/mywiki/?p=349',0,'revision','',0),(350,3,'2014-01-17 14:54:56','2014-01-17 14:54:56','In ARM, 15 registers are at disposal:\r\n<ul>\r\n	<li>\r\n    <strong>R0-R3</strong> are used for passing arguments to subroutines; they are thus modified by each call.</li>\r\n	<li>\r\n    <strong>R4-R9</strong> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\n    never forget to back them up before anything else:\r\n    <code>\r\n        push {R4-R9, LR} /* backup */\r\n        ...\r\n        pop {R4-R9, PC} /* restore and branch at the same time \r\n        (LR restored in PC) */\r\n    </code></li>\r\n	<li>\r\n    <strong>R7</strong> is also used to store the address of a syscall to execute</li>\r\n	<li>\r\n    <strong>R13</strong> points to the stack, <strong>R14</strong> is the link register (holding the return address when calling a subroutine), and <strong>R15</strong> is the programm counter (holding the address of the next instruction).</li>\r\n</ul>\r\n<h2>Registers complete table</h2>\r\n<table>\r\n<thead>\r\n<td>register</td>\r\n<td>alt. name</td>\r\n<td>function</td>\r\n</thead>\r\n<tr>\r\n<td>r0</td>\r\n<td>a1</td>\r\n<td>First function argument / Integer function result Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r1</td>\r\n<td>a2</td>\r\n<td>Second function argument Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r2</td>\r\n<td>a3</td>\r\n<td>Third function argument Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r3</td>\r\n<td>a4</td>\r\n<td>Fourth function argument Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r4</td>\r\n<td>v1</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r5</td>\r\n<td>v2</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r6</td>\r\n<td>v3</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r7</td>\r\n<td>v4</td>\r\n<td>Register variable, also used to store the address of a syscall</td>\r\n</tr>\r\n<tr>\r\n<td>r8</td>\r\n<td>v5</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r9</td>\r\n<td>v6</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r10</td>\r\n<td>sl</td>\r\n<td>Stack limit</td>\r\n</tr>\r\n<tr>\r\n<td>r11</td>\r\n<td>fp</td>\r\n<td>Argument pointer</td>\r\n</tr>\r\n<tr>\r\n<td>r12</td>\r\n<td>ip</td>\r\n<td>Temporary workspace</td>\r\n</tr>\r\n<tr>\r\n<td>r13</td>\r\n<td>sp</td>\r\n<td>Stack pointer</td>\r\n</tr>\r\n<tr>\r\n<td>r14</td>\r\n<td>lr</td>\r\n<td>Link register Workspace</td>\r\n</tr>\r\n<tr>\r\n<td>r15</td>\r\n<td>pc</td>\r\n<td>Program counter</td>\r\n</tr>\r\n</table>\r\n<a href=\"http://www.exploit-db.com/papers/14143/\">source</a>','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2014-01-17 14:54:56','2014-01-17 14:54:56','',7,'http://error418.no-ip.info/mywiki/?p=350',0,'revision','',0),(351,3,'2014-01-17 14:56:23','2014-01-17 14:56:23','In ARM, 15 registers are at disposal:\r\n<ul>\r\n	<li>\r\n    <strong>R0-R3</strong> are used for passing arguments to subroutines; they are thus modified by each call.</li>\r\n	<li>\r\n    <strong>R4-R9</strong> are working registers : they should normally be preserved between calls. Thus, when writing a subroutine, \r\n    never forget to back them up before anything else:\r\n    <pre class=\"prettyprint\">\r\npush {R4-R9, LR} /* backup */\r\n...\r\npop {R4-R9, PC} /* restore and branch at the same time \r\n(LR restored in PC) */</pre></li>\r\n	<li>\r\n    <strong>R7</strong> is also used to store the address of a syscall to execute</li>\r\n	<li>\r\n    <strong>R13</strong> points to the stack, <strong>R14</strong> is the link register (holding the return address when calling a subroutine), and <strong>R15</strong> is the programm counter (holding the address of the next instruction).</li>\r\n</ul>\r\n<h2>Registers complete table</h2>\r\n<table>\r\n<thead>\r\n<td>register</td>\r\n<td>alt. name</td>\r\n<td>function</td>\r\n</thead>\r\n<tr>\r\n<td>r0</td>\r\n<td>a1</td>\r\n<td>First function argument / Integer function result Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r1</td>\r\n<td>a2</td>\r\n<td>Second function argument Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r2</td>\r\n<td>a3</td>\r\n<td>Third function argument Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r3</td>\r\n<td>a4</td>\r\n<td>Fourth function argument Scratch register</td>\r\n</tr>\r\n<tr>\r\n<td>r4</td>\r\n<td>v1</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r5</td>\r\n<td>v2</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r6</td>\r\n<td>v3</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r7</td>\r\n<td>v4</td>\r\n<td>Register variable, also used to store the address of a syscall</td>\r\n</tr>\r\n<tr>\r\n<td>r8</td>\r\n<td>v5</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r9</td>\r\n<td>v6</td>\r\n<td>Register variable</td>\r\n</tr>\r\n<tr>\r\n<td>r10</td>\r\n<td>sl</td>\r\n<td>Stack limit</td>\r\n</tr>\r\n<tr>\r\n<td>r11</td>\r\n<td>fp</td>\r\n<td>Argument pointer</td>\r\n</tr>\r\n<tr>\r\n<td>r12</td>\r\n<td>ip</td>\r\n<td>Temporary workspace</td>\r\n</tr>\r\n<tr>\r\n<td>r13</td>\r\n<td>sp</td>\r\n<td>Stack pointer</td>\r\n</tr>\r\n<tr>\r\n<td>r14</td>\r\n<td>lr</td>\r\n<td>Link register Workspace</td>\r\n</tr>\r\n<tr>\r\n<td>r15</td>\r\n<td>pc</td>\r\n<td>Program counter</td>\r\n</tr>\r\n</table>\r\n<a href=\"http://www.exploit-db.com/papers/14143/\">source</a>','ARM Registers','','inherit','closed','open','','7-revision-v1','','','2014-01-17 14:56:23','2014-01-17 14:56:23','',7,'http://error418.no-ip.info/mywiki/?p=351',0,'revision','',0),(352,3,'2014-01-19 17:07:55','2014-01-19 17:07:55','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\n<span class=\"nocode\">\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</span>\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-text\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','publish','closed','open','','use-caff-to-easily-sign-gpg-keys','','','2014-01-19 17:07:55','2014-01-19 17:07:55','',0,'http://error418.no-ip.info/mywiki/?p=352',0,'post','',0),(353,3,'2014-01-19 11:18:44','2014-01-19 11:18:44','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"pretty-print lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please upload\r\nit yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 11:18:44','2014-01-19 11:18:44','',352,'http://error418.no-ip.info/mywiki/?p=353',0,'revision','',0),(354,3,'2014-01-19 11:19:27','2014-01-19 11:19:27','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 11:19:27','2014-01-19 11:19:27','',352,'http://error418.no-ip.info/mywiki/?p=354',0,'revision','',0),(355,3,'2014-01-19 11:19:46','2014-01-19 11:19:46','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 11:19:46','2014-01-19 11:19:46','',352,'http://error418.no-ip.info/mywiki/?p=355',0,'revision','',0),(356,3,'2014-01-19 11:20:16','2014-01-19 11:20:16','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 11:20:16','2014-01-19 11:20:16','',352,'http://error418.no-ip.info/mywiki/?p=356',0,'revision','',0),(357,3,'2014-01-19 11:22:14','2014-01-19 11:22:14','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-sh\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 11:22:14','2014-01-19 11:22:14','',352,'http://error418.no-ip.info/mywiki/?p=357',0,'revision','',0),(358,3,'2014-01-19 11:23:42','2014-01-19 11:23:42','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint language-sh\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 11:23:42','2014-01-19 11:23:42','',352,'http://error418.no-ip.info/mywiki/?p=358',0,'revision','',0),(359,3,'2014-01-19 11:25:52','2014-01-19 11:25:52','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\n<span class=\"nocode\">\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</span>\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint language-sh\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 11:25:52','2014-01-19 11:25:52','',352,'http://error418.no-ip.info/mywiki/?p=359',0,'revision','',0),(360,3,'2014-01-19 11:28:32','2014-01-19 11:28:32','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\n<span class=\"nocode\">\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</span>\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-m\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 11:28:32','2014-01-19 11:28:32','',352,'http://error418.no-ip.info/mywiki/?p=360',0,'revision','',0),(361,3,'2014-01-19 11:30:09','2014-01-19 11:30:09','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\n<span class=\"nocode\">\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</span>\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-m\">\r\nRoot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 11:30:09','2014-01-19 11:30:09','',352,'http://error418.no-ip.info/mywiki/?p=361',0,'revision','',0),(362,3,'2014-01-19 11:45:30','2014-01-19 11:45:30','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\n<span class=\"nocode\">\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</span>\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-default-markup\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 11:45:30','2014-01-19 11:45:30','',352,'http://error418.no-ip.info/mywiki/?p=362',0,'revision','',0),(363,3,'2014-01-19 17:07:55','2014-01-19 17:07:55','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\r\n\r\nBut to be able to use it, you first need to configure your environment properly.\r\n\r\n\r\n<h2>Installing caff</h2>\r\n\r\nThe caff utility is part of the <code>signing-party</code> package:\r\n<pre class=\"prettyprint lang-text\">\r\n>sudo apt-get install signing-party\r\n</pre>\r\n\r\nDuring the install, you will see some prompts: just let the defaults.\r\n\r\n<h2>Configuring caff</h2>\r\nYou will need a <code>~/.caffrc</code> file.<br />\r\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\r\n\r\nAdd the following to it:\r\n<pre class=\"prettyprint\">\r\n# your name and email\r\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\r\n$CONFIG{\'email\'} = \'username@truc.com\';\r\n\r\n# the long id of your key\r\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\r\n# home (default)\r\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\r\n\r\n# the body of the mail to send\r\n$CONFIG{\'mail-template\'} = <<\'EOM\'\r\n<span class=\"nocode\">\r\nHi,\r\n\r\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\r\n{foreach $uid (@uids) {\r\n    $OUT .= \"\\t\".$uid.\"\\n\";\r\n};}of your key {$key} signed by me.\r\n\r\nNote that I did not upload your key to any keyservers.\r\nIf you have multiple user ids, I sent the signature for each user id\r\nseparately to that user id\'s associated email address. You can import\r\nthe signatures by running each through `gpg --import`.\r\n\r\nIf you want this new signature to be available to others, please \r\nupload it yourself. With GnuPG this can be done using\r\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\r\n\r\nIf you have any questions, don\'t hesitate to ask.\r\n\r\nRegards,\r\n{$owner}\r\nEOM\r\n</span>\r\n</pre>\r\n\r\n\r\nFor the caff part, that\'s it !\r\n\r\n<h2>Configuring the mail server (gmail)</h2>\r\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails. <br />\r\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\r\n\r\nFirst, install the package via:\r\n<pre class=\"prettyprint lang-text\">\r\n> sudo apt-get install ssmtp\r\n</pre>\r\n\r\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\r\n<pre class=\"prettyprint lang-text\">\r\nroot=username@gmail.com\r\nmailhub=smtp.gmail.com:587\r\nrewriteDomain=\r\nhostname=username@gmail.com\r\nUseSTARTTLS=YES\r\nAuthUser=username\r\nAuthPass=password\r\nFromLineOverride=YES\r\n</pre>\r\n\r\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nroot:username@gmail.com:smtp.gmail.com:587\r\nlocalusername:username@gmail.com:smtp.gmail.com:587\r\n</pre>\r\n\r\nTo test your ssmtp configuration, open a terminal and type:\r\n<pre class=\"prettyprint lang-text\">\r\n> ssmtp recipient@truc.com\r\nType the body of the email and \r\nfinish by adding a newline and pressing \r\nCTRL+D\r\n</pre>\r\n\r\n<h2>Sign a key with caff</h2>\r\nNow that everything is configured, we can sign keys. In the terminal, just type:\r\n<pre class=\"prettyprint lang-text\">\r\n> caff <long-id of the key to sign>\r\n</pre>\r\nNote that you can specify multiple keys at once.\r\n','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-revision-v1','','','2014-01-19 17:07:55','2014-01-19 17:07:55','',352,'http://error418.no-ip.info/mywiki/?p=363',0,'revision','',0),(364,3,'2014-01-19 17:09:00','2014-01-19 17:09:00','<code>caff</code> is a rather easy-to-use perl program which automate the key signature process. It will fetch the key, sign it, send it by email and remove it from your keyring by a simple command.\n\nBut to be able to use it, you first need to configure your environment properly.\n<h2>Installing caff</h2>\nThe caff utility is part of the <code>signing-party</code> package:\n<pre class=\"prettyprint lang-text\">\n>sudo apt-get install signing-party</pre>\nDuring the install, you will see some prompts: just let the defaults.\n<h2>Configuring caff</h2>\nYou will need a <code>~/.caffrc</code> file.\nYou can either copy the sample configuration file from <code>/usr/share/doc/signing-party/caff/caffrc.sample</code> or just start anew.\n\nAdd the following to it:\n<pre class=\"prettyprint\">\n# your name and email\n$CONFIG{\'owner\'} = \'Firstname Lastname\';\n$CONFIG{\'email\'} = \'username@truc.com\';\n\n# the long id of your key\n$CONFIG{\'keyid\'}       = [ qw{A534CC879DF02B77} ];\n# home (default)\n$CONFIG{\'caffhome\'}    = $ENV{\'HOME\'}.\'/.caff\';\n\n# the body of the mail to send\n$CONFIG{\'mail-template\'} = <<\'EOM\'\n<span class=\"nocode\">\nHi,\n\nplease find attached the user id{(scalar @uids >= 2 ? \'s\' : \'\')}\n{foreach $uid (@uids) {\n    $OUT .= \"\\t\".$uid.\"\\n\";\n};}of your key {$key} signed by me.\n\nNote that I did not upload your key to any keyservers.\nIf you have multiple user ids, I sent the signature for each user id\nseparately to that user id\'s associated email address. You can import\nthe signatures by running each through `gpg --import`.\n\nIf you want this new signature to be available to others, please \nupload it yourself. With GnuPG this can be done using\n    gpg --keyserver pool.sks-keyservers.net --send-key {$key}\n\nIf you have any questions, don\'t hesitate to ask.\n\nRegards,\n{$owner}\nEOM\n</span></pre>\nFor the caff part, that\'s it !\n<h2>Configuring the mail server (gmail)</h2>\nIn my case, I did not want to set up a full featured mail server just to send a bunch of emails.\nFortunately, the package <code>sSMTP</code> provides an extremely simple SMTP server which allows your desktop to send emails. Here, we will configure it to use Gmail.\n\nFirst, install the package via:\n<pre class=\"prettyprint lang-text\">\n> sudo apt-get install ssmtp</pre>\nThen, edit the file <code>/etc/ssmtp/ssmtp.conf</code> and add the following:\n<pre class=\"prettyprint lang-text\">\nroot=username@gmail.com\nmailhub=smtp.gmail.com:587\nrewriteDomain=\nhostname=username@gmail.com\nUseSTARTTLS=YES\nAuthUser=username\nAuthPass=password\nFromLineOverride=YES</pre>\nThis will tell smtp to use those settings when sending mails through username@gmail.com. The last thing to do is to tell smtp to bind your local username to this email address. For that, open <code>/etc/ssmtp/revaliases</code> and add one line for each local user:\n<pre class=\"prettyprint lang-text with-comments\">\nroot:username@gmail.com:smtp.gmail.com:587\nlocalusername:username@gmail.com:smtp.gmail.com:587</pre>\nTo test your ssmtp configuration, open a terminal and type:\n<pre class=\"prettyprint lang-text\">\n> ssmtp recipient@truc.com\nType the body of the email and \nfinish by adding a newline and pressing \nCTRL+D</pre>\n<h2>Sign a key with caff</h2>\nNow that everything is configured, we can sign keys. In the terminal, just type:\n<pre class=\"prettyprint lang-text\">\n> caff <long-id of the key to sign></pre>\nNote that you can specify multiple keys at once.','Use CAFF to easily sign GPG keys','','inherit','closed','open','','352-autosave-v1','','','2014-01-19 17:09:00','2014-01-19 17:09:00','',352,'http://error418.no-ip.info/mywiki/?p=364',0,'revision','',0),(366,3,'2014-01-20 18:24:55','2014-01-20 18:24:55','Sometimes, it is easier to start anew than to update the state of your activities. \r\nIn my case, I used that after importing a db file from backup storage. Instead of reinitialising all the db instances, I just restarted the app... This can be considered ugly but at least it works.\r\n\r\nHere is the code I used:\r\n<pre class=\"prettyprint\">\r\n// get a reference to the current activity context or,\r\n// in my case, from the application\r\nContext context = PipiApplication.getContext();\r\n\r\n// create a new instance to start the main activity\r\nIntent restartIntent = new Intent( context, MainActivity.class );\r\nrestartIntent.setFlags(\r\n        Intent.FLAG_ACTIVITY_NEW_TASK |\r\n        Intent.FLAG_ACTIVITY_NO_HISTORY\r\n    );\r\n\r\n// a pendingIntent grants another application the privilege to\r\n// start your activity as if it was your app\r\nint pendingIntentID = 123456;\r\nPendingIntent pendingIntent = PendingIntent.getActivity(\r\n        context,\r\n        pendingIntentID,\r\n        restartIntent,\r\n        PendingIntent.FLAG_CANCEL_CURRENT\r\n    );\r\n\r\n// ask the alarmManager to launch your intent after a short delay\r\nAlarmManager mgr = ( AlarmManager )getBaseContext().getSystemService(\r\n        Context.ALARM_SERVICE\r\n    );\r\n\r\nmgr.set( AlarmManager.RTC, \r\n         System.currentTimeMillis() + 100, \r\n         pendingIntent \r\n    );\r\n\r\n// exit the main activity smoothly\r\n// Note: if you are not in the main activity, you should\r\n// try System.exit(0) instead\r\nfinish();</pre>','Restart an application','','publish','closed','open','','restart-an-application','','','2014-01-20 18:25:51','2014-01-20 18:25:51','',0,'http://error418.no-ip.info/mywiki/?p=366',0,'post','',0),(367,3,'2014-01-20 18:22:37','2014-01-20 18:22:37','Sometimes, it is easier to start anew than to update the state of your activities. \r\nIn my case, I used that after importing a db file from backup storage. Instead of reinitialising all the db instances, I just restarted the app... This can be considered ugly but at least it works.\r\n\r\nHere is the code I used:\r\n<pre class=\"prettyprint\">\r\n// get a reference to the current activity context or,\r\n// in my case, from the application\r\nContext context = PipiApplication.getContext();\r\n// create a new instance to start the main activity\r\nIntent restartIntent = new Intent( context, MainActivity.class );\r\nrestartIntent.setFlags(\r\n        Intent.FLAG_ACTIVITY_NEW_TASK |\r\n        Intent.FLAG_ACTIVITY_NO_HISTORY\r\n    );\r\n// a pendingIntent grants another application the privilege to\r\n// start your activity as if it was your app\r\nint pendingIntentID = 123456;\r\nPendingIntent pendingIntent = PendingIntent.getActivity(\r\n        context,\r\n        pendingIntentID,\r\n        restartIntent,\r\n        PendingIntent.FLAG_CANCEL_CURRENT\r\n    );\r\n// get the alarmManager\r\nAlarmManager mgr = ( AlarmManager ) getBaseContext().getSystemService(\r\n        Context.ALARM_SERVICE\r\n    );\r\n// ask the alarmManager to launch your intent after a short delay\r\nmgr.set( AlarmManager.RTC, System.currentTimeMillis() + 100, pendingIntent );\r\n// exit the main activity smoothly\r\n// Note: if you are not in the main activity, you can try System.exit(0) instead\r\nfinish();\r\n</pre>','Restart an application','','inherit','closed','open','','366-revision-v1','','','2014-01-20 18:22:37','2014-01-20 18:22:37','',366,'http://error418.no-ip.info/mywiki/?p=367',0,'revision','',0),(368,3,'2014-01-20 18:23:29','2014-01-20 18:23:29','Sometimes, it is easier to start anew than to update the state of your activities. \r\nIn my case, I used that after importing a db file from backup storage. Instead of reinitialising all the db instances, I just restarted the app... This can be considered ugly but at least it works.\r\n\r\nHere is the code I used:\r\n<pre class=\"prettyprint\">\r\n// get a reference to the current activity context or,\r\n// in my case, from the application\r\nContext context = PipiApplication.getContext();\r\n// create a new instance to start the main activity\r\nIntent restartIntent = new Intent( context, MainActivity.class );\r\nrestartIntent.setFlags(\r\n        Intent.FLAG_ACTIVITY_NEW_TASK |\r\n        Intent.FLAG_ACTIVITY_NO_HISTORY\r\n    );\r\n// a pendingIntent grants another application the privilege to\r\n// start your activity as if it was your app\r\nint pendingIntentID = 123456;\r\nPendingIntent pendingIntent = PendingIntent.getActivity(\r\n        context,\r\n        pendingIntentID,\r\n        restartIntent,\r\n        PendingIntent.FLAG_CANCEL_CURRENT\r\n    );\r\n// get the alarmManager\r\nAlarmManager mgr = ( AlarmManager ) getBaseContext().getSystemService(\r\n        Context.ALARM_SERVICE\r\n    );\r\n// ask the alarmManager to launch your intent after a short delay\r\nmgr.set( AlarmManager.RTC, \r\n         System.currentTimeMillis() + 100, \r\n         pendingIntent \r\n    );\r\n// exit the main activity smoothly\r\n// Note: if you are not in the main activity, you can try System.exit(0)\r\nfinish();\r\n</pre>','Restart an application','','inherit','closed','open','','366-revision-v1','','','2014-01-20 18:23:29','2014-01-20 18:23:29','',366,'http://error418.no-ip.info/mywiki/?p=368',0,'revision','',0),(369,3,'2014-01-20 18:23:58','2014-01-20 18:23:58','Sometimes, it is easier to start anew than to update the state of your activities. \r\nIn my case, I used that after importing a db file from backup storage. Instead of reinitialising all the db instances, I just restarted the app... This can be considered ugly but at least it works.\r\n\r\nHere is the code I used:\r\n<pre class=\"prettyprint\">\r\n// get a reference to the current activity context or,\r\n// in my case, from the application\r\nContext context = PipiApplication.getContext();\r\n// create a new instance to start the main activity\r\nIntent restartIntent = new Intent( context, MainActivity.class );\r\nrestartIntent.setFlags(\r\n        Intent.FLAG_ACTIVITY_NEW_TASK |\r\n        Intent.FLAG_ACTIVITY_NO_HISTORY\r\n    );\r\n// a pendingIntent grants another application the privilege to\r\n// start your activity as if it was your app\r\nint pendingIntentID = 123456;\r\nPendingIntent pendingIntent = PendingIntent.getActivity(\r\n        context,\r\n        pendingIntentID,\r\n        restartIntent,\r\n        PendingIntent.FLAG_CANCEL_CURRENT\r\n    );\r\n// get the alarmManager\r\nAlarmManager mgr = ( AlarmManager ) getBaseContext().getSystemService(\r\n        Context.ALARM_SERVICE\r\n    );\r\n// ask the alarmManager to launch your intent after a short delay\r\nmgr.set( AlarmManager.RTC, \r\n         System.currentTimeMillis() + 100, \r\n         pendingIntent \r\n    );\r\n// exit the main activity smoothly\r\n// Note: if you are not in the main activity, you should\r\n// try System.exit(0) instead\r\nfinish();\r\n</pre>','Restart an application','','inherit','closed','open','','366-revision-v1','','','2014-01-20 18:23:58','2014-01-20 18:23:58','',366,'http://error418.no-ip.info/mywiki/?p=369',0,'revision','',0),(370,3,'2014-01-20 18:24:17','2014-01-20 18:24:17','Sometimes, it is easier to start anew than to update the state of your activities. \r\nIn my case, I used that after importing a db file from backup storage. Instead of reinitialising all the db instances, I just restarted the app... This can be considered ugly but at least it works.\r\n\r\nHere is the code I used:\r\n<pre class=\"prettyprint\">\r\n// get a reference to the current activity context or,\r\n// in my case, from the application\r\nContext context = PipiApplication.getContext();\r\n// create a new instance to start the main activity\r\nIntent restartIntent = new Intent( context, MainActivity.class );\r\nrestartIntent.setFlags(\r\n        Intent.FLAG_ACTIVITY_NEW_TASK |\r\n        Intent.FLAG_ACTIVITY_NO_HISTORY\r\n    );\r\n// a pendingIntent grants another application the privilege to\r\n// start your activity as if it was your app\r\nint pendingIntentID = 123456;\r\nPendingIntent pendingIntent = PendingIntent.getActivity(\r\n        context,\r\n        pendingIntentID,\r\n        restartIntent,\r\n        PendingIntent.FLAG_CANCEL_CURRENT\r\n    );\r\n// get the alarmManager\r\nAlarmManager mgr = ( AlarmManager )getBaseContext().getSystemService(\r\n        Context.ALARM_SERVICE\r\n    );\r\n// ask the alarmManager to launch your intent after a short delay\r\nmgr.set( AlarmManager.RTC, \r\n         System.currentTimeMillis() + 100, \r\n         pendingIntent \r\n    );\r\n// exit the main activity smoothly\r\n// Note: if you are not in the main activity, you should\r\n// try System.exit(0) instead\r\nfinish();\r\n</pre>','Restart an application','','inherit','closed','open','','366-revision-v1','','','2014-01-20 18:24:17','2014-01-20 18:24:17','',366,'http://error418.no-ip.info/mywiki/?p=370',0,'revision','',0),(371,3,'2014-01-20 18:25:44','2014-01-20 18:25:44','Sometimes, it is easier to start anew than to update the state of your activities. \r\nIn my case, I used that after importing a db file from backup storage. Instead of reinitialising all the db instances, I just restarted the app... This can be considered ugly but at least it works.\r\n\r\nHere is the code I used:\r\n<pre class=\"prettyprint\">\r\n// get a reference to the current activity context or,\r\n// in my case, from the application\r\nContext context = PipiApplication.getContext();\r\n\r\n// create a new instance to start the main activity\r\nIntent restartIntent = new Intent( context, MainActivity.class );\r\nrestartIntent.setFlags(\r\n        Intent.FLAG_ACTIVITY_NEW_TASK |\r\n        Intent.FLAG_ACTIVITY_NO_HISTORY\r\n    );\r\n\r\n// a pendingIntent grants another application the privilege to\r\n// start your activity as if it was your app\r\nint pendingIntentID = 123456;\r\nPendingIntent pendingIntent = PendingIntent.getActivity(\r\n        context,\r\n        pendingIntentID,\r\n        restartIntent,\r\n        PendingIntent.FLAG_CANCEL_CURRENT\r\n    );\r\n\r\n// ask the alarmManager to launch your intent after a short delay\r\nAlarmManager mgr = ( AlarmManager )getBaseContext().getSystemService(\r\n        Context.ALARM_SERVICE\r\n    );\r\n\r\nmgr.set( AlarmManager.RTC, \r\n         System.currentTimeMillis() + 100, \r\n         pendingIntent \r\n    );\r\n\r\n// exit the main activity smoothly\r\n// Note: if you are not in the main activity, you should\r\n// try System.exit(0) instead\r\nfinish();</pre>','Restart an application','','inherit','closed','open','','366-autosave-v1','','','2014-01-20 18:25:44','2014-01-20 18:25:44','',366,'http://error418.no-ip.info/mywiki/?p=371',0,'revision','',0),(372,3,'2014-01-20 18:25:51','2014-01-20 18:25:51','Sometimes, it is easier to start anew than to update the state of your activities. \r\nIn my case, I used that after importing a db file from backup storage. Instead of reinitialising all the db instances, I just restarted the app... This can be considered ugly but at least it works.\r\n\r\nHere is the code I used:\r\n<pre class=\"prettyprint\">\r\n// get a reference to the current activity context or,\r\n// in my case, from the application\r\nContext context = PipiApplication.getContext();\r\n\r\n// create a new instance to start the main activity\r\nIntent restartIntent = new Intent( context, MainActivity.class );\r\nrestartIntent.setFlags(\r\n        Intent.FLAG_ACTIVITY_NEW_TASK |\r\n        Intent.FLAG_ACTIVITY_NO_HISTORY\r\n    );\r\n\r\n// a pendingIntent grants another application the privilege to\r\n// start your activity as if it was your app\r\nint pendingIntentID = 123456;\r\nPendingIntent pendingIntent = PendingIntent.getActivity(\r\n        context,\r\n        pendingIntentID,\r\n        restartIntent,\r\n        PendingIntent.FLAG_CANCEL_CURRENT\r\n    );\r\n\r\n// ask the alarmManager to launch your intent after a short delay\r\nAlarmManager mgr = ( AlarmManager )getBaseContext().getSystemService(\r\n        Context.ALARM_SERVICE\r\n    );\r\n\r\nmgr.set( AlarmManager.RTC, \r\n         System.currentTimeMillis() + 100, \r\n         pendingIntent \r\n    );\r\n\r\n// exit the main activity smoothly\r\n// Note: if you are not in the main activity, you should\r\n// try System.exit(0) instead\r\nfinish();</pre>','Restart an application','','inherit','closed','open','','366-revision-v1','','','2014-01-20 18:25:51','2014-01-20 18:25:51','',366,'http://error418.no-ip.info/mywiki/?p=372',0,'revision','',0),(374,3,'2014-01-22 11:20:13','0000-00-00 00:00:00','<h2>Bumblebee</h2>\r\nFirst, you need to install the bumblebee daemon. For those who have never heard\r\nof it, the <a\r\nhref=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a>\r\nis a set of tools developed by people aiming to provide Optimus support under\r\nLinux (sic).\r\n\r\nThe installation is quite straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get update\r\nsudo apt-get install bumblebee bumblebee-nvidia\r\n# those packages are needed, if not already installed:\r\nsudo apt-get install virtualgl linux-headers-generic\r\nsudo reboot\r\n</pre>\r\n\r\nWe also need to tweak the config a bit. Open\r\n<code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\r\n\r\n\r\nTest that it runs properly with the command <code>optirun glxgears</code>. A\r\nwindows with psychedelic spheres should appear.\r\n','','','draft','closed','open','','','','','2014-01-22 11:20:13','2014-01-22 11:20:13','',0,'http://error418.no-ip.info/mywiki/?p=374',0,'post','',0),(375,3,'2014-01-22 11:20:13','2014-01-22 11:20:13','<h2>Bumblebee</h2>\r\nFirst, you need to install the bumblebee daemon. For those who have never heard\r\nof it, the <a\r\nhref=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a>\r\nis a set of tools developed by people aiming to provide Optimus support under\r\nLinux (sic).\r\n\r\nThe installation is quite straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get update\r\nsudo apt-get install bumblebee bumblebee-nvidia\r\n# those packages are needed, if not already installed:\r\nsudo apt-get install virtualgl linux-headers-generic\r\nsudo reboot\r\n</pre>\r\n\r\nWe also need to tweak the config a bit. Open\r\n<code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\r\n\r\n\r\nTest that it runs properly with the command <code>optirun glxgears</code>. A\r\nwindows with psychedelic spheres should appear.\r\n','','','inherit','closed','open','','374-revision-v1','','','2014-01-22 11:20:13','2014-01-22 11:20:13','',374,'http://error418.no-ip.info/mywiki/?p=375',0,'revision','',0),(377,3,'2014-01-23 15:09:51','2014-01-23 15:09:51','To configure it, simply add a file in your <strong>xorg.conf.d</strong> directory (in my case, it is <code>/usr/share/X11/xorg.conf.d</code>).\r\n\r\nThis file, named <code>50-marblemouse.conf</code> should look like this:\r\n<pre class=\"prettyprint lang-text with-comments\">[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/50-marblemouse.conf]</pre>\r\nWith this you\'ll have:\r\n<ul>\r\n	<li>normal left and right clicks</li>\r\n	<li>two large buttons pressed together: middle click</li>\r\n	<li>scroll: keep the small left button pressed and move the ball</li>\r\n	<li>small right button click: back</li>\r\n	<li>small left button: forth</li>\r\n	<li>two large button</li>\r\n</ul>\r\n\r\nIf the middle click does not work, ensure that it is supported/enabled by gnome:\r\n<pre class=\"prettyprint lang-text\">\r\ngsettings set org.gnome.settings-daemon.peripherals.mouse middle-button-enabled true\r\n</pre>\r\n\r\nFor other configurations, see <a href=\"https://help.ubuntu.com/community/Logitech_Marblemouse_USB\">this article</a>.\r\n\r\n\r\n','Logitech Marblemouse','','publish','closed','open','','logitech-marblemouse','','','2014-04-09 15:04:30','2014-04-09 15:04:30','',0,'http://error418.no-ip.info/mywiki/?p=377',0,'post','',0),(378,3,'2014-01-23 15:05:39','2014-01-23 15:05:39','To configure it, simply add a file in your <strong>xorg.conf.d</strong> directory (use <code>find -name \'*xorg.conf.d\'</code> if you are not sure. In my case, it is <code>/usr/share/X11/xorg.conf.d</code>).\r\n\r\nThis file should look like this:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/50-marblemouse.conf]</pre>','Logitech Marblemouse','','inherit','closed','open','','377-revision-v1','','','2014-01-23 15:05:39','2014-01-23 15:05:39','',377,'http://error418.no-ip.info/mywiki/?p=378',0,'revision','',0),(379,3,'2014-01-23 15:09:34','2014-01-23 15:09:34','To configure it, simply add a file in your <strong>xorg.conf.d</strong> directory (use <code>find -name \'*xorg.conf.d\'</code> if you are not sure. In my case, it is <code>/usr/share/X11/xorg.conf.d</code>).\r\n\r\nThis file should look like this:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/50-marblemouse.conf]</pre>\r\n\r\nWith this you\'ll have:\r\n<ul>\r\n	<li>normal left and right clicks</li>\r\n	<li>two large buttons pressed together: middle click</li>\r\n	<li>scroll: keep the small left button pressed and move the ball</li>\r\n	<li>small right button click: back</li>\r\n	<li>small left button: forth</li>\r\n	<li>two large button</li>\r\n</ul>','Logitech Marblemouse','','inherit','closed','open','','377-revision-v1','','','2014-01-23 15:09:34','2014-01-23 15:09:34','',377,'http://error418.no-ip.info/mywiki/?p=379',0,'revision','',0),(380,3,'2014-01-23 15:09:51','2014-01-23 15:09:51','To configure it, simply add a file in your <strong>xorg.conf.d</strong> directory (use <code>find -name \'*xorg.conf.d\'</code> if you are not sure. In my case, it is <code>/usr/share/X11/xorg.conf.d</code>).\r\n\r\nThis file should look like this:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/50-marblemouse.conf]</pre>\r\n\r\nWith this you\'ll have:<ul>\r\n	<li>normal left and right clicks</li>\r\n	<li>two large buttons pressed together: middle click</li>\r\n	<li>scroll: keep the small left button pressed and move the ball</li>\r\n	<li>small right button click: back</li>\r\n	<li>small left button: forth</li>\r\n	<li>two large button</li>\r\n</ul>','Logitech Marblemouse','','inherit','closed','open','','377-revision-v1','','','2014-01-23 15:09:51','2014-01-23 15:09:51','',377,'http://error418.no-ip.info/mywiki/?p=380',0,'revision','',0),(382,3,'2014-01-23 15:11:46','2014-01-23 15:11:46','To configure it, simply add a file in your <strong>xorg.conf.d</strong> directory (in my case, it is <code>/usr/share/X11/xorg.conf.d</code>).\r\n\r\nThis file should look like this:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/50-marblemouse.conf]</pre>\r\nWith this you\'ll have:\r\n<ul>\r\n	<li>normal left and right clicks</li>\r\n	<li>two large buttons pressed together: middle click</li>\r\n	<li>scroll: keep the small left button pressed and move the ball</li>\r\n	<li>small right button click: back</li>\r\n	<li>small left button: forth</li>\r\n	<li>two large button</li>\r\n</ul>\r\n\r\nFor other configurations, see <a href=\"https://help.ubuntu.com/community/Logitech_Marblemouse_USB\">this article</a>.','Logitech Marblemouse','','inherit','closed','open','','377-revision-v1','','','2014-01-23 15:11:46','2014-01-23 15:11:46','',377,'http://error418.no-ip.info/mywiki/?p=382',0,'revision','',0),(383,3,'2014-01-23 18:51:34','2014-01-23 18:51:34','<h2>Nvidia drivers</h2>\r\nWhich nvidia driver to use ? Actually, I don\'t really know the answer. I tried like 4 different ones... I think the one that really worked for me was the one from the x-swat repo. Here is how to get it:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:ubuntu-x-swat/x-updates \r\nsudo apt-get update\r\n# if you already have a version of the nvidia-current\r\n# driver installed,  use update instead of install !\r\nsudo apt-get install nvidia-current\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFirst, you need to install the bumblebee daemon. For those who have never heard of it, the <a href=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a> is a set of tools developed by people aiming to provide Optimus support under Linux (sic).\r\n\r\nThe installation is quite straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get update\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n# those packages are needed, if not already installed:\r\nsudo apt-get install virtualgl linux-headers-generic\r\nsudo reboot\r\n</pre>\r\n\r\nWe also need to tweak the config a bit. Open <code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nDriver=nvidia          # instead of Driver=\r\nKeepUnusedXServer=true # instead of false\r\n...\r\n[driver-nvidia]\r\nPMMethod=none          # instead of auto\r\nKernelDriver=nvidia    # see notes below\r\n</pre>\r\n\r\nReboot and try to run <code>optirun true</code> and/or <code>sudo bumblebeed restart</code>. Ensure that there is not output in stderr.\r\n\r\nTest that it runs properly with the command <code>optirun glxgears</code>. A windows with psychedelic spheres should appear.\r\n\r\n<h3>Error: module \'nvidia\' not found</h3>\r\nThe problem is that the <code>KernelDriver</code> option in bumblebee.conf does not match the actual module loaded into the kernel. To avoid this, replace nvidia by the output of the following command:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# note: ignore nvidiafb.ko\r\nfind /lib/modules/$(uname -r) -name \'nvidia*.ko*\'\r\n</pre>\r\n\r\nIn my case, the correct option was nvidia_304.\r\n\r\nIf the error persists, add an entry in the LibraryPath list under [driver-nvidia] with the path to the file nvidia_drv.so (<code>find / -name \"nvidia_drv.so\"</code>). In my case:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n</pre>\r\n\r\n<h3>Error: secondary GPU not found</h3>\r\nFirst and foremost, ensure that you have an external monitor connected to your computer.\r\n\r\nIf this is the case, open <code>/etc/bumblebee/xorg.conf.nvidia</code> and ensure that the <code>BusID</code> under the Device section is correct. To do that, use the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# the bus id is the first field of the second line, i.e. the NVIDIA VGA controller\r\n> lspci | grep -i vga\r\n00:02.0 VGA compatible controller: Intel Corporation 3rd Gen Core processor Graphics Controller (rev 09)\r\n01:00.0 VGA compatible controller: NVIDIA Corporation GK107GLM [Quadro K2000M] (rev a1)\r\n</pre>\r\nIn my case, I had to set <code>BusID \"PCI:01:00:0\"</code>. Note that the final dot is replaced by a <strong>colon</strong>.\r\n\r\nThird, ... TODO\r\n\r\n<h2>Patch the intel-video driver</h2>\r\nUnder ubuntu 12.04, you needed to recompile the patched package by hand (and in my case, no patch worked, even if I tried more than three different ones).\r\n\r\nWith ubuntu 13.04, a fully functional package is already available. To install it, add the following ppa and use apt-get:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:krlmlr/ppa\r\nsudo apt-get update\r\nsudo apt-get install xserver-xorg-video-intel\r\n</pre>\r\n\r\n<h2>Screenclone</h2>\r\n\r\nThis will be the main program used for rendering using the integrated intel card. See <a href=\"https://github.com/liskin/hybrid-screenclone\">hybrid-screenclone on git</a> for more infos.\r\n\r\nNote: if you don\'t have git installed, now its the time to get it using <code>sudo apt-get install git</code>.\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\ngit clone git://github.com/liskin/hybrid-screenclone.git\r\ncd hybrid-screenclone\r\nsudo make\r\nsudo cp screenclone /usr/bin/\r\nsudo chmod +x /usr/bin/screenclone\r\nsudo cp xorg.conf.nvidia /etc/bumblebee/xorg.conf.nvidia\r\nsudo rm /etc/X11/xorg.conf\r\n</pre>\r\n\r\n<h2>Configuring xorg</h2>\r\nThis is <strong>required for ubuntu 13.04</strong>. Open <code>/etc/X11/xorg.conf</code> (create it if necessary), and copy-paste the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nSection \"Device\"\r\n    Identifier \"intel\"\r\n    Driver \"intel\"\r\n    Option \"AccelMethod\" \"uxa\"\r\n    Option \"Virtuals\" \"2\"      # create two virtual displays\r\nEndSection\r\n</pre>\r\n\r\nReboot for the changes to take effect.\r\n\r\n\r\n<h2>Did you do it right ?</h2>\r\n\r\nHere are the outputs of some commands on my machine.\r\n\r\nThe following packages should be present:\r\n<pre class=\"prettyprint lang-text\">\r\n> dpkg -l | grep nvidia                                        \r\nii  bbswitch-dkms                             0.8-1~raringppa1                           all          Interface for toggling the power on NVIDIA Optimus video cards\r\nii  bumblebee                                 3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support\r\nii  bumblebee-nvidia                          3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support using the proprietary NVIDIA driver\r\nii  libkwinnvidiahack4                        4:4.10.5-0ubuntu0.2                        amd64        library used by nvidia cards for the KDE window manager\r\nii  nvidia-304                                304.116-0ubuntu1~xedgers~raring1           amd64        NVIDIA binary Xorg driver, kernel module and VDPAU library\r\nii  nvidia-current                            304.116-0ubuntu1~xedgers~raring1           amd64        Transitional package for nvidia-current\r\nii  nvidia-settings-304                       304.116-0ubuntu1~xedgers~raring1           amd64        Tool for configuring the NVIDIA graphics driver\r\n</pre>\r\n\r\nYou should see at least one Virtual entry running <code>xrandr</code>:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> xrandr\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192\r\nLVDS1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9  \r\nVIRTUAL2 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9 \r\n</pre>\r\n\r\nThe command <code>optirun true</code> should be totally silent.\r\n\r\nWhen starting the bumblebeed client, nothing suspicious should be outputed:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> sudo stop bumblebeed # if already running, stop it\r\n> sudo bumblebeed -vv       \r\n[ 5263.200085] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 5263.200137] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 5263.200161] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.200622] [INFO]Configured driver: nvidia\r\n[ 5263.200661] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 5263.200839] [DEBUG]Process /sbin/modprobe started, PID 6347.\r\n[ 5263.200885] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.203065] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.203165] [INFO]PM is disabled, not performing detection.\r\n[ 5263.203207] [DEBUG]Active configuration:\r\n[ 5263.203236] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.203266] [DEBUG] X display: :8\r\n[ 5263.203285] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 5263.203310] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 5263.203336] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 5263.203366] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 5263.203394] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 5263.203422] [DEBUG] ModulePath: /usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 5263.203444] [DEBUG] GID name: bumblebee\r\n[ 5263.203466] [DEBUG] Power method: none\r\n[ 5263.203490] [DEBUG] Stop X on exit: 0\r\n[ 5263.203519] [DEBUG] Driver: nvidia\r\n[ 5263.203540] [DEBUG] Driver module: nvidia_304\r\n[ 5263.203567] [DEBUG] Card shutdown state: 1\r\n[ 5263.203717] [DEBUG]Process /sbin/modprobe started, PID 6348.\r\n[ 5263.203790] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.205938] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.206015] [DEBUG]Configuration test passed.\r\n[ 5263.206710] [INFO]bumblebeed 3.2.1 started\r\n[ 5263.206826] [INFO]Initialization completed - now handling client requests\r\n^C[ 5385.447337] [WARN]Received Interrupt signal.\r\n[ 5385.447388] [DEBUG]Socket closed.\r\n[ 5385.447497] [DEBUG]Killing all remaining processes.\r\n</pre>\r\n\r\n\r\n<h2>Finally, use your second monitor</h2>\r\nNote that it works the same for both VGA and DisplayPort!\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# be sure to turn on optirun only when an external\r\n# device is wired to you laptop\r\n> optirun true\r\n\r\n# == now, some possibilities of screenclone\r\n\r\n# just to use a mirror screen, nothing fancy\r\n> screenclone -d :8\r\n\r\n# dual monitors, the external one on the right\r\n> randr --output LVDS1 --output VIRTUAL1 --mode 1920x1200 \\\r\n--right-of LVDS1\r\n\r\n# the option -d :8 is required only if you use bumblebee\r\n# -x 1 is VIRTUAL 1, -x 2 is VIRTUAL 2\r\n> screenclone -d :8 -x 1 &\r\n\r\n# == when you are finished\r\n# get screenclone from background\r\n# and turn it off using CTRL+C\r\n> fg\r\n^C\r\n# turn off the virtual screen\r\n> xrandr --output VIRTUAL1 --off\r\n</pre>\r\n\r\n<h2>External links and resources</h2>\r\n<ul>\r\n    <li><a href=\"http://sagark.org/optimal-ubuntu-graphics-setup-for-thinkpads/\">Optimal Ubuntu Graphics Setup for Thinkpads</a></li>\r\n    <li><a href=\"http://zachstechnotes.blogspot.ch/2012/04/post-title.html\">A Solution for External Monitors on a Thinkpad W520 running Linux</a></li>\r\n<li><a href=\"http://cfusting.wordpress.com/2013/09/01/the-lenovo-w530-with-optimus-technology-and-linux/\">The Lenovo W530 with Optimus Technology and Linux</a></li>\r\n<li><a href=\"http://blog.linuxacademy.com/linux/ubuntu-bumblebee-optimus-and-multi-monitor-support/\">Ubuntu: Bumblebee, Optimus and Multi-Monitor Support</a></li>\r\n</ul>\r\n','Thinkpad w530, linux 13.04 and optimus','','publish','closed','open','','thinkpad-w530-linux-13-04-and-optimus','','','2014-04-09 15:04:30','2014-04-09 15:04:30','',0,'http://error418.no-ip.info/mywiki/?p=383',0,'post','',0),(384,3,'2014-01-23 18:40:04','2014-01-23 18:40:04','<h2>Nvidia drivers</h2>\r\nWhich nvidia driver to use ? Actually, I don\'t really know the answer. I tried\r\nlike 4 different ones... I think the one that really worked for me was the one\r\nfrom the x-swat repo. Here is how to get it:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:ubuntu-x-swat/x-updates \r\nsudo apt-get update\r\n# if you already have a version of the nvidia-current\r\n# driver installed,  use update instead of install !\r\nsudo apt-get install nvidia-current\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFirst, you need to install the bumblebee daemon. For those who have never heard\r\nof it, the <a\r\nhref=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a>\r\nis a set of tools developed by people aiming to provide Optimus support under\r\nLinux (sic).\r\n\r\nThe installation is quite straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get update\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n# those packages are needed, if not already installed:\r\nsudo apt-get install virtualgl linux-headers-generic\r\nsudo reboot\r\n</pre>\r\n\r\nWe also need to tweak the config a bit. Open\r\n<code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nDriver=nvidia          # instead of Driver=\r\nKeepUnusedXServer=true # instead of false\r\n...\r\n[driver-nvidia]\r\nPMMethod=none          # instead of auto\r\nKernelDriver=nvidia    # see notes below\r\n</pre>\r\n\r\nReboot and try to run <code>optirun true</code> and/or <code>sudo bumblebeed\r\nrestart</code>. Ensure that there is not output in stderr.\r\n\r\nTest that it runs properly with the command <code>optirun glxgears</code>. A\r\nwindows with psychedelic spheres should appear.\r\n\r\n<h3>Error: module \'nvidia\' not found</h3>\r\nThe problem is that the <code>KernelDriver</code> option in bumblebee.conf does\r\nnot match the actual module loaded into the kernel. To avoid this, replace\r\nnvidia by the output of the following command:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# note: ignore nvidiafb.ko\r\nfind /lib/modules/$(uname -r) -name \'nvidia*.ko*\'\r\n</pre>\r\n\r\nIn my case, the correct option was nvidia_304.\r\n\r\nIf the error persists, add an entry in the LibraryPath list under\r\n[driver-nvidia] with the path to the file nvidia_drv.so (<code>find / -name\r\n\"nvidia_drv.so\"</code>. In my case:\r\n<pre class=\"pretyprint lang-text with-comments\">\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n</pre>\r\n\r\n<h3>Error: secondary GPU not found</h3>\r\n// TODO\r\n\r\n\r\n<h2>Patch the intel-video driver</h2>\r\nUnder ubuntu 12.04, you needed to recompile the patched package by hand (and in\r\nmy case, no patch worked, even if I tried more than three different ones).\r\n\r\nWith ubuntu 13.04, a fully functional package is already available. To install\r\nit, add the following ppa and use apt-get:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:krlmlr/ppa\r\nsudo apt-get update\r\nsudo apt-get install xserver-xorg-video-intel\r\n</pre>\r\n\r\n<h2>Screenclone</h2>\r\n\r\nThis will be the main program used for rendering using the integrated intel\r\ncard. See <a\r\nhref=\"https://github.com/liskin/hybrid-screenclone\">hybrid-scrennclone on\r\ngit</a> for more infos.\r\n\r\nNote: if you don\'t have git installed, now its the time to get it using <code>sudo\r\napt-get install git</code>.\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\ngit clone git://github.com/liskin/hybrid-screenclone.git\r\ncd hybrid-screenclone\r\nsudo make\r\nsudo cp screenclone /usr/bin/\r\nsudo chmod +x /usr/bin/screenclone\r\nsudo cp xorg.conf.nvidia /etc/bumblebee/xorg.conf.nvidia\r\nsudo rm /etc/X11/xorg.conf\r\n</pre>\r\n\r\n<h2>Configuring xorg (required for ubuntu 13.04)</h2>\r\nOpen <code>/etc/X11/xorg.conf</code> (create it if necessary), and copy-paste\r\nthe following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nSection \"Device\"\r\n    Identifier \"intel\"\r\n    Driver \"intel\"\r\n    Option \"AccelMethod\" \"uxa\"\r\n    Option \"Virtuals\" \"2\"      # create two virtual displays\r\nEndSection\r\n</pre>\r\n\r\nReboot for the changes to take effect.\r\n\r\n\r\n<h2>Did you do it right ?</h2>\r\n\r\nHere are the outputs of some commands on my machine.\r\n\r\nThe following packages should be present:\r\n<pre class=\"prettyprint lang-text\">\r\n> dpkg -l | grep nvidia                                        \r\nii  bbswitch-dkms                             0.8-1~raringppa1                           all          Interface for toggling the power on NVIDIA Optimus video cards\r\nii  bumblebee                                 3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support\r\nii  bumblebee-nvidia                          3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support using the proprietary NVIDIA driver\r\nii  libkwinnvidiahack4                        4:4.10.5-0ubuntu0.2                        amd64        library used by nvidia cards for the KDE window manager\r\nii  nvidia-304                                304.116-0ubuntu1~xedgers~raring1           amd64        NVIDIA binary Xorg driver, kernel module and VDPAU library\r\nii  nvidia-current                            304.116-0ubuntu1~xedgers~raring1           amd64        Transitional package for nvidia-current\r\nii  nvidia-settings-304                       304.116-0ubuntu1~xedgers~raring1           amd64        Tool for configuring the NVIDIA graphics driver\r\n</pre>\r\n\r\nYou should see at least on Virtual entry running <code>xrandr</code>:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> xrandr\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192\r\nLVDS1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9  \r\nVIRTUAL2 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9 \r\n</pre>\r\n\r\nThe command <code>optirun true</code> should be totally silent.\r\n\r\nWhen starting the bumblebeed client, nothing suspicious should be outputed:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> sudo stop bumblebeed # if already running, stop it\r\n> sudo bumblebeed -vv       \r\n[ 5263.200085] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 5263.200137] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 5263.200161] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.200622] [INFO]Configured driver: nvidia\r\n[ 5263.200661] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 5263.200839] [DEBUG]Process /sbin/modprobe started, PID 6347.\r\n[ 5263.200885] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.203065] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.203165] [INFO]PM is disabled, not performing detection.\r\n[ 5263.203207] [DEBUG]Active configuration:\r\n[ 5263.203236] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.203266] [DEBUG] X display: :8\r\n[ 5263.203285] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 5263.203310] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 5263.203336] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 5263.203366] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 5263.203394] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 5263.203422] [DEBUG] ModulePath: /usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 5263.203444] [DEBUG] GID name: bumblebee\r\n[ 5263.203466] [DEBUG] Power method: none\r\n[ 5263.203490] [DEBUG] Stop X on exit: 0\r\n[ 5263.203519] [DEBUG] Driver: nvidia\r\n[ 5263.203540] [DEBUG] Driver module: nvidia_304\r\n[ 5263.203567] [DEBUG] Card shutdown state: 1\r\n[ 5263.203717] [DEBUG]Process /sbin/modprobe started, PID 6348.\r\n[ 5263.203790] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.205938] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.206015] [DEBUG]Configuration test passed.\r\n[ 5263.206710] [INFO]bumblebeed 3.2.1 started\r\n[ 5263.206826] [INFO]Initialization completed - now handling client requests\r\n^C[ 5385.447337] [WARN]Received Interrupt signal.\r\n[ 5385.447388] [DEBUG]Socket closed.\r\n[ 5385.447497] [DEBUG]Killing all remaining processes.\r\n</pre>\r\n\r\n\r\n<h2>Finally, use your second monitor</h2>\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> optirun true\r\n# == now, some possibilities of screenclone\r\n\r\n# just to use a mirror screen, nothing fancy\r\n> screenclone -d :8\r\n\r\n# dual monitors, the external one on the right\r\n> randr --output LVDS1 --output VIRTUAL1 --mode 1920x1200 --right-of LVDS1 \\\r\n--output VIRTUAL2\r\n> screenclone -d :8 -x 1 &\r\n</pre>\r\n','Thinkpad w530, linux 13.04 and optimus','','inherit','closed','open','','383-revision-v1','','','2014-01-23 18:40:04','2014-01-23 18:40:04','',383,'http://error418.no-ip.info/mywiki/?p=384',0,'revision','',0),(385,3,'2014-01-23 18:45:17','2014-01-23 18:45:17','<h2>Nvidia drivers</h2>\r\nWhich nvidia driver to use ? Actually, I don\'t really know the answer. I tried like 4 different ones... I think the one that really worked for me was the one from the x-swat repo. Here is how to get it:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:ubuntu-x-swat/x-updates \r\nsudo apt-get update\r\n# if you already have a version of the nvidia-current\r\n# driver installed,  use update instead of install !\r\nsudo apt-get install nvidia-current\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFirst, you need to install the bumblebee daemon. For those who have never heard of it, the <a href=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a>\r\nis a set of tools developed by people aiming to provide Optimus support under Linux (sic).\r\n\r\nThe installation is quite straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get update\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n# those packages are needed, if not already installed:\r\nsudo apt-get install virtualgl linux-headers-generic\r\nsudo reboot\r\n</pre>\r\n\r\nWe also need to tweak the config a bit. Open <code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nDriver=nvidia          # instead of Driver=\r\nKeepUnusedXServer=true # instead of false\r\n...\r\n[driver-nvidia]\r\nPMMethod=none          # instead of auto\r\nKernelDriver=nvidia    # see notes below\r\n</pre>\r\n\r\nReboot and try to run <code>optirun true</code> and/or <code>sudo bumblebeed restart</code>. Ensure that there is not output in stderr.\r\n\r\nTest that it runs properly with the command <code>optirun glxgears</code>. A windows with psychedelic spheres should appear.\r\n\r\n<h3>Error: module \'nvidia\' not found</h3>\r\nThe problem is that the <code>KernelDriver</code> option in bumblebee.conf does not match the actual module loaded into the kernel. To avoid this, replace nvidia by the output of the following command:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# note: ignore nvidiafb.ko\r\nfind /lib/modules/$(uname -r) -name \'nvidia*.ko*\'\r\n</pre>\r\n\r\nIn my case, the correct option was nvidia_304.\r\n\r\nIf the error persists, add an entry in the LibraryPath list under [driver-nvidia] with the path to the file nvidia_drv.so (<code>find / -name \"nvidia_drv.so\"</code>. In my case:\r\n<pre class=\"pretyprint lang-text with-comments\">\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n</pre>\r\n\r\n<h3>Error: secondary GPU not found</h3>\r\n// TODO\r\n\r\n\r\n<h2>Patch the intel-video driver</h2>\r\nUnder ubuntu 12.04, you needed to recompile the patched package by hand (and in my case, no patch worked, even if I tried more than three different ones).\r\n\r\nWith ubuntu 13.04, a fully functional package is already available. To install\r\nit, add the following ppa and use apt-get:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:krlmlr/ppa\r\nsudo apt-get update\r\nsudo apt-get install xserver-xorg-video-intel\r\n</pre>\r\n\r\n<h2>Screenclone</h2>\r\n\r\nThis will be the main program used for rendering using the integrated intel card. See <a\r\nhref=\"https://github.com/liskin/hybrid-screenclone\">hybrid-scrennclone on git</a> for more infos.\r\n\r\nNote: if you don\'t have git installed, now its the time to get it using <code>sudo apt-get install git</code>.\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\ngit clone git://github.com/liskin/hybrid-screenclone.git\r\ncd hybrid-screenclone\r\nsudo make\r\nsudo cp screenclone /usr/bin/\r\nsudo chmod +x /usr/bin/screenclone\r\nsudo cp xorg.conf.nvidia /etc/bumblebee/xorg.conf.nvidia\r\nsudo rm /etc/X11/xorg.conf\r\n</pre>\r\n\r\n<h2>Configuring xorg (required for ubuntu 13.04)</h2>\r\nOpen <code>/etc/X11/xorg.conf</code> (create it if necessary), and copy-paste the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nSection \"Device\"\r\n    Identifier \"intel\"\r\n    Driver \"intel\"\r\n    Option \"AccelMethod\" \"uxa\"\r\n    Option \"Virtuals\" \"2\"      # create two virtual displays\r\nEndSection\r\n</pre>\r\n\r\nReboot for the changes to take effect.\r\n\r\n\r\n<h2>Did you do it right ?</h2>\r\n\r\nHere are the outputs of some commands on my machine.\r\n\r\nThe following packages should be present:\r\n<pre class=\"prettyprint lang-text\">\r\n> dpkg -l | grep nvidia                                        \r\nii  bbswitch-dkms                             0.8-1~raringppa1                           all          Interface for toggling the power on NVIDIA Optimus video cards\r\nii  bumblebee                                 3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support\r\nii  bumblebee-nvidia                          3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support using the proprietary NVIDIA driver\r\nii  libkwinnvidiahack4                        4:4.10.5-0ubuntu0.2                        amd64        library used by nvidia cards for the KDE window manager\r\nii  nvidia-304                                304.116-0ubuntu1~xedgers~raring1           amd64        NVIDIA binary Xorg driver, kernel module and VDPAU library\r\nii  nvidia-current                            304.116-0ubuntu1~xedgers~raring1           amd64        Transitional package for nvidia-current\r\nii  nvidia-settings-304                       304.116-0ubuntu1~xedgers~raring1           amd64        Tool for configuring the NVIDIA graphics driver\r\n</pre>\r\n\r\nYou should see at least on Virtual entry running <code>xrandr</code>:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> xrandr\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192\r\nLVDS1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9  \r\nVIRTUAL2 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9 \r\n</pre>\r\n\r\nThe command <code>optirun true</code> should be totally silent.\r\n\r\nWhen starting the bumblebeed client, nothing suspicious should be outputed:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> sudo stop bumblebeed # if already running, stop it\r\n> sudo bumblebeed -vv       \r\n[ 5263.200085] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 5263.200137] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 5263.200161] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.200622] [INFO]Configured driver: nvidia\r\n[ 5263.200661] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 5263.200839] [DEBUG]Process /sbin/modprobe started, PID 6347.\r\n[ 5263.200885] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.203065] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.203165] [INFO]PM is disabled, not performing detection.\r\n[ 5263.203207] [DEBUG]Active configuration:\r\n[ 5263.203236] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.203266] [DEBUG] X display: :8\r\n[ 5263.203285] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 5263.203310] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 5263.203336] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 5263.203366] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 5263.203394] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 5263.203422] [DEBUG] ModulePath: /usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 5263.203444] [DEBUG] GID name: bumblebee\r\n[ 5263.203466] [DEBUG] Power method: none\r\n[ 5263.203490] [DEBUG] Stop X on exit: 0\r\n[ 5263.203519] [DEBUG] Driver: nvidia\r\n[ 5263.203540] [DEBUG] Driver module: nvidia_304\r\n[ 5263.203567] [DEBUG] Card shutdown state: 1\r\n[ 5263.203717] [DEBUG]Process /sbin/modprobe started, PID 6348.\r\n[ 5263.203790] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.205938] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.206015] [DEBUG]Configuration test passed.\r\n[ 5263.206710] [INFO]bumblebeed 3.2.1 started\r\n[ 5263.206826] [INFO]Initialization completed - now handling client requests\r\n^C[ 5385.447337] [WARN]Received Interrupt signal.\r\n[ 5385.447388] [DEBUG]Socket closed.\r\n[ 5385.447497] [DEBUG]Killing all remaining processes.\r\n</pre>\r\n\r\n\r\n<h2>Finally, use your second monitor</h2>\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> optirun true\r\n# == now, some possibilities of screenclone\r\n\r\n# just to use a mirror screen, nothing fancy\r\n> screenclone -d :8\r\n\r\n# dual monitors, the external one on the right\r\n> randr --output LVDS1 --output VIRTUAL1 --mode 1920x1200 --right-of LVDS1 \\\r\n--output VIRTUAL2\r\n> screenclone -d :8 -x 1 &\r\n</pre>\r\n','Thinkpad w530, linux 13.04 and optimus','','inherit','closed','open','','383-revision-v1','','','2014-01-23 18:45:17','2014-01-23 18:45:17','',383,'http://error418.no-ip.info/mywiki/?p=385',0,'revision','',0),(386,3,'2014-01-23 18:46:05','2014-01-23 18:46:05','<h2>Nvidia drivers</h2>\r\nWhich nvidia driver to use ? Actually, I don\'t really know the answer. I tried like 4 different ones... I think the one that really worked for me was the one from the x-swat repo. Here is how to get it:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:ubuntu-x-swat/x-updates \r\nsudo apt-get update\r\n# if you already have a version of the nvidia-current\r\n# driver installed,  use update instead of install !\r\nsudo apt-get install nvidia-current\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFirst, you need to install the bumblebee daemon. For those who have never heard of it, the <a href=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a>\r\nis a set of tools developed by people aiming to provide Optimus support under Linux (sic).\r\n\r\nThe installation is quite straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get update\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n# those packages are needed, if not already installed:\r\nsudo apt-get install virtualgl linux-headers-generic\r\nsudo reboot\r\n</pre>\r\n\r\nWe also need to tweak the config a bit. Open <code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nDriver=nvidia          # instead of Driver=\r\nKeepUnusedXServer=true # instead of false\r\n...\r\n[driver-nvidia]\r\nPMMethod=none          # instead of auto\r\nKernelDriver=nvidia    # see notes below\r\n</pre>\r\n\r\nReboot and try to run <code>optirun true</code> and/or <code>sudo bumblebeed restart</code>. Ensure that there is not output in stderr.\r\n\r\nTest that it runs properly with the command <code>optirun glxgears</code>. A windows with psychedelic spheres should appear.\r\n\r\n<h3>Error: module \'nvidia\' not found</h3>\r\nThe problem is that the <code>KernelDriver</code> option in bumblebee.conf does not match the actual module loaded into the kernel. To avoid this, replace nvidia by the output of the following command:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# note: ignore nvidiafb.ko\r\nfind /lib/modules/$(uname -r) -name \'nvidia*.ko*\'\r\n</pre>\r\n\r\nIn my case, the correct option was nvidia_304.\r\n\r\nIf the error persists, add an entry in the LibraryPath list under [driver-nvidia] with the path to the file nvidia_drv.so (<code>find / -name \"nvidia_drv.so\"</code>. In my case:\r\n<pre class=\"pretyprint lang-text with-comments\">\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n</pre>\r\n\r\n<h3>Error: secondary GPU not found</h3>\r\n// TODO\r\n\r\n\r\n<h2>Patch the intel-video driver</h2>\r\nUnder ubuntu 12.04, you needed to recompile the patched package by hand (and in my case, no patch worked, even if I tried more than three different ones).\r\n\r\nWith ubuntu 13.04, a fully functional package is already available. To install\r\nit, add the following ppa and use apt-get:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:krlmlr/ppa\r\nsudo apt-get update\r\nsudo apt-get install xserver-xorg-video-intel\r\n</pre>\r\n\r\n<h2>Screenclone</h2>\r\n\r\nThis will be the main program used for rendering using the integrated intel card. See <a\r\nhref=\"https://github.com/liskin/hybrid-screenclone\">hybrid-scrennclone on git</a> for more infos.\r\n\r\nNote: if you don\'t have git installed, now its the time to get it using <code>sudo apt-get install git</code>.\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\ngit clone git://github.com/liskin/hybrid-screenclone.git\r\ncd hybrid-screenclone\r\nsudo make\r\nsudo cp screenclone /usr/bin/\r\nsudo chmod +x /usr/bin/screenclone\r\nsudo cp xorg.conf.nvidia /etc/bumblebee/xorg.conf.nvidia\r\nsudo rm /etc/X11/xorg.conf\r\n</pre>\r\n\r\n<h2>Configuring xorg</h2>\r\nThis is <strong>required for ubuntu 13.04</strong>\r\nOpen <code>/etc/X11/xorg.conf</code> (create it if necessary), and copy-paste the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nSection \"Device\"\r\n    Identifier \"intel\"\r\n    Driver \"intel\"\r\n    Option \"AccelMethod\" \"uxa\"\r\n    Option \"Virtuals\" \"2\"      # create two virtual displays\r\nEndSection\r\n</pre>\r\n\r\nReboot for the changes to take effect.\r\n\r\n\r\n<h2>Did you do it right ?</h2>\r\n\r\nHere are the outputs of some commands on my machine.\r\n\r\nThe following packages should be present:\r\n<pre class=\"prettyprint lang-text\">\r\n> dpkg -l | grep nvidia                                        \r\nii  bbswitch-dkms                             0.8-1~raringppa1                           all          Interface for toggling the power on NVIDIA Optimus video cards\r\nii  bumblebee                                 3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support\r\nii  bumblebee-nvidia                          3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support using the proprietary NVIDIA driver\r\nii  libkwinnvidiahack4                        4:4.10.5-0ubuntu0.2                        amd64        library used by nvidia cards for the KDE window manager\r\nii  nvidia-304                                304.116-0ubuntu1~xedgers~raring1           amd64        NVIDIA binary Xorg driver, kernel module and VDPAU library\r\nii  nvidia-current                            304.116-0ubuntu1~xedgers~raring1           amd64        Transitional package for nvidia-current\r\nii  nvidia-settings-304                       304.116-0ubuntu1~xedgers~raring1           amd64        Tool for configuring the NVIDIA graphics driver\r\n</pre>\r\n\r\nYou should see at least on Virtual entry running <code>xrandr</code>:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> xrandr\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192\r\nLVDS1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9  \r\nVIRTUAL2 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9 \r\n</pre>\r\n\r\nThe command <code>optirun true</code> should be totally silent.\r\n\r\nWhen starting the bumblebeed client, nothing suspicious should be outputed:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> sudo stop bumblebeed # if already running, stop it\r\n> sudo bumblebeed -vv       \r\n[ 5263.200085] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 5263.200137] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 5263.200161] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.200622] [INFO]Configured driver: nvidia\r\n[ 5263.200661] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 5263.200839] [DEBUG]Process /sbin/modprobe started, PID 6347.\r\n[ 5263.200885] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.203065] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.203165] [INFO]PM is disabled, not performing detection.\r\n[ 5263.203207] [DEBUG]Active configuration:\r\n[ 5263.203236] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.203266] [DEBUG] X display: :8\r\n[ 5263.203285] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 5263.203310] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 5263.203336] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 5263.203366] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 5263.203394] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 5263.203422] [DEBUG] ModulePath: /usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 5263.203444] [DEBUG] GID name: bumblebee\r\n[ 5263.203466] [DEBUG] Power method: none\r\n[ 5263.203490] [DEBUG] Stop X on exit: 0\r\n[ 5263.203519] [DEBUG] Driver: nvidia\r\n[ 5263.203540] [DEBUG] Driver module: nvidia_304\r\n[ 5263.203567] [DEBUG] Card shutdown state: 1\r\n[ 5263.203717] [DEBUG]Process /sbin/modprobe started, PID 6348.\r\n[ 5263.203790] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.205938] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.206015] [DEBUG]Configuration test passed.\r\n[ 5263.206710] [INFO]bumblebeed 3.2.1 started\r\n[ 5263.206826] [INFO]Initialization completed - now handling client requests\r\n^C[ 5385.447337] [WARN]Received Interrupt signal.\r\n[ 5385.447388] [DEBUG]Socket closed.\r\n[ 5385.447497] [DEBUG]Killing all remaining processes.\r\n</pre>\r\n\r\n\r\n<h2>Finally, use your second monitor</h2>\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> optirun true\r\n# == now, some possibilities of screenclone\r\n\r\n# just to use a mirror screen, nothing fancy\r\n> screenclone -d :8\r\n\r\n# dual monitors, the external one on the right\r\n> randr --output LVDS1 --output VIRTUAL1 --mode 1920x1200 --right-of LVDS1 \\\r\n--output VIRTUAL2\r\n> screenclone -d :8 -x 1 &\r\n</pre>\r\n\r\n','Thinkpad w530, linux 13.04 and optimus','','inherit','closed','open','','383-revision-v1','','','2014-01-23 18:46:05','2014-01-23 18:46:05','',383,'http://error418.no-ip.info/mywiki/?p=386',0,'revision','',0),(387,3,'2014-01-23 18:51:34','2014-01-23 18:51:34','<h2>Nvidia drivers</h2>\r\nWhich nvidia driver to use ? Actually, I don\'t really know the answer. I tried like 4 different ones... I think the one that really worked for me was the one from the x-swat repo. Here is how to get it:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:ubuntu-x-swat/x-updates \r\nsudo apt-get update\r\n# if you already have a version of the nvidia-current\r\n# driver installed,  use update instead of install !\r\nsudo apt-get install nvidia-current\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFirst, you need to install the bumblebee daemon. For those who have never heard of it, the <a href=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a>\r\nis a set of tools developed by people aiming to provide Optimus support under Linux (sic).\r\n\r\nThe installation is quite straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get update\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n# those packages are needed, if not already installed:\r\nsudo apt-get install virtualgl linux-headers-generic\r\nsudo reboot\r\n</pre>\r\n\r\nWe also need to tweak the config a bit. Open <code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nDriver=nvidia          # instead of Driver=\r\nKeepUnusedXServer=true # instead of false\r\n...\r\n[driver-nvidia]\r\nPMMethod=none          # instead of auto\r\nKernelDriver=nvidia    # see notes below\r\n</pre>\r\n\r\nReboot and try to run <code>optirun true</code> and/or <code>sudo bumblebeed restart</code>. Ensure that there is not output in stderr.\r\n\r\nTest that it runs properly with the command <code>optirun glxgears</code>. A windows with psychedelic spheres should appear.\r\n\r\n<h3>Error: module \'nvidia\' not found</h3>\r\nThe problem is that the <code>KernelDriver</code> option in bumblebee.conf does not match the actual module loaded into the kernel. To avoid this, replace nvidia by the output of the following command:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# note: ignore nvidiafb.ko\r\nfind /lib/modules/$(uname -r) -name \'nvidia*.ko*\'\r\n</pre>\r\n\r\nIn my case, the correct option was nvidia_304.\r\n\r\nIf the error persists, add an entry in the LibraryPath list under [driver-nvidia] with the path to the file nvidia_drv.so (<code>find / -name \"nvidia_drv.so\"</code>. In my case:\r\n<pre class=\"pretyprint lang-text with-comments\">\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n</pre>\r\n\r\n<h3>Error: secondary GPU not found</h3>\r\n// TODO\r\n\r\n\r\n<h2>Patch the intel-video driver</h2>\r\nUnder ubuntu 12.04, you needed to recompile the patched package by hand (and in my case, no patch worked, even if I tried more than three different ones).\r\n\r\nWith ubuntu 13.04, a fully functional package is already available. To install\r\nit, add the following ppa and use apt-get:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:krlmlr/ppa\r\nsudo apt-get update\r\nsudo apt-get install xserver-xorg-video-intel\r\n</pre>\r\n\r\n<h2>Screenclone</h2>\r\n\r\nThis will be the main program used for rendering using the integrated intel card. See <a\r\nhref=\"https://github.com/liskin/hybrid-screenclone\">hybrid-scrennclone on git</a> for more infos.\r\n\r\nNote: if you don\'t have git installed, now its the time to get it using <code>sudo apt-get install git</code>.\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\ngit clone git://github.com/liskin/hybrid-screenclone.git\r\ncd hybrid-screenclone\r\nsudo make\r\nsudo cp screenclone /usr/bin/\r\nsudo chmod +x /usr/bin/screenclone\r\nsudo cp xorg.conf.nvidia /etc/bumblebee/xorg.conf.nvidia\r\nsudo rm /etc/X11/xorg.conf\r\n</pre>\r\n\r\n<h2>Configuring xorg</h2>\r\nThis is <strong>required for ubuntu 13.04</strong>\r\nOpen <code>/etc/X11/xorg.conf</code> (create it if necessary), and copy-paste the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nSection \"Device\"\r\n    Identifier \"intel\"\r\n    Driver \"intel\"\r\n    Option \"AccelMethod\" \"uxa\"\r\n    Option \"Virtuals\" \"2\"      # create two virtual displays\r\nEndSection\r\n</pre>\r\n\r\nReboot for the changes to take effect.\r\n\r\n\r\n<h2>Did you do it right ?</h2>\r\n\r\nHere are the outputs of some commands on my machine.\r\n\r\nThe following packages should be present:\r\n<pre class=\"prettyprint lang-text\">\r\n> dpkg -l | grep nvidia                                        \r\nii  bbswitch-dkms                             0.8-1~raringppa1                           all          Interface for toggling the power on NVIDIA Optimus video cards\r\nii  bumblebee                                 3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support\r\nii  bumblebee-nvidia                          3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support using the proprietary NVIDIA driver\r\nii  libkwinnvidiahack4                        4:4.10.5-0ubuntu0.2                        amd64        library used by nvidia cards for the KDE window manager\r\nii  nvidia-304                                304.116-0ubuntu1~xedgers~raring1           amd64        NVIDIA binary Xorg driver, kernel module and VDPAU library\r\nii  nvidia-current                            304.116-0ubuntu1~xedgers~raring1           amd64        Transitional package for nvidia-current\r\nii  nvidia-settings-304                       304.116-0ubuntu1~xedgers~raring1           amd64        Tool for configuring the NVIDIA graphics driver\r\n</pre>\r\n\r\nYou should see at least on Virtual entry running <code>xrandr</code>:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> xrandr\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192\r\nLVDS1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9  \r\nVIRTUAL2 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9 \r\n</pre>\r\n\r\nThe command <code>optirun true</code> should be totally silent.\r\n\r\nWhen starting the bumblebeed client, nothing suspicious should be outputed:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> sudo stop bumblebeed # if already running, stop it\r\n> sudo bumblebeed -vv       \r\n[ 5263.200085] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 5263.200137] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 5263.200161] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.200622] [INFO]Configured driver: nvidia\r\n[ 5263.200661] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 5263.200839] [DEBUG]Process /sbin/modprobe started, PID 6347.\r\n[ 5263.200885] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.203065] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.203165] [INFO]PM is disabled, not performing detection.\r\n[ 5263.203207] [DEBUG]Active configuration:\r\n[ 5263.203236] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.203266] [DEBUG] X display: :8\r\n[ 5263.203285] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 5263.203310] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 5263.203336] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 5263.203366] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 5263.203394] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 5263.203422] [DEBUG] ModulePath: /usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 5263.203444] [DEBUG] GID name: bumblebee\r\n[ 5263.203466] [DEBUG] Power method: none\r\n[ 5263.203490] [DEBUG] Stop X on exit: 0\r\n[ 5263.203519] [DEBUG] Driver: nvidia\r\n[ 5263.203540] [DEBUG] Driver module: nvidia_304\r\n[ 5263.203567] [DEBUG] Card shutdown state: 1\r\n[ 5263.203717] [DEBUG]Process /sbin/modprobe started, PID 6348.\r\n[ 5263.203790] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.205938] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.206015] [DEBUG]Configuration test passed.\r\n[ 5263.206710] [INFO]bumblebeed 3.2.1 started\r\n[ 5263.206826] [INFO]Initialization completed - now handling client requests\r\n^C[ 5385.447337] [WARN]Received Interrupt signal.\r\n[ 5385.447388] [DEBUG]Socket closed.\r\n[ 5385.447497] [DEBUG]Killing all remaining processes.\r\n</pre>\r\n\r\n\r\n<h2>Finally, use your second monitor</h2>\r\nNote that it works the same for both VGA and DisplayPort!\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# be sure to turn on optirun only when an external\r\n# device is wired to you laptop\r\n> optirun true\r\n\r\n# == now, some possibilities of screenclone\r\n\r\n# just to use a mirror screen, nothing fancy\r\n> screenclone -d :8\r\n\r\n# dual monitors, the external one on the right\r\n> randr --output LVDS1 --output VIRTUAL1 --mode 1920x1200 \\\r\n--right-of LVDS1\r\n\r\n# the option -d :8 is required only if you use bumblebee\r\n# -x 1 is VIRTUAL 1, -x 2 is VIRTUAL 2\r\n> screenclone -d :8 -x 1 &\r\n\r\n# == when you are finished\r\n# get screenclone from background\r\n# and turn it off using CTRL+C\r\n> fg\r\n^C\r\n# turn off the virtual screen\r\n> xrandr --output VIRTUAL1 --off\r\n</pre>\r\n\r\n','Thinkpad w530, linux 13.04 and optimus','','inherit','closed','open','','383-revision-v1','','','2014-01-23 18:51:34','2014-01-23 18:51:34','',383,'http://error418.no-ip.info/mywiki/?p=387',0,'revision','',0),(388,3,'2014-01-23 19:13:08','2014-01-23 19:13:08','<h2>Nvidia drivers</h2>\nWhich nvidia driver to use ? Actually, I don\'t really know the answer. I tried like 4 different ones... I think the one that really worked for me was the one from the x-swat repo. Here is how to get it:\n<pre class=\"prettyprint lang-text with-comments\">\nsudo add-apt-repository ppa:ubuntu-x-swat/x-updates \nsudo apt-get update\n# if you already have a version of the nvidia-current\n# driver installed,  use update instead of install !\nsudo apt-get install nvidia-current</pre>\n<h2>Bumblebee</h2>\nFirst, you need to install the bumblebee daemon. For those who have never heard of it, the <a href=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a> is a set of tools developed by people aiming to provide Optimus support under Linux (sic).\n\nThe installation is quite straight-forward:\n<pre class=\"prettyprint lang-text with-comments\">\nsudo add-apt-repository ppa:bumblebee/stable\nsudo apt-get update\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\n# those packages are needed, if not already installed:\nsudo apt-get install virtualgl linux-headers-generic\nsudo reboot</pre>\nWe also need to tweak the config a bit. Open <code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\n<pre class=\"prettyprint lang-text with-comments\">\nDriver=nvidia          # instead of Driver=\nKeepUnusedXServer=true # instead of false\n...\n[driver-nvidia]\nPMMethod=none          # instead of auto\nKernelDriver=nvidia    # see notes below</pre>\nReboot and try to run <code>optirun true</code> and/or <code>sudo bumblebeed restart</code>. Ensure that there is not output in stderr.\n\nTest that it runs properly with the command <code>optirun glxgears</code>. A windows with psychedelic spheres should appear.\n<h3>Error: module \'nvidia\' not found</h3>\nThe problem is that the <code>KernelDriver</code> option in bumblebee.conf does not match the actual module loaded into the kernel. To avoid this, replace nvidia by the output of the following command:\n<pre class=\"prettyprint lang-text with-comments\">\n# note: ignore nvidiafb.ko\nfind /lib/modules/$(uname -r) -name \'nvidia*.ko*\'</pre>\nIn my case, the correct option was nvidia_304.\n\nIf the error persists, add an entry in the LibraryPath list under [driver-nvidia] with the path to the file nvidia_drv.so (<code>find / -name \"nvidia_drv.so\"</code>). In my case:\n<pre class=\"prettyprint lang-text with-comments\">\n# comma-separated path of the directory containing nvidia_drv.so and the\n# default Xorg modules path\nXorgModulePath=/usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules</pre>\n<h3>Error: secondary GPU not found</h3>\nFirst and foremost, ensure that you have an external monitor connected to your computer.\n\nIf this is the case, open <code>/etc/bumblebee/xorg.conf.nvidia</code> and ensure that the <code>BusID</code> under the Device section is correct. To do that, use the following:\n<pre class=\"prettyprint lang-text with-comments\">\n# the bus id is the first field of the second line, i.e. the NVIDIA VGA controller\n> lspci | grep -i vga\n00:02.0 VGA compatible controller: Intel Corporation 3rd Gen Core processor Graphics Controller (rev 09)\n01:00.0 VGA compatible controller: NVIDIA Corporation GK107GLM [Quadro K2000M] (rev a1)</pre>\nIn my case, I had to set <code>BusID \"PCI:01:00:0\"</code>. Note that the final dot is replaced by a <strong>colon</strong>.\n\nThird, ... TODO\n<h2>Patch the intel-video driver</h2>\nUnder ubuntu 12.04, you needed to recompile the patched package by hand (and in my case, no patch worked, even if I tried more than three different ones).\n\nWith ubuntu 13.04, a fully functional package is already available. To install it, add the following ppa and use apt-get:\n<pre class=\"prettyprint lang-text\">\nsudo add-apt-repository ppa:krlmlr/ppa\nsudo apt-get update\nsudo apt-get install xserver-xorg-video-intel</pre>\n<h2>Screenclone</h2>\nThis will be the main program used for rendering using the integrated intel card. See <a href=\"https://github.com/liskin/hybrid-screenclone\">hybrid-screenclone on git</a> for more infos.\n\nNote: if you don\'t have git installed, now its the time to get it using <code>sudo apt-get install git</code>.\n<pre class=\"prettyprint lang-text with-comments\">\ngit clone git://github.com/liskin/hybrid-screenclone.git\ncd hybrid-screenclone\nsudo make\nsudo cp screenclone /usr/bin/\nsudo chmod +x /usr/bin/screenclone\nsudo cp xorg.conf.nvidia /etc/bumblebee/xorg.conf.nvidia\nsudo rm /etc/X11/xorg.conf</pre>\n<h2>Configuring xorg</h2>\nThis is <strong>required for ubuntu 13.04</strong>. Open <code>/etc/X11/xorg.conf</code> (create it if necessary), and copy-paste the following:\n<pre class=\"prettyprint lang-text with-comments\">\nSection \"Device\"\n    Identifier \"intel\"\n    Driver \"intel\"\n    Option \"AccelMethod\" \"uxa\"\n    Option \"Virtuals\" \"2\"      # create two virtual displays\nEndSection</pre>\nReboot for the changes to take effect.\n<h2>Did you do it right ?</h2>\nHere are the outputs of some commands on my machine.\n\nThe following packages should be present:\n<pre class=\"prettyprint lang-text\">\n> dpkg -l | grep nvidia                                        \nii  bbswitch-dkms                             0.8-1~raringppa1                           all          Interface for toggling the power on NVIDIA Optimus video cards\nii  bumblebee                                 3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support\nii  bumblebee-nvidia                          3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support using the proprietary NVIDIA driver\nii  libkwinnvidiahack4                        4:4.10.5-0ubuntu0.2                        amd64        library used by nvidia cards for the KDE window manager\nii  nvidia-304                                304.116-0ubuntu1~xedgers~raring1           amd64        NVIDIA binary Xorg driver, kernel module and VDPAU library\nii  nvidia-current                            304.116-0ubuntu1~xedgers~raring1           amd64        Transitional package for nvidia-current\nii  nvidia-settings-304                       304.116-0ubuntu1~xedgers~raring1           amd64        Tool for configuring the NVIDIA graphics driver</pre>\nYou should see at least one Virtual entry running <code>xrandr</code>:\n<pre class=\"prettyprint lang-text with-comments\">\n> xrandr\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192\nLVDS1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\n   1920x1080      60.0*+   59.9     50.0  \n   1680x1050      60.0     59.9  \n   1600x1024      60.2  \n   1400x1050      60.0  \n   1280x1024      60.0  \n   1440x900       59.9  \n   1280x960       60.0  \n   1360x768       59.8     60.0  \n   1152x864       60.0  \n   1024x768       60.0  \n   800x600        60.3     56.2  \n   640x480        59.9  \nVGA1 disconnected (normal left inverted right x axis y axis)\nVIRTUAL1 unknown connection (normal left inverted right x axis y axis)\n   1920x1200      60.0  \n   1920x1080      59.9  \n   1600x1200      60.0  \n   1680x1050      60.0     59.9  \n   1400x1050      60.0  \n   1440x900       59.9  \n   1280x960       60.0  \n   1360x768       59.8     60.0  \n   1152x864       60.0  \n   800x600        56.2  \n   640x480        59.9  \nVIRTUAL2 unknown connection (normal left inverted right x axis y axis)\n   1920x1200      60.0  \n   1920x1080      59.9  \n   1600x1200      60.0  \n   1680x1050      60.0     59.9  \n   1400x1050      60.0  \n   1440x900       59.9  \n   1280x960       60.0  \n   1360x768       59.8     60.0  \n   1152x864       60.0  \n   800x600        56.2  \n   640x480        59.9</pre>\nThe command <code>optirun true</code> should be totally silent.\n\nWhen starting the bumblebeed client, nothing suspicious should be outputed:\n<pre class=\"prettyprint lang-text with-comments\">\n> sudo stop bumblebeed # if already running, stop it\n> sudo bumblebeed -vv       \n[ 5263.200085] [DEBUG]Found card: 01:00.0 (discrete)\n[ 5263.200137] [DEBUG]Found card: 00:02.0 (integrated)\n[ 5263.200161] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\n[ 5263.200622] [INFO]Configured driver: nvidia\n[ 5263.200661] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\n[ 5263.200839] [DEBUG]Process /sbin/modprobe started, PID 6347.\n[ 5263.200885] [DEBUG]Hiding stderr for execution of /sbin/modprobe\n[ 5263.203065] [DEBUG]SIGCHILD received, but wait failed with No child processes\n[ 5263.203165] [INFO]PM is disabled, not performing detection.\n[ 5263.203207] [DEBUG]Active configuration:\n[ 5263.203236] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\n[ 5263.203266] [DEBUG] X display: :8\n[ 5263.203285] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\n[ 5263.203310] [DEBUG] Socket path: /var/run/bumblebee.socket\n[ 5263.203336] [DEBUG] pidfile: /var/run/bumblebeed.pid\n[ 5263.203366] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\n[ 5263.203394] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\n[ 5263.203422] [DEBUG] ModulePath: /usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\n[ 5263.203444] [DEBUG] GID name: bumblebee\n[ 5263.203466] [DEBUG] Power method: none\n[ 5263.203490] [DEBUG] Stop X on exit: 0\n[ 5263.203519] [DEBUG] Driver: nvidia\n[ 5263.203540] [DEBUG] Driver module: nvidia_304\n[ 5263.203567] [DEBUG] Card shutdown state: 1\n[ 5263.203717] [DEBUG]Process /sbin/modprobe started, PID 6348.\n[ 5263.203790] [DEBUG]Hiding stderr for execution of /sbin/modprobe\n[ 5263.205938] [DEBUG]SIGCHILD received, but wait failed with No child processes\n[ 5263.206015] [DEBUG]Configuration test passed.\n[ 5263.206710] [INFO]bumblebeed 3.2.1 started\n[ 5263.206826] [INFO]Initialization completed - now handling client requests\n^C[ 5385.447337] [WARN]Received Interrupt signal.\n[ 5385.447388] [DEBUG]Socket closed.\n[ 5385.447497] [DEBUG]Killing all remaining processes.</pre>\n<h2>Finally, use your second monitor</h2>\nNote that it works the same for both VGA and DisplayPort!\n<pre class=\"prettyprint lang-text with-comments\">\n# be sure to turn on optirun only when an external\n# device is wired to you laptop\n> optirun true\n\n# == now, some possibilities of screenclone\n\n# just to use a mirror screen, nothing fancy\n> screenclone -d :8\n\n# dual monitors, the external one on the right\n> randr --output LVDS1 --output VIRTUAL1 --mode 1920x1200 \\\n--right-of LVDS1\n\n# the option -d :8 is required only if you use bumblebee\n# -x 1 is VIRTUAL 1, -x 2 is VIRTUAL 2\n> screenclone -d :8 -x 1 &\n\n# == when you are finished\n# get screenclone from background\n# and turn it off using CTRL+C\n> fg\n^C\n# turn off the virtual screen\n> xrandr --output VIRTUAL1 --off</pre>\n<h2>External links and resources</h2>\n<ul>\n	<li><a href=\"http://sagark.org/optimal-ubuntu-graphics-setup-for-thinkpads/\">Optimal Ubuntu Graphics Setup for Thinkpads</a></li>\n	<li><a href=\"http://zachstechnotes.blogspot.ch/2012/04/post-title.html\">A Solution for External Monitors on a Thinkpad W520 running Linux</a></li>\n	<li><a href=\"http://cfusting.wordpress.com/2013/09/01/the-lenovo-w530-with-optimus-technology-and-linux/\">The Lenovo W530 with Optimus Technology and Linux</a></li>\n	<li><a href=\"http://blog.linuxacademy.com/linux/ubuntu-bumblebee-optimus-and-multi-monitor-support/\">Ubuntu: Bumblebee, Optimus and Multi-Monitor Support</a></li>\n</ul>','Thinkpad w530, linux 13.04 and optimus','','inherit','closed','open','','383-autosave-v1','','','2014-01-23 19:13:08','2014-01-23 19:13:08','',383,'http://error418.no-ip.info/mywiki/?p=388',0,'revision','',0),(389,3,'2014-01-23 18:52:48','2014-01-23 18:52:48','<h2>Nvidia drivers</h2>\r\nWhich nvidia driver to use ? Actually, I don\'t really know the answer. I tried like 4 different ones... I think the one that really worked for me was the one from the x-swat repo. Here is how to get it:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:ubuntu-x-swat/x-updates \r\nsudo apt-get update\r\n# if you already have a version of the nvidia-current\r\n# driver installed,  use update instead of install !\r\nsudo apt-get install nvidia-current\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFirst, you need to install the bumblebee daemon. For those who have never heard of it, the <a href=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a>\r\nis a set of tools developed by people aiming to provide Optimus support under Linux (sic).\r\n\r\nThe installation is quite straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get update\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n# those packages are needed, if not already installed:\r\nsudo apt-get install virtualgl linux-headers-generic\r\nsudo reboot\r\n</pre>\r\n\r\nWe also need to tweak the config a bit. Open <code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nDriver=nvidia          # instead of Driver=\r\nKeepUnusedXServer=true # instead of false\r\n...\r\n[driver-nvidia]\r\nPMMethod=none          # instead of auto\r\nKernelDriver=nvidia    # see notes below\r\n</pre>\r\n\r\nReboot and try to run <code>optirun true</code> and/or <code>sudo bumblebeed restart</code>. Ensure that there is not output in stderr.\r\n\r\nTest that it runs properly with the command <code>optirun glxgears</code>. A windows with psychedelic spheres should appear.\r\n\r\n<h3>Error: module \'nvidia\' not found</h3>\r\nThe problem is that the <code>KernelDriver</code> option in bumblebee.conf does not match the actual module loaded into the kernel. To avoid this, replace nvidia by the output of the following command:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# note: ignore nvidiafb.ko\r\nfind /lib/modules/$(uname -r) -name \'nvidia*.ko*\'\r\n</pre>\r\n\r\nIn my case, the correct option was nvidia_304.\r\n\r\nIf the error persists, add an entry in the LibraryPath list under [driver-nvidia] with the path to the file nvidia_drv.so (<code>find / -name \"nvidia_drv.so\"</code>. In my case:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n</pre>\r\n\r\n<h3>Error: secondary GPU not found</h3>\r\n// TODO\r\n\r\n\r\n<h2>Patch the intel-video driver</h2>\r\nUnder ubuntu 12.04, you needed to recompile the patched package by hand (and in my case, no patch worked, even if I tried more than three different ones).\r\n\r\nWith ubuntu 13.04, a fully functional package is already available. To install\r\nit, add the following ppa and use apt-get:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:krlmlr/ppa\r\nsudo apt-get update\r\nsudo apt-get install xserver-xorg-video-intel\r\n</pre>\r\n\r\n<h2>Screenclone</h2>\r\n\r\nThis will be the main program used for rendering using the integrated intel card. See <a\r\nhref=\"https://github.com/liskin/hybrid-screenclone\">hybrid-scrennclone on git</a> for more infos.\r\n\r\nNote: if you don\'t have git installed, now its the time to get it using <code>sudo apt-get install git</code>.\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\ngit clone git://github.com/liskin/hybrid-screenclone.git\r\ncd hybrid-screenclone\r\nsudo make\r\nsudo cp screenclone /usr/bin/\r\nsudo chmod +x /usr/bin/screenclone\r\nsudo cp xorg.conf.nvidia /etc/bumblebee/xorg.conf.nvidia\r\nsudo rm /etc/X11/xorg.conf\r\n</pre>\r\n\r\n<h2>Configuring xorg</h2>\r\nThis is <strong>required for ubuntu 13.04</strong>\r\nOpen <code>/etc/X11/xorg.conf</code> (create it if necessary), and copy-paste the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nSection \"Device\"\r\n    Identifier \"intel\"\r\n    Driver \"intel\"\r\n    Option \"AccelMethod\" \"uxa\"\r\n    Option \"Virtuals\" \"2\"      # create two virtual displays\r\nEndSection\r\n</pre>\r\n\r\nReboot for the changes to take effect.\r\n\r\n\r\n<h2>Did you do it right ?</h2>\r\n\r\nHere are the outputs of some commands on my machine.\r\n\r\nThe following packages should be present:\r\n<pre class=\"prettyprint lang-text\">\r\n> dpkg -l | grep nvidia                                        \r\nii  bbswitch-dkms                             0.8-1~raringppa1                           all          Interface for toggling the power on NVIDIA Optimus video cards\r\nii  bumblebee                                 3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support\r\nii  bumblebee-nvidia                          3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support using the proprietary NVIDIA driver\r\nii  libkwinnvidiahack4                        4:4.10.5-0ubuntu0.2                        amd64        library used by nvidia cards for the KDE window manager\r\nii  nvidia-304                                304.116-0ubuntu1~xedgers~raring1           amd64        NVIDIA binary Xorg driver, kernel module and VDPAU library\r\nii  nvidia-current                            304.116-0ubuntu1~xedgers~raring1           amd64        Transitional package for nvidia-current\r\nii  nvidia-settings-304                       304.116-0ubuntu1~xedgers~raring1           amd64        Tool for configuring the NVIDIA graphics driver\r\n</pre>\r\n\r\nYou should see at least on Virtual entry running <code>xrandr</code>:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> xrandr\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192\r\nLVDS1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9  \r\nVIRTUAL2 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9 \r\n</pre>\r\n\r\nThe command <code>optirun true</code> should be totally silent.\r\n\r\nWhen starting the bumblebeed client, nothing suspicious should be outputed:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> sudo stop bumblebeed # if already running, stop it\r\n> sudo bumblebeed -vv       \r\n[ 5263.200085] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 5263.200137] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 5263.200161] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.200622] [INFO]Configured driver: nvidia\r\n[ 5263.200661] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 5263.200839] [DEBUG]Process /sbin/modprobe started, PID 6347.\r\n[ 5263.200885] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.203065] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.203165] [INFO]PM is disabled, not performing detection.\r\n[ 5263.203207] [DEBUG]Active configuration:\r\n[ 5263.203236] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.203266] [DEBUG] X display: :8\r\n[ 5263.203285] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 5263.203310] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 5263.203336] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 5263.203366] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 5263.203394] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 5263.203422] [DEBUG] ModulePath: /usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 5263.203444] [DEBUG] GID name: bumblebee\r\n[ 5263.203466] [DEBUG] Power method: none\r\n[ 5263.203490] [DEBUG] Stop X on exit: 0\r\n[ 5263.203519] [DEBUG] Driver: nvidia\r\n[ 5263.203540] [DEBUG] Driver module: nvidia_304\r\n[ 5263.203567] [DEBUG] Card shutdown state: 1\r\n[ 5263.203717] [DEBUG]Process /sbin/modprobe started, PID 6348.\r\n[ 5263.203790] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.205938] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.206015] [DEBUG]Configuration test passed.\r\n[ 5263.206710] [INFO]bumblebeed 3.2.1 started\r\n[ 5263.206826] [INFO]Initialization completed - now handling client requests\r\n^C[ 5385.447337] [WARN]Received Interrupt signal.\r\n[ 5385.447388] [DEBUG]Socket closed.\r\n[ 5385.447497] [DEBUG]Killing all remaining processes.\r\n</pre>\r\n\r\n\r\n<h2>Finally, use your second monitor</h2>\r\nNote that it works the same for both VGA and DisplayPort!\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# be sure to turn on optirun only when an external\r\n# device is wired to you laptop\r\n> optirun true\r\n\r\n# == now, some possibilities of screenclone\r\n\r\n# just to use a mirror screen, nothing fancy\r\n> screenclone -d :8\r\n\r\n# dual monitors, the external one on the right\r\n> randr --output LVDS1 --output VIRTUAL1 --mode 1920x1200 \\\r\n--right-of LVDS1\r\n\r\n# the option -d :8 is required only if you use bumblebee\r\n# -x 1 is VIRTUAL 1, -x 2 is VIRTUAL 2\r\n> screenclone -d :8 -x 1 &\r\n\r\n# == when you are finished\r\n# get screenclone from background\r\n# and turn it off using CTRL+C\r\n> fg\r\n^C\r\n# turn off the virtual screen\r\n> xrandr --output VIRTUAL1 --off\r\n</pre>\r\n\r\n','Thinkpad w530, linux 13.04 and optimus','','inherit','closed','open','','383-revision-v1','','','2014-01-23 18:52:48','2014-01-23 18:52:48','',383,'http://error418.no-ip.info/mywiki/?p=389',0,'revision','',0),(390,3,'2014-01-23 18:54:17','2014-01-23 18:54:17','<h2>Nvidia drivers</h2>\r\nWhich nvidia driver to use ? Actually, I don\'t really know the answer. I tried like 4 different ones... I think the one that really worked for me was the one from the x-swat repo. Here is how to get it:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:ubuntu-x-swat/x-updates \r\nsudo apt-get update\r\n# if you already have a version of the nvidia-current\r\n# driver installed,  use update instead of install !\r\nsudo apt-get install nvidia-current</pre>\r\n<h2>Bumblebee</h2>\r\nFirst, you need to install the bumblebee daemon. For those who have never heard of it, the <a href=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a>\r\nis a set of tools developed by people aiming to provide Optimus support under Linux (sic).\r\n\r\nThe installation is quite straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get update\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n# those packages are needed, if not already installed:\r\nsudo apt-get install virtualgl linux-headers-generic\r\nsudo reboot</pre>\r\nWe also need to tweak the config a bit. Open <code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nDriver=nvidia          # instead of Driver=\r\nKeepUnusedXServer=true # instead of false\r\n...\r\n[driver-nvidia]\r\nPMMethod=none          # instead of auto\r\nKernelDriver=nvidia    # see notes below</pre>\r\nReboot and try to run <code>optirun true</code> and/or <code>sudo bumblebeed restart</code>. Ensure that there is not output in stderr.\r\n\r\nTest that it runs properly with the command <code>optirun glxgears</code>. A windows with psychedelic spheres should appear.\r\n<h3>Error: module \'nvidia\' not found</h3>\r\nThe problem is that the <code>KernelDriver</code> option in bumblebee.conf does not match the actual module loaded into the kernel. To avoid this, replace nvidia by the output of the following command:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# note: ignore nvidiafb.ko\r\nfind /lib/modules/$(uname -r) -name \'nvidia*.ko*\'</pre>\r\nIn my case, the correct option was nvidia_304.\r\n\r\nIf the error persists, add an entry in the LibraryPath list under [driver-nvidia] with the path to the file nvidia_drv.so (<code>find / -name \"nvidia_drv.so\"</code>. In my case:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules</pre>\r\n<h3>Error: secondary GPU not found</h3>\r\n// TODO\r\n<h2>Patch the intel-video driver</h2>\r\nUnder ubuntu 12.04, you needed to recompile the patched package by hand (and in my case, no patch worked, even if I tried more than three different ones).\r\n\r\nWith ubuntu 13.04, a fully functional package is already available. To install\r\nit, add the following ppa and use apt-get:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:krlmlr/ppa\r\nsudo apt-get update\r\nsudo apt-get install xserver-xorg-video-intel</pre>\r\n<h2>Screenclone</h2>\r\nThis will be the main program used for rendering using the integrated intel card. See <a\r\nhref=\"https://github.com/liskin/hybrid-screenclone\">hybrid-scrennclone on git</a> for more infos.\r\n\r\nNote: if you don\'t have git installed, now its the time to get it using <code>sudo apt-get install git</code>.\r\n<pre class=\"prettyprint lang-text with-comments\">\r\ngit clone git://github.com/liskin/hybrid-screenclone.git\r\ncd hybrid-screenclone\r\nsudo make\r\nsudo cp screenclone /usr/bin/\r\nsudo chmod +x /usr/bin/screenclone\r\nsudo cp xorg.conf.nvidia /etc/bumblebee/xorg.conf.nvidia\r\nsudo rm /etc/X11/xorg.conf</pre>\r\n<h2>Configuring xorg</h2>\r\nThis is <strong>required for ubuntu 13.04</strong>\r\nOpen <code>/etc/X11/xorg.conf</code> (create it if necessary), and copy-paste the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nSection \"Device\"\r\n    Identifier \"intel\"\r\n    Driver \"intel\"\r\n    Option \"AccelMethod\" \"uxa\"\r\n    Option \"Virtuals\" \"2\"      # create two virtual displays\r\nEndSection</pre>\r\nReboot for the changes to take effect.\r\n<h2>Did you do it right ?</h2>\r\nHere are the outputs of some commands on my machine.\r\n\r\nThe following packages should be present:\r\n<pre class=\"prettyprint lang-text\">\r\n> dpkg -l | grep nvidia                                        \r\nii  bbswitch-dkms                             0.8-1~raringppa1                           all          Interface for toggling the power on NVIDIA Optimus video cards\r\nii  bumblebee                                 3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support\r\nii  bumblebee-nvidia                          3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support using the proprietary NVIDIA driver\r\nii  libkwinnvidiahack4                        4:4.10.5-0ubuntu0.2                        amd64        library used by nvidia cards for the KDE window manager\r\nii  nvidia-304                                304.116-0ubuntu1~xedgers~raring1           amd64        NVIDIA binary Xorg driver, kernel module and VDPAU library\r\nii  nvidia-current                            304.116-0ubuntu1~xedgers~raring1           amd64        Transitional package for nvidia-current\r\nii  nvidia-settings-304                       304.116-0ubuntu1~xedgers~raring1           amd64        Tool for configuring the NVIDIA graphics driver</pre>\r\nYou should see at least on Virtual entry running <code>xrandr</code>:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> xrandr\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192\r\nLVDS1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9  \r\nVIRTUAL2 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9</pre>\r\nThe command <code>optirun true</code> should be totally silent.\r\n\r\nWhen starting the bumblebeed client, nothing suspicious should be outputed:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> sudo stop bumblebeed # if already running, stop it\r\n> sudo bumblebeed -vv       \r\n[ 5263.200085] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 5263.200137] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 5263.200161] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.200622] [INFO]Configured driver: nvidia\r\n[ 5263.200661] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 5263.200839] [DEBUG]Process /sbin/modprobe started, PID 6347.\r\n[ 5263.200885] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.203065] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.203165] [INFO]PM is disabled, not performing detection.\r\n[ 5263.203207] [DEBUG]Active configuration:\r\n[ 5263.203236] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.203266] [DEBUG] X display: :8\r\n[ 5263.203285] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 5263.203310] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 5263.203336] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 5263.203366] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 5263.203394] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 5263.203422] [DEBUG] ModulePath: /usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 5263.203444] [DEBUG] GID name: bumblebee\r\n[ 5263.203466] [DEBUG] Power method: none\r\n[ 5263.203490] [DEBUG] Stop X on exit: 0\r\n[ 5263.203519] [DEBUG] Driver: nvidia\r\n[ 5263.203540] [DEBUG] Driver module: nvidia_304\r\n[ 5263.203567] [DEBUG] Card shutdown state: 1\r\n[ 5263.203717] [DEBUG]Process /sbin/modprobe started, PID 6348.\r\n[ 5263.203790] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.205938] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.206015] [DEBUG]Configuration test passed.\r\n[ 5263.206710] [INFO]bumblebeed 3.2.1 started\r\n[ 5263.206826] [INFO]Initialization completed - now handling client requests\r\n^C[ 5385.447337] [WARN]Received Interrupt signal.\r\n[ 5385.447388] [DEBUG]Socket closed.\r\n[ 5385.447497] [DEBUG]Killing all remaining processes.</pre>\r\n<h2>Finally, use your second monitor</h2>\r\nNote that it works the same for both VGA and DisplayPort!\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# be sure to turn on optirun only when an external\r\n# device is wired to you laptop\r\n> optirun true\r\n\r\n# == now, some possibilities of screenclone\r\n\r\n# just to use a mirror screen, nothing fancy\r\n> screenclone -d :8\r\n\r\n# dual monitors, the external one on the right\r\n> randr --output LVDS1 --output VIRTUAL1 --mode 1920x1200 \\\\\r\n--right-of LVDS1\r\n\r\n# the option -d :8 is required only if you use bumblebee\r\n# -x 1 is VIRTUAL 1, -x 2 is VIRTUAL 2\r\n> screenclone -d :8 -x 1 &\r\n\r\n# == when you are finished\r\n# get screenclone from background\r\n# and turn it off using CTRL+C\r\n> fg\r\n^C\r\n# turn off the virtual screen\r\n> xrandr --output VIRTUAL1 --off</pre>','Thinkpad w530, linux 13.04 and optimus','','inherit','closed','open','','383-revision-v1','','','2014-01-23 18:54:17','2014-01-23 18:54:17','',383,'http://error418.no-ip.info/mywiki/?p=390',0,'revision','',0),(391,3,'2014-01-23 19:11:39','2014-01-23 19:11:39','<h2>Nvidia drivers</h2>\r\nWhich nvidia driver to use ? Actually, I don\'t really know the answer. I tried like 4 different ones... I think the one that really worked for me was the one from the x-swat repo. Here is how to get it:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:ubuntu-x-swat/x-updates \r\nsudo apt-get update\r\n# if you already have a version of the nvidia-current\r\n# driver installed,  use update instead of install !\r\nsudo apt-get install nvidia-current\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFirst, you need to install the bumblebee daemon. For those who have never heard of it, the <a href=\"https://github.com/Bumblebee-Project/Bumblebee/wiki\">Bumblebee Project</a> is a set of tools developed by people aiming to provide Optimus support under Linux (sic).\r\n\r\nThe installation is quite straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get update\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n# those packages are needed, if not already installed:\r\nsudo apt-get install virtualgl linux-headers-generic\r\nsudo reboot\r\n</pre>\r\n\r\nWe also need to tweak the config a bit. Open <code>/etc/bumblebee/bumblebee.conf</code> as root and modify the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nDriver=nvidia          # instead of Driver=\r\nKeepUnusedXServer=true # instead of false\r\n...\r\n[driver-nvidia]\r\nPMMethod=none          # instead of auto\r\nKernelDriver=nvidia    # see notes below\r\n</pre>\r\n\r\nReboot and try to run <code>optirun true</code> and/or <code>sudo bumblebeed restart</code>. Ensure that there is not output in stderr.\r\n\r\nTest that it runs properly with the command <code>optirun glxgears</code>. A windows with psychedelic spheres should appear.\r\n\r\n<h3>Error: module \'nvidia\' not found</h3>\r\nThe problem is that the <code>KernelDriver</code> option in bumblebee.conf does not match the actual module loaded into the kernel. To avoid this, replace nvidia by the output of the following command:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# note: ignore nvidiafb.ko\r\nfind /lib/modules/$(uname -r) -name \'nvidia*.ko*\'\r\n</pre>\r\n\r\nIn my case, the correct option was nvidia_304.\r\n\r\nIf the error persists, add an entry in the LibraryPath list under [driver-nvidia] with the path to the file nvidia_drv.so (<code>find / -name \"nvidia_drv.so\"</code>). In my case:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n</pre>\r\n\r\n<h3>Error: secondary GPU not found</h3>\r\nFirst and foremost, ensure that you have an external monitor connected to your computer.\r\n\r\nIf this is the case, open <code>/etc/bumblebee/xorg.conf.nvidia</code> and ensure that the <code>BusID</code> under the Device section is correct. To do that, use the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# the bus id is the first field of the second line, i.e. the NVIDIA VGA controller\r\n> lspci | grep -i vga\r\n00:02.0 VGA compatible controller: Intel Corporation 3rd Gen Core processor Graphics Controller (rev 09)\r\n01:00.0 VGA compatible controller: NVIDIA Corporation GK107GLM [Quadro K2000M] (rev a1)\r\n</pre>\r\nIn my case, I had to set <code>BusID \"PCI:01:00:0\"</code>. Note that the final dot is replaced by a <strong>colon</strong>.\r\n\r\nThird, ... TODO\r\n\r\n<h2>Patch the intel-video driver</h2>\r\nUnder ubuntu 12.04, you needed to recompile the patched package by hand (and in my case, no patch worked, even if I tried more than three different ones).\r\n\r\nWith ubuntu 13.04, a fully functional package is already available. To install it, add the following ppa and use apt-get:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:krlmlr/ppa\r\nsudo apt-get update\r\nsudo apt-get install xserver-xorg-video-intel\r\n</pre>\r\n\r\n<h2>Screenclone</h2>\r\n\r\nThis will be the main program used for rendering using the integrated intel card. See <a href=\"https://github.com/liskin/hybrid-screenclone\">hybrid-screenclone on git</a> for more infos.\r\n\r\nNote: if you don\'t have git installed, now its the time to get it using <code>sudo apt-get install git</code>.\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\ngit clone git://github.com/liskin/hybrid-screenclone.git\r\ncd hybrid-screenclone\r\nsudo make\r\nsudo cp screenclone /usr/bin/\r\nsudo chmod +x /usr/bin/screenclone\r\nsudo cp xorg.conf.nvidia /etc/bumblebee/xorg.conf.nvidia\r\nsudo rm /etc/X11/xorg.conf\r\n</pre>\r\n\r\n<h2>Configuring xorg</h2>\r\nThis is <strong>required for ubuntu 13.04</strong>. Open <code>/etc/X11/xorg.conf</code> (create it if necessary), and copy-paste the following:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\nSection \"Device\"\r\n    Identifier \"intel\"\r\n    Driver \"intel\"\r\n    Option \"AccelMethod\" \"uxa\"\r\n    Option \"Virtuals\" \"2\"      # create two virtual displays\r\nEndSection\r\n</pre>\r\n\r\nReboot for the changes to take effect.\r\n\r\n\r\n<h2>Did you do it right ?</h2>\r\n\r\nHere are the outputs of some commands on my machine.\r\n\r\nThe following packages should be present:\r\n<pre class=\"prettyprint lang-text\">\r\n> dpkg -l | grep nvidia                                        \r\nii  bbswitch-dkms                             0.8-1~raringppa1                           all          Interface for toggling the power on NVIDIA Optimus video cards\r\nii  bumblebee                                 3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support\r\nii  bumblebee-nvidia                          3.2.1-1~raringppa5                         amd64        NVIDIA Optimus support using the proprietary NVIDIA driver\r\nii  libkwinnvidiahack4                        4:4.10.5-0ubuntu0.2                        amd64        library used by nvidia cards for the KDE window manager\r\nii  nvidia-304                                304.116-0ubuntu1~xedgers~raring1           amd64        NVIDIA binary Xorg driver, kernel module and VDPAU library\r\nii  nvidia-current                            304.116-0ubuntu1~xedgers~raring1           amd64        Transitional package for nvidia-current\r\nii  nvidia-settings-304                       304.116-0ubuntu1~xedgers~raring1           amd64        Tool for configuring the NVIDIA graphics driver\r\n</pre>\r\n\r\nYou should see at least one Virtual entry running <code>xrandr</code>:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> xrandr\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192\r\nLVDS1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9  \r\nVIRTUAL2 unknown connection (normal left inverted right x axis y axis)\r\n   1920x1200      60.0  \r\n   1920x1080      59.9  \r\n   1600x1200      60.0  \r\n   1680x1050      60.0     59.9  \r\n   1400x1050      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   800x600        56.2  \r\n   640x480        59.9 \r\n</pre>\r\n\r\nThe command <code>optirun true</code> should be totally silent.\r\n\r\nWhen starting the bumblebeed client, nothing suspicious should be outputed:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> sudo stop bumblebeed # if already running, stop it\r\n> sudo bumblebeed -vv       \r\n[ 5263.200085] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 5263.200137] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 5263.200161] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.200622] [INFO]Configured driver: nvidia\r\n[ 5263.200661] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 5263.200839] [DEBUG]Process /sbin/modprobe started, PID 6347.\r\n[ 5263.200885] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.203065] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.203165] [INFO]PM is disabled, not performing detection.\r\n[ 5263.203207] [DEBUG]Active configuration:\r\n[ 5263.203236] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 5263.203266] [DEBUG] X display: :8\r\n[ 5263.203285] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 5263.203310] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 5263.203336] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 5263.203366] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 5263.203394] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 5263.203422] [DEBUG] ModulePath: /usr/lib/nvidia-304/xorg/,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 5263.203444] [DEBUG] GID name: bumblebee\r\n[ 5263.203466] [DEBUG] Power method: none\r\n[ 5263.203490] [DEBUG] Stop X on exit: 0\r\n[ 5263.203519] [DEBUG] Driver: nvidia\r\n[ 5263.203540] [DEBUG] Driver module: nvidia_304\r\n[ 5263.203567] [DEBUG] Card shutdown state: 1\r\n[ 5263.203717] [DEBUG]Process /sbin/modprobe started, PID 6348.\r\n[ 5263.203790] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 5263.205938] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 5263.206015] [DEBUG]Configuration test passed.\r\n[ 5263.206710] [INFO]bumblebeed 3.2.1 started\r\n[ 5263.206826] [INFO]Initialization completed - now handling client requests\r\n^C[ 5385.447337] [WARN]Received Interrupt signal.\r\n[ 5385.447388] [DEBUG]Socket closed.\r\n[ 5385.447497] [DEBUG]Killing all remaining processes.\r\n</pre>\r\n\r\n\r\n<h2>Finally, use your second monitor</h2>\r\nNote that it works the same for both VGA and DisplayPort!\r\n\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# be sure to turn on optirun only when an external\r\n# device is wired to you laptop\r\n> optirun true\r\n\r\n# == now, some possibilities of screenclone\r\n\r\n# just to use a mirror screen, nothing fancy\r\n> screenclone -d :8\r\n\r\n# dual monitors, the external one on the right\r\n> randr --output LVDS1 --output VIRTUAL1 --mode 1920x1200 \\\r\n--right-of LVDS1\r\n\r\n# the option -d :8 is required only if you use bumblebee\r\n# -x 1 is VIRTUAL 1, -x 2 is VIRTUAL 2\r\n> screenclone -d :8 -x 1 &\r\n\r\n# == when you are finished\r\n# get screenclone from background\r\n# and turn it off using CTRL+C\r\n> fg\r\n^C\r\n# turn off the virtual screen\r\n> xrandr --output VIRTUAL1 --off\r\n</pre>\r\n\r\n<h2>External links and resources</h2>\r\n<ul>\r\n    <li><a href=\"http://sagark.org/optimal-ubuntu-graphics-setup-for-thinkpads/\">Optimal Ubuntu Graphics Setup for Thinkpads</a></li>\r\n    <li><a href=\"http://zachstechnotes.blogspot.ch/2012/04/post-title.html\">A Solution for External Monitors on a Thinkpad W520 running Linux</a></li>\r\n<li><a href=\"http://cfusting.wordpress.com/2013/09/01/the-lenovo-w530-with-optimus-technology-and-linux/\">The Lenovo W530 with Optimus Technology and Linux</a></li>\r\n<li><a href=\"http://blog.linuxacademy.com/linux/ubuntu-bumblebee-optimus-and-multi-monitor-support/\">Ubuntu: Bumblebee, Optimus and Multi-Monitor Support</a></li>\r\n</ul>\r\n','Thinkpad w530, linux 13.04 and optimus','','inherit','closed','open','','383-revision-v1','','','2014-01-23 19:11:39','2014-01-23 19:11:39','',383,'http://error418.no-ip.info/mywiki/?p=391',0,'revision','',0),(392,3,'2014-01-23 21:13:03','2014-01-23 21:13:03','<h2>Dowload Copy</h2>\r\n<a href=\"https://www.copy.com\">Download Copy</a> and, of course, create an account:\r\n<pre class=\"prettyprint lang-text\">\r\n> cd <download-path>\r\n> gzip -d copy....tgz\r\n> tar xvf copy...tar\r\n> mv copy <opt or somewhere else></pre>\r\n<h2>Initialise Copy</h2>\r\nOnce you have an account, initializing copy is rather straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> ./copy/x86_64/CopyConsole \\\r\n    -r=$HOME/Copy \\             # the root folder to sync\r\n    -u=<copy.com user> \\        # your copy id (email)\r\n    -data=$HOME/.copy  \\        # where to store the configs\r\n    -debug                      # be verbose</pre>\r\n<h2>Init script</h2>\r\nCreate a file <code>/etc/init.d/copy</code> with the following (don\'t forget to set the execute permissions with <code>chmod +x /etc/init.d/copy</code>):\r\n<pre class=\"prettyprint\">\r\n#!/bin/sh\r\n### BEGIN INIT INFO\r\n# Provides:          CopyAgent\r\n# Required-Start:    $local_fs $network\r\n# Required-Stop:     $local_fs\r\n# Default-Start:     2 3 4 5\r\n# Default-Stop:      0 1 6\r\n# Short-Description: CopyAgent\r\n# Description:       CopyConsole (Copy cloud storage by Barracuda) service\r\n### END INIT INFO\r\n\r\n# !!!!!!!! to change  !!!!!!!!!!\r\n\r\nRUN_AS=\"myUser\"     \r\nHOME=`grep $RUN_AS /etc/passwd | cut -d\":\" -f6`\r\nCC=\"$HOME/copy/x86_64/CopyConsole\"\r\n\r\n# !!!!!!!! end change !!!!!!!!!!\r\n\r\nstart() {\r\n   echo \"Starting CopyConsole...\"\r\n       if [ -x $CC ]; then\r\n           start-stop-daemon -b -o -c $RUN_AS -S -u $RUN_AS -x $CC -- -daemon\r\n       fi\r\n}\r\n\r\nstop() {\r\n   echo \"Stopping CopyConsole...\"\r\n       if [ -x $CC ]; then\r\n           start-stop-daemon -o -c $RUN_AS -K -u $RUN_AS -x $CC\r\n       fi\r\n}\r\n\r\nstatus() {\r\n       dbpid=`pgrep -u $RUN_AS CopyConsole`\r\n       if [ -z $dbpid ] ; then\r\n           echo \"CopyConsole for user $RUN_AS: not running.\"\r\n       else\r\n           echo \"CopyConsole for user $RUN_AS: running (pid $dbpid)\"\r\n       fi\r\n}\r\n\r\ncase \"$1\" in\r\n\r\n   start)\r\n       start\r\n       ;;\r\n   stop)\r\n       stop\r\n       ;;\r\n   restart|reload|force-reload)\r\n       stop\r\n       start\r\n       ;;\r\n   status)\r\n       status\r\n       ;;\r\n   *)\r\n       echo \"Usage: /etc/init.d/copyconsole {start|stop|reload|force-reload|restart|status}\"\r\n       exit 1\r\n\r\nesac\r\n\r\nexit 0</pre>\r\nThanks to <a href=\"http://www.nowhere.dk/post/56149263719/installing-and-running-copy-com-agent-on-a-headless\">Allan Willems Joergensen</a> for it!\r\n\r\nTest that it works using <code>/etc/init.d/copy start | stop | status</code>. If the outputs are ok, add the script to startup using <code>sudo update-rc.d copy defaults</code>.\r\n\r\nAnd you are done, enjoy!','Copy.com on Linux','','publish','closed','open','','copy-com','','','2014-04-09 15:04:01','2014-04-09 15:04:01','',0,'http://error418.no-ip.info/mywiki/?p=392',0,'post','',0),(393,3,'2014-01-23 21:12:10','2014-01-23 21:12:10','<h2>Dowload Copy</h2>\r\n<a href=\"https://www.copy.com\">Download Copy</a> and, of course, create an account:\r\n<pre class=\"prettyprint lang-text\">\r\n> cd <download-path>\r\n> gzip -d copy....tgz\r\n> tar xvf copy...tar\r\n> mv copy <opt or somewhere else>\r\n</pre>\r\n\r\n<h2>Initialise Copy</h2>\r\nOnce you have an account, initializing copy is rather straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> ./copy/x86_64/CopyConsole \\\r\n    -r=$HOME/Copy \\             # the root folder to sync\r\n    -u=<copy.com user> \\        # your copy id (email)\r\n    -data=$HOME/.copy  \\        # where to store the configs\r\n    -debug                      # be verbose\r\n</pre>\r\n\r\n\r\n<h2>Init script</h2>\r\nCreate a file <code>/etc/init.d/copy</code> with the following (don\'t forget to set the execute permissions with <code>chmod +x /etc/init.d/copy</code>):\r\n\r\n<pre class=\"prettyprint\">\r\n#!/bin/sh\r\n### BEGIN INIT INFO\r\n# Provides:          CopyAgent\r\n# Required-Start:    $local_fs $network\r\n# Required-Stop:     $local_fs\r\n# Default-Start:     2 3 4 5\r\n# Default-Stop:      0 1 6\r\n# Short-Description: CopyAgent\r\n# Description:       CopyConsole (Copy cloud storage by Barracuda) service\r\n### END INIT INFO\r\n\r\n# !!!!!!!! to change  !!!!!!!!!!\r\n\r\nRUN_AS=\"myUser\"     \r\nHOME=`grep $RUN_AS /etc/passwd | cut -d\":\" -f6`\r\nCC=\"$HOME/copy/x86_64/CopyConsole\"\r\n\r\n# !!!!!!!! end change !!!!!!!!!!\r\n\r\nstart() {\r\n   echo \"Starting CopyConsole...\"\r\n       if [ -x $CC ]; then\r\n           start-stop-daemon -b -o -c $RUN_AS -S -u $RUN_AS -x $CC -- -daemon\r\n       fi\r\n}\r\n \r\nstop() {\r\n   echo \"Stopping CopyConsole...\"\r\n       if [ -x $CC ]; then\r\n           start-stop-daemon -o -c $RUN_AS -K -u $RUN_AS -x $CC\r\n       fi\r\n}\r\n \r\nstatus() {\r\n       dbpid=`pgrep -u $RUN_AS CopyConsole`\r\n       if [ -z $dbpid ] ; then\r\n           echo \"CopyConsole for user $RUN_AS: not running.\"\r\n       else\r\n           echo \"CopyConsole for user $RUN_AS: running (pid $dbpid)\"\r\n       fi\r\n}\r\n \r\ncase \"$1\" in\r\n \r\n   start)\r\n       start\r\n       ;;\r\n   stop)\r\n       stop\r\n       ;;\r\n   restart|reload|force-reload)\r\n       stop\r\n       start\r\n       ;;\r\n   status)\r\n       status\r\n       ;;\r\n   *)\r\n       echo \"Usage: /etc/init.d/copyconsole {start|stop|reload|force-reload|restart|status}\"\r\n       exit 1\r\n \r\nesac\r\n \r\nexit 0\r\n</pre>\r\n\r\nTest that it works using <code>/etc/init.d/copy start | stop | status</code>. If the outputs are ok, add the script to startup using <code>sudo update-rc.d copy defaults</code>.\r\n\r\nAnd you are done, enjoy!\r\n','Copy.com','','inherit','closed','open','','392-revision-v1','','','2014-01-23 21:12:10','2014-01-23 21:12:10','',392,'http://error418.no-ip.info/mywiki/?p=393',0,'revision','',0),(394,3,'2014-01-23 21:15:04','2014-01-23 21:15:04','<h2>Dowload Copy</h2>\n<a href=\"https://www.copy.com\">Download Copy</a> and, of course, create an account:\n<pre class=\"prettyprint lang-text\">\n> cd <download-path>\n> gzip -d copy....tgz\n> tar xvf copy...tar\n> mv copy <opt or somewhere else></pre>\n<h2>Initialise Copy</h2>\nOnce you have an account, initializing copy is rather straight-forward:\n<pre class=\"prettyprint lang-text with-comments\">\n> ./copy/x86_64/CopyConsole \\\n    -r=$HOME/Copy \\             # the root folder to sync\n    -u=<copy.com user> \\        # your copy id (email)\n    -data=$HOME/.copy  \\        # where to store the configs\n    -debug                      # be verbose</pre>\n<h2>Init script</h2>\nCreate a file <code>/etc/init.d/copy</code> with the following (don\'t forget to set the execute permissions with <code>chmod +x /etc/init.d/copy</code>):\n<pre class=\"prettyprint\">\n#!/bin/sh\n### BEGIN INIT INFO\n# Provides:          CopyAgent\n# Required-Start:    $local_fs $network\n# Required-Stop:     $local_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: CopyAgent\n# Description:       CopyConsole (Copy cloud storage by Barracuda) service\n### END INIT INFO\n\n# !!!!!!!! to change  !!!!!!!!!!\n\nRUN_AS=\"myUser\"     \nHOME=`grep $RUN_AS /etc/passwd | cut -d\":\" -f6`\nCC=\"$HOME/copy/x86_64/CopyConsole\"\n\n# !!!!!!!! end change !!!!!!!!!!\n\nstart() {\n   echo \"Starting CopyConsole...\"\n       if [ -x $CC ]; then\n           start-stop-daemon -b -o -c $RUN_AS -S -u $RUN_AS -x $CC -- -daemon\n       fi\n}\n\nstop() {\n   echo \"Stopping CopyConsole...\"\n       if [ -x $CC ]; then\n           start-stop-daemon -o -c $RUN_AS -K -u $RUN_AS -x $CC\n       fi\n}\n\nstatus() {\n       dbpid=`pgrep -u $RUN_AS CopyConsole`\n       if [ -z $dbpid ] ; then\n           echo \"CopyConsole for user $RUN_AS: not running.\"\n       else\n           echo \"CopyConsole for user $RUN_AS: running (pid $dbpid)\"\n       fi\n}\n\ncase \"$1\" in\n\n   start)\n       start\n       ;;\n   stop)\n       stop\n       ;;\n   restart|reload|force-reload)\n       stop\n       start\n       ;;\n   status)\n       status\n       ;;\n   *)\n       echo \"Usage: /etc/init.d/copyconsole {start|stop|reload|force-reload|restart|status}\"\n       exit 1\n\nesac\n\nexit 0</pre>\n\nThanks to <a href=\"http://www.nowhere.dk/post/56149263719/installing-and-running-copy-com-agent-on-a-headless\">Allan Willems Joergensen -\n\nTest that it works using <code>/etc/init.d/copy start | stop | status</code>. If the outputs are ok, add the script to startup using <code>sudo update-rc.d copy defaults</code>.\n\nAnd you are done, enjoy!','Copy.com','','inherit','closed','open','','392-autosave-v1','','','2014-01-23 21:15:04','2014-01-23 21:15:04','',392,'http://error418.no-ip.info/mywiki/?p=394',0,'revision','',0),(395,3,'2014-01-23 21:15:12','2014-01-23 21:15:12','<h2>Dowload Copy</h2>\r\n<a href=\"https://www.copy.com\">Download Copy</a> and, of course, create an account:\r\n<pre class=\"prettyprint lang-text\">\r\n> cd <download-path>\r\n> gzip -d copy....tgz\r\n> tar xvf copy...tar\r\n> mv copy <opt or somewhere else></pre>\r\n<h2>Initialise Copy</h2>\r\nOnce you have an account, initializing copy is rather straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> ./copy/x86_64/CopyConsole \\\r\n    -r=$HOME/Copy \\             # the root folder to sync\r\n    -u=<copy.com user> \\        # your copy id (email)\r\n    -data=$HOME/.copy  \\        # where to store the configs\r\n    -debug                      # be verbose</pre>\r\n<h2>Init script</h2>\r\nCreate a file <code>/etc/init.d/copy</code> with the following (don\'t forget to set the execute permissions with <code>chmod +x /etc/init.d/copy</code>):\r\n<pre class=\"prettyprint\">\r\n#!/bin/sh\r\n### BEGIN INIT INFO\r\n# Provides:          CopyAgent\r\n# Required-Start:    $local_fs $network\r\n# Required-Stop:     $local_fs\r\n# Default-Start:     2 3 4 5\r\n# Default-Stop:      0 1 6\r\n# Short-Description: CopyAgent\r\n# Description:       CopyConsole (Copy cloud storage by Barracuda) service\r\n### END INIT INFO\r\n\r\n# !!!!!!!! to change  !!!!!!!!!!\r\n\r\nRUN_AS=\"myUser\"     \r\nHOME=`grep $RUN_AS /etc/passwd | cut -d\":\" -f6`\r\nCC=\"$HOME/copy/x86_64/CopyConsole\"\r\n\r\n# !!!!!!!! end change !!!!!!!!!!\r\n\r\nstart() {\r\n   echo \"Starting CopyConsole...\"\r\n       if [ -x $CC ]; then\r\n           start-stop-daemon -b -o -c $RUN_AS -S -u $RUN_AS -x $CC -- -daemon\r\n       fi\r\n}\r\n\r\nstop() {\r\n   echo \"Stopping CopyConsole...\"\r\n       if [ -x $CC ]; then\r\n           start-stop-daemon -o -c $RUN_AS -K -u $RUN_AS -x $CC\r\n       fi\r\n}\r\n\r\nstatus() {\r\n       dbpid=`pgrep -u $RUN_AS CopyConsole`\r\n       if [ -z $dbpid ] ; then\r\n           echo \"CopyConsole for user $RUN_AS: not running.\"\r\n       else\r\n           echo \"CopyConsole for user $RUN_AS: running (pid $dbpid)\"\r\n       fi\r\n}\r\n\r\ncase \"$1\" in\r\n\r\n   start)\r\n       start\r\n       ;;\r\n   stop)\r\n       stop\r\n       ;;\r\n   restart|reload|force-reload)\r\n       stop\r\n       start\r\n       ;;\r\n   status)\r\n       status\r\n       ;;\r\n   *)\r\n       echo \"Usage: /etc/init.d/copyconsole {start|stop|reload|force-reload|restart|status}\"\r\n       exit 1\r\n\r\nesac\r\n\r\nexit 0</pre>\r\n\r\nThanks to <a href=\"http://www.nowhere.dk/post/56149263719/installing-and-running-copy-com-agent-on-a-headless\">Allan Willems Joergensen</a> for it!\r\n\r\nTest that it works using <code>/etc/init.d/copy start | stop | status</code>. If the outputs are ok, add the script to startup using <code>sudo update-rc.d copy defaults</code>.\r\n\r\nAnd you are done, enjoy!','Copy.com','','inherit','closed','open','','392-revision-v1','','','2014-01-23 21:15:12','2014-01-23 21:15:12','',392,'http://error418.no-ip.info/mywiki/?p=395',0,'revision','',0),(396,3,'2014-01-23 21:16:15','2014-01-23 21:16:15','<h2>Dowload Copy</h2>\r\n<a href=\"https://www.copy.com\">Download Copy</a> and, of course, create an account:\r\n<pre class=\"prettyprint lang-text\">\r\n> cd <download-path>\r\n> gzip -d copy....tgz\r\n> tar xvf copy...tar\r\n> mv copy <opt or somewhere else></pre>\r\n<h2>Initialise Copy</h2>\r\nOnce you have an account, initializing copy is rather straight-forward:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n> ./copy/x86_64/CopyConsole \\\r\n    -r=$HOME/Copy \\             # the root folder to sync\r\n    -u=<copy.com user> \\        # your copy id (email)\r\n    -data=$HOME/.copy  \\        # where to store the configs\r\n    -debug                      # be verbose</pre>\r\n<h2>Init script</h2>\r\nCreate a file <code>/etc/init.d/copy</code> with the following (don\'t forget to set the execute permissions with <code>chmod +x /etc/init.d/copy</code>):\r\n<pre class=\"prettyprint\">\r\n#!/bin/sh\r\n### BEGIN INIT INFO\r\n# Provides:          CopyAgent\r\n# Required-Start:    $local_fs $network\r\n# Required-Stop:     $local_fs\r\n# Default-Start:     2 3 4 5\r\n# Default-Stop:      0 1 6\r\n# Short-Description: CopyAgent\r\n# Description:       CopyConsole (Copy cloud storage by Barracuda) service\r\n### END INIT INFO\r\n\r\n# !!!!!!!! to change  !!!!!!!!!!\r\n\r\nRUN_AS=\"myUser\"     \r\nHOME=`grep $RUN_AS /etc/passwd | cut -d\":\" -f6`\r\nCC=\"$HOME/copy/x86_64/CopyConsole\"\r\n\r\n# !!!!!!!! end change !!!!!!!!!!\r\n\r\nstart() {\r\n   echo \"Starting CopyConsole...\"\r\n       if [ -x $CC ]; then\r\n           start-stop-daemon -b -o -c $RUN_AS -S -u $RUN_AS -x $CC -- -daemon\r\n       fi\r\n}\r\n\r\nstop() {\r\n   echo \"Stopping CopyConsole...\"\r\n       if [ -x $CC ]; then\r\n           start-stop-daemon -o -c $RUN_AS -K -u $RUN_AS -x $CC\r\n       fi\r\n}\r\n\r\nstatus() {\r\n       dbpid=`pgrep -u $RUN_AS CopyConsole`\r\n       if [ -z $dbpid ] ; then\r\n           echo \"CopyConsole for user $RUN_AS: not running.\"\r\n       else\r\n           echo \"CopyConsole for user $RUN_AS: running (pid $dbpid)\"\r\n       fi\r\n}\r\n\r\ncase \"$1\" in\r\n\r\n   start)\r\n       start\r\n       ;;\r\n   stop)\r\n       stop\r\n       ;;\r\n   restart|reload|force-reload)\r\n       stop\r\n       start\r\n       ;;\r\n   status)\r\n       status\r\n       ;;\r\n   *)\r\n       echo \"Usage: /etc/init.d/copyconsole {start|stop|reload|force-reload|restart|status}\"\r\n       exit 1\r\n\r\nesac\r\n\r\nexit 0</pre>\r\nThanks to <a href=\"http://www.nowhere.dk/post/56149263719/installing-and-running-copy-com-agent-on-a-headless\">Allan Willems Joergensen</a> for it!\r\n\r\nTest that it works using <code>/etc/init.d/copy start | stop | status</code>. If the outputs are ok, add the script to startup using <code>sudo update-rc.d copy defaults</code>.\r\n\r\nAnd you are done, enjoy!','Copy.com on Linux','','inherit','closed','open','','392-revision-v1','','','2014-01-23 21:16:15','2014-01-23 21:16:15','',392,'http://error418.no-ip.info/mywiki/?p=396',0,'revision','',0),(397,3,'2014-01-24 06:50:57','2014-01-24 06:50:57',' ','','','publish','closed','open','','397','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',7,'http://error418.no-ip.info/mywiki/?p=397',6,'nav_menu_item','',0),(398,3,'2014-01-24 06:57:47','2014-01-24 06:57:47','<h2>Wrapping, indenting</h2>\r\nHere are some useful options:\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# stop indenting {,( and such\r\n:set nocindent\r\n\r\n# enable spell-checker\r\n:setlocal spell spelllang=en\r\n\r\n# auto wrapping\r\n# wrap lines that are too long with \"visual\" newlines \r\n# rather than adding an actual newline character t\r\n# The \'list\' option must be off because it automatically \r\n# disables the \'linebreak\' option:\r\n:set wrap nolist inebreak\r\n\r\n# width of wrap to 60 chars\r\n:set textwidth=60\r\n\r\n# to test, not sure of the impact\r\n:set formatoptions+=n # numbered-list\r\n:set formatoptions+=a #</pre>\r\n<h2>Vim spell check</h2>\r\n<pre class=\"prettyprint lang-text with-comments\">\r\n# enable spell-checker\r\n:setlocal spell spelllang=en # or fr, ...</pre>\r\nTo use the french dictionary, download the following files and add them either in <code>/usr/share/vim/spell</code> or in your <code>~/.vim/spell</code> folder:\r\n<pre class=\"prettyprint lang-text raw\">\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.spl\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.latin1.sug\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.spl\r\nwget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.sug</pre>\r\nNote that you can also choose juste the utf8 or the latin1, not both, if you plan to use only one encoding.\r\n\r\nTo autocorrect a word, use <code>z=</code>. To mark a word as correct and update the dictionary, use <code>zg</code>; <code> zw</code> does the opposite, i.e. mark a word as mispelled.','edit simple text with vim','','inherit','closed','open','','336-revision-v1','','','2014-01-24 06:57:47','2014-01-24 06:57:47','',336,'http://error418.no-ip.info/mywiki/?p=398',0,'revision','',0),(400,3,'2014-01-30 19:53:25','2014-01-30 19:53:25','<h2>using a java installer</h2>\n<h3>install the oracle 8 installer</h3>\nRun the following commands:\n<pre class=\"prettyprint lang-sh\">\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer</pre>\nNote that there is a similar package for java 7.\n<h3>switch between versions</h3>\nTo alternate between versions, use one of the following:\n<pre class=\"prettyprint lang-sh\">\nsudo update-java-alternatives -s java-7-oracle\nsudo update-java-alternatives -s java-8-oracle</pre>\n<h3>update your environment</h3>\nRun the following commands:\n<pre class=\"prettyprint lang-sh\">\nsudo apt-get install oracle-java8-set-default</pre>\n<a href=\"http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html\">source</a>\n<h2>Update java and javac</h2>\nI don\'t know why, but I ran into troubles in one of my computers because of a mismatch between java and javac.\n\nIf you have the same issue, first try those commands:\n<pre class=\"prettyprint lang-sh\">\nsudo update-alternatives --config java\nsudo update-alternatives --config javac</pre>\nIf one of the versions that is listed in the java is not in the javac (probably an openjdk), ensure that you have both the jre AND the jdk installed. If not, try <code>sudo apt-get install openjdk-7-jdk</code> or a similar package.\n\nIf by any chance update-alternatives tells you that no java(c) is found, you will need to add them manually:\n<pre class=\"prettyprint lang-text\">\n# add the path to javac executable and a number from 1 to ..\n# the number will be the index in the list of alternatives\nsudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \\\\\n   /opt/java/jdk1.7.0_40/bin/javac 1\n\n# idem for java. If two versions, simply change the number from 1 to 2\nsudo update-alternatives --install \"/usr/bin/java\" \"java\" \\\\\n   /opt/java/jdk1.7.0_40/bin/java 1\n\n# if you made a mistake, remove an entry like this:\nsudo update-alternatives --remove \"/usr/bin/java\" \"java\" /opt/java/jdk1.7.0_40/bin/java\nsudo update-alternatives --config javac</pre>','java setup','','inherit','closed','open','','129-autosave-v1','','','2014-01-30 19:53:25','2014-01-30 19:53:25','',129,'http://error418.no-ip.info/mywiki/?p=400',0,'revision','',0),(401,3,'2014-01-30 19:53:40','2014-01-30 19:53:40','<h2>using a java installer</h2>\r\n<h3>install the oracle 8 installer</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo add-apt-repository ppa:webupd8team/java\r\nsudo apt-get update\r\nsudo apt-get install oracle-java8-installer</pre>\r\nNote that there is a similar package for java 7.\r\n<h3>switch between versions</h3>\r\nTo alternate between versions, use one of the following:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo update-java-alternatives -s java-7-oracle\r\nsudo update-java-alternatives -s java-8-oracle</pre>\r\n<h3>update your environment</h3>\r\nRun the following commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo apt-get install oracle-java8-set-default</pre>\r\n<a href=\"http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html\">source</a>\r\n<h2>Update java and javac</h2>\r\nI don\'t know why, but I ran into troubles in one of my computers because of a mismatch between java and javac.\r\n\r\nIf you have the same issue, first try those commands:\r\n<pre class=\"prettyprint lang-sh\">\r\nsudo update-alternatives --config java\r\nsudo update-alternatives --config javac</pre>\r\nIf one of the versions that is listed in the java is not in the javac (probably an openjdk), ensure that you have both the jre AND the jdk installed. If not, try <code>sudo apt-get install openjdk-7-jdk</code> or a similar package.\r\n\r\nIf by any chance update-alternatives tells you that no java(c) is found, you will need to add them manually:\r\n<pre class=\"prettyprint lang-text\">\r\n# add the path to javac executable and a number from 1 to ..\r\n# the number will be the index in the list of alternatives\r\nsudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \\\\\r\n   /opt/java/jdk1.7.0_40/bin/javac 1\r\n\r\n# idem for java. If two versions, simply change the number from 1 to 2\r\nsudo update-alternatives --install \"/usr/bin/java\" \"java\" \\\\\r\n   /opt/java/jdk1.7.0_40/bin/java 1\r\n\r\n# if you made a mistake, remove an entry like this:\r\nsudo update-alternatives --remove \"java\" /opt/java/jdk1.7.0_40/bin/java</pre>','java setup','','inherit','closed','open','','129-revision-v1','','','2014-01-30 19:53:40','2014-01-30 19:53:40','',129,'http://error418.no-ip.info/mywiki/?p=401',0,'revision','',0),(402,3,'2014-01-31 07:48:34','2014-01-31 07:48:34','<h2>Fix **: no such file or directory</h2>\r\nIf you try to run some 32bits executables, you are familiar with this message. For me, it happened while trying to run adb from the terminal. \r\nIt seems like many people have reported this issue on Ubuntu 12.04, 12.10 and 13.04 and there is a simpler solution than setting up a whole 32bits environment.\r\n\r\nOpen the terminal and install the following packages:\r\n<pre class=\"prettyprint lang-text\">\r\napt-get install libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1</pre>\r\n\r\n<h2>Install a dark theme</h2>\r\nThe nicer I found is delorean-dark, which you can setup with:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:noobslab/themes\r\nsudo apt-get update\r\nsudo apt-get install delorean-dark</pre>\r\n\r\nNow, open <code>gnome-tweak-tools</code> and select your new theme from the dropdown.','What to do after installing ubuntu 13.10 gnome','','publish','closed','open','','what-to-do-after-installing-ubuntu-13-10-gnome','','','2014-01-31 07:48:34','2014-01-31 07:48:34','',0,'http://error418.no-ip.info/mywiki/?p=402',0,'post','',0),(403,3,'2014-01-31 07:48:34','2014-01-31 07:48:34','<h2>Fix **: no such file or directory</h2>\r\nIf you try to run some 32bits executables, you are familiar with this message. For me, it happened while trying to run adb from the terminal. \r\nIt seems like many people have reported this issue on Ubuntu 12.04, 12.10 and 13.04 and there is a simpler solution than setting up a whole 32bits environment.\r\n\r\nOpen the terminal and install the following packages:\r\n<pre class=\"prettyprint lang-text\">\r\napt-get install libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1</pre>\r\n\r\n<h2>Install a dark theme</h2>\r\nThe nicer I found is delorean-dark, which you can setup with:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:noobslab/themes\r\nsudo apt-get update\r\nsudo apt-get install delorean-dark</pre>\r\n\r\nNow, open <code>gnome-tweak-tools</code> and select your new theme from the dropdown.','What to do after installing ubuntu 13.10 gnome','','inherit','closed','open','','402-revision-v1','','','2014-01-31 07:48:34','2014-01-31 07:48:34','',402,'http://error418.no-ip.info/mywiki/?p=403',0,'revision','',0),(410,3,'2014-02-03 17:58:49','2014-02-03 17:58:49','<h2>Prerequisites</h2>\r\n<ul>\r\n	<li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display)</li>\r\n	<li>a working version of ubuntu 13.10</li>\r\n	<li>the following programs installed: git, make, autotools</li>\r\n	<li>you know what you do with a terminal...</li>\r\n</ul>\r\n<h2>Latest nvidia drivers</h2>\r\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:xorg-edgers/ppa \r\nsudo apt-get update \r\nsudo apt-get install nvidia-331</pre>\r\n<h2>Bumblebee</h2>\r\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\r\n<h3>Installation</h3>\r\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\r\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms</pre>\r\n<h3>Configuration</h3>\r\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\r\n<pre class=\"prettyprint lang-text\">\r\nKeepUnusedXServer=true # default to false\r\nDriver=nvidia # default to \"\"\r\n...\r\n[driver-nvidia]\r\nKernelDriver=nvidia-331 # must match the one installed in step 1\r\nPMMethod=none  # default to auto \r\n...</pre>\r\nNow, it is always recommended to reboot...\r\n<h3>Test</h3>\r\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\r\n<pre class=\"prettyprint lang-text\">\r\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.699858] [INFO]Configured driver: nvidia\r\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\r\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\r\n[ 2313.702528] [DEBUG]Active configuration:\r\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.702597] [DEBUG] X display: :8\r\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 2313.702833] [DEBUG] GID name: bumblebee\r\n[ 2313.702872] [DEBUG] Power method: none\r\n[ 2313.702902] [DEBUG] Stop X on exit: 0\r\n[ 2313.702936] [DEBUG] Driver: nvidia\r\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\r\n[ 2313.703008] [DEBUG] Card shutdown state: 1\r\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\r\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.705491] [DEBUG]Configuration test passed.\r\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\r\n[ 2313.706383] [INFO]Initialization completed - now handling client requests</pre>\r\n<h2>Intel-virtual-output</h2>\r\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \r\nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo apt-get install xorg-dev git\r\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \r\ncd xf86-video-intel \r\n./autogen.sh \r\ncd tools\r\nmake \r\nsudo cp intel-virtual-output /usr/bin/ \r\nsudo chmod +x /usr/bin/intel-virtual-output</pre>\r\n<h2>Xorg configuration</h2>\r\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\r\n\r\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier  \"Layout0\"\r\n    Option      \"AutoAddDevices\" \"false\"\r\n    Option      \"AutoAddGPU\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier  \"DiscreteNvidia\"\r\n    Driver      \"nvidia\"\r\n    VendorName  \"NVIDIA Corporation\"\r\n    BusID       \"PCI:01:00:0\" # <== here is the added line</pre>\r\nNote that the busid can be found with <code>lspci | grep -i vga</code>. The id is the first field in the line containing the word \"nvidia\". Just be sure to change the dot by a colon.\r\n\r\nIf this does not work (which was my case), take a look at the section <a href=\"#errorsdebug\">debug</a> ^^.\r\n<h2>Use your external monitors</h2>\r\n<h3>Turn it on</h3>\r\nAfter a reboot (just to be sure) and with a monitor connected either with VGA or DisplayPort, try the following:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo modprobe bbswitch # load the module in the kernel\r\nsudo start bumblebeed  # only if not already running\r\noptirun true\r\nintel-virtual-output</pre>\r\nNow, your monitor should wake up. To change its configuration, simply use the displays tools in the settings. It should work out of the box.\r\n<h3>Turn it off</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n# kill smoothly the second xorg server\r\n> ps -ef | grep -i xorg\r\n...\r\nroot  3865  3851  2 18:42 ?  00:00:10 Xorg :8 -config /etc/bumblebee/xorg.conf.nvidia ...\r\n> sudo kill -15 3865\r\n\r\n# stop bumblebeed\r\n> sudo stop bumblebeed\r\n\r\n# then, turn off your nvidia card\r\n> sudo rmmod nvidia\r\n> sudo tee /proc/acpi/bbswitch <<<OFF</pre>\r\n<h2>Errors, debug</h2>\r\n<ul>\r\n	<li>check that you monitor is actually connected. If not, the output of optirun will be \"no screen found\"</li>\r\n	<li>check that the bbswithc is actually on with\r\n<pre class=\"prettyprint lang-text\">\r\n    cat /proc/acpi/bbswitch \r\n    0000:01:00.0 ON  # should be ON!</pre>\r\n</li>\r\n	<li>check your logs (<code>dmesg</code> or <code>tail /var/log/syslog</code>) for any suspicious lines</li>\r\n	<li>try to launch intel-virtual-output like this: <code>optirun intel-virtual-output</code> instead of <code>optirun true; intel-virtual-ouptut</code> (which, in my case, does not work!)</li>\r\n</ul>\r\nIf none of those work, there is still a possibility (see below).\r\n<h3>Errors \"NVIDIA(0): Unable to get display device for DPI computation\"</h3>\r\nIn my case, nothing happened when I ran intel-virtual-ouptput, but the logs where clear and optirun did function properly. \r\nAfter parsing the logs carefully, I detected some strange lines:\r\n<pre class=\"prettyprint lang-text\">\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"glamoregl\" will not be loaded unless you\'ve specified it to be loaded elsewhere.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"xmir\" is not to be loaded by default. Skipping.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) Unresolved symbol: fbGetGCPrivateKey\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): Unable to get display device for DPI computation.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): UBB is incompatible with the Composite extension.  Disabling</pre>\r\nI finally made it work by changing totally the <strong>/etc/bumblebee/xorg.conf.nvidia</strong> file. \r\nHere is now how it looks like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier     \"Layout0\"\r\n    Screen         \"Screen0\"\r\n    Option         \"AutoAddDevices\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier     \"Device0\"\r\n    Driver         \"nvidia\"\r\n    VendorName     \"NVIDIA Corporation\"\r\n    BusID          \"PCI:1:0:0\"\r\n    #Option         \"ConnectedMonitor\" \"DFP\"\r\n    Option         \"DPI\" \"96 x 96\" \r\nEndSection\r\n\r\nSection \"Screen\"\r\n    Identifier     \"Screen0\"\r\n    Device         \"Device0\"\r\n    DefaultDepth    24\r\n    SubSection     \"Display\"\r\n    Depth          24\r\nEnd</pre>\r\nAnd tadaaahhhhh, my monitors worked perfectly. \r\n\r\nIf I run <code>xrandr</code>, I now have a large number of virtual outputs, and I can connect with both DisplayPort or VGA!\r\n<pre class=\"prettyprint lang-text\">\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 32767 x 32767\r\nLVDS1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 connected 1920x1080+0+0 0mm x 0mm\r\n   VIRTUAL1.735-1920x1200   60.0  \r\n   VIRTUAL1.736-1920x1080   60.0* \r\n   1680x1050      60.0  \r\n   VIRTUAL1.738-1600x1200   60.0  \r\n   1280x1024      60.0  \r\n   1280x960       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3  \r\n   640x480        59.9  \r\nVIRTUAL2 disconnected\r\nVIRTUAL3 disconnected\r\nVIRTUAL4 disconnected\r\nVIRTUAL5 disconnected\r\nVIRTUAL6 disconnected\r\nVIRTUAL7 disconnected\r\nVIRTUAL8 disconnected</pre>\r\n<h2>Automate the process</h2>\r\n<strong>Warning</strong>: this script was written a midnight and can be buggy. It will not break your system (at least, a reboot will always do its job), but would need a lot of improvements. Take it as a good starting point, nothing else...\r\n<pre class=\"prettyprint\">\r\n#!/bin/sh\r\nset -x\r\n\r\ncase \"$1\" in \r\n    \"start\")\r\n        # enable bbswitch\r\n        [ $( lsmod | grep bbswitch) -eq 1 ] && sudo modprobe bbswitch\r\n        echo \"ON\" | sudo tee /proc/acpi/bbswitch\r\n        # start the bumblebee daemon\r\n        pgrep bumblebeed\r\n        [ $? -eq 1 ] && sudo start bumblebeed\r\n        # launch the virtual output monitor\r\n        sleep 1\r\n        optirun intel-virtual-output\r\n        if [ $? -eq 0 ]; then\r\n            echo \"done\"\r\n            exit 0\r\n        else\r\n            echo \"Oops, an error occurred\"\r\n            tail -20 /var/log/syslog\r\n            exit 1\r\n        fi\r\n        ;;\r\n\r\n    \"stop\")\r\n        # find the second xorg server process id\r\n        pid=$( ps -ef | grep \"Xorg.*bumblebee\" | grep -v grep | awk \'{ print $2 }\' )\r\n        echo \"pid is $pid\"\r\n\r\n        # stop the xorg server\r\n        if [ -n \"$pid\" ]; then \r\n            sudo kill -15 $pid \r\n            ret=$?\r\n            echo \"second xorg server killed\"\r\n        else \r\n            echo \"error: second xorg server not running\"\r\n            ret=0\r\n        fi\r\n\r\n        # stop bumblebeed\r\n        sudo stop bumblebeed\r\n        # turn off nvidia card\r\n        sudo rmmod nvidia\r\n        echo \"OFF\" | sudo tee /proc/acpi/bbswitch\r\n\r\n        exit $ret\r\n        ;;\r\n\r\n    *)  echo \"usage $0 start | stop\";\r\n        exit 1\r\n        ;;\r\nesac</pre>','Thinkpad w530, linux 13.10 and optimus','','publish','closed','open','','thinkpad-w530-linux-13-10-and-optimus','','','2014-04-09 15:04:30','2014-04-09 15:04:30','',0,'http://error418.no-ip.info/mywiki/?p=410',0,'post','',0);
INSERT INTO `mk_posts` VALUES (411,3,'2014-02-03 17:53:16','2014-02-03 17:53:16','<h2>Prerequisites</h2>\r\n<ul>\r\n    <li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display) </li>\r\n    <li>a working version of ubuntu 13.10</li>\r\n    <li>the following programs installed: git, make, autotools</li>\r\n    <li>you know what you do with a terminal...</li>\r\n</ul>\r\n\r\n\r\n<h2>Latest nvidia drivers</h2>\r\n\r\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:xorg-edgers/ppa \r\nsudo apt-get update \r\nsudo apt-get install nvidia-331\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\r\n\r\n<h3>Installation</h3>\r\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\r\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n</pre>\r\n\r\n<h3>Configuration</h3>\r\n\r\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\r\n<pre class=\"prettyprint lang-text\">\r\nKeepUnusedXServer=true # default to false\r\nDriver=nvidia # default to \"\"\r\n\r\n[driver-nvidia]\r\nKernelDriver=nvidia-331 # must match the one installed in step 1\r\nPMMethod=none  # default to auto\r\n\r\n# add a library path\r\nLibraryPath=/usr/lib/nvidia-331:/usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-331/xorg,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\nXorgConfFile=/etc/bumblebee/xorg.conf.nvidia </pre>\r\n\r\nNow, it is always recommended to reboot...\r\n\r\n<h3>Test</h3>\r\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\r\n<pre class=\"prettyprint lang-text\">\r\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.699858] [INFO]Configured driver: nvidia\r\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\r\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\r\n[ 2313.702528] [DEBUG]Active configuration:\r\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.702597] [DEBUG] X display: :8\r\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 2313.702833] [DEBUG] GID name: bumblebee\r\n[ 2313.702872] [DEBUG] Power method: none\r\n[ 2313.702902] [DEBUG] Stop X on exit: 0\r\n[ 2313.702936] [DEBUG] Driver: nvidia\r\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\r\n[ 2313.703008] [DEBUG] Card shutdown state: 1\r\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\r\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.705491] [DEBUG]Configuration test passed.\r\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\r\n[ 2313.706383] [INFO]Initialization completed - now handling client requests </pre>\r\n\r\n\r\n<h2>Intel-virtual-output</h2>\r\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \r\nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo apt-get install xorg-dev git\r\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \r\ncd xf86-video-intel \r\n./autogen.sh \r\ncd tools\r\nmake \r\nsudo cp intel-virtual-output /usr/bin/ \r\nsudo chmod +x /usr/bin/intel-virtual-output\r\n</pre>\r\n\r\n<h2>Xorg configuration</h2>\r\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\r\n\r\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n<h2>Prerequisites</h2>\r\n<ul>\r\n    <li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display) </li>\r\n    <li>a working version of ubuntu 13.10</li>\r\n    <li>the following programs installed: git, make, autotools</li>\r\n    <li>you know what you do with a terminal...</li>\r\n</ul>\r\n\r\n\r\n<h2>Latest nvidia drivers</h2>\r\n\r\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:xorg-edgers/ppa \r\nsudo apt-get update \r\nsudo apt-get install nvidia-331\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\r\n\r\n<h3>Installation</h3>\r\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\r\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n</pre>\r\n\r\n<h3>Configuration</h3>\r\n\r\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\r\n<pre class=\"prettyprint lang-text\">\r\nKeepUnusedXServer=true # default to false\r\nDriver=nvidia # default to \"\"\r\n\r\n[driver-nvidia]\r\nKernelDriver=nvidia-331 # must match the one installed in step 1\r\nPMMethod=none  # default to auto\r\n\r\n# add a library path\r\nLibraryPath=/usr/lib/nvidia-331:/usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-331/xorg,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\nXorgConfFile=/etc/bumblebee/xorg.conf.nvidia </pre>\r\n\r\nNow, it is always recommended to reboot...\r\n\r\n<h3>Test</h3>\r\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\r\n<pre class=\"prettyprint lang-text\">\r\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.699858] [INFO]Configured driver: nvidia\r\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\r\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\r\n[ 2313.702528] [DEBUG]Active configuration:\r\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.702597] [DEBUG] X display: :8\r\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 2313.702833] [DEBUG] GID name: bumblebee\r\n[ 2313.702872] [DEBUG] Power method: none\r\n[ 2313.702902] [DEBUG] Stop X on exit: 0\r\n[ 2313.702936] [DEBUG] Driver: nvidia\r\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\r\n[ 2313.703008] [DEBUG] Card shutdown state: 1\r\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\r\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.705491] [DEBUG]Configuration test passed.\r\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\r\n[ 2313.706383] [INFO]Initialization completed - now handling client requests </pre>\r\n\r\n\r\n<h2>Intel-virtual-output</h2>\r\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \r\nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo apt-get install xorg-dev git\r\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \r\ncd xf86-video-intel \r\n./autogen.sh \r\ncd tools\r\nmake \r\nsudo cp intel-virtual-output /usr/bin/ \r\nsudo chmod +x /usr/bin/intel-virtual-output\r\n</pre>\r\n\r\n<h2>Xorg configuration</h2>\r\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\r\n\r\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\r\n\r\n<pre class=\"prettyprint lang-text\"></pre>\r\nSection \"ServerLayout\"\r\n    Identifier  \"Layout0\"\r\n    Option      \"AutoAddDevices\" \"false\"\r\n    Option      \"AutoAddGPU\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier  \"DiscreteNvidia\"\r\n    Driver      \"nvidia\"\r\n    VendorName  \"NVIDIA Corporation\"\r\n    BusID       \"PCI:01:00:0\" # <== here is the added line </pre>\r\n\r\n\r\nNote that the busid can be found with <code>lspci | grep -i vga</code>. The id is the first field in the line containing the word \"nvidia\". Just be sure to change the dot by a colon.\r\n\r\nIf this does not work (which was my case), take a look at the section <a href=\"#errors,-debug\">debug</a> ^^.\r\n\r\n<h2>Use your external monitors</h2>\r\n\r\n<h3>Turn it on</h3>\r\nAfter a reboot (just to be sure) and with a monitor connected either with VGA or DisplayPort, try the following:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo modprobe bbswitch # load the module in the kernel\r\nsudo start bumblebeed  # only if not already running\r\noptirun true\r\nintel-virtual-output</pre>\r\n\r\nNow, your monitor should wake up. To change its configuration, simply use the displays tools in the settings. It should work out of the box.\r\n\r\n<h3>Turn it off</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n# kill smoothly the second xorg server\r\nps -ef | grep -i xorg\r\n...\r\nroot      3865  3851  2 18:42 ?        00:00:10 Xorg :8 -config /etc/bumblebee/xorg.conf.nvidia -configdir /etc/bumblebee/xorg.conf.d -sharevts -nolisten tcp -noreset -verbose 3 -isolateDevice PCI:01:00:0 -modulepath /usr/lib/nvidia-331/xorg,/usr/lib/xorg/modules\r\n...\r\n\r\nsudo kill -15 3865\r\n\r\n# or, in a script, use:\r\npid=$( ps -ef | grep \"Xorg.*bumblebee\" | grep -v grep | awk \'{ print $2 }\' )\r\n[ -n \"$pid\" ] && sudo kill -15 $pid \r\n\r\n# then, turn off your nvidia card\r\nsudo rmmod nvidia\r\nsudo tee /proc/acpi/bbswitch <<<OFF </pre>\r\n\r\n\r\n<h2>Errors, debug</h2>\r\n\r\n<ul>\r\n    <li>check that you monitor is actually connected. If not, the output of optirun will be \"no screen found\"</li>\r\n    <li>check that the bbswithc is actually on with \r\n    <pre class=\"prettyprint lang-text\">\r\n    cat /proc/acpi/bbswitch \r\n    0000:01:00.0 ON  # should be ON!    </pre>\r\n    </li>\r\n    <li>check your logs (<code>dmesg</code> or <code>tail /var/log/syslog</code>) for any suspicious lines</li>\r\n    <li>try to launch intel-virtual-output like this: <code>optirun intel-virtual-output</code> instead of <code>optirun true; intel-virtual-ouptut</code> (which, in my case, does not work!)</li>\r\n</ul>\r\n\r\nIf none of those work, there is still a possibility (see below).\r\n\r\n<h3>Errors \"NVIDIA(0): Unable to get display device for DPI computation\" and \"UBB is incompatible\"</h3>\r\nIn my case, nothing happened when I ran intel-virtual-ouptput, but the logs where clear and optirun did function properly. \r\nAfter parsing the logs carefully, I detected some strange lines:\r\n<pre class=\"prettyprint lang-text\">\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"glamoregl\" will not be loaded unless you\'ve specified it to be loaded elsewhere.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"xmir\" is not to be loaded by default. Skipping.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) Unresolved symbol: fbGetGCPrivateKey\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): Unable to get display device for DPI computation.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): UBB is incompatible with the Composite extension.  Disabling</pre>\r\n\r\nI finally made it work by changing totally the <strong>/etc/bumblebee/xorg.conf.nvidia</strong> file. \r\nHere is now how it looks like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier     \"Layout0\"\r\n    Screen         \"Screen0\"\r\n    Option         \"AutoAddDevices\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier     \"Device0\"\r\n    Driver         \"nvidia\"\r\n    VendorName     \"NVIDIA Corporation\"\r\n    BusID          \"PCI:1:0:0\"\r\n    #Option         \"ConnectedMonitor\" \"DFP\"\r\n    Option         \"DPI\" \"96 x 96\" \r\nEndSection\r\n\r\nSection \"Screen\"\r\n    Identifier     \"Screen0\"\r\n    Device         \"Device0\"\r\n    DefaultDepth    24\r\n    SubSection     \"Display\"\r\n    Depth          24\r\nEnd</pre>\r\n\r\n\r\nAnd tadaaahhhhh, my monitors worked perfectly. \r\n\r\nIf I run xrandr, I now have a large number of virtual outputs, and I can connect with both DisplayPort or VGA!\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 32767 x 32767\r\nLVDS1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 connected 1920x1080+0+0 0mm x 0mm\r\n   VIRTUAL1.735-1920x1200   60.0  \r\n   VIRTUAL1.736-1920x1080   60.0* \r\n   1680x1050      60.0  \r\n   VIRTUAL1.738-1600x1200   60.0  \r\n   1280x1024      60.0  \r\n   1280x960       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3  \r\n   640x480        59.9  \r\nVIRTUAL2 disconnected\r\nVIRTUAL3 disconnected\r\nVIRTUAL4 disconnected\r\nVIRTUAL5 disconnected\r\nVIRTUAL6 disconnected\r\nVIRTUAL7 disconnected\r\nVIRTUAL8 disconnected</pre>\r\n','Thinkpad w530, linux 13.10 and optimus','','inherit','closed','open','','410-revision-v1','','','2014-02-03 17:53:16','2014-02-03 17:53:16','',410,'http://error418.no-ip.info/mywiki/?p=411',0,'revision','',0),(412,3,'2014-02-03 17:54:37','2014-02-03 17:54:37','<h2>Prerequisites</h2>\r\n<ul>\r\n    <li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display) </li>\r\n    <li>a working version of ubuntu 13.10</li>\r\n    <li>the following programs installed: git, make, autotools</li>\r\n    <li>you know what you do with a terminal...</li>\r\n</ul>\r\n\r\n\r\n<h2>Latest nvidia drivers</h2>\r\n\r\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:xorg-edgers/ppa \r\nsudo apt-get update \r\nsudo apt-get install nvidia-331\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\r\n\r\n<h3>Installation</h3>\r\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\r\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n</pre>\r\n\r\n<h3>Configuration</h3>\r\n\r\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\r\n<pre class=\"prettyprint lang-text\">\r\nKeepUnusedXServer=true # default to false\r\nDriver=nvidia # default to \"\"\r\n\r\n[driver-nvidia]\r\nKernelDriver=nvidia-331 # must match the one installed in step 1\r\nPMMethod=none  # default to auto\r\n\r\n# add a library path\r\nLibraryPath=/usr/lib/nvidia-331:/usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-331/xorg,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\nXorgConfFile=/etc/bumblebee/xorg.conf.nvidia </pre>\r\n\r\nNow, it is always recommended to reboot...\r\n\r\n<h3>Test</h3>\r\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\r\n<pre class=\"prettyprint lang-text\">\r\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.699858] [INFO]Configured driver: nvidia\r\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\r\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\r\n[ 2313.702528] [DEBUG]Active configuration:\r\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.702597] [DEBUG] X display: :8\r\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 2313.702833] [DEBUG] GID name: bumblebee\r\n[ 2313.702872] [DEBUG] Power method: none\r\n[ 2313.702902] [DEBUG] Stop X on exit: 0\r\n[ 2313.702936] [DEBUG] Driver: nvidia\r\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\r\n[ 2313.703008] [DEBUG] Card shutdown state: 1\r\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\r\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.705491] [DEBUG]Configuration test passed.\r\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\r\n[ 2313.706383] [INFO]Initialization completed - now handling client requests </pre>\r\n\r\n\r\n<h2>Intel-virtual-output</h2>\r\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \r\nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo apt-get install xorg-dev git\r\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \r\ncd xf86-video-intel \r\n./autogen.sh \r\ncd tools\r\nmake \r\nsudo cp intel-virtual-output /usr/bin/ \r\nsudo chmod +x /usr/bin/intel-virtual-output\r\n</pre>\r\n\r\n<h2>Xorg configuration</h2>\r\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\r\n\r\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n<h2>Prerequisites</h2>\r\n<ul>\r\n    <li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display) </li>\r\n    <li>a working version of ubuntu 13.10</li>\r\n    <li>the following programs installed: git, make, autotools</li>\r\n    <li>you know what you do with a terminal...</li>\r\n</ul>\r\n\r\n\r\n<h2>Latest nvidia drivers</h2>\r\n\r\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:xorg-edgers/ppa \r\nsudo apt-get update \r\nsudo apt-get install nvidia-331\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\r\n\r\n<h3>Installation</h3>\r\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\r\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n</pre>\r\n\r\n<h3>Configuration</h3>\r\n\r\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\r\n<pre class=\"prettyprint lang-text\">\r\nKeepUnusedXServer=true # default to false\r\nDriver=nvidia # default to \"\"\r\n\r\n[driver-nvidia]\r\nKernelDriver=nvidia-331 # must match the one installed in step 1\r\nPMMethod=none  # default to auto\r\n\r\n# add a library path\r\nLibraryPath=/usr/lib/nvidia-331:/usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n# comma-separated path of the directory containing nvidia_drv.so and the\r\n# default Xorg modules path\r\nXorgModulePath=/usr/lib/nvidia-331/xorg,/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\nXorgConfFile=/etc/bumblebee/xorg.conf.nvidia </pre>\r\n\r\nNow, it is always recommended to reboot...\r\n\r\n<h3>Test</h3>\r\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\r\n<pre class=\"prettyprint lang-text\">\r\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.699858] [INFO]Configured driver: nvidia\r\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\r\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\r\n[ 2313.702528] [DEBUG]Active configuration:\r\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.702597] [DEBUG] X display: :8\r\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 2313.702833] [DEBUG] GID name: bumblebee\r\n[ 2313.702872] [DEBUG] Power method: none\r\n[ 2313.702902] [DEBUG] Stop X on exit: 0\r\n[ 2313.702936] [DEBUG] Driver: nvidia\r\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\r\n[ 2313.703008] [DEBUG] Card shutdown state: 1\r\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\r\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.705491] [DEBUG]Configuration test passed.\r\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\r\n[ 2313.706383] [INFO]Initialization completed - now handling client requests </pre>\r\n\r\n\r\n<h2>Intel-virtual-output</h2>\r\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \r\nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo apt-get install xorg-dev git\r\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \r\ncd xf86-video-intel \r\n./autogen.sh \r\ncd tools\r\nmake \r\nsudo cp intel-virtual-output /usr/bin/ \r\nsudo chmod +x /usr/bin/intel-virtual-output\r\n</pre>\r\n\r\n<h2>Xorg configuration</h2>\r\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\r\n\r\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\r\n\r\n<pre class=\"prettyprint lang-text\"></pre>\r\nSection \"ServerLayout\"\r\n    Identifier  \"Layout0\"\r\n    Option      \"AutoAddDevices\" \"false\"\r\n    Option      \"AutoAddGPU\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier  \"DiscreteNvidia\"\r\n    Driver      \"nvidia\"\r\n    VendorName  \"NVIDIA Corporation\"\r\n    BusID       \"PCI:01:00:0\" # <== here is the added line </pre>\r\n\r\n\r\nNote that the busid can be found with <code>lspci | grep -i vga</code>. The id is the first field in the line containing the word \"nvidia\". Just be sure to change the dot by a colon.\r\n\r\nIf this does not work (which was my case), take a look at the section <a href=\"#errorsdebug\">debug</a> ^^.\r\n\r\n<h2>Use your external monitors</h2>\r\n\r\n<h3>Turn it on</h3>\r\nAfter a reboot (just to be sure) and with a monitor connected either with VGA or DisplayPort, try the following:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo modprobe bbswitch # load the module in the kernel\r\nsudo start bumblebeed  # only if not already running\r\noptirun true\r\nintel-virtual-output</pre>\r\n\r\nNow, your monitor should wake up. To change its configuration, simply use the displays tools in the settings. It should work out of the box.\r\n\r\n<h3>Turn it off</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n# kill smoothly the second xorg server\r\nps -ef | grep -i xorg\r\n...\r\nroot      3865  3851  2 18:42 ?        00:00:10 Xorg :8 -config /etc/bumblebee/xorg.conf.nvidia -configdir /etc/bumblebee/xorg.conf.d -sharevts -nolisten tcp -noreset -verbose 3 -isolateDevice PCI:01:00:0 -modulepath /usr/lib/nvidia-331/xorg,/usr/lib/xorg/modules\r\n...\r\n\r\nsudo kill -15 3865\r\n\r\n# or, in a script, use:\r\npid=$( ps -ef | grep \"Xorg.*bumblebee\" | grep -v grep | awk \'{ print $2 }\' )\r\n[ -n \"$pid\" ] && sudo kill -15 $pid \r\n\r\n# then, turn off your nvidia card\r\nsudo rmmod nvidia\r\nsudo tee /proc/acpi/bbswitch <<<OFF </pre>\r\n\r\n\r\n<h2>Errors, debug</h2>\r\n\r\n<ul>\r\n    <li>check that you monitor is actually connected. If not, the output of optirun will be \"no screen found\"</li>\r\n    <li>check that the bbswithc is actually on with \r\n    <pre class=\"prettyprint lang-text\">\r\n    cat /proc/acpi/bbswitch \r\n    0000:01:00.0 ON  # should be ON!    </pre>\r\n    </li>\r\n    <li>check your logs (<code>dmesg</code> or <code>tail /var/log/syslog</code>) for any suspicious lines</li>\r\n    <li>try to launch intel-virtual-output like this: <code>optirun intel-virtual-output</code> instead of <code>optirun true; intel-virtual-ouptut</code> (which, in my case, does not work!)</li>\r\n</ul>\r\n\r\nIf none of those work, there is still a possibility (see below).\r\n\r\n<h3>Errors \"NVIDIA(0): Unable to get display device for DPI computation\" and \"UBB is incompatible\"</h3>\r\nIn my case, nothing happened when I ran intel-virtual-ouptput, but the logs where clear and optirun did function properly. \r\nAfter parsing the logs carefully, I detected some strange lines:\r\n<pre class=\"prettyprint lang-text\">\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"glamoregl\" will not be loaded unless you\'ve specified it to be loaded elsewhere.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"xmir\" is not to be loaded by default. Skipping.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) Unresolved symbol: fbGetGCPrivateKey\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): Unable to get display device for DPI computation.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): UBB is incompatible with the Composite extension.  Disabling</pre>\r\n\r\nI finally made it work by changing totally the <strong>/etc/bumblebee/xorg.conf.nvidia</strong> file. \r\nHere is now how it looks like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier     \"Layout0\"\r\n    Screen         \"Screen0\"\r\n    Option         \"AutoAddDevices\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier     \"Device0\"\r\n    Driver         \"nvidia\"\r\n    VendorName     \"NVIDIA Corporation\"\r\n    BusID          \"PCI:1:0:0\"\r\n    #Option         \"ConnectedMonitor\" \"DFP\"\r\n    Option         \"DPI\" \"96 x 96\" \r\nEndSection\r\n\r\nSection \"Screen\"\r\n    Identifier     \"Screen0\"\r\n    Device         \"Device0\"\r\n    DefaultDepth    24\r\n    SubSection     \"Display\"\r\n    Depth          24\r\nEnd</pre>\r\n\r\n\r\nAnd tadaaahhhhh, my monitors worked perfectly. \r\n\r\nIf I run <code>xrandr</code>, I now have a large number of virtual outputs, and I can connect with both DisplayPort or VGA!\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 32767 x 32767\r\nLVDS1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 connected 1920x1080+0+0 0mm x 0mm\r\n   VIRTUAL1.735-1920x1200   60.0  \r\n   VIRTUAL1.736-1920x1080   60.0* \r\n   1680x1050      60.0  \r\n   VIRTUAL1.738-1600x1200   60.0  \r\n   1280x1024      60.0  \r\n   1280x960       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3  \r\n   640x480        59.9  \r\nVIRTUAL2 disconnected\r\nVIRTUAL3 disconnected\r\nVIRTUAL4 disconnected\r\nVIRTUAL5 disconnected\r\nVIRTUAL6 disconnected\r\nVIRTUAL7 disconnected\r\nVIRTUAL8 disconnected</pre>\r\n','Thinkpad w530, linux 13.10 and optimus','','inherit','closed','open','','410-revision-v1','','','2014-02-03 17:54:37','2014-02-03 17:54:37','',410,'http://error418.no-ip.info/mywiki/?p=412',0,'revision','',0),(413,3,'2014-02-03 18:42:33','2014-02-03 18:42:33','<h2>Prerequisites</h2>\n<ul>\n	<li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display)</li>\n	<li>a working version of ubuntu 13.10</li>\n	<li>the following programs installed: git, make, autotools</li>\n	<li>you know what you do with a terminal...</li>\n</ul>\n<h2>Latest nvidia drivers</h2>\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\n<pre class=\"prettyprint lang-text\">\nsudo add-apt-repository ppa:xorg-edgers/ppa \nsudo apt-get update \nsudo apt-get install nvidia-331</pre>\n<h2>Bumblebee</h2>\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\n<h3>Installation</h3>\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\n<pre class=\"prettyprint lang-text\">\nsudo add-apt-repository ppa:bumblebee/stable\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms</pre>\n<h3>Configuration</h3>\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\n<pre class=\"prettyprint lang-text\">\nKeepUnusedXServer=true # default to false\nDriver=nvidia # default to \"\"\n...\n[driver-nvidia]\nKernelDriver=nvidia-331 # must match the one installed in step 1\nPMMethod=none  # default to auto \n...</pre>\nNow, it is always recommended to reboot...\n<h3>Test</h3>\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\n<pre class=\"prettyprint lang-text\">\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\n[ 2313.699858] [INFO]Configured driver: nvidia\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\n[ 2313.702528] [DEBUG]Active configuration:\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\n[ 2313.702597] [DEBUG] X display: :8\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\n[ 2313.702833] [DEBUG] GID name: bumblebee\n[ 2313.702872] [DEBUG] Power method: none\n[ 2313.702902] [DEBUG] Stop X on exit: 0\n[ 2313.702936] [DEBUG] Driver: nvidia\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\n[ 2313.703008] [DEBUG] Card shutdown state: 1\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\n[ 2313.705491] [DEBUG]Configuration test passed.\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\n[ 2313.706383] [INFO]Initialization completed - now handling client requests</pre>\n<h2>Intel-virtual-output</h2>\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\n<pre class=\"prettyprint lang-text\">\nsudo apt-get install xorg-dev git\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \ncd xf86-video-intel \n./autogen.sh \ncd tools\nmake \nsudo cp intel-virtual-output /usr/bin/ \nsudo chmod +x /usr/bin/intel-virtual-output</pre>\n<h2>Xorg configuration</h2>\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\n\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\n<pre class=\"prettyprint lang-text\">\nSection \"ServerLayout\"\n    Identifier  \"Layout0\"\n    Option      \"AutoAddDevices\" \"false\"\n    Option      \"AutoAddGPU\" \"false\"\nEndSection\n\nSection \"Device\"\n    Identifier  \"DiscreteNvidia\"\n    Driver      \"nvidia\"\n    VendorName  \"NVIDIA Corporation\"\n    BusID       \"PCI:01:00:0\" # <== here is the added line</pre>\nNote that the busid can be found with <code>lspci | grep -i vga</code>. The id is the first field in the line containing the word \"nvidia\". Just be sure to change the dot by a colon.\n\nIf this does not work (which was my case), take a look at the section <a href=\"#errorsdebug\">debug</a> ^^.\n<h2>Use your external monitors</h2>\n<h3>Turn it on</h3>\nAfter a reboot (just to be sure) and with a monitor connected either with VGA or DisplayPort, try the following:\n<pre class=\"prettyprint lang-text\">\nsudo modprobe bbswitch # load the module in the kernel\nsudo start bumblebeed  # only if not already running\noptirun true\nintel-virtual-output</pre>\nNow, your monitor should wake up. To change its configuration, simply use the displays tools in the settings. It should work out of the box.\n<h3>Turn it off</h3>\n<pre class=\"prettyprint lang-text\">\n# kill smoothly the second xorg server\n> ps -ef | grep -i xorg\n...\nroot  3865  3851  2 18:42 ?  00:00:10 Xorg :8 -config /etc/bumblebee/xorg.conf.nvidia ...\n> sudo kill -15 3865\n\n# stop bumblebeed\n> sudo stop bumblebeed\n\n# then, turn off your nvidia card\n> sudo rmmod nvidia\n> sudo tee /proc/acpi/bbswitch <<<OFF</pre>\n<h2>Errors, debug</h2>\n<ul>\n	<li>check that you monitor is actually connected. If not, the output of optirun will be \"no screen found\"</li>\n	<li>check that the bbswithc is actually on with\n<pre class=\"prettyprint lang-text\">\n    cat /proc/acpi/bbswitch \n    0000:01:00.0 ON  # should be ON!</pre>\n</li>\n	<li>check your logs (<code>dmesg</code> or <code>tail /var/log/syslog</code>) for any suspicious lines</li>\n	<li>try to launch intel-virtual-output like this: <code>optirun intel-virtual-output</code> instead of <code>optirun true; intel-virtual-ouptut</code> (which, in my case, does not work!)</li>\n</ul>\nIf none of those work, there is still a possibility (see below).\n<h3>Errors \"NVIDIA(0): Unable to get display device for DPI computation\"</h3>\nIn my case, nothing happened when I ran intel-virtual-ouptput, but the logs where clear and optirun did function properly. \nAfter parsing the logs carefully, I detected some strange lines:\n<pre class=\"prettyprint lang-text\">\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"glamoregl\" will not be loaded unless you\'ve specified it to be loaded elsewhere.\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"xmir\" is not to be loaded by default. Skipping.\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) Unresolved symbol: fbGetGCPrivateKey\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): Unable to get display device for DPI computation.\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): UBB is incompatible with the Composite extension.  Disabling</pre>\nI finally made it work by changing totally the <strong>/etc/bumblebee/xorg.conf.nvidia</strong> file. \nHere is now how it looks like:\n<pre class=\"prettyprint lang-text\">\nSection \"ServerLayout\"\n    Identifier     \"Layout0\"\n    Screen         \"Screen0\"\n    Option         \"AutoAddDevices\" \"false\"\nEndSection\n\nSection \"Device\"\n    Identifier     \"Device0\"\n    Driver         \"nvidia\"\n    VendorName     \"NVIDIA Corporation\"\n    BusID          \"PCI:1:0:0\"\n    #Option         \"ConnectedMonitor\" \"DFP\"\n    Option         \"DPI\" \"96 x 96\" \nEndSection\n\nSection \"Screen\"\n    Identifier     \"Screen0\"\n    Device         \"Device0\"\n    DefaultDepth    24\n    SubSection     \"Display\"\n    Depth          24\nEnd</pre>\nAnd tadaaahhhhh, my monitors worked perfectly. \n\nIf I run <code>xrandr</code>, I now have a large number of virtual outputs, and I can connect with both DisplayPort or VGA!\n<pre class=\"prettyprint lang-text\">\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 32767 x 32767\nLVDS1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\n   1920x1080      60.0*+   59.9     50.0  \n   1680x1050      60.0     59.9  \n   1600x1024      60.2  \n   1400x1050      60.0  \n   1280x1024      60.0  \n   1440x900       59.9  \n   1280x960       60.0  \n   1360x768       59.8     60.0  \n   1152x864       60.0  \n   1024x768       60.0  \n   800x600        60.3     56.2  \n   640x480        59.9  \nVGA1 disconnected (normal left inverted right x axis y axis)\nVIRTUAL1 connected 1920x1080+0+0 0mm x 0mm\n   VIRTUAL1.735-1920x1200   60.0  \n   VIRTUAL1.736-1920x1080   60.0* \n   1680x1050      60.0  \n   VIRTUAL1.738-1600x1200   60.0  \n   1280x1024      60.0  \n   1280x960       60.0  \n   1024x768       60.0  \n   800x600        60.3  \n   640x480        59.9  \nVIRTUAL2 disconnected\nVIRTUAL3 disconnected\nVIRTUAL4 disconnected\nVIRTUAL5 disconnected\nVIRTUAL6 disconnected\nVIRTUAL7 disconnected\nVIRTUAL8 disconnected</pre>\n\n\n<h2>Automate the process</h2>\n<strong>Warning</strong>: this script was written a midnight and can be buggy. It will not break your system (at least, a reboot will always do its job), but would need a lot of improvements. Take it as a good starting point, nothing else...\n\n<pre class=\"\"','Thinkpad w530, linux 13.10 and optimus','','inherit','closed','open','','410-autosave-v1','','','2014-02-03 18:42:33','2014-02-03 18:42:33','',410,'http://error418.no-ip.info/mywiki/?p=413',0,'revision','',0),(414,3,'2014-02-03 18:11:38','2014-02-03 18:11:38','<h2>Prerequisites</h2>\r\n<ul>\r\n    <li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display) </li>\r\n    <li>a working version of ubuntu 13.10</li>\r\n    <li>the following programs installed: git, make, autotools</li>\r\n    <li>you know what you do with a terminal...</li>\r\n</ul>\r\n\r\n\r\n<h2>Latest nvidia drivers</h2>\r\n\r\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:xorg-edgers/ppa \r\nsudo apt-get update \r\nsudo apt-get install nvidia-331\r\n</pre>\r\n\r\n\r\n<h2>Bumblebee</h2>\r\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\r\n\r\n<h3>Installation</h3>\r\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\r\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms\r\n</pre>\r\n\r\n<h3>Configuration</h3>\r\n\r\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\r\n<pre class=\"prettyprint lang-text\">\r\nKeepUnusedXServer=true # default to false\r\nDriver=nvidia # default to \"\"\r\n...\r\n[driver-nvidia]\r\nKernelDriver=nvidia-331 # must match the one installed in step 1\r\nPMMethod=none  # default to auto \r\n...</pre>\r\n\r\nNow, it is always recommended to reboot...\r\n\r\n<h3>Test</h3>\r\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\r\n<pre class=\"prettyprint lang-text\">\r\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.699858] [INFO]Configured driver: nvidia\r\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\r\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\r\n[ 2313.702528] [DEBUG]Active configuration:\r\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.702597] [DEBUG] X display: :8\r\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 2313.702833] [DEBUG] GID name: bumblebee\r\n[ 2313.702872] [DEBUG] Power method: none\r\n[ 2313.702902] [DEBUG] Stop X on exit: 0\r\n[ 2313.702936] [DEBUG] Driver: nvidia\r\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\r\n[ 2313.703008] [DEBUG] Card shutdown state: 1\r\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\r\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.705491] [DEBUG]Configuration test passed.\r\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\r\n[ 2313.706383] [INFO]Initialization completed - now handling client requests </pre>\r\n\r\n\r\n<h2>Intel-virtual-output</h2>\r\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \r\nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo apt-get install xorg-dev git\r\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \r\ncd xf86-video-intel \r\n./autogen.sh \r\ncd tools\r\nmake \r\nsudo cp intel-virtual-output /usr/bin/ \r\nsudo chmod +x /usr/bin/intel-virtual-output\r\n</pre>\r\n\r\n<h2>Xorg configuration</h2>\r\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\r\n\r\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier  \"Layout0\"\r\n    Option      \"AutoAddDevices\" \"false\"\r\n    Option      \"AutoAddGPU\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier  \"DiscreteNvidia\"\r\n    Driver      \"nvidia\"\r\n    VendorName  \"NVIDIA Corporation\"\r\n    BusID       \"PCI:01:00:0\" # <== here is the added line </pre>\r\n\r\n\r\nNote that the busid can be found with <code>lspci | grep -i vga</code>. The id is the first field in the line containing the word \"nvidia\". Just be sure to change the dot by a colon.\r\n\r\nIf this does not work (which was my case), take a look at the section <a href=\"#errorsdebug\">debug</a> ^^.\r\n\r\n<h2>Use your external monitors</h2>\r\n\r\n<h3>Turn it on</h3>\r\nAfter a reboot (just to be sure) and with a monitor connected either with VGA or DisplayPort, try the following:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nsudo modprobe bbswitch # load the module in the kernel\r\nsudo start bumblebeed  # only if not already running\r\noptirun true\r\nintel-virtual-output</pre>\r\n\r\nNow, your monitor should wake up. To change its configuration, simply use the displays tools in the settings. It should work out of the box.\r\n\r\n<h3>Turn it off</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n# kill smoothly the second xorg server\r\n> ps -ef | grep -i xorg\r\n...\r\nroot  3865  3851  2 18:42 ?  00:00:10 Xorg :8 -config /etc/bumblebee/xorg.conf.nvidia ...\r\n...\r\n\r\n> sudo kill -15 3865\r\n\r\n# or, in a script, use:\r\npid=$( ps -ef | grep \"Xorg.*bumblebee\" | grep -v grep | awk \'{ print $2 }\' )\r\n[ -n \"$pid\" ] && sudo kill -15 $pid \r\n\r\n# stop bumblebeed\r\n> sudo stop bumblebeed\r\n\r\n# then, turn off your nvidia card\r\n> sudo rmmod nvidia\r\n> sudo tee /proc/acpi/bbswitch <<<OFF </pre>\r\n\r\n\r\n<h2>Errors, debug</h2>\r\n\r\n<ul>\r\n    <li>check that you monitor is actually connected. If not, the output of optirun will be \"no screen found\"</li>\r\n    <li>check that the bbswithc is actually on with \r\n    <pre class=\"prettyprint lang-text\">\r\n    cat /proc/acpi/bbswitch \r\n    0000:01:00.0 ON  # should be ON!    </pre>\r\n    </li>\r\n    <li>check your logs (<code>dmesg</code> or <code>tail /var/log/syslog</code>) for any suspicious lines</li>\r\n    <li>try to launch intel-virtual-output like this: <code>optirun intel-virtual-output</code> instead of <code>optirun true; intel-virtual-ouptut</code> (which, in my case, does not work!)</li>\r\n</ul>\r\n\r\nIf none of those work, there is still a possibility (see below).\r\n\r\n<h3>Errors \"NVIDIA(0): Unable to get display device for DPI computation\" and \"UBB is incompatible\"</h3>\r\nIn my case, nothing happened when I ran intel-virtual-ouptput, but the logs where clear and optirun did function properly. \r\nAfter parsing the logs carefully, I detected some strange lines:\r\n<pre class=\"prettyprint lang-text\">\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"glamoregl\" will not be loaded unless you\'ve specified it to be loaded elsewhere.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"xmir\" is not to be loaded by default. Skipping.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) Unresolved symbol: fbGetGCPrivateKey\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): Unable to get display device for DPI computation.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): UBB is incompatible with the Composite extension.  Disabling</pre>\r\n\r\nI finally made it work by changing totally the <strong>/etc/bumblebee/xorg.conf.nvidia</strong> file. \r\nHere is now how it looks like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier     \"Layout0\"\r\n    Screen         \"Screen0\"\r\n    Option         \"AutoAddDevices\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier     \"Device0\"\r\n    Driver         \"nvidia\"\r\n    VendorName     \"NVIDIA Corporation\"\r\n    BusID          \"PCI:1:0:0\"\r\n    #Option         \"ConnectedMonitor\" \"DFP\"\r\n    Option         \"DPI\" \"96 x 96\" \r\nEndSection\r\n\r\nSection \"Screen\"\r\n    Identifier     \"Screen0\"\r\n    Device         \"Device0\"\r\n    DefaultDepth    24\r\n    SubSection     \"Display\"\r\n    Depth          24\r\nEnd</pre>\r\n\r\n\r\nAnd tadaaahhhhh, my monitors worked perfectly. \r\n\r\nIf I run <code>xrandr</code>, I now have a large number of virtual outputs, and I can connect with both DisplayPort or VGA!\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 32767 x 32767\r\nLVDS1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 connected 1920x1080+0+0 0mm x 0mm\r\n   VIRTUAL1.735-1920x1200   60.0  \r\n   VIRTUAL1.736-1920x1080   60.0* \r\n   1680x1050      60.0  \r\n   VIRTUAL1.738-1600x1200   60.0  \r\n   1280x1024      60.0  \r\n   1280x960       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3  \r\n   640x480        59.9  \r\nVIRTUAL2 disconnected\r\nVIRTUAL3 disconnected\r\nVIRTUAL4 disconnected\r\nVIRTUAL5 disconnected\r\nVIRTUAL6 disconnected\r\nVIRTUAL7 disconnected\r\nVIRTUAL8 disconnected</pre>\r\n','Thinkpad w530, linux 13.10 and optimus','','inherit','closed','open','','410-revision-v1','','','2014-02-03 18:11:38','2014-02-03 18:11:38','',410,'http://error418.no-ip.info/mywiki/?p=414',0,'revision','',0),(415,3,'2014-02-03 18:12:18','2014-02-03 18:12:18','<h2>Prerequisites</h2>\r\n<ul>\r\n	<li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display)</li>\r\n	<li>a working version of ubuntu 13.10</li>\r\n	<li>the following programs installed: git, make, autotools</li>\r\n	<li>you know what you do with a terminal...</li>\r\n</ul>\r\n<h2>Latest nvidia drivers</h2>\r\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:xorg-edgers/ppa \r\nsudo apt-get update \r\nsudo apt-get install nvidia-331</pre>\r\n<h2>Bumblebee</h2>\r\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\r\n<h3>Installation</h3>\r\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\r\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms</pre>\r\n<h3>Configuration</h3>\r\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\r\n<pre class=\"prettyprint lang-text\">\r\nKeepUnusedXServer=true # default to false\r\nDriver=nvidia # default to \"\"\r\n...\r\n[driver-nvidia]\r\nKernelDriver=nvidia-331 # must match the one installed in step 1\r\nPMMethod=none  # default to auto \r\n...</pre>\r\nNow, it is always recommended to reboot...\r\n<h3>Test</h3>\r\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\r\n<pre class=\"prettyprint lang-text\">\r\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.699858] [INFO]Configured driver: nvidia\r\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\r\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\r\n[ 2313.702528] [DEBUG]Active configuration:\r\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.702597] [DEBUG] X display: :8\r\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 2313.702833] [DEBUG] GID name: bumblebee\r\n[ 2313.702872] [DEBUG] Power method: none\r\n[ 2313.702902] [DEBUG] Stop X on exit: 0\r\n[ 2313.702936] [DEBUG] Driver: nvidia\r\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\r\n[ 2313.703008] [DEBUG] Card shutdown state: 1\r\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\r\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.705491] [DEBUG]Configuration test passed.\r\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\r\n[ 2313.706383] [INFO]Initialization completed - now handling client requests</pre>\r\n<h2>Intel-virtual-output</h2>\r\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \r\nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo apt-get install xorg-dev git\r\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \r\ncd xf86-video-intel \r\n./autogen.sh \r\ncd tools\r\nmake \r\nsudo cp intel-virtual-output /usr/bin/ \r\nsudo chmod +x /usr/bin/intel-virtual-output</pre>\r\n<h2>Xorg configuration</h2>\r\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\r\n\r\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier  \"Layout0\"\r\n    Option      \"AutoAddDevices\" \"false\"\r\n    Option      \"AutoAddGPU\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier  \"DiscreteNvidia\"\r\n    Driver      \"nvidia\"\r\n    VendorName  \"NVIDIA Corporation\"\r\n    BusID       \"PCI:01:00:0\" # <== here is the added line</pre>\r\nNote that the busid can be found with <code>lspci | grep -i vga</code>. The id is the first field in the line containing the word \"nvidia\". Just be sure to change the dot by a colon.\r\n\r\nIf this does not work (which was my case), take a look at the section <a href=\"#errorsdebug\">debug</a> ^^.\r\n<h2>Use your external monitors</h2>\r\n<h3>Turn it on</h3>\r\nAfter a reboot (just to be sure) and with a monitor connected either with VGA or DisplayPort, try the following:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo modprobe bbswitch # load the module in the kernel\r\nsudo start bumblebeed  # only if not already running\r\noptirun true\r\nintel-virtual-output</pre>\r\nNow, your monitor should wake up. To change its configuration, simply use the displays tools in the settings. It should work out of the box.\r\n<h3>Turn it off</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n# kill smoothly the second xorg server\r\n> ps -ef | grep -i xorg\r\n...\r\nroot  3865  3851  2 18:42 ?  00:00:10 Xorg :8 -config /etc/bumblebee/xorg.conf.nvidia ...\r\n> sudo kill -15 3865\r\n\r\n# stop bumblebeed\r\n> sudo stop bumblebeed\r\n\r\n# then, turn off your nvidia card\r\n> sudo rmmod nvidia\r\n> sudo tee /proc/acpi/bbswitch <<<OFF</pre>\r\n<h2>Errors, debug</h2>\r\n<ul>\r\n	<li>check that you monitor is actually connected. If not, the output of optirun will be \"no screen found\"</li>\r\n	<li>check that the bbswithc is actually on with\r\n<pre class=\"prettyprint lang-text\">\r\n    cat /proc/acpi/bbswitch \r\n    0000:01:00.0 ON  # should be ON!</pre>\r\n</li>\r\n	<li>check your logs (<code>dmesg</code> or <code>tail /var/log/syslog</code>) for any suspicious lines</li>\r\n	<li>try to launch intel-virtual-output like this: <code>optirun intel-virtual-output</code> instead of <code>optirun true; intel-virtual-ouptut</code> (which, in my case, does not work!)</li>\r\n</ul>\r\nIf none of those work, there is still a possibility (see below).\r\n<h3>Errors \"NVIDIA(0): Unable to get display device for DPI computation\" and \"UBB is incompatible\"</h3>\r\nIn my case, nothing happened when I ran intel-virtual-ouptput, but the logs where clear and optirun did function properly. \r\nAfter parsing the logs carefully, I detected some strange lines:\r\n<pre class=\"prettyprint lang-text\">\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"glamoregl\" will not be loaded unless you\'ve specified it to be loaded elsewhere.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"xmir\" is not to be loaded by default. Skipping.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) Unresolved symbol: fbGetGCPrivateKey\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): Unable to get display device for DPI computation.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): UBB is incompatible with the Composite extension.  Disabling</pre>\r\nI finally made it work by changing totally the <strong>/etc/bumblebee/xorg.conf.nvidia</strong> file. \r\nHere is now how it looks like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier     \"Layout0\"\r\n    Screen         \"Screen0\"\r\n    Option         \"AutoAddDevices\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier     \"Device0\"\r\n    Driver         \"nvidia\"\r\n    VendorName     \"NVIDIA Corporation\"\r\n    BusID          \"PCI:1:0:0\"\r\n    #Option         \"ConnectedMonitor\" \"DFP\"\r\n    Option         \"DPI\" \"96 x 96\" \r\nEndSection\r\n\r\nSection \"Screen\"\r\n    Identifier     \"Screen0\"\r\n    Device         \"Device0\"\r\n    DefaultDepth    24\r\n    SubSection     \"Display\"\r\n    Depth          24\r\nEnd</pre>\r\nAnd tadaaahhhhh, my monitors worked perfectly. \r\n\r\nIf I run <code>xrandr</code>, I now have a large number of virtual outputs, and I can connect with both DisplayPort or VGA!\r\n<pre class=\"prettyprint lang-text\">\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 32767 x 32767\r\nLVDS1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 connected 1920x1080+0+0 0mm x 0mm\r\n   VIRTUAL1.735-1920x1200   60.0  \r\n   VIRTUAL1.736-1920x1080   60.0* \r\n   1680x1050      60.0  \r\n   VIRTUAL1.738-1600x1200   60.0  \r\n   1280x1024      60.0  \r\n   1280x960       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3  \r\n   640x480        59.9  \r\nVIRTUAL2 disconnected\r\nVIRTUAL3 disconnected\r\nVIRTUAL4 disconnected\r\nVIRTUAL5 disconnected\r\nVIRTUAL6 disconnected\r\nVIRTUAL7 disconnected\r\nVIRTUAL8 disconnected</pre>','Thinkpad w530, linux 13.10 and optimus','','inherit','closed','open','','410-revision-v1','','','2014-02-03 18:12:18','2014-02-03 18:12:18','',410,'http://error418.no-ip.info/mywiki/?p=415',0,'revision','',0),(416,3,'2014-02-03 18:40:29','2014-02-03 18:40:29','<h2>Prerequisites</h2>\r\n<ul>\r\n	<li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display)</li>\r\n	<li>a working version of ubuntu 13.10</li>\r\n	<li>the following programs installed: git, make, autotools</li>\r\n	<li>you know what you do with a terminal...</li>\r\n</ul>\r\n<h2>Latest nvidia drivers</h2>\r\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:xorg-edgers/ppa \r\nsudo apt-get update \r\nsudo apt-get install nvidia-331</pre>\r\n<h2>Bumblebee</h2>\r\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\r\n<h3>Installation</h3>\r\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\r\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms</pre>\r\n<h3>Configuration</h3>\r\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\r\n<pre class=\"prettyprint lang-text\">\r\nKeepUnusedXServer=true # default to false\r\nDriver=nvidia # default to \"\"\r\n...\r\n[driver-nvidia]\r\nKernelDriver=nvidia-331 # must match the one installed in step 1\r\nPMMethod=none  # default to auto \r\n...</pre>\r\nNow, it is always recommended to reboot...\r\n<h3>Test</h3>\r\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\r\n<pre class=\"prettyprint lang-text\">\r\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.699858] [INFO]Configured driver: nvidia\r\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\r\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\r\n[ 2313.702528] [DEBUG]Active configuration:\r\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.702597] [DEBUG] X display: :8\r\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 2313.702833] [DEBUG] GID name: bumblebee\r\n[ 2313.702872] [DEBUG] Power method: none\r\n[ 2313.702902] [DEBUG] Stop X on exit: 0\r\n[ 2313.702936] [DEBUG] Driver: nvidia\r\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\r\n[ 2313.703008] [DEBUG] Card shutdown state: 1\r\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\r\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.705491] [DEBUG]Configuration test passed.\r\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\r\n[ 2313.706383] [INFO]Initialization completed - now handling client requests</pre>\r\n<h2>Intel-virtual-output</h2>\r\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \r\nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo apt-get install xorg-dev git\r\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \r\ncd xf86-video-intel \r\n./autogen.sh \r\ncd tools\r\nmake \r\nsudo cp intel-virtual-output /usr/bin/ \r\nsudo chmod +x /usr/bin/intel-virtual-output</pre>\r\n<h2>Xorg configuration</h2>\r\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\r\n\r\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier  \"Layout0\"\r\n    Option      \"AutoAddDevices\" \"false\"\r\n    Option      \"AutoAddGPU\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier  \"DiscreteNvidia\"\r\n    Driver      \"nvidia\"\r\n    VendorName  \"NVIDIA Corporation\"\r\n    BusID       \"PCI:01:00:0\" # <== here is the added line</pre>\r\nNote that the busid can be found with <code>lspci | grep -i vga</code>. The id is the first field in the line containing the word \"nvidia\". Just be sure to change the dot by a colon.\r\n\r\nIf this does not work (which was my case), take a look at the section <a href=\"#errorsdebug\">debug</a> ^^.\r\n<h2>Use your external monitors</h2>\r\n<h3>Turn it on</h3>\r\nAfter a reboot (just to be sure) and with a monitor connected either with VGA or DisplayPort, try the following:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo modprobe bbswitch # load the module in the kernel\r\nsudo start bumblebeed  # only if not already running\r\noptirun true\r\nintel-virtual-output</pre>\r\nNow, your monitor should wake up. To change its configuration, simply use the displays tools in the settings. It should work out of the box.\r\n<h3>Turn it off</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n# kill smoothly the second xorg server\r\n> ps -ef | grep -i xorg\r\n...\r\nroot  3865  3851  2 18:42 ?  00:00:10 Xorg :8 -config /etc/bumblebee/xorg.conf.nvidia ...\r\n> sudo kill -15 3865\r\n\r\n# stop bumblebeed\r\n> sudo stop bumblebeed\r\n\r\n# then, turn off your nvidia card\r\n> sudo rmmod nvidia\r\n> sudo tee /proc/acpi/bbswitch <<<OFF</pre>\r\n<h2>Errors, debug</h2>\r\n<ul>\r\n	<li>check that you monitor is actually connected. If not, the output of optirun will be \"no screen found\"</li>\r\n	<li>check that the bbswithc is actually on with\r\n<pre class=\"prettyprint lang-text\">\r\n    cat /proc/acpi/bbswitch \r\n    0000:01:00.0 ON  # should be ON!</pre>\r\n</li>\r\n	<li>check your logs (<code>dmesg</code> or <code>tail /var/log/syslog</code>) for any suspicious lines</li>\r\n	<li>try to launch intel-virtual-output like this: <code>optirun intel-virtual-output</code> instead of <code>optirun true; intel-virtual-ouptut</code> (which, in my case, does not work!)</li>\r\n</ul>\r\nIf none of those work, there is still a possibility (see below).\r\n<h3>Errors \"NVIDIA(0): Unable to get display device for DPI computation\"</h3>\r\nIn my case, nothing happened when I ran intel-virtual-ouptput, but the logs where clear and optirun did function properly. \r\nAfter parsing the logs carefully, I detected some strange lines:\r\n<pre class=\"prettyprint lang-text\">\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"glamoregl\" will not be loaded unless you\'ve specified it to be loaded elsewhere.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"xmir\" is not to be loaded by default. Skipping.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) Unresolved symbol: fbGetGCPrivateKey\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): Unable to get display device for DPI computation.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): UBB is incompatible with the Composite extension.  Disabling</pre>\r\nI finally made it work by changing totally the <strong>/etc/bumblebee/xorg.conf.nvidia</strong> file. \r\nHere is now how it looks like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier     \"Layout0\"\r\n    Screen         \"Screen0\"\r\n    Option         \"AutoAddDevices\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier     \"Device0\"\r\n    Driver         \"nvidia\"\r\n    VendorName     \"NVIDIA Corporation\"\r\n    BusID          \"PCI:1:0:0\"\r\n    #Option         \"ConnectedMonitor\" \"DFP\"\r\n    Option         \"DPI\" \"96 x 96\" \r\nEndSection\r\n\r\nSection \"Screen\"\r\n    Identifier     \"Screen0\"\r\n    Device         \"Device0\"\r\n    DefaultDepth    24\r\n    SubSection     \"Display\"\r\n    Depth          24\r\nEnd</pre>\r\nAnd tadaaahhhhh, my monitors worked perfectly. \r\n\r\nIf I run <code>xrandr</code>, I now have a large number of virtual outputs, and I can connect with both DisplayPort or VGA!\r\n<pre class=\"prettyprint lang-text\">\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 32767 x 32767\r\nLVDS1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 connected 1920x1080+0+0 0mm x 0mm\r\n   VIRTUAL1.735-1920x1200   60.0  \r\n   VIRTUAL1.736-1920x1080   60.0* \r\n   1680x1050      60.0  \r\n   VIRTUAL1.738-1600x1200   60.0  \r\n   1280x1024      60.0  \r\n   1280x960       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3  \r\n   640x480        59.9  \r\nVIRTUAL2 disconnected\r\nVIRTUAL3 disconnected\r\nVIRTUAL4 disconnected\r\nVIRTUAL5 disconnected\r\nVIRTUAL6 disconnected\r\nVIRTUAL7 disconnected\r\nVIRTUAL8 disconnected</pre>','Thinkpad w530, linux 13.10 and optimus','','inherit','closed','open','','410-revision-v1','','','2014-02-03 18:40:29','2014-02-03 18:40:29','',410,'http://error418.no-ip.info/mywiki/?p=416',0,'revision','',0),(417,3,'2014-02-03 18:42:55','2014-02-03 18:42:55','<h2>Prerequisites</h2>\r\n<ul>\r\n	<li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display)</li>\r\n	<li>a working version of ubuntu 13.10</li>\r\n	<li>the following programs installed: git, make, autotools</li>\r\n	<li>you know what you do with a terminal...</li>\r\n</ul>\r\n<h2>Latest nvidia drivers</h2>\r\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:xorg-edgers/ppa \r\nsudo apt-get update \r\nsudo apt-get install nvidia-331</pre>\r\n<h2>Bumblebee</h2>\r\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\r\n<h3>Installation</h3>\r\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\r\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms</pre>\r\n<h3>Configuration</h3>\r\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\r\n<pre class=\"prettyprint lang-text\">\r\nKeepUnusedXServer=true # default to false\r\nDriver=nvidia # default to \"\"\r\n...\r\n[driver-nvidia]\r\nKernelDriver=nvidia-331 # must match the one installed in step 1\r\nPMMethod=none  # default to auto \r\n...</pre>\r\nNow, it is always recommended to reboot...\r\n<h3>Test</h3>\r\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\r\n<pre class=\"prettyprint lang-text\">\r\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.699858] [INFO]Configured driver: nvidia\r\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\r\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\r\n[ 2313.702528] [DEBUG]Active configuration:\r\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.702597] [DEBUG] X display: :8\r\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 2313.702833] [DEBUG] GID name: bumblebee\r\n[ 2313.702872] [DEBUG] Power method: none\r\n[ 2313.702902] [DEBUG] Stop X on exit: 0\r\n[ 2313.702936] [DEBUG] Driver: nvidia\r\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\r\n[ 2313.703008] [DEBUG] Card shutdown state: 1\r\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\r\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.705491] [DEBUG]Configuration test passed.\r\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\r\n[ 2313.706383] [INFO]Initialization completed - now handling client requests</pre>\r\n<h2>Intel-virtual-output</h2>\r\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \r\nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo apt-get install xorg-dev git\r\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \r\ncd xf86-video-intel \r\n./autogen.sh \r\ncd tools\r\nmake \r\nsudo cp intel-virtual-output /usr/bin/ \r\nsudo chmod +x /usr/bin/intel-virtual-output</pre>\r\n<h2>Xorg configuration</h2>\r\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\r\n\r\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier  \"Layout0\"\r\n    Option      \"AutoAddDevices\" \"false\"\r\n    Option      \"AutoAddGPU\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier  \"DiscreteNvidia\"\r\n    Driver      \"nvidia\"\r\n    VendorName  \"NVIDIA Corporation\"\r\n    BusID       \"PCI:01:00:0\" # <== here is the added line</pre>\r\nNote that the busid can be found with <code>lspci | grep -i vga</code>. The id is the first field in the line containing the word \"nvidia\". Just be sure to change the dot by a colon.\r\n\r\nIf this does not work (which was my case), take a look at the section <a href=\"#errorsdebug\">debug</a> ^^.\r\n<h2>Use your external monitors</h2>\r\n<h3>Turn it on</h3>\r\nAfter a reboot (just to be sure) and with a monitor connected either with VGA or DisplayPort, try the following:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo modprobe bbswitch # load the module in the kernel\r\nsudo start bumblebeed  # only if not already running\r\noptirun true\r\nintel-virtual-output</pre>\r\nNow, your monitor should wake up. To change its configuration, simply use the displays tools in the settings. It should work out of the box.\r\n<h3>Turn it off</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n# kill smoothly the second xorg server\r\n> ps -ef | grep -i xorg\r\n...\r\nroot  3865  3851  2 18:42 ?  00:00:10 Xorg :8 -config /etc/bumblebee/xorg.conf.nvidia ...\r\n> sudo kill -15 3865\r\n\r\n# stop bumblebeed\r\n> sudo stop bumblebeed\r\n\r\n# then, turn off your nvidia card\r\n> sudo rmmod nvidia\r\n> sudo tee /proc/acpi/bbswitch <<<OFF</pre>\r\n<h2>Errors, debug</h2>\r\n<ul>\r\n	<li>check that you monitor is actually connected. If not, the output of optirun will be \"no screen found\"</li>\r\n	<li>check that the bbswithc is actually on with\r\n<pre class=\"prettyprint lang-text\">\r\n    cat /proc/acpi/bbswitch \r\n    0000:01:00.0 ON  # should be ON!</pre>\r\n</li>\r\n	<li>check your logs (<code>dmesg</code> or <code>tail /var/log/syslog</code>) for any suspicious lines</li>\r\n	<li>try to launch intel-virtual-output like this: <code>optirun intel-virtual-output</code> instead of <code>optirun true; intel-virtual-ouptut</code> (which, in my case, does not work!)</li>\r\n</ul>\r\nIf none of those work, there is still a possibility (see below).\r\n<h3>Errors \"NVIDIA(0): Unable to get display device for DPI computation\"</h3>\r\nIn my case, nothing happened when I ran intel-virtual-ouptput, but the logs where clear and optirun did function properly. \r\nAfter parsing the logs carefully, I detected some strange lines:\r\n<pre class=\"prettyprint lang-text\">\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"glamoregl\" will not be loaded unless you\'ve specified it to be loaded elsewhere.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"xmir\" is not to be loaded by default. Skipping.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) Unresolved symbol: fbGetGCPrivateKey\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): Unable to get display device for DPI computation.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): UBB is incompatible with the Composite extension.  Disabling</pre>\r\nI finally made it work by changing totally the <strong>/etc/bumblebee/xorg.conf.nvidia</strong> file. \r\nHere is now how it looks like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier     \"Layout0\"\r\n    Screen         \"Screen0\"\r\n    Option         \"AutoAddDevices\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier     \"Device0\"\r\n    Driver         \"nvidia\"\r\n    VendorName     \"NVIDIA Corporation\"\r\n    BusID          \"PCI:1:0:0\"\r\n    #Option         \"ConnectedMonitor\" \"DFP\"\r\n    Option         \"DPI\" \"96 x 96\" \r\nEndSection\r\n\r\nSection \"Screen\"\r\n    Identifier     \"Screen0\"\r\n    Device         \"Device0\"\r\n    DefaultDepth    24\r\n    SubSection     \"Display\"\r\n    Depth          24\r\nEnd</pre>\r\nAnd tadaaahhhhh, my monitors worked perfectly. \r\n\r\nIf I run <code>xrandr</code>, I now have a large number of virtual outputs, and I can connect with both DisplayPort or VGA!\r\n<pre class=\"prettyprint lang-text\">\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 32767 x 32767\r\nLVDS1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 connected 1920x1080+0+0 0mm x 0mm\r\n   VIRTUAL1.735-1920x1200   60.0  \r\n   VIRTUAL1.736-1920x1080   60.0* \r\n   1680x1050      60.0  \r\n   VIRTUAL1.738-1600x1200   60.0  \r\n   1280x1024      60.0  \r\n   1280x960       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3  \r\n   640x480        59.9  \r\nVIRTUAL2 disconnected\r\nVIRTUAL3 disconnected\r\nVIRTUAL4 disconnected\r\nVIRTUAL5 disconnected\r\nVIRTUAL6 disconnected\r\nVIRTUAL7 disconnected\r\nVIRTUAL8 disconnected</pre>\r\n\r\n\r\n<h2>Automate the process</h2>\r\n<strong>Warning</strong>: this script was written a midnight and can be buggy. It will not break your system (at least, a reboot will always do its job), but would need a lot of improvements. Take it as a good starting point, nothing else...\r\n\r\n<pre class=\"prettyprint\">\r\n#!/bin/sh\r\nset -x\r\n\r\ncase \"$1\" in \r\n    \"start\")\r\n        # enable bbswitch\r\n        [ $( lsmod | grep bbswitch) -eq 1 ] && sudo modprobe bbswitch\r\n        echo \"ON\" | sudo tee /proc/acpi/bbswitch\r\n        # start the bumblebee daemon\r\n        pgrep bumblebeed\r\n        [ $? -eq 1 ] && sudo start bumblebeed\r\n        # launch the virtual output monitor\r\n        sleep 1\r\n        optirun intel-virtual-output\r\n        if [ $? -eq 0 ]; then\r\n            echo \"done\"\r\n            exit 0\r\n        else\r\n            echo \"Oops, an error occurred\"\r\n            tail -20 /var/log/syslog\r\n            exit 1\r\n        fi\r\n        ;;\r\n\r\n    \"stop\")\r\n        # find the second xorg server process id\r\n        pid=$( ps -ef | grep \"Xorg.*bumblebee\" | grep -v grep | awk \'{ print $2 }\' )\r\n        echo \"pid is $pid\"\r\n\r\n        # stop the xorg server\r\n        if [ -n \"$pid\" ]; then \r\n            sudo kill -15 $pid \r\n            ret=$?\r\n            echo \"second xorg server killed\"\r\n        else \r\n            echo \"error: second xorg server not running\"\r\n            ret=0\r\n        fi\r\n\r\n        # stop bumblebeed\r\n        sudo stop bumblebeed\r\n        # turn off nvidia card\r\n        sudo rmmod nvidia\r\n        echo \"OFF\" | sudo tee /proc/acpi/bbswitch\r\n\r\n        exit $ret\r\n        ;;\r\n\r\n    *)  echo \"usage $0 start | stop\";\r\n        exit 1\r\n        ;;\r\nesac\r\n</pre>','Thinkpad w530, linux 13.10 and optimus','','inherit','closed','open','','410-revision-v1','','','2014-02-03 18:42:55','2014-02-03 18:42:55','',410,'http://error418.no-ip.info/mywiki/?p=417',0,'revision','',0),(418,3,'2014-02-03 18:43:22','2014-02-03 18:43:22','<h2>Prerequisites</h2>\r\n<ul>\r\n	<li>be sure that your BIOS is configured for NVIDIA optimus (BIOS &gt; config &gt; display)</li>\r\n	<li>a working version of ubuntu 13.10</li>\r\n	<li>the following programs installed: git, make, autotools</li>\r\n	<li>you know what you do with a terminal...</li>\r\n</ul>\r\n<h2>Latest nvidia drivers</h2>\r\nRight know, the latest one is nvidia-311, but to be sure use <code>sudo apt-cache search nvidia-3</code> and use the highest number.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:xorg-edgers/ppa \r\nsudo apt-get update \r\nsudo apt-get install nvidia-331</pre>\r\n<h2>Bumblebee</h2>\r\nFor those who don\'t know, \"<i>Bumblebee daemon is a rewrite of the original Bumblebee service, providing an elegant and stable means of managing Optimus hybrid graphics chipsets. </i>\" (<a href=\"https://github.com/Bumblebee-Project/Bumblebee\">project main page</a>).\r\n<h3>Installation</h3>\r\nNote: for bumblebee to work, you need either <strong>virtualGL</strong> or <strong>primus</strong> installed. The former is best suited for ubuntu 13.04, the latter is the one I use on ubuntu 13.10.\r\nIt is normally installed out of the box, but if you don\'t have it (<code>dpkg -i | grep primus</code>), install it as well.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo add-apt-repository ppa:bumblebee/stable\r\nsudo apt-get install bumblebee bumblebee-nvidia bbswitch-dkms</pre>\r\n<h3>Configuration</h3>\r\nEdit the file <code>/etc/bumblebee/bumblebee.conf</code> and change the following:\r\n<pre class=\"prettyprint lang-text\">\r\nKeepUnusedXServer=true # default to false\r\nDriver=nvidia # default to \"\"\r\n...\r\n[driver-nvidia]\r\nKernelDriver=nvidia-331 # must match the one installed in step 1\r\nPMMethod=none  # default to auto \r\n...</pre>\r\nNow, it is always recommended to reboot...\r\n<h3>Test</h3>\r\nTry to run bumblebeed with the command <code>sudo bumblebeed -vv</code>. The output should look like this:\r\n<pre class=\"prettyprint lang-text\">\r\n[ 2313.699346] [DEBUG]Found card: 01:00.0 (discrete)\r\n[ 2313.699397] [DEBUG]Found card: 00:02.0 (integrated)\r\n[ 2313.699418] [DEBUG]Reading file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.699858] [INFO]Configured driver: nvidia\r\n[ 2313.699893] [DEBUG]Skipping auto-detection, using configured driver \'nvidia\'\r\n[ 2313.700094] [DEBUG]Process /sbin/modprobe started, PID 3537.\r\n[ 2313.700149] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.702308] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.702473] [INFO]PM is disabled, not performing detection.\r\n[ 2313.702528] [DEBUG]Active configuration:\r\n[ 2313.702559] [DEBUG] bumblebeed config file: /etc/bumblebee/bumblebee.conf\r\n[ 2313.702597] [DEBUG] X display: :8\r\n[ 2313.702628] [DEBUG] LD_LIBRARY_PATH: /usr/lib/nvidia-current:/usr/lib32/nvidia-current\r\n[ 2313.702666] [DEBUG] Socket path: /var/run/bumblebee.socket\r\n[ 2313.702697] [DEBUG] pidfile: /var/run/bumblebeed.pid\r\n[ 2313.702729] [DEBUG] xorg.conf file: /etc/bumblebee/xorg.conf.nvidia\r\n[ 2313.702762] [DEBUG] xorg.conf.d dir: /etc/bumblebee/xorg.conf.d\r\n[ 2313.702800] [DEBUG] ModulePath: /usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules\r\n[ 2313.702833] [DEBUG] GID name: bumblebee\r\n[ 2313.702872] [DEBUG] Power method: none\r\n[ 2313.702902] [DEBUG] Stop X on exit: 0\r\n[ 2313.702936] [DEBUG] Driver: nvidia\r\n[ 2313.702970] [DEBUG] Driver module: nvidia-331\r\n[ 2313.703008] [DEBUG] Card shutdown state: 1\r\n[ 2313.703186] [DEBUG]Process /sbin/modprobe started, PID 3538.\r\n[ 2313.703263] [DEBUG]Hiding stderr for execution of /sbin/modprobe\r\n[ 2313.705422] [DEBUG]SIGCHILD received, but wait failed with No child processes\r\n[ 2313.705491] [DEBUG]Configuration test passed.\r\n[ 2313.706229] [INFO]bumblebeed 3.2.1 started\r\n[ 2313.706383] [INFO]Initialization completed - now handling client requests</pre>\r\n<h2>Intel-virtual-output</h2>\r\nIn ubuntu 13.04, I needed to patch the nvidia driver manually and then used <strong>screenclone</strong> to create virtual displays. With ubuntu 13.10, the xf86-video-intel driver already has this capability. \r\nThe xf86-video-intel driver also contains a nice tool, <strong>intel-virtual-output</strong>, which is used instead of screenclone. Sadly, ubuntu does not bundle it in its package; we have to install it manually.\r\n<pre class=\"prettyprint lang-text\">\r\nsudo apt-get install xorg-dev git\r\ngit clone git://anongit.freedesktop.org/xorg/driver/xf86-video-intel \r\ncd xf86-video-intel \r\n./autogen.sh \r\ncd tools\r\nmake \r\nsudo cp intel-virtual-output /usr/bin/ \r\nsudo chmod +x /usr/bin/intel-virtual-output</pre>\r\n<h2>Xorg configuration</h2>\r\nThe configuration for xorg is found in <code>/etc/bumblebee/xorg.conf.nvidia</code>.\r\n\r\nIn many forums and blogs, It is said that the only modification that is required is to add the propre PCI id in the \"Device\" section. So, your file should look like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier  \"Layout0\"\r\n    Option      \"AutoAddDevices\" \"false\"\r\n    Option      \"AutoAddGPU\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier  \"DiscreteNvidia\"\r\n    Driver      \"nvidia\"\r\n    VendorName  \"NVIDIA Corporation\"\r\n    BusID       \"PCI:01:00:0\" # <== here is the added line</pre>\r\nNote that the busid can be found with <code>lspci | grep -i vga</code>. The id is the first field in the line containing the word \"nvidia\". Just be sure to change the dot by a colon.\r\n\r\nIf this does not work (which was my case), take a look at the section <a href=\"#errorsdebug\">debug</a> ^^.\r\n<h2>Use your external monitors</h2>\r\n<h3>Turn it on</h3>\r\nAfter a reboot (just to be sure) and with a monitor connected either with VGA or DisplayPort, try the following:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo modprobe bbswitch # load the module in the kernel\r\nsudo start bumblebeed  # only if not already running\r\noptirun true\r\nintel-virtual-output</pre>\r\nNow, your monitor should wake up. To change its configuration, simply use the displays tools in the settings. It should work out of the box.\r\n<h3>Turn it off</h3>\r\n<pre class=\"prettyprint lang-text\">\r\n# kill smoothly the second xorg server\r\n> ps -ef | grep -i xorg\r\n...\r\nroot  3865  3851  2 18:42 ?  00:00:10 Xorg :8 -config /etc/bumblebee/xorg.conf.nvidia ...\r\n> sudo kill -15 3865\r\n\r\n# stop bumblebeed\r\n> sudo stop bumblebeed\r\n\r\n# then, turn off your nvidia card\r\n> sudo rmmod nvidia\r\n> sudo tee /proc/acpi/bbswitch <<<OFF</pre>\r\n<h2>Errors, debug</h2>\r\n<ul>\r\n	<li>check that you monitor is actually connected. If not, the output of optirun will be \"no screen found\"</li>\r\n	<li>check that the bbswithc is actually on with\r\n<pre class=\"prettyprint lang-text\">\r\n    cat /proc/acpi/bbswitch \r\n    0000:01:00.0 ON  # should be ON!</pre>\r\n</li>\r\n	<li>check your logs (<code>dmesg</code> or <code>tail /var/log/syslog</code>) for any suspicious lines</li>\r\n	<li>try to launch intel-virtual-output like this: <code>optirun intel-virtual-output</code> instead of <code>optirun true; intel-virtual-ouptut</code> (which, in my case, does not work!)</li>\r\n</ul>\r\nIf none of those work, there is still a possibility (see below).\r\n<h3>Errors \"NVIDIA(0): Unable to get display device for DPI computation\"</h3>\r\nIn my case, nothing happened when I ran intel-virtual-ouptput, but the logs where clear and optirun did function properly. \r\nAfter parsing the logs carefully, I detected some strange lines:\r\n<pre class=\"prettyprint lang-text\">\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"glamoregl\" will not be loaded unless you\'ve specified it to be loaded elsewhere.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) \"xmir\" is not to be loaded by default. Skipping.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) Unresolved symbol: fbGetGCPrivateKey\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): Unable to get display device for DPI computation.\r\nFeb  3 18:38:25 Cymbalta bumblebeed[3815]: [XORG] (WW) NVIDIA(0): UBB is incompatible with the Composite extension.  Disabling</pre>\r\nI finally made it work by changing totally the <strong>/etc/bumblebee/xorg.conf.nvidia</strong> file. \r\nHere is now how it looks like:\r\n<pre class=\"prettyprint lang-text\">\r\nSection \"ServerLayout\"\r\n    Identifier     \"Layout0\"\r\n    Screen         \"Screen0\"\r\n    Option         \"AutoAddDevices\" \"false\"\r\nEndSection\r\n\r\nSection \"Device\"\r\n    Identifier     \"Device0\"\r\n    Driver         \"nvidia\"\r\n    VendorName     \"NVIDIA Corporation\"\r\n    BusID          \"PCI:1:0:0\"\r\n    #Option         \"ConnectedMonitor\" \"DFP\"\r\n    Option         \"DPI\" \"96 x 96\" \r\nEndSection\r\n\r\nSection \"Screen\"\r\n    Identifier     \"Screen0\"\r\n    Device         \"Device0\"\r\n    DefaultDepth    24\r\n    SubSection     \"Display\"\r\n    Depth          24\r\nEnd</pre>\r\nAnd tadaaahhhhh, my monitors worked perfectly. \r\n\r\nIf I run <code>xrandr</code>, I now have a large number of virtual outputs, and I can connect with both DisplayPort or VGA!\r\n<pre class=\"prettyprint lang-text\">\r\nScreen 0: minimum 320 x 200, current 1920 x 1080, maximum 32767 x 32767\r\nLVDS1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 193mm\r\n   1920x1080      60.0*+   59.9     50.0  \r\n   1680x1050      60.0     59.9  \r\n   1600x1024      60.2  \r\n   1400x1050      60.0  \r\n   1280x1024      60.0  \r\n   1440x900       59.9  \r\n   1280x960       60.0  \r\n   1360x768       59.8     60.0  \r\n   1152x864       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3     56.2  \r\n   640x480        59.9  \r\nVGA1 disconnected (normal left inverted right x axis y axis)\r\nVIRTUAL1 connected 1920x1080+0+0 0mm x 0mm\r\n   VIRTUAL1.735-1920x1200   60.0  \r\n   VIRTUAL1.736-1920x1080   60.0* \r\n   1680x1050      60.0  \r\n   VIRTUAL1.738-1600x1200   60.0  \r\n   1280x1024      60.0  \r\n   1280x960       60.0  \r\n   1024x768       60.0  \r\n   800x600        60.3  \r\n   640x480        59.9  \r\nVIRTUAL2 disconnected\r\nVIRTUAL3 disconnected\r\nVIRTUAL4 disconnected\r\nVIRTUAL5 disconnected\r\nVIRTUAL6 disconnected\r\nVIRTUAL7 disconnected\r\nVIRTUAL8 disconnected</pre>\r\n<h2>Automate the process</h2>\r\n<strong>Warning</strong>: this script was written a midnight and can be buggy. It will not break your system (at least, a reboot will always do its job), but would need a lot of improvements. Take it as a good starting point, nothing else...\r\n<pre class=\"prettyprint\">\r\n#!/bin/sh\r\nset -x\r\n\r\ncase \"$1\" in \r\n    \"start\")\r\n        # enable bbswitch\r\n        [ $( lsmod | grep bbswitch) -eq 1 ] && sudo modprobe bbswitch\r\n        echo \"ON\" | sudo tee /proc/acpi/bbswitch\r\n        # start the bumblebee daemon\r\n        pgrep bumblebeed\r\n        [ $? -eq 1 ] && sudo start bumblebeed\r\n        # launch the virtual output monitor\r\n        sleep 1\r\n        optirun intel-virtual-output\r\n        if [ $? -eq 0 ]; then\r\n            echo \"done\"\r\n            exit 0\r\n        else\r\n            echo \"Oops, an error occurred\"\r\n            tail -20 /var/log/syslog\r\n            exit 1\r\n        fi\r\n        ;;\r\n\r\n    \"stop\")\r\n        # find the second xorg server process id\r\n        pid=$( ps -ef | grep \"Xorg.*bumblebee\" | grep -v grep | awk \'{ print $2 }\' )\r\n        echo \"pid is $pid\"\r\n\r\n        # stop the xorg server\r\n        if [ -n \"$pid\" ]; then \r\n            sudo kill -15 $pid \r\n            ret=$?\r\n            echo \"second xorg server killed\"\r\n        else \r\n            echo \"error: second xorg server not running\"\r\n            ret=0\r\n        fi\r\n\r\n        # stop bumblebeed\r\n        sudo stop bumblebeed\r\n        # turn off nvidia card\r\n        sudo rmmod nvidia\r\n        echo \"OFF\" | sudo tee /proc/acpi/bbswitch\r\n\r\n        exit $ret\r\n        ;;\r\n\r\n    *)  echo \"usage $0 start | stop\";\r\n        exit 1\r\n        ;;\r\nesac</pre>','Thinkpad w530, linux 13.10 and optimus','','inherit','closed','open','','410-revision-v1','','','2014-02-03 18:43:22','2014-02-03 18:43:22','',410,'http://error418.no-ip.info/mywiki/?p=418',0,'revision','',0),(420,3,'2014-02-11 20:22:52','2014-02-11 20:22:52','Everytime it is the same story: <code>perl -d</code> works when I use the perl in /usr/bin, but from the perlbrew one, I always get the [[A and so forth when using arrows.\r\n\r\nSo, here is the trick:\r\n<pre class=\"prettyprint lang-text\">\r\n# for the whole system, but does not \r\n# install the dev files !\r\nsudo apt-get install libterm-readline-gnu-perl libterm-readkey-perl\r\n\r\n# for perlbrew ReadLine module compilation to work\r\nsudo apt-get install libreadline-dev libncurses-dev\r\n\r\n# finally, install the module\r\ncpanm Term::ReadLine::Gnu\r\n# note: if cpanm is not installed, run\r\n# perlbrew install-cpanm\r\n</pre>','Perl and the f***ing arrows in debug mode','','publish','closed','open','','perl-and-the-fing-arrows-in-debug-mode','','','2014-02-11 20:22:52','2014-02-11 20:22:52','',0,'http://error418.no-ip.info/mywiki/?p=420',0,'post','',0),(421,3,'2014-02-11 20:22:52','2014-02-11 20:22:52','Everytime it is the same story: <code>perl -d</code> works when I use the perl in /usr/bin, but from the perlbrew one, I always get the [[A and so forth when using arrows.\r\n\r\nSo, here is the trick:\r\n<pre class=\"prettyprint lang-text\">\r\n# for the whole system, but does not \r\n# install the dev files !\r\nsudo apt-get install libterm-readline-gnu-perl libterm-readkey-perl\r\n\r\n# for perlbrew ReadLine module compilation to work\r\nsudo apt-get install libreadline-dev libncurses-dev\r\n\r\n# finally, install the module\r\ncpanm Term::ReadLine::Gnu\r\n# note: if cpanm is not installed, run\r\n# perlbrew install-cpanm\r\n</pre>','Perl and the f***ing arrows in debug mode','','inherit','closed','open','','420-revision-v1','','','2014-02-11 20:22:52','2014-02-11 20:22:52','',420,'http://error418.no-ip.info/mywiki/?p=421',0,'revision','',0),(422,3,'2014-02-12 06:46:45','2014-02-12 06:46:45','Everytime it is the same story: <code>perl -d</code> works when I use the perl in /usr/bin, but from the perlbrew one, I always get the [[A and so forth when using arrows.\n\nSo, here is the trick:\n<pre class=\"prettyprint lang-text\">\n# for the whole system, but does not \n# install the dev files !\nsudo apt-get install libterm-readline-gnu-perl libterm-readkey-perl\n\n# for perlbrew ReadLine module compilation to work\nsudo apt-get install libreadline-dev libncurses-dev\n\n# finally, install the module\ncpanm Term::ReadLine::Gnu\n# note: if cpanm is not installed, run\n# perlbrew install-cpanm</pre>','Perl and the f***ing arrows in debug mode','','inherit','closed','open','','420-autosave-v1','','','2014-02-12 06:46:45','2014-02-12 06:46:45','',420,'http://error418.no-ip.info/mywiki/?p=422',0,'revision','',0),(423,3,'2014-02-14 06:48:49','2014-02-14 06:48:49','Based on the <a href=\"https://www.google.ch/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCsQtwIwAA&amp;url=http%3A%2F%2Fwww.ted.com%2Ftalks%2Fdavid_pogue_10_top_time_saving_tech_tips.html&amp;ei=2bv9UoqgAorg7QatiIB4&amp;usg=AFQjCNE7AMaGf-z7lVpH6tDWoXI6C-6thQ&amp;sig2=pmY16uVrw3zaJafd3Zuh0g&amp;bvm=bv.61190604,d.ZGU\" target=\"_blank\">Ted talk from David Pogue</a>, here is a list of really nice little features:\r\n<ol>\r\n	<li>in browsers, don\'t use scrollbars. Instead, use space bar to scroll dwon, shift+space to scroll up</li>\r\n	<li>in forms, use the tab key to jump from box to box. If there is a popup menu, don\'t open it, but press the first letter over and over</li>\r\n	<li>in smartphones, a double tap on the space bar automatically adds the dot, the space and the capital letter</li>\r\n	<li>with smartphones, don\'t bother to go to contact to find out the most recent call. Instead, just press the call button: the latest number will show up!</li>\r\n	<li>In america, you can skip the voicemail message until the beep by pressing either \"*\", \"#\" or another key depending on the calling carrier...</li>\r\n	<li>In google, type define + word to get a definition. You can also use google to find informations about flights (keyword \"flight\", but not sure it works abroad) and currencies/units conversions</li>\r\n	<li>double clic on a word will highlight it automatically, one more clic and the whole sentence will be selected. To replace text, don\'t bother to delete it, just type over it.</li>\r\n	<li>a camera needs time to compute the focus and exposure, adding a delay between the time the button is pressed and the photo is shot. To avoid that, you can pre-focus by half-pressing the button!</li>\r\n	<li>when giving a presentation (like powerpoint), pressing the letter B will toggle between a black screen and the actual slide. Pressing the W key does the same, but with a white screen</li>\r\n</ol>','10 top time saving techtips  everybody should know','','publish','closed','open','','10-top-time-saving-techtips-everybody-should-know','','','2014-02-14 06:48:49','2014-02-14 06:48:49','',0,'http://error418.no-ip.info/mywiki/?p=423',0,'post','',0),(424,3,'2014-02-14 06:46:03','2014-02-14 06:46:03','Based on the Ted talk from David Pogue, here is a list of really nice little features:\r\n<ol>\r\n	<li>in browsers, don\'t use scrollbars. Instead, use space bar to scroll dwon, shift+space to scroll up</li>\r\n	<li>in forms, use the tab key to jump from box to box. If there is a popup menu, don\'t open it, but press the first letter over and over</li>\r\n	<li>in smartphones, a double tap on the space bar automatically adds the dot, the space and the capital letter</li>\r\n	<li>with smartphones, don\'t bother to go to contact to find out the most recent call. Instead, just press the call button: the latest number will show up!</li>\r\n	<li>...</li>\r\n	<li>In google, type define + word to get a definition. You can also use google to find informations about flights (keyword \"flight\", but not sure it works abroad) and currencies/units conversions</li>\r\n	<li>double clic on a word will highlight it automatically, one more clic and the whole sentence will be selected. To replace text, don\'t bother to delete it, just type over it.</li>\r\n	<li>a camera needs time to compute the focus and exposure, adding a delay between the time the button is pressed and the photo is shot. To avoid that, you can pre-focus by half-pressing the button!</li>\r\n	<li>when giving a presentation (like powerpoint), pressing the letter B will toggle between a black screen and the actual slide. Pressing the W key does the same, but with a white screen</li>\r\n</ol>','10 top time saving tech everybody should know','','inherit','closed','open','','423-revision-v1','','','2014-02-14 06:46:03','2014-02-14 06:46:03','',423,'http://error418.no-ip.info/mywiki/?p=424',0,'revision','',0),(425,3,'2014-02-14 06:48:49','2014-02-14 06:48:49','Based on the <a href=\"https://www.google.ch/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCsQtwIwAA&amp;url=http%3A%2F%2Fwww.ted.com%2Ftalks%2Fdavid_pogue_10_top_time_saving_tech_tips.html&amp;ei=2bv9UoqgAorg7QatiIB4&amp;usg=AFQjCNE7AMaGf-z7lVpH6tDWoXI6C-6thQ&amp;sig2=pmY16uVrw3zaJafd3Zuh0g&amp;bvm=bv.61190604,d.ZGU\" target=\"_blank\">Ted talk from David Pogue</a>, here is a list of really nice little features:\r\n<ol>\r\n	<li>in browsers, don\'t use scrollbars. Instead, use space bar to scroll dwon, shift+space to scroll up</li>\r\n	<li>in forms, use the tab key to jump from box to box. If there is a popup menu, don\'t open it, but press the first letter over and over</li>\r\n	<li>in smartphones, a double tap on the space bar automatically adds the dot, the space and the capital letter</li>\r\n	<li>with smartphones, don\'t bother to go to contact to find out the most recent call. Instead, just press the call button: the latest number will show up!</li>\r\n	<li>In america, you can skip the voicemail message until the beep by pressing either \"*\", \"#\" or another key depending on the calling carrier...</li>\r\n	<li>In google, type define + word to get a definition. You can also use google to find informations about flights (keyword \"flight\", but not sure it works abroad) and currencies/units conversions</li>\r\n	<li>double clic on a word will highlight it automatically, one more clic and the whole sentence will be selected. To replace text, don\'t bother to delete it, just type over it.</li>\r\n	<li>a camera needs time to compute the focus and exposure, adding a delay between the time the button is pressed and the photo is shot. To avoid that, you can pre-focus by half-pressing the button!</li>\r\n	<li>when giving a presentation (like powerpoint), pressing the letter B will toggle between a black screen and the actual slide. Pressing the W key does the same, but with a white screen</li>\r\n</ol>','10 top time saving techtips  everybody should know','','inherit','closed','open','','423-revision-v1','','','2014-02-14 06:48:49','2014-02-14 06:48:49','',423,'http://error418.no-ip.info/mywiki/?p=425',0,'revision','',0),(426,3,'2014-02-15 18:14:16','2014-02-15 18:14:16','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h2>Installing DAVmail</h2>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint lang-sh\">&gt; sudo dpkg -i devmail.deb\r\n&gt; sudo apt-get install -f\r\n&gt; davmail &amp;</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h2>Configuring thunderbird</h2>\r\n<ol>\r\n	<li>create a new account: <i>Edit &gt; Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h2>Adding the address book</h2>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h2>Adding the calendar</h2>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h2>Init script for DavMail</h2>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a href=\"http://error418.no-ip.info/mywiki/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n\r\n<pre class=\"lang-sh\" id=\"lala\"></pre>\r\n\r\n<script type=\"text/javascript\">// <![CDATA[\r\ndisplay_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n// ]]></script>\r\n\r\n<style type=\"text/css\"><!--\r\ntable.small tr td{ font-size: 10pt; text-align: center; }\r\n--></style>','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-revision-v1','','','2014-02-15 18:14:16','2014-02-15 18:14:16','',103,'http://error418.no-ip.info/mywiki/?p=426',0,'revision','',0),(427,3,'2014-02-15 19:01:44','2014-02-15 19:01:44','To configure it, simply add a file in your <strong>xorg.conf.d</strong> directory (in my case, it is <code>/usr/share/X11/xorg.conf.d</code>).\r\n\r\nThis file, named <code>50-marblemouse.conf</code> should look like this:\r\n<pre class=\"prettyprint lang-text with-comments\">[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/50-marblemouse.conf]</pre>\r\nWith this you\'ll have:\r\n<ul>\r\n	<li>normal left and right clicks</li>\r\n	<li>two large buttons pressed together: middle click</li>\r\n	<li>scroll: keep the small left button pressed and move the ball</li>\r\n	<li>small right button click: back</li>\r\n	<li>small left button: forth</li>\r\n	<li>two large button</li>\r\n</ul>\r\nFor other configurations, see <a href=\"https://help.ubuntu.com/community/Logitech_Marblemouse_USB\">this article</a>.','Logitech Marblemouse','','inherit','closed','open','','377-revision-v1','','','2014-02-15 19:01:44','2014-02-15 19:01:44','',377,'http://error418.no-ip.info/mywiki/?p=427',0,'revision','',0),(428,3,'2014-02-15 19:13:28','2014-02-15 19:13:28','To configure it, simply add a file in your <strong>xorg.conf.d</strong> directory (in my case, it is <code>/usr/share/X11/xorg.conf.d</code>).\r\n\r\nThis file, named <code>50-marblemouse.conf</code> should look like this:\r\n<pre class=\"prettyprint lang-text with-comments\">[display_file\r\npath=/wp-content/themes/twentythirteen-child/post-files/50-marblemouse.conf]</pre>\r\nWith this you\'ll have:\r\n<ul>\r\n	<li>normal left and right clicks</li>\r\n	<li>two large buttons pressed together: middle click</li>\r\n	<li>scroll: keep the small left button pressed and move the ball</li>\r\n	<li>small right button click: back</li>\r\n	<li>small left button: forth</li>\r\n	<li>two large button</li>\r\n</ul>\r\n\r\nIf the middle click does not work, ensure that it is supported/enabled by gnome:\r\n<pre class=\"prettyprint lang-text\">\r\ngsettings set org.gnome.settings-daemon.peripherals.mouse middle-button-enabled true\r\n</pre>\r\n\r\nFor other configurations, see <a href=\"https://help.ubuntu.com/community/Logitech_Marblemouse_USB\">this article</a>.\r\n\r\n\r\n','Logitech Marblemouse','','inherit','closed','open','','377-revision-v1','','','2014-02-15 19:13:28','2014-02-15 19:13:28','',377,'http://error418.no-ip.info/mywiki/?p=428',0,'revision','',0),(429,3,'2014-02-15 19:14:33','2014-02-15 19:14:33','To configure it, simply add a file in your <strong>xorg.conf.d</strong> directory (in my case, it is <code>/usr/share/X11/xorg.conf.d</code>).\n\nThis file, named <code>50-marblemouse.conf</code> should look like this:\n<pre class=\"prettyprint lang-text with-comments\">[display_file\npath=/wp-content/themes/twentythirteen-child/post-files/50-marblemouse.conf]</pre>\nWith this you\'ll have:\n<ul>\n	<li>normal left and right clicks</li>\n	<li>two large buttons pressed together: middle click</li>\n	<li>scroll: keep the small left button pressed and move the ball</li>\n	<li>small right button click: back</li>\n	<li>small left button: forth</li>\n	<li>two large button</li>\n</ul>\nIf the middle click does not work, ensure that it is supported/enabled by gnome:\n<pre class=\"prettyprint lang-text\">\ngsettings set org.gnome.settings-daemon.peripherals.mouse middle-button-enabled true</pre>\nFor other configurations, see <a href=\"https://help.ubuntu.com/community/Logitech_Marblemouse_USB\">this article</a>.','Logitech Marblemouse','','inherit','closed','open','','377-autosave-v1','','','2014-02-15 19:14:33','2014-02-15 19:14:33','',377,'http://error418.no-ip.info/mywiki/?p=429',0,'revision','',0),(431,3,'2014-02-28 18:04:10','2014-02-28 18:04:10','<h2>Terminal does not remember working directory when opening a new tab</h2>\r\n\r\nNormally, I was used to keep the current directory when opening a new tab, which I loved. Indeed, I often opened a new tab then detached it using <code>F12</code> so I did not have to cp to a (too) long directory... But since my reinstall, this behavior seemed to have vanished. The answer is simple: \r\n<ol>\r\n	<li>Open a new terminal window</li>\r\n	<li>Clic on <code>Edit > Profile Preferences > Title and Command</code> and tick the <i>Run as a login shell</i></li>\r\n</ol>\r\n\r\nOpen a new windows and it is  solved.\r\n\r\n\r\n<h2>close button on the left</h2>\r\n\r\nFirst, open <tt>dconf-editor</tt> and change <code>gnome.shell.overrides button-layout</code> to \"<tt>close,maximize,minimize:</tt>\".\r\n\r\nThis works for applications, but there is still some troubles with the gnome tweak tools and nautilus...\r\n\r\n<h3>gnome 3.10 trouble</h3>\r\n<p>GNOME 3.10 introduced <a href=\"http://worldofgnome.org/csds-came-to-stay-in-gnome-3-10/\">Client Side Decoration</a> (CSD), allowing application to paint the window border and buttons. Quoting from the linked site above:</p>\r\n<blockquote><p>A disadvantage of CSD is the inconsistency that brings between Apps that support them (mostly GNOME Apps) and Apps that don’t (3rd party Apps, like Firefox). However this is mostly in theory, because in practice, you won’t really be bothered from it.</p></blockquote>\r\n\r\n<p>A new widget called <a href=\"https://developer.gnome.org/gtk3/3.10/GtkHeaderBar.html\"><tt>GtkHeaderBar</tt></a> was added in the process, and it was decided that the <tt>GtkHeaderBar</tt> will forcibly put the <em>close button</em> in the right, and then <a href=\"https://bugzilla.gnome.org/show_bug.cgi?id=706708\">bug 706708</a> was filled.</p>\r\n\r\n<p>A <a href=\"https://git.gnome.org/browse/gtk+/commit/?id=54773ba45ba6348cc8c94e7fbab10049fac02884\">fix</a> was commited a month after the bug was filled and it entered in GTK+ 3.10.3. Now I can set the placement of the <em>close button</em> again, so Iet’s create a <tt>~/.config/gtk-3.0/gtk.css</tt> with the following content:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nGtkWindow {\r\n  -GtkWindow-decoration-button-layout: \"close:\";\r\n}\r\n</pre>\r\n\r\nThis will work for the tweak-tool, or at least they will try to honor the contract. The remaining problem is that they use two <tt>GtkHeaderBar</tt>, one for the left menu and one for the content. The result is thus kind of strange...\r\n\r\n<a href=\"http://mmoya.org/blog/2013/11/16/to-left-or-not-to-left-gnome/\">source</a>\r\n\r\n<h3>Nautilus</h3>\r\nNautilus manually adds the close button at the end of the toolbar and I did not find the time to play with the source code...\r\n\r\ncoming soon !','Achlinux (gnome) tips and tricks','','publish','closed','open','','achlinux-gnome-tips-and-tricks','','','2014-04-09 15:05:46','2014-04-09 15:05:46','',0,'http://localhost/html/?p=431',0,'post','',0),(432,3,'2014-02-28 18:04:10','2014-02-28 18:04:10','<h2>Terminal does not remember working directory when opening a new tab</h2>\r\n\r\nNormally, I was used to keep the current directory when opening a new tab, which I loved. Indeed, I often opened a new tab then detached it using <code>F12</code> so I did not have to cp to a (too) long directory... But since my reinstall, this behavior seemed to have vanished. The answer is simple: \r\n<ol>\r\n	<li>Open a new terminal window</li>\r\n	<li>Clic on <code>Edit > Profile Preferences > Title and Command</code> and tick the <i>Run as a login shell</i></li>\r\n</ol>\r\n\r\nOpen a new windows and it is  solved.','Achlinux (gnome) tips and tricks','','inherit','closed','open','','431-revision-v1','','','2014-02-28 18:04:10','2014-02-28 18:04:10','',431,'http://localhost/html/?p=432',0,'revision','',0),(433,3,'2014-04-08 17:52:54','2014-04-08 17:52:54','<h2>Terminal does not remember working directory when opening a new tab</h2>\r\n\r\nNormally, I was used to keep the current directory when opening a new tab, which I loved. Indeed, I often opened a new tab then detached it using <code>F12</code> so I did not have to cp to a (too) long directory... But since my reinstall, this behavior seemed to have vanished. The answer is simple: \r\n<ol>\r\n	<li>Open a new terminal window</li>\r\n	<li>Clic on <code>Edit > Profile Preferences > Title and Command</code> and tick the <i>Run as a login shell</i></li>\r\n</ol>\r\n\r\nOpen a new windows and it is  solved.\r\n\r\n\r\n<h2>close button on the left</h2>\r\n\r\nFirst, open <tt>dconf-editor</tt> and change <code>gnome.shell.overrides button-layout</code> to \"<tt>close,maximize,minimize:</tt>\".\r\n\r\nThis works for applications, but there is still some troubles with the gnome tweak tools and nautilus...\r\n\r\n<h3>gnome 3.10 trouble</h3>\r\n<p>GNOME 3.10 introduced <a href=\"http://worldofgnome.org/csds-came-to-stay-in-gnome-3-10/\">Client Side Decoration</a> (CSD), allowing application to paint the window border and buttons. Quoting from the linked site above:</p>\r\n<blockquote><p>A disadvantage of CSD is the inconsistency that brings between Apps that support them (mostly GNOME Apps) and Apps that don’t (3rd party Apps, like Firefox). However this is mostly in theory, because in practice, you won’t really be bothered from it.</p></blockquote>\r\n\r\n<p>A new widget called <a href=\"https://developer.gnome.org/gtk3/3.10/GtkHeaderBar.html\"><tt>GtkHeaderBar</tt></a> was added in the process, and it was decided that the <tt>GtkHeaderBar</tt> will forcibly put the <em>close button</em> in the right, and then <a href=\"https://bugzilla.gnome.org/show_bug.cgi?id=706708\">bug 706708</a> was filled.</p>\r\n\r\n<p>A <a href=\"https://git.gnome.org/browse/gtk+/commit/?id=54773ba45ba6348cc8c94e7fbab10049fac02884\">fix</a> was commited a month after the bug was filled and it entered in GTK+ 3.10.3. Now I can set the placement of the <em>close button</em> again, so Iet’s create a <tt>~/.config/gtk-3.0/gtk.css</tt> with the following content:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nGtkWindow {\r\n  -GtkWindow-decoration-button-layout: \"close:\";\r\n}\r\n</pre>\r\n\r\nThis will work for the tweak-tool, or at least they will try to honor the contract. The remaining problem is that they use two <tt>GtkHeaderBar</tt>, one for the left menu and one for the content. The result is thus kind of strange...\r\n\r\n<h3>Nautilus</h3>\r\nNautilus manually adds the close button at the end of the toolbar and I did not find the time to play with the source code...\r\n\r\ncoming soon !','Achlinux (gnome) tips and tricks','','inherit','closed','open','','431-autosave-v1','','','2014-04-08 17:52:54','2014-04-08 17:52:54','',431,'http://localhost/html/?p=433',0,'revision','',0),(434,3,'2014-02-28 20:57:12','2014-02-28 20:57:12','[display_file path=\"/wp-content/themes/twentythirteen-child/post-files/archlinux_install.html\"]','Install archlinux','','publish','closed','open','','install-archlinux','','','2014-07-24 10:05:14','2014-07-24 10:05:14','',0,'http://localhost/html/?p=434',0,'post','',0),(435,3,'2014-02-28 20:44:04','2014-02-28 20:44:04','[display_file path=/wp-content/themes/twentythirteen-child/post-files/archlinux_install.html]','Install archlinux','','inherit','closed','open','','434-revision-v1','','','2014-02-28 20:44:04','2014-02-28 20:44:04','',434,'http://localhost/html/?p=435',0,'revision','',0),(436,3,'2014-02-28 20:44:21','2014-02-28 20:44:21','[display_file path=\"/wp-content/themes/twentythirteen-child/post-files/archlinux_install.html\"]','Install archlinux','','inherit','closed','open','','434-revision-v1','','','2014-02-28 20:44:21','2014-02-28 20:44:21','',434,'http://localhost/html/?p=436',0,'revision','',0),(437,3,'2014-03-05 08:23:35','2014-03-05 08:23:35','<h2>Keep your environment with sudo</h2>\r\nI have always been pissed off when I launch a program with sudo and I get an error saying the environment variable is not defined... Here are some tricks to avoid that. Open your sudoers file in write mode through <code>sudo\r\nvisudo</code> and:\r\n<ul>\r\n    <li>in order to keep your home (~) uncomment or add the line <code>Defaults env_keep += \"HOME\"</code>\r\n    </li>\r\n    <li>you can do the same for any other variable you want to be exported, like <code>Defaults env_keep = \"http_proxy\"</code> for example</li>\r\n    <li>since we are at it, try uncomment the <code>Defaults insults</code>. This will replace the \"wrong password\" message by a clever insult ^^</li>\r\n</ul>\r\n\r\n\r\n<h2>The strange \"scp: command not found\" error</h2>\r\nWhen you launch scp, it will first connect to the other machine with ssh, and then copy the file(s). \r\n\r\nIf you did not know the sudo tricks described above, you maybe did the same mistake as me: modify the <code>/etc/environment</code> file and add a line like <code>PATH=\"...$PATH\"</code>. I don\'t know exactly why, but this messes up with scp, since the PATH that is exported does not contain the usual <code>/usr/bin</code> anymore; thus scp is not found on the remote machine.\r\n\r\nAnother common mistake is to comment out the <code>export PATH=...</code> in your .bashrc or .zshrc. This result in the same problem.\r\n','environment, sudo and scp','','publish','closed','open','','environment-sudo-and-scp','','','2014-04-09 15:05:46','2014-04-09 15:05:46','',0,'http://localhost/html/?p=437',0,'post','',0),(438,3,'2014-03-05 08:21:04','2014-03-05 08:21:04','<h2>Keep your environment with sudo</h2>\r\nI have always been pissed off when I launch a program with sudo and I get an\r\nerror saying the environment variable is not defined... Here are some tricks to\r\navoid that. Open your sudoers file in write mode through <code>sudo\r\nvisudo</code> and:\r\n<ul>\r\n    <li>in order to keep your home (~) uncomment or add the line <code>Defaults\r\nenv_keep += \"HOME\"</code>\r\n    </li>\r\n    <li>you can do the same for any other variable you want to be exported, like\r\n    <code>Defaults env_keep = \"http_proxy\"</code> for example</li>\r\n    <li>since we are at it, try uncomment the <code>Defaults insults</code>.\r\n    This will replace the \"wrong password\" message by a clever insult ^^</li>\r\n</ul>\r\n\r\n\r\n<h2>The strange \"scp: command not found\" error</h2>\r\nWhen you launch scp, it will first connect to the other machine with ssh, and\r\nthen copy the file(s). \r\n\r\nIf you did not know the sudo tricks described above, you maybe did the same\r\nmistake as me: modify the <code>/etc/environment</code> file and add a line like\r\n<code>PATH=\"...$PATH\"</code>. I don\'t know exactly why, but this messes up with\r\nscp, since the PATH that is exported does not contain the usual\r\n<code>/usr/bin</code> anymore; thus scp is not found on the remote machine.\r\n\r\nAnother common mistake is to comment out the <code>export PATH=...</code> in\r\nyour .bashrc or .zshrc. This result in the same problem.\r\n','environment, sudo and scp','','inherit','closed','open','','437-revision-v1','','','2014-03-05 08:21:04','2014-03-05 08:21:04','',437,'http://localhost/html/?p=438',0,'revision','',0),(439,3,'2014-03-05 08:23:27','2014-03-05 08:23:27','<h2>Keep your environment with sudo</h2>\r\nI have always been pissed off when I launch a program with sudo and I get an error saying the environment variable is not defined... Here are some tricks to avoid that. Open your sudoers file in write mode through <code>sudo\r\nvisudo</code> and:\r\n<ul>\r\n    <li>in order to keep your home (~) uncomment or add the line <code>Defaults env_keep += \"HOME\"</code>\r\n    </li>\r\n    <li>you can do the same for any other variable you want to be exported, like <code>Defaults env_keep = \"http_proxy\"</code> for example</li>\r\n    <li>since we are at it, try uncomment the <code>Defaults insults</code>. This will replace the \"wrong password\" message by a clever insult ^^</li>\r\n</ul>\r\n\r\n\r\n<h2>The strange \"scp: command not found\" error</h2>\r\nWhen you launch scp, it will first connect to the other machine with ssh, and then copy the file(s). \r\n\r\nIf you did not know the sudo tricks described above, you maybe did the same mistake as me: modify the <code>/etc/environment</code> file and add a line like <code>PATH=\"...$PATH\"</code>. I don\'t know exactly why, but this messes up with scp, since the PATH that is exported does not contain the usual <code>/usr/bin</code> anymore; thus scp is not found on the remote machine.\r\n\r\nAnother common mistake is to comment out the <code>export PATH=...</code> in your .bashrc or .zshrc. This result in the same problem.\r\n','environment, sudo and scp','','inherit','closed','open','','437-revision-v1','','','2014-03-05 08:23:27','2014-03-05 08:23:27','',437,'http://localhost/html/?p=439',0,'revision','',0),(441,3,'2014-04-02 17:24:42','2014-04-02 17:24:42',' ','','','publish','closed','open','','441','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',0,'http://localhost/html/?p=441',10,'nav_menu_item','',0),(442,3,'2014-04-02 17:25:00','2014-04-02 17:25:00',' ','','','publish','closed','open','','442','','','2014-04-09 15:08:40','2014-04-09 15:08:40','',0,'http://localhost/html/?p=442',16,'nav_menu_item','',0),(443,3,'2014-04-02 17:30:24','2014-04-02 17:30:24','By default, most shells use Emacs style key bindings for commandline, like ctrl+A to go at the beginning of a line or ctrl+k to clear words following the cursor.\r\n\r\nBut with a simple option, it is possible to switch to vi style:\r\n<div>bash:<code>set -o vi</code></div>\r\n<div>zsh:<code>bindkey -v</code></div>\r\nThe whole set of available commands can be found with <code>bindkey -a</code>.\r\n\r\nTo switch to Emacs mode, the option is <code>-e</code>.\r\n\r\nto find out which keycode corresponds to what, simply type <code>cat <enter></code> in your terminal. You can then press any key and its code will be displayed.\r\n\r\n<h2>Troubles with delete key on zsh</h2>\r\nSimply add the following <i>at the end</i> of your <code>~/.zshrc</code>:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n# to correct vi mode annoying behavior...\r\nbindkey \"^[[1;6C\" delete-word\r\nbindkey \"^[[3~\"   delete-char\r\n</pre>\r\n\r\nThe following could also be useful, since we are at it:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n# use ctrl+arrow to move between words,\r\n#     ctrl+shift+arrow to delete words\r\nbindkey \"^[[1;5D\" .backward-word\r\nbindkey \"^[[1;5C\" .forward-word\r\nbindkey \"^[[1;6D\" backward-delete-word\r\n</pre>','Using vi key bindings in your shell','','publish','closed','open','','using-vi-key-bindings-in-your-shell','','','2014-04-09 15:05:46','2014-04-09 15:05:46','',0,'http://localhost/html/?p=443',0,'post','',0),(444,3,'2014-04-02 17:30:24','2014-04-02 17:30:24','By default, most shells use Emacs style key bindings for commandline, like ctrl+A to go at the beginning of a line or ctrl+k to clear words following the cursor.\r\n\r\nBut with a simple option, it is possible to switch to vi style:\r\n<div>bash:<code>set -o vi</code></div>\r\n<div>zsh:<code>bindkey -v</code></div>\r\nThe whole set of available commands can be found with <code>bindkey -a</code>.\r\n\r\nTo switch to Emacs mode, the option is <code>-e</code>.\r\n\r\nto find out which keycode corresponds to what, simply type <code>cat <enter></code> in your terminal. You can then press any key and its code will be displayed.\r\n\r\n<h2>Troubles with delete key on zsh</h2>\r\nSimply add the following <i>at the end</i> of your <code>~/.zshrc</code>:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n# to correct vi mode annoying behavior...\r\nbindkey \"^[[1;6C\" delete-word\r\nbindkey \"^[[3~\"   delete-char\r\n</pre>\r\n\r\nThe following could also be useful, since we are at it:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n# use ctrl+arrow to move between words,\r\n#     ctrl+shift+arrow to delete words\r\nbindkey \"^[[1;5D\" .backward-word\r\nbindkey \"^[[1;5C\" .forward-word\r\nbindkey \"^[[1;6D\" backward-delete-word\r\n</pre>','Using vi key bindings in your shell','','inherit','closed','open','','443-revision-v1','','','2014-04-02 17:30:24','2014-04-02 17:30:24','',443,'http://localhost/html/?p=444',0,'revision','',0),(445,3,'2014-04-02 17:30:26','2014-04-02 17:30:26','<h2>Difference between $@ and $*</h2>\r\nNothing is better than an example. Given the following code:\r\n<pre class=\"prettyprint\">\r\n#!/bin/bash\r\n\r\necho -e \"\\n\"\'using $@\'\r\nfor i in $@; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using $*\'\r\nfor i in $*; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$@\"\'\r\nfor i in \"$@\"; do\r\n    echo \" -- $i\"\r\ndone\r\n\r\necho -e \"\\n\"\'using \"$*\"\'\r\nfor i in \"$*\"; do\r\n    echo \" -- $i\"\r\ndone</pre>\r\nIf I call the script with the command: \r\n<span style=\"padding-left:25px\"><code>./bash_test.sh normal_arg \"arg with spaces\"</code></span>\r\nI get the following output:\r\n<pre class=\"prettyprint lang-html\">\r\nusing $@\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing $*\r\n -- normal_arg\r\n -- arg\r\n -- with\r\n -- spaces\r\n\r\nusing \"$@\"\r\n -- normal_arg\r\n -- arg with spaces\r\n\r\nusing \"$*\"\r\n -- normal_arg arg with spaces</pre>\r\nNice uh ?','Bash tips and tricks','','inherit','closed','open','','76-revision-v1','','','2014-04-02 17:30:26','2014-04-02 17:30:26','',76,'http://localhost/html/?p=445',0,'revision','',0),(446,3,'2014-04-08 17:49:32','2014-04-08 17:49:32','<h2>Terminal does not remember working directory when opening a new tab</h2>\r\n\r\nNormally, I was used to keep the current directory when opening a new tab, which I loved. Indeed, I often opened a new tab then detached it using <code>F12</code> so I did not have to cp to a (too) long directory... But since my reinstall, this behavior seemed to have vanished. The answer is simple: \r\n<ol>\r\n	<li>Open a new terminal window</li>\r\n	<li>Clic on <code>Edit > Profile Preferences > Title and Command</code> and tick the <i>Run as a login shell</i></li>\r\n</ol>\r\n\r\nOpen a new windows and it is  solved.\r\n\r\n\r\n<h2>close button on the left</h2>\r\n\r\nFirst, open <code>dconf-editor</code> and change <code>gnome.shell.overrides button-layout</code> to \"close,maximize,minimize:\".\r\n\r\nThis works for applications, but there is still some troubles with the gnome tweak tools and nautilus...\r\n\r\n<h3>gnome 3.10 trouble</h3>\r\n<p>GNOME 3.10 introduced <a href=\"http://worldofgnome.org/csds-came-to-stay-in-gnome-3-10/\">Client Side Decoration</a> (CSD), allowing application to paint the window border and buttons. Quoting from the linked site above:</p>\r\n<blockquote><p>A disadvantage of CSD is the inconsistency that brings between Apps that support them (mostly GNOME Apps) and Apps that don’t (3rd party Apps, like Firefox). However this is mostly in theory, because in practice, you won’t really be bothered from it.</p></blockquote>\r\n\r\n<p>A new widget called <a href=\"https://developer.gnome.org/gtk3/3.10/GtkHeaderBar.html\"><tt>GtkHeaderBar</tt></a> was added in the process, and it was decided that the <tt>GtkHeaderBar</tt> will forcibly put the <em>close button</em> in the right, and then <a href=\"https://bugzilla.gnome.org/show_bug.cgi?id=706708\">bug 706708</a> was filled.</p>\r\n\r\n<p>A <a href=\"https://git.gnome.org/browse/gtk+/commit/?id=54773ba45ba6348cc8c94e7fbab10049fac02884\">fix</a> was commited a month after the bug was filled and it entered in GTK+ 3.10.3. Now I can set the placement of the <em>close button</em> again, so Iet’s create a <tt>~/.config/gtk-3.0/gtk.css</tt> with the following content:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nGtkWindow {\r\n  -GtkWindow-decoration-button-layout: \"close:\";\r\n}\r\n</pre>\r\n\r\nThis will work for the tweak-tool, but nautilus is still not fixed...','Achlinux (gnome) tips and tricks','','inherit','closed','open','','431-revision-v1','','','2014-04-08 17:49:32','2014-04-08 17:49:32','',431,'http://localhost/html/?p=446',0,'revision','',0),(447,3,'2014-04-08 17:51:59','2014-04-08 17:51:59','<h2>Terminal does not remember working directory when opening a new tab</h2>\r\n\r\nNormally, I was used to keep the current directory when opening a new tab, which I loved. Indeed, I often opened a new tab then detached it using <code>F12</code> so I did not have to cp to a (too) long directory... But since my reinstall, this behavior seemed to have vanished. The answer is simple: \r\n<ol>\r\n	<li>Open a new terminal window</li>\r\n	<li>Clic on <code>Edit > Profile Preferences > Title and Command</code> and tick the <i>Run as a login shell</i></li>\r\n</ol>\r\n\r\nOpen a new windows and it is  solved.\r\n\r\n\r\n<h2>close button on the left</h2>\r\n\r\nFirst, open <code>dconf-editor</code> and change <code>gnome.shell.overrides button-layout</code> to \"close,maximize,minimize:\".\r\n\r\nThis works for applications, but there is still some troubles with the gnome tweak tools and nautilus...\r\n\r\n<h3>gnome 3.10 trouble</h3>\r\n<p>GNOME 3.10 introduced <a href=\"http://worldofgnome.org/csds-came-to-stay-in-gnome-3-10/\">Client Side Decoration</a> (CSD), allowing application to paint the window border and buttons. Quoting from the linked site above:</p>\r\n<blockquote><p>A disadvantage of CSD is the inconsistency that brings between Apps that support them (mostly GNOME Apps) and Apps that don’t (3rd party Apps, like Firefox). However this is mostly in theory, because in practice, you won’t really be bothered from it.</p></blockquote>\r\n\r\n<p>A new widget called <a href=\"https://developer.gnome.org/gtk3/3.10/GtkHeaderBar.html\"><tt>GtkHeaderBar</tt></a> was added in the process, and it was decided that the <tt>GtkHeaderBar</tt> will forcibly put the <em>close button</em> in the right, and then <a href=\"https://bugzilla.gnome.org/show_bug.cgi?id=706708\">bug 706708</a> was filled.</p>\r\n\r\n<p>A <a href=\"https://git.gnome.org/browse/gtk+/commit/?id=54773ba45ba6348cc8c94e7fbab10049fac02884\">fix</a> was commited a month after the bug was filled and it entered in GTK+ 3.10.3. Now I can set the placement of the <em>close button</em> again, so Iet’s create a <tt>~/.config/gtk-3.0/gtk.css</tt> with the following content:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nGtkWindow {\r\n  -GtkWindow-decoration-button-layout: \"close:\";\r\n}\r\n</pre>\r\n\r\nThis will work for the tweak-tool, or at least they will try to honor the contract. The remaining problem is that they use two <tt>GtkHeaderBar</tt>, one for the left menu and one for the content. The result is thus kind of strange...\r\n\r\n<h3>Nautilus</h3>\r\nNautilus manually adds the close button at the end of the toolbar and I did not find the time to play with the source code...\r\n\r\ncoming soon !','Achlinux (gnome) tips and tricks','','inherit','closed','open','','431-revision-v1','','','2014-04-08 17:51:59','2014-04-08 17:51:59','',431,'http://localhost/html/?p=447',0,'revision','',0),(448,3,'2014-04-08 17:53:03','2014-04-08 17:53:03','<h2>Terminal does not remember working directory when opening a new tab</h2>\r\n\r\nNormally, I was used to keep the current directory when opening a new tab, which I loved. Indeed, I often opened a new tab then detached it using <code>F12</code> so I did not have to cp to a (too) long directory... But since my reinstall, this behavior seemed to have vanished. The answer is simple: \r\n<ol>\r\n	<li>Open a new terminal window</li>\r\n	<li>Clic on <code>Edit > Profile Preferences > Title and Command</code> and tick the <i>Run as a login shell</i></li>\r\n</ol>\r\n\r\nOpen a new windows and it is  solved.\r\n\r\n\r\n<h2>close button on the left</h2>\r\n\r\nFirst, open <tt>dconf-editor</tt> and change <code>gnome.shell.overrides button-layout</code> to \"<tt>close,maximize,minimize:</tt>\".\r\n\r\nThis works for applications, but there is still some troubles with the gnome tweak tools and nautilus...\r\n\r\n<h3>gnome 3.10 trouble</h3>\r\n<p>GNOME 3.10 introduced <a href=\"http://worldofgnome.org/csds-came-to-stay-in-gnome-3-10/\">Client Side Decoration</a> (CSD), allowing application to paint the window border and buttons. Quoting from the linked site above:</p>\r\n<blockquote><p>A disadvantage of CSD is the inconsistency that brings between Apps that support them (mostly GNOME Apps) and Apps that don’t (3rd party Apps, like Firefox). However this is mostly in theory, because in practice, you won’t really be bothered from it.</p></blockquote>\r\n\r\n<p>A new widget called <a href=\"https://developer.gnome.org/gtk3/3.10/GtkHeaderBar.html\"><tt>GtkHeaderBar</tt></a> was added in the process, and it was decided that the <tt>GtkHeaderBar</tt> will forcibly put the <em>close button</em> in the right, and then <a href=\"https://bugzilla.gnome.org/show_bug.cgi?id=706708\">bug 706708</a> was filled.</p>\r\n\r\n<p>A <a href=\"https://git.gnome.org/browse/gtk+/commit/?id=54773ba45ba6348cc8c94e7fbab10049fac02884\">fix</a> was commited a month after the bug was filled and it entered in GTK+ 3.10.3. Now I can set the placement of the <em>close button</em> again, so Iet’s create a <tt>~/.config/gtk-3.0/gtk.css</tt> with the following content:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nGtkWindow {\r\n  -GtkWindow-decoration-button-layout: \"close:\";\r\n}\r\n</pre>\r\n\r\nThis will work for the tweak-tool, or at least they will try to honor the contract. The remaining problem is that they use two <tt>GtkHeaderBar</tt>, one for the left menu and one for the content. The result is thus kind of strange...\r\n\r\n<h3>Nautilus</h3>\r\nNautilus manually adds the close button at the end of the toolbar and I did not find the time to play with the source code...\r\n\r\ncoming soon !','Achlinux (gnome) tips and tricks','','inherit','closed','open','','431-revision-v1','','','2014-04-08 17:53:03','2014-04-08 17:53:03','',431,'http://localhost/html/?p=448',0,'revision','',0),(449,3,'2014-04-08 17:53:26','2014-04-08 17:53:26','<h2>Terminal does not remember working directory when opening a new tab</h2>\r\n\r\nNormally, I was used to keep the current directory when opening a new tab, which I loved. Indeed, I often opened a new tab then detached it using <code>F12</code> so I did not have to cp to a (too) long directory... But since my reinstall, this behavior seemed to have vanished. The answer is simple: \r\n<ol>\r\n	<li>Open a new terminal window</li>\r\n	<li>Clic on <code>Edit > Profile Preferences > Title and Command</code> and tick the <i>Run as a login shell</i></li>\r\n</ol>\r\n\r\nOpen a new windows and it is  solved.\r\n\r\n\r\n<h2>close button on the left</h2>\r\n\r\nFirst, open <tt>dconf-editor</tt> and change <code>gnome.shell.overrides button-layout</code> to \"<tt>close,maximize,minimize:</tt>\".\r\n\r\nThis works for applications, but there is still some troubles with the gnome tweak tools and nautilus...\r\n\r\n<h3>gnome 3.10 trouble</h3>\r\n<p>GNOME 3.10 introduced <a href=\"http://worldofgnome.org/csds-came-to-stay-in-gnome-3-10/\">Client Side Decoration</a> (CSD), allowing application to paint the window border and buttons. Quoting from the linked site above:</p>\r\n<blockquote><p>A disadvantage of CSD is the inconsistency that brings between Apps that support them (mostly GNOME Apps) and Apps that don’t (3rd party Apps, like Firefox). However this is mostly in theory, because in practice, you won’t really be bothered from it.</p></blockquote>\r\n\r\n<p>A new widget called <a href=\"https://developer.gnome.org/gtk3/3.10/GtkHeaderBar.html\"><tt>GtkHeaderBar</tt></a> was added in the process, and it was decided that the <tt>GtkHeaderBar</tt> will forcibly put the <em>close button</em> in the right, and then <a href=\"https://bugzilla.gnome.org/show_bug.cgi?id=706708\">bug 706708</a> was filled.</p>\r\n\r\n<p>A <a href=\"https://git.gnome.org/browse/gtk+/commit/?id=54773ba45ba6348cc8c94e7fbab10049fac02884\">fix</a> was commited a month after the bug was filled and it entered in GTK+ 3.10.3. Now I can set the placement of the <em>close button</em> again, so Iet’s create a <tt>~/.config/gtk-3.0/gtk.css</tt> with the following content:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nGtkWindow {\r\n  -GtkWindow-decoration-button-layout: \"close:\";\r\n}\r\n</pre>\r\n\r\nThis will work for the tweak-tool, or at least they will try to honor the contract. The remaining problem is that they use two <tt>GtkHeaderBar</tt>, one for the left menu and one for the content. The result is thus kind of strange...\r\n\r\n<a href=\"http://mmoya.org/blog/2013/11/16/to-left-or-not-to-left-gnome/\">source</a>\r\n\r\n<h3>Nautilus</h3>\r\nNautilus manually adds the close button at the end of the toolbar and I did not find the time to play with the source code...\r\n\r\ncoming soon !','Achlinux (gnome) tips and tricks','','inherit','closed','open','','431-revision-v1','','','2014-04-08 17:53:26','2014-04-08 17:53:26','',431,'http://localhost/html/?p=449',0,'revision','',0),(450,3,'2014-04-09 15:06:28','2014-04-09 15:06:28',' ','','','publish','closed','open','','450','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',23,'http://localhost/html/?p=450',11,'nav_menu_item','',0),(451,3,'2014-04-09 15:06:28','2014-04-09 15:06:28',' ','','','publish','closed','open','','451','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',23,'http://localhost/html/?p=451',12,'nav_menu_item','',0),(452,3,'2014-04-09 15:06:28','2014-04-09 15:06:28',' ','','','publish','closed','open','','452','','','2014-04-09 15:08:39','2014-04-09 15:08:39','',23,'http://localhost/html/?p=452',13,'nav_menu_item','',0),(453,3,'2014-04-09 15:25:34','2014-04-09 15:25:34','<h2>.desktop xdg-open (linux)</h2>\r\n\r\nDownload the icon : \r\n<pre class=\"prettyprint lang-text\">\r\ncurl http://upload.wikimedia.org/wikipedia/commons/2/21/Matlab_Logo.png -o /usr/share/icons/matlab.png</pre>.\r\n\r\nCreate the <tt>.desktop</tt> file\r\n<a href=\"http://localhost/html/wp-content/uploads/2014/04/matlab.desktop.txt\"><tt>~/.local/share/applications/matlab.desktop</tt></a>:\r\n<pre class=\"prettyprint lang-text\">\r\n[display_file path=/wp-content/resources/matlab.desktop]</pre>\r\n\r\nThen, add a custom file association by creating <a href=\"http://localhost/html/wp-content/uploads/2014/04/x-matlab.xml_.txt\"><tt>~/.local/share/mime/packages/x-matlab.xml</tt></a>.\r\n\r\nFinally, run:\r\n<pre class=\"prettyprint lang-text\">\r\nupdate-desktop-database ~/.local/share/applications\r\nupdate-mime-database    ~/.local/share/mime</pre>\r\n\r\n','matlab','','publish','closed','open','','matlab','','','2014-04-09 15:30:38','2014-04-09 15:30:38','',0,'http://localhost/html/?p=453',0,'post','',0),(454,3,'2014-04-09 15:16:28','2014-04-09 15:16:28','','matlab.desktop','','inherit','closed','open','','matlab-desktop','','','2014-04-09 15:16:28','2014-04-09 15:16:28','',453,'http://localhost/html/wp-content/uploads/2014/04/matlab.desktop.txt',0,'attachment','text/plain',0),(455,3,'2014-04-09 15:19:33','2014-04-09 15:19:33','','x-matlab.xml','','inherit','closed','open','','x-matlab-xml','','','2014-04-09 15:19:33','2014-04-09 15:19:33','',453,'http://localhost/html/wp-content/uploads/2014/04/x-matlab.xml_.txt',0,'attachment','text/plain',0),(456,3,'2014-04-09 15:22:46','2014-04-09 15:22:46','<h2>.desktop xdg-open (linux)</h2>\r\n\r\nDownload the icon : <code>curl http://upload.wikimedia.org/wikipedia/commons/2/21/Matlab_Logo.png -o /usr/share/icons/matlab.png</code>.\r\n\r\nCreate the <tt>.desktop</tt> file <tt>~/.local/share/applications/matlab.desktop</tt>:\r\n[display_file path=/wp-content/resources/matlab.desktop]\r\n\r\n','matlab','','inherit','closed','open','','453-revision-v1','','','2014-04-09 15:22:46','2014-04-09 15:22:46','',453,'http://localhost/html/?p=456',0,'revision','',0),(457,3,'2014-04-09 15:24:41','2014-04-09 15:24:41','<h2>.desktop xdg-open (linux)</h2>\r\n\r\nDownload the icon : <code>curl http://upload.wikimedia.org/wikipedia/commons/2/21/Matlab_Logo.png -o /usr/share/icons/matlab.png</code>.\r\n\r\nCreate the <tt>.desktop</tt> file <tt>~/.local/share/applications/matlab.desktop</tt>:\r\n<pre class=\"prettyprint lang-text\">\r\n[display_file path=/wp-content/resources/matlab.desktop]\r\n</pre>\r\n\r\nThen, add a custom file association by creating <tt>~/.local/share/mime/packages/x-matlab.xml</tt>:\r\n<pre class=\"prettyprint lang-text\">\r\n[display_file path=/wp-content/resources/x-matlab.xml]\r\n</pre>\r\n\r\n','matlab','','inherit','closed','open','','453-revision-v1','','','2014-04-09 15:24:41','2014-04-09 15:24:41','',453,'http://localhost/html/?p=457',0,'revision','',0),(458,3,'2014-04-09 15:25:34','2014-04-09 15:25:34','<h2>.desktop xdg-open (linux)</h2>\r\n\r\nDownload the icon : <code>curl http://upload.wikimedia.org/wikipedia/commons/2/21/Matlab_Logo.png -o /usr/share/icons/matlab.png</code>.\r\n\r\nCreate the <tt>.desktop</tt> file <tt>~/.local/share/applications/matlab.desktop</tt>:\r\n<pre class=\"prettyprint lang-text\">\r\n[display_file path=/wp-content/resources/matlab.desktop]</pre>\r\n\r\nThen, add a custom file association by creating <tt>~/.local/share/mime/packages/x-matlab.xml</tt>:\r\n<pre class=\"prettyprint lang-text\">\r\n[display_file path=/wp-content/resources/x-matlab.xml]</pre>\r\n\r\nFinally, run:\r\n<pre class=\"prettyprint lang-text\">\r\nupdate-desktop-database ~/.local/share/applications\r\nupdate-mime-database    ~/.local/share/mime</pre>\r\n\r\n','matlab','','inherit','closed','open','','453-revision-v1','','','2014-04-09 15:25:34','2014-04-09 15:25:34','',453,'http://localhost/html/?p=458',0,'revision','',0),(459,3,'2014-04-09 15:30:31','2014-04-09 15:30:31','<h2>.desktop xdg-open (linux)</h2>\r\n\r\nDownload the icon : \r\n<pre class=\"prettyprint lang-text\">\r\ncurl http://upload.wikimedia.org/wikipedia/commons/2/21/Matlab_Logo.png -o /usr/share/icons/matlab.png</pre>.\r\n\r\nCreate the <tt>.desktop</tt> file\r\n<a href=\"http://localhost/html/wp-content/uploads/2014/04/matlab.desktop.txt\"><tt>~/.local/share/applications/matlab.desktop</tt></a>:\r\n<pre class=\"prettyprint lang-text\">\r\n[display_file path=/wp-content/resources/matlab.desktop]</pre>\r\n\r\nThen, add a custom file association by creating <a href=\"http://localhost/html/wp-content/uploads/2014/04/x-matlab.xml_.txt\"><tt>~/.local/share/mime/packages/x-matlab.xml</tt></a>.\r\n\r\nFinally, run:\r\n<pre class=\"prettyprint lang-text\">\r\nupdate-desktop-database ~/.local/share/applications\r\nupdate-mime-database    ~/.local/share/mime</pre>\r\n\r\n','matlab','','inherit','closed','open','','453-autosave-v1','','','2014-04-09 15:30:31','2014-04-09 15:30:31','',453,'http://localhost/html/?p=459',0,'revision','',0),(460,3,'2014-04-09 15:29:40','2014-04-09 15:29:40','<h2>.desktop xdg-open (linux)</h2>\r\n\r\nDownload the icon : <code>curl http://upload.wikimedia.org/wikipedia/commons/2/21/Matlab_Logo.png -o /usr/share/icons/matlab.png</code>.\r\n\r\nCreate the <tt>.desktop</tt> file\r\n<a href=\"http://localhost/html/wp-content/uploads/2014/04/matlab.desktop.txt\"><tt>~/.local/share/applications/matlab.desktop</tt></a>:\r\n<pre class=\"prettyprint lang-text\">\r\n[display_file path=/wp-content/resources/matlab.desktop]</pre>\r\n\r\nThen, add a custom file association by creating <a href=\"http://localhost/html/wp-content/uploads/2014/04/x-matlab.xml_.txt\"><tt>~/.local/share/mime/packages/x-matlab.xml</tt></a>.\r\n\r\nFinally, run:\r\n<pre class=\"prettyprint lang-text\">\r\nupdate-desktop-database ~/.local/share/applications\r\nupdate-mime-database    ~/.local/share/mime</pre>\r\n\r\n','matlab','','inherit','closed','open','','453-revision-v1','','','2014-04-09 15:29:40','2014-04-09 15:29:40','',453,'http://localhost/html/?p=460',0,'revision','',0),(461,3,'2014-04-09 15:30:05','2014-04-09 15:30:05','<h2>.desktop xdg-open (linux)</h2>\r\n\r\nDownload the icon : <pre class=\"prettyprint lang-text\">curl http://upload.wikimedia.org/wikipedia/commons/2/21/Matlab_Logo.png -o /usr/share/icons/matlab.png</pre>.\r\n\r\nCreate the <tt>.desktop</tt> file\r\n<a href=\"http://localhost/html/wp-content/uploads/2014/04/matlab.desktop.txt\"><tt>~/.local/share/applications/matlab.desktop</tt></a>:\r\n<pre class=\"prettyprint lang-text\">\r\n[display_file path=/wp-content/resources/matlab.desktop]</pre>\r\n\r\nThen, add a custom file association by creating <a href=\"http://localhost/html/wp-content/uploads/2014/04/x-matlab.xml_.txt\"><tt>~/.local/share/mime/packages/x-matlab.xml</tt></a>.\r\n\r\nFinally, run:\r\n<pre class=\"prettyprint lang-text\">\r\nupdate-desktop-database ~/.local/share/applications\r\nupdate-mime-database    ~/.local/share/mime</pre>\r\n\r\n','matlab','','inherit','closed','open','','453-revision-v1','','','2014-04-09 15:30:05','2014-04-09 15:30:05','',453,'http://localhost/html/?p=461',0,'revision','',0),(462,3,'2014-04-09 15:30:15','2014-04-09 15:30:15','<h2>.desktop xdg-open (linux)</h2>\r\n\r\nDownload the icon : \r\n<pre class=\"prettyprint lang-text\">curl http://upload.wikimedia.org/wikipedia/commons/2/21/Matlab_Logo.png -o /usr/share/icons/matlab.png</pre>.\r\n\r\nCreate the <tt>.desktop</tt> file\r\n<a href=\"http://localhost/html/wp-content/uploads/2014/04/matlab.desktop.txt\"><tt>~/.local/share/applications/matlab.desktop</tt></a>:\r\n<pre class=\"prettyprint lang-text\">\r\n[display_file path=/wp-content/resources/matlab.desktop]</pre>\r\n\r\nThen, add a custom file association by creating <a href=\"http://localhost/html/wp-content/uploads/2014/04/x-matlab.xml_.txt\"><tt>~/.local/share/mime/packages/x-matlab.xml</tt></a>.\r\n\r\nFinally, run:\r\n<pre class=\"prettyprint lang-text\">\r\nupdate-desktop-database ~/.local/share/applications\r\nupdate-mime-database    ~/.local/share/mime</pre>\r\n\r\n','matlab','','inherit','closed','open','','453-revision-v1','','','2014-04-09 15:30:15','2014-04-09 15:30:15','',453,'http://localhost/html/?p=462',0,'revision','',0),(463,3,'2014-04-09 15:30:38','2014-04-09 15:30:38','<h2>.desktop xdg-open (linux)</h2>\r\n\r\nDownload the icon : \r\n<pre class=\"prettyprint lang-text\">\r\ncurl http://upload.wikimedia.org/wikipedia/commons/2/21/Matlab_Logo.png -o /usr/share/icons/matlab.png</pre>.\r\n\r\nCreate the <tt>.desktop</tt> file\r\n<a href=\"http://localhost/html/wp-content/uploads/2014/04/matlab.desktop.txt\"><tt>~/.local/share/applications/matlab.desktop</tt></a>:\r\n<pre class=\"prettyprint lang-text\">\r\n[display_file path=/wp-content/resources/matlab.desktop]</pre>\r\n\r\nThen, add a custom file association by creating <a href=\"http://localhost/html/wp-content/uploads/2014/04/x-matlab.xml_.txt\"><tt>~/.local/share/mime/packages/x-matlab.xml</tt></a>.\r\n\r\nFinally, run:\r\n<pre class=\"prettyprint lang-text\">\r\nupdate-desktop-database ~/.local/share/applications\r\nupdate-mime-database    ~/.local/share/mime</pre>\r\n\r\n','matlab','','inherit','closed','open','','453-revision-v1','','','2014-04-09 15:30:38','2014-04-09 15:30:38','',453,'http://localhost/html/?p=463',0,'revision','',0),(465,3,'2014-04-30 16:52:31','2014-04-30 16:52:31','<h2>Installation</h2>\r\nInstall:\r\n<ul>\r\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=xf86-video-nouveau\" rel=\"nofollow\">xf86-video-nouveau</a></span> - experimental 3D acceleration driver.</li>\r\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=nouveau-dri\" rel=\"nofollow\">nouveau-dri</a></span> - Mesa classic DRI + Gallium3D drivers.</li>\r\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=mesa\" rel=\"nofollow\">mesa</a></span> - Mesa 3D graphics libraries.</li>\r\n	<li><span style=\"font-family: monospace;\">bbswitch</span> - used to switch card on and off</li>\r\n	<li> <span style=\"font-family: monospace\"><a rel=\"nofollow\" class=\"external text\" href=\"https://www.archlinux.org/packages/?name=bumblebee\">bumblebee</a></span> - The main package providing the daemon and client programs.\r\n</li>\r\n</ul>\r\nNote that you don\'t need <tt>nvidia</tt> or <tt>nvidia-utils</tt>.\r\nOpen the file <tt>/etc/bumblebee/bumblebee.conf</tt> and modify the line <code>Driver=</code> by <code>Driver=nouveau</code>.\r\n\r\n<h2>Launch</h2>\r\nFor testing, do the following, in this order:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo modprobe bbswitch # load kernel module\r\nsudo bumblebeed -vv # verbose mode\r\n\r\n# in another terminal\r\nintel-virtual-output\r\n# now check in display if a new screen appears, or type optirun true\r\n</pre>\r\n\r\nIf it works, simply set bumblebeed as a service at startup and you are done! To use an external monitor, type <code>intel-virtual-output</code> and enjoy.\r\n\r\n\r\n<h2>Modification from the previous posts</h2>\r\nAfter weeks of trying, I discovered that using <tt>driver=nvidia</tt> in bumblebee, which was required in ubuntu (at least when I tried). It seems that something changed, since now switching back to nouveau resolved everything !! YOUPIEE','Archlinux, bumblebee, nvidia','','publish','closed','open','','archlinux-bumblebee-nvidia','','','2014-04-30 17:04:16','2014-04-30 17:04:16','',0,'http://localhost/html/?p=465',0,'post','',0),(466,3,'2014-04-30 16:52:31','2014-04-30 16:52:31','<h2>Installation</h2>\r\nInstall\r\n<ul>\r\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=xf86-video-nouveau\" rel=\"nofollow\">xf86-video-nouveau</a></span> - experimental 3D acceleration driver.</li>\r\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=nouveau-dri\" rel=\"nofollow\">nouveau-dri</a></span> - Mesa classic DRI + Gallium3D drivers.</li>\r\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=mesa\" rel=\"nofollow\">mesa</a></span> - Mesa 3D graphics libraries.</li>\r\n	<li><span style=\"font-family: monospace;\">bbswitch</span> - used to switch card on and off</li>\r\n	<li> <span style=\"font-family: monospace\"><a rel=\"nofollow\" class=\"external text\" href=\"https://www.archlinux.org/packages/?name=bumblebee\">bumblebee</a></span> - The main package providing the daemon and client programs.\r\n</li>\r\n</ul>','Archlinux, bumblebee, nvidia','','inherit','closed','open','','465-revision-v1','','','2014-04-30 16:52:31','2014-04-30 16:52:31','',465,'http://localhost/html/?p=466',0,'revision','',0),(467,3,'2014-04-30 17:02:32','2014-04-30 17:02:32','<h2>Installation</h2>\nInstall:\n<ul>\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=xf86-video-nouveau\" rel=\"nofollow\">xf86-video-nouveau</a></span> - experimental 3D acceleration driver.</li>\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=nouveau-dri\" rel=\"nofollow\">nouveau-dri</a></span> - Mesa classic DRI + Gallium3D drivers.</li>\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=mesa\" rel=\"nofollow\">mesa</a></span> - Mesa 3D graphics libraries.</li>\n	<li><span style=\"font-family: monospace;\">bbswitch</span> - used to switch card on and off</li>\n	<li> <span style=\"font-family: monospace\"><a rel=\"nofollow\" class=\"external text\" href=\"https://www.archlinux.org/packages/?name=bumblebee\">bumblebee</a></span> - The main package providing the daemon and client programs.\n</li>\n</ul>\nNote that you don\'t need <tt>nvidia</tt> or <tt>nvidia-utils</tt>.\nOpen the file <tt>/etc/bumblebee/bumblebee.conf</tt> and modify the line <code>Driver=</code> by <code>Driver=nouveau</code>.\n\n<h2>Launch</h2>\nFor testing, do the following, in this order:\n<pre class=\"prettyprint lang-text\">\nsudo modprobe bbswitch # load kernel module\nsudo bumblebeed -vv # verbose mode\n\n# in another terminal\nintel-virtual-output\n# now check in display if a new screen appears, or type optirun true\n</pre>\n\nIf it works, simply set bumblebeed as a service at startup and you are done! To use an external monitor, type <code>intel-virtual-output</code> and enjoy.\n\n\n<h2>Modification from the previous posts</h2>\nAfter weeks of trying, I discovered that using <tt>driver=nvidia</tt> in bumblebee, which was required in ubuntu (at least when I tried). It seems that something changed, since now switching back to nouveau ','Archlinux, bumblebee, nvidia','','inherit','closed','open','','465-autosave-v1','','','2014-04-30 17:02:32','2014-04-30 17:02:32','',465,'http://localhost/html/?p=467',0,'revision','',0),(468,3,'2014-04-30 17:03:22','2014-04-30 17:03:22','<h2>Installation</h2>\r\nInstall:\r\n<ul>\r\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=xf86-video-nouveau\" rel=\"nofollow\">xf86-video-nouveau</a></span> - experimental 3D acceleration driver.</li>\r\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=nouveau-dri\" rel=\"nofollow\">nouveau-dri</a></span> - Mesa classic DRI + Gallium3D drivers.</li>\r\n	<li><span style=\"font-family: monospace;\"><a class=\"external text\" href=\"https://www.archlinux.org/packages/?name=mesa\" rel=\"nofollow\">mesa</a></span> - Mesa 3D graphics libraries.</li>\r\n	<li><span style=\"font-family: monospace;\">bbswitch</span> - used to switch card on and off</li>\r\n	<li> <span style=\"font-family: monospace\"><a rel=\"nofollow\" class=\"external text\" href=\"https://www.archlinux.org/packages/?name=bumblebee\">bumblebee</a></span> - The main package providing the daemon and client programs.\r\n</li>\r\n</ul>\r\nNote that you don\'t need <tt>nvidia</tt> or <tt>nvidia-utils</tt>.\r\nOpen the file <tt>/etc/bumblebee/bumblebee.conf</tt> and modify the line <code>Driver=</code> by <code>Driver=nouveau</code>.\r\n\r\n<h2>Launch</h2>\r\nFor testing, do the following, in this order:\r\n<pre class=\"prettyprint lang-text\">\r\nsudo modprobe bbswitch # load kernel module\r\nsudo bumblebeed -vv # verbose mode\r\n\r\n# in another terminal\r\nintel-virtual-output\r\n# now check in display if a new screen appears, or type optirun true\r\n</pre>\r\n\r\nIf it works, simply set bumblebeed as a service at startup and you are done! To use an external monitor, type <code>intel-virtual-output</code> and enjoy.\r\n\r\n\r\n<h2>Modification from the previous posts</h2>\r\nAfter weeks of trying, I discovered that using <tt>driver=nvidia</tt> in bumblebee, which was required in ubuntu (at least when I tried). It seems that something changed, since now switching back to nouveau resolved everything !! YOUPIEE','Archlinux, bumblebee, nvidia','','inherit','closed','open','','465-revision-v1','','','2014-04-30 17:03:22','2014-04-30 17:03:22','',465,'http://localhost/html/?p=468',0,'revision','',0),(469,3,'2014-05-17 09:12:55','2014-05-17 09:12:55','[display_file path=/wp-content/themes/twentythirteen-child/post-files/vim.html]','Vim tricks','','publish','closed','open','','vim-tricks','','','2014-06-21 17:55:53','2014-06-21 17:55:53','',0,'http://localhost/html/?p=469',0,'post','',0),(470,3,'2014-05-17 08:43:01','2014-05-17 08:43:01','<h2>Moving across windows</h2>\r\n\r\nTo facilitate the use of multiple windows, you can easily remap the\r\n<tt>wincmd</tt> to your favorite key combos. For me, it is space and then the\r\narrow:\r\n<pre class=\"prettyprint lang-text\">\r\nnmap <silent> <space><Up> :wincmd k<CR>\r\nnmap <silent> <space><Down> :wincmd j<CR>\r\nnmap <silent> <space><Left> :wincmd h<CR>\r\nnmap <silent> <space><Right> :wincmd l<CR>\r\n</pre>\r\nYou can also use the built-in <code><ctrl>w [arrow]</code>\r\n\r\nTo open a new window: <code>sp [h|v]</code>, for horizontal or vertical.\r\n\r\n<h2>Misc</h2>\r\n\r\n<table>\r\n    <tr><td>Command</td><td>Action</td></tr>\r\n    <tr><td>.</td><td>repeats the last change made in normal mode</td></tr>\r\n</table>\r\n\r\n','Vim tricks','','inherit','closed','open','','469-revision-v1','','','2014-05-17 08:43:01','2014-05-17 08:43:01','',469,'http://localhost/html/?p=470',0,'revision','',0),(471,3,'2014-05-17 08:43:20','2014-05-17 08:43:20','<h2>Moving across windows</h2>\r\nTo facilitate the use of multiple windows, you can easily remap the\r\n<tt>wincmd</tt> to your favorite key combos. For me, it is space and then the\r\narrow:\r\n<pre class=\"prettyprint lang-text\">nmap   :wincmd k\r\nnmap   :wincmd j\r\nnmap   :wincmd h\r\nnmap   :wincmd l</pre>\r\nYou can also use the built-in <code>w [arrow]</code>\r\n\r\nTo open a new window: <code>sp [h|v]</code>, for horizontal or vertical.\r\n<h2>Misc</h2>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td><strong>Command</strong></td>\r\n<td><strong>Action</strong></td>\r\n</tr>\r\n<tr>\r\n<td>.</td>\r\n<td>repeats the last change made in normal mode</td>\r\n</tr>\r\n</tbody>\r\n</table>','Vim tricks','','inherit','closed','open','','469-revision-v1','','','2014-05-17 08:43:20','2014-05-17 08:43:20','',469,'http://localhost/html/?p=471',0,'revision','',0),(472,3,'2014-05-17 09:02:21','2014-05-17 09:02:21','[display_file path=/wp-content/themes/twentythirteen-child/post-files/vim.html]','Vim tricks','','inherit','closed','open','','469-revision-v1','','','2014-05-17 09:02:21','2014-05-17 09:02:21','',469,'http://localhost/html/?p=472',0,'revision','',0),(473,3,'2014-05-18 16:50:19','2014-05-18 16:50:19','[display_file path=wp-content/themes/twentythirteen-child/post-files/git.html]','Git tips and tricks','','inherit','closed','open','','149-revision-v1','','','2014-05-18 16:50:19','2014-05-18 16:50:19','',149,'http://localhost/html/?p=473',0,'revision','',0),(474,3,'2014-05-18 17:41:16','2014-05-18 17:41:16','<h2>Turn off Office animations</h2>\r\nOffice 2013 is the first release to use hardware acceleration throughout the user experience to deliver beautiful, fluid animations. But if you use your computer without a display or just prefer to block unnecessary animations, you have the choice to turn them off.\r\n<ol>\r\n	<li>Open the Ease of Access Center (shown below) by pressing the Windows logo key + U.</li>\r\n	<li>Under Explore all settings, click Use the computer without a display.</li>\r\n	<li>Under Adjust time limits and flashing visuals, click Turn off all unnecessary animations (when possible).</li>\r\n	<li>Click OK.</li>\r\n</ol>\r\nTo go even further:\r\n<ol>\r\n	<li>open Microsoft Word</li>\r\n	<li>click of File &gt; Options &gt; Advanced</li>\r\n	<li>scroll to the display section</li>\r\n	<li>check \"Disable hardware acceleration</li>\r\n	<li>uncheck \"use subpixel positioning to smooth font on screen\"</li>\r\n	<li>restart Microsoft Word</li>\r\n</ol>\r\n<a href=\"http://localhost/html/wp-content/uploads/2014/05/disable-animations-ms-word.png\"><img class=\"size-full wp-image-478 aligncenter\" alt=\"disable animations ms word\" src=\"http://localhost/html/wp-content/uploads/2014/05/disable-animations-ms-word.png\" width=\"617\" height=\"375\" /></a>\r\n<h2>Disable password on login</h2>\r\n<ol>\r\n	<li>launch a terminal in admin mode</li>\r\n	<li>type <code>control userpassword2</code></li>\r\n	<li>uncheck users must entre a username and password to use this computer</li>\r\n	<li>click apply</li>\r\n</ol>','Windows 8 tips and tricks','','publish','closed','open','','turn-off-office-animations','','','2014-05-19 10:17:08','2014-05-19 10:17:08','',0,'http://localhost/html/?p=474',0,'post','',0),(475,3,'2014-05-18 17:40:14','2014-05-18 17:40:14','Office 2013 is the first release to use hardware acceleration throughout the user experience to deliver beautiful, fluid animations. But if you use your computer without a display or just prefer to block unnecessary animations, you have the choice to turn them off.\r\n1.Open the Ease of Access Center (shown below) by pressing the Windows logo key + U.\r\n2.Under Explore all settings, click Use the computer without a display.\r\n3.Under Adjust time limits and flashing visuals, click Turn off all unnecessary animations (when possible).\r\n4.Click OK.\"','Turn off Office animations','','inherit','closed','open','','474-revision-v1','','','2014-05-18 17:40:14','2014-05-18 17:40:14','',474,'http://localhost/html/?p=475',0,'revision','',0),(476,3,'2014-05-18 17:40:39','2014-05-18 17:40:39','Office 2013 is the first release to use hardware acceleration throughout the user experience to deliver beautiful, fluid animations. But if you use your computer without a display or just prefer to block unnecessary animations, you have the choice to turn them off.\r\n<ol>\r\n	<li>Open the Ease of Access Center (shown below) by pressing the Windows logo key + U.</li>\r\n	<li>Under Explore all settings, click Use the computer without a display.</li>\r\n	<li>Under Adjust time limits and flashing visuals, click Turn off all unnecessary animations (when possible).</li>\r\n	<li>Click OK.\"</li>\r\n</ol>','Turn off Office animations','','inherit','closed','open','','474-revision-v1','','','2014-05-18 17:40:39','2014-05-18 17:40:39','',474,'http://localhost/html/?p=476',0,'revision','',0),(477,3,'2014-05-19 10:16:30','2014-05-19 10:16:30','<h2>Turn off Office animations</h2>\nOffice 2013 is the first release to use hardware acceleration throughout the user experience to deliver beautiful, fluid animations. But if you use your computer without a display or just prefer to block unnecessary animations, you have the choice to turn them off.\n<ol>\n	<li>Open the Ease of Access Center (shown below) by pressing the Windows logo key + U.</li>\n	<li>Under Explore all settings, click Use the computer without a display.</li>\n	<li>Under Adjust time limits and flashing visuals, click Turn off all unnecessary animations (when possible).</li>\n	<li>Click OK.</li>\n</ol>\nTo go even further:\n<ol>\n	<li>open Microsoft Word</li>\n	<li>click of File &gt; Options &gt; Advanced</li>\n	<li>scroll to the display section</li>\n	<li>check \"Disable hardware acceleration</li>\n	<li>uncheck \"use subpixel positioning to smooth font on screen\"</li>\n	<li>restart Microsoft Word</li>\n</ol>\n<a href=\"http://localhost/html/wp-content/uploads/2014/05/disable-animations-ms-word.png\"><img class=\"size-full wp-image-478 aligncenter\" alt=\"disable animations ms word\" src=\"http://localhost/html/wp-content/uploads/2014/05/disable-animations-ms-word.png\" width=\"617\" height=\"375\" /></a>\n<h2>Disable password on login</h2>\npress','Windows 8 tips and tricks','','inherit','closed','open','','474-autosave-v1','','','2014-05-19 10:16:30','2014-05-19 10:16:30','',474,'http://localhost/html/?p=477',0,'revision','',0),(478,3,'2014-05-18 17:48:46','2014-05-18 17:48:46','','disable animations ms word','','inherit','closed','open','','disable-animations-ms-word','','','2014-05-18 17:48:46','2014-05-18 17:48:46','',474,'http://localhost/html/wp-content/uploads/2014/05/disable-animations-ms-word.png',0,'attachment','image/png',0),(479,3,'2014-05-18 17:49:31','2014-05-18 17:49:31','Office 2013 is the first release to use hardware acceleration throughout the user experience to deliver beautiful, fluid animations. But if you use your computer without a display or just prefer to block unnecessary animations, you have the choice to turn them off.\r\n<ol>\r\n	<li>Open the Ease of Access Center (shown below) by pressing the Windows logo key + U.</li>\r\n	<li>Under Explore all settings, click Use the computer without a display.</li>\r\n	<li>Under Adjust time limits and flashing visuals, click Turn off all unnecessary animations (when possible).</li>\r\n	<li>Click OK.</li>\r\n</ol>\r\nTo go even further:\r\n<ol>\r\n	<li>open Microsoft Word</li>\r\n	<li>click of File &gt; Options &gt; Advanced</li>\r\n	<li>scroll to the display section</li>\r\n	<li>check \"Disable hardware acceleration</li>\r\n	<li>uncheck \"use subpixel positioning to smooth font on screen\"</li>\r\n	<li>restart Microsoft Word</li>\r\n</ol>\r\n<a href=\"http://localhost/html/wp-content/uploads/2014/05/disable-animations-ms-word.png\"><img class=\"size-full wp-image-478 aligncenter\" alt=\"disable animations ms word\" src=\"http://localhost/html/wp-content/uploads/2014/05/disable-animations-ms-word.png\" width=\"617\" height=\"375\" /></a>','Turn off Office animations','','inherit','closed','open','','474-revision-v1','','','2014-05-18 17:49:31','2014-05-18 17:49:31','',474,'http://localhost/html/?p=479',0,'revision','',0),(480,3,'2014-05-19 10:17:08','2014-05-19 10:17:08','<h2>Turn off Office animations</h2>\r\nOffice 2013 is the first release to use hardware acceleration throughout the user experience to deliver beautiful, fluid animations. But if you use your computer without a display or just prefer to block unnecessary animations, you have the choice to turn them off.\r\n<ol>\r\n	<li>Open the Ease of Access Center (shown below) by pressing the Windows logo key + U.</li>\r\n	<li>Under Explore all settings, click Use the computer without a display.</li>\r\n	<li>Under Adjust time limits and flashing visuals, click Turn off all unnecessary animations (when possible).</li>\r\n	<li>Click OK.</li>\r\n</ol>\r\nTo go even further:\r\n<ol>\r\n	<li>open Microsoft Word</li>\r\n	<li>click of File &gt; Options &gt; Advanced</li>\r\n	<li>scroll to the display section</li>\r\n	<li>check \"Disable hardware acceleration</li>\r\n	<li>uncheck \"use subpixel positioning to smooth font on screen\"</li>\r\n	<li>restart Microsoft Word</li>\r\n</ol>\r\n<a href=\"http://localhost/html/wp-content/uploads/2014/05/disable-animations-ms-word.png\"><img class=\"size-full wp-image-478 aligncenter\" alt=\"disable animations ms word\" src=\"http://localhost/html/wp-content/uploads/2014/05/disable-animations-ms-word.png\" width=\"617\" height=\"375\" /></a>\r\n<h2>Disable password on login</h2>\r\n<ol>\r\n	<li>launch a terminal in admin mode</li>\r\n	<li>type <code>control userpassword2</code></li>\r\n	<li>uncheck users must entre a username and password to use this computer</li>\r\n	<li>click apply</li>\r\n</ol>','Windows 8 tips and tricks','','inherit','closed','open','','474-revision-v1','','','2014-05-19 10:17:08','2014-05-19 10:17:08','',474,'http://localhost/html/?p=480',0,'revision','',0),(481,3,'2014-05-28 17:23:25','2014-05-28 17:23:25','Eclipse offers a lot of settings for the colors and stuff. But it is really disappointing when the preview is right, but the real interface is not.\r\nThe best thing to do to have a clean, nice eclipse is to remove all its css files:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n# eclipse is often in /usr/share or /opt\r\ncd eclipse/plugins/org.eclipse.platform_[your version]\r\nrm *.css\r\nrm -rf css/\r\n</pre>\r\n\r\nEt voila.','Eclipse customisation','','publish','closed','open','','eclipse-customisation','','','2014-05-28 17:23:25','2014-05-28 17:23:25','',0,'http://localhost/html/?p=481',0,'post','',0),(482,3,'2014-05-28 17:23:25','2014-05-28 17:23:25','Eclipse offers a lot of settings for the colors and stuff. But it is really disappointing when the preview is right, but the real interface is not.\r\nThe best thing to do to have a clean, nice eclipse is to remove all its css files:\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n# eclipse is often in /usr/share or /opt\r\ncd eclipse/plugins/org.eclipse.platform_[your version]\r\nrm *.css\r\nrm -rf css/\r\n</pre>\r\n\r\nEt voila.','Eclipse customisation','','inherit','closed','open','','481-revision-v1','','','2014-05-28 17:23:25','2014-05-28 17:23:25','',481,'http://localhost/html/?p=482',0,'revision','',0),(483,3,'2014-06-17 10:28:39','2014-06-17 10:28:39','<h2>NetworkManager config</h2>\r\nedit the corresponding file in <tt>/etc/NetworkManager/system-connections/</tt>, and add/modify the following:\r\n<pre class=\"prettyprint lang-text\">\r\n[802-1x]\r\n...\r\npassword-flags=0      # change it to 0 instead of 1\r\nsystem-ca-certs=false # instead of true to avoid no cert error\r\npassword=YourPass     # careful, it is in clear text !!\r\n</pre>\r\n','Network Linux tips and tricks','','publish','closed','open','','network-linux-tips-and-tricks','','','2014-06-17 10:28:39','2014-06-17 10:28:39','',0,'http://localhost/html/?p=483',0,'post','',0),(484,3,'2014-06-17 10:28:14','2014-06-17 10:28:14','<h2>NetworkManager config</h2>\r\nedit the corresponding file in <tt>/etc/NetworkManager/system-connections/</tt>, and add/modify the following:\r\n<pre class=\"prettyprint lang-sh\">\r\n[802-1x]\r\n...\r\npassword-flags=0      # change it to 0 instead of 1\r\nsystem-ca-certs=false # instead of true to avoid no cert error\r\npassword=YourPass     # careful, it is in clear text !!\r\n</pre>\r\n','Network Linux tips and tricks','','inherit','closed','open','','483-revision-v1','','','2014-06-17 10:28:14','2014-06-17 10:28:14','',483,'http://localhost/html/?p=484',0,'revision','',0),(485,3,'2014-06-17 10:28:25','2014-06-17 10:28:25','<h2>NetworkManager config</h2>\r\nedit the corresponding file in <tt>/etc/NetworkManager/system-connections/</tt>, and add/modify the following:\r\n<pre class=\"prettyprint lang-text\">\r\n[802-1x]\r\n...\r\npassword-flags=0      # change it to 0 instead of 1\r\nsystem-ca-certs=false # instead of true to avoid no cert error\r\npassword=YourPass     # careful, it is in clear text !!\r\n</pre>\r\n','Network Linux tips and tricks','','inherit','closed','open','','483-revision-v1','','','2014-06-17 10:28:25','2014-06-17 10:28:25','',483,'http://localhost/html/?p=485',0,'revision','',0),(486,3,'2014-06-21 17:55:23','2014-06-21 17:55:23','[display_file path=/wp-content/themes/twentythirteen-child/post-files/latex_multiple_files_integration.html]','Latex, merging multiple documents ','','publish','closed','open','','latex-merging-multiple-documents','','','2014-06-21 17:55:36','2014-06-21 17:55:36','',0,'http://localhost/html/?p=486',0,'post','',0),(488,3,'2014-06-21 17:54:29','2014-06-21 17:54:29','[display_file path=/wp-content/themes/twentythirteen-child/post-files/latex_multiple_files_integration.html]','Latex, merging multiple documents ','','inherit','closed','open','','486-revision-v1','','','2014-06-21 17:54:29','2014-06-21 17:54:29','',486,'http://localhost/html/?p=488',0,'revision','',0),(490,3,'2014-06-25 07:08:32','0000-00-00 00:00:00','[display_file path=/wp-content/themes/twentythirteen-child/post-files/clonezilla.html]','Clonezilla','','draft','closed','open','','','','','2014-06-25 07:08:32','2014-06-25 07:08:32','',0,'http://localhost/html/?p=490',0,'post','',0),(491,3,'2014-06-25 07:08:32','2014-06-25 07:08:32','[display_file path=/wp-content/themes/twentythirteen-child/post-files/clonezilla.html]','Clonezilla','','inherit','closed','open','','490-revision-v1','','','2014-06-25 07:08:32','2014-06-25 07:08:32','',490,'http://localhost/html/?p=491',0,'revision','',0),(492,3,'2014-06-30 17:25:08','2014-06-30 17:25:08','<h2>Easier installs with Yaourt</h2>\r\n\r\nCreate or open the file <tt>~/.yaourtrc</tt> and add/uncomment the following:\r\n<pre class=\"prettyprint lang-text\">\r\nBUILD_NOCONFIRM=1 # No confirm for build \r\nEDITFILES=0 	  # No prompt for editing files\r\n# to also suppress pacman Y|n install:\r\nPU_NOCONFIRM=1\r\n</pre>','Archlinux tips and tricks','','publish','closed','open','','archlinux-tips-and-tricks','','','2014-06-30 17:25:08','2014-06-30 17:25:08','',0,'http://localhost/html/?p=492',0,'post','',0),(493,3,'2014-06-30 17:24:59','2014-06-30 17:24:59','<h2>Easier installs with Yaourt</h2>\r\n\r\nCreate or open the file <tt>~/.yaourtrc</tt> and add/uncomment the following:\r\n<pre class=\"prettyprint lang-text\">\r\nBUILD_NOCONFIRM=1 # No confirm for build \r\nEDITFILES=0 	  # No prompt for editing files\r\n# to also suppress pacman Y|n install:\r\nPU_NOCONFIRM=1\r\n</pre>','Archlinux tips and tricks','','inherit','closed','open','','492-revision-v1','','','2014-06-30 17:24:59','2014-06-30 17:24:59','',492,'http://localhost/html/?p=493',0,'revision','',0),(494,3,'2014-07-03 10:07:38','2014-07-03 10:07:38','[display_file path=/wp-content/themes/twentythirteen-child/post-files/latex_tips.html]','Latex tips and tricks','','publish','closed','open','','latex-tips-and-tricks','','','2014-07-03 10:07:38','2014-07-03 10:07:38','',0,'http://localhost/html/?p=494',0,'post','',0),(495,3,'2014-07-03 10:07:31','2014-07-03 10:07:31','[display_file path=/wp-content/themes/twentythirteen-child/post-files/latex_tips.html]','Latex tips and tricks','','inherit','closed','open','','494-revision-v1','','','2014-07-03 10:07:31','2014-07-03 10:07:31','',494,'http://localhost/html/?p=495',0,'revision','',0),(496,3,'2014-07-03 11:28:27','2014-07-03 11:28:27','<pre class=\"prettyprint lang-tex\">\r\n\\\\begin{figure*}[h]\r\n    \\begin{center}\r\n        \\includegraphics[width=.9\\textwidth]{diag_q1}\r\n        \\caption{Différentes forêts de parcours}\r\n    \\end{center}\r\n\\end{figure*}\r\n</pre>','Latex tips and tricks','','inherit','closed','open','','494-autosave-v1','','','2014-07-03 11:28:27','2014-07-03 11:28:27','',494,'http://localhost/html/?p=496',0,'revision','',0),(498,3,'2014-07-03 17:57:49','2014-07-03 17:57:49','<h2>cutePDF Editor</h2>\r\nTo manipulate pdfs less than 5MB, <a href=\"https://www.cutepdf-editor.com/edit.asp\">cutpdf-editor</a> is really a nive tool.\r\n\r\nEverything is made online; you can crop, resize, merge, remove pages, etc. and then save the result on your machine.\r\n\r\n<h2>pdftk: a powerful commandline tool</h2>\r\n<a href=\"http://www.pdflabs.com/docs/pdftk-man-page/\">pdftk (man page)</a> is a really powerful tool, which allow us to do pretty everything we want fast and without any restriction in size.\r\n\r\nThe syntax is always the same : <pre class=\"prettyprint lang-text\">pdftk [pdf in] [operation] [page range] output [pdf out]</pre>.\r\n\r\nHere is a sample of what it can do:\r\n<ul>\r\n<li>remove some pages from in.pdf. cat = concatenate\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-5 7 9-21 23 25-33 output out2.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 90 degrees right (possibilities = north, south, east, west, left, right, or down), keeping even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf rotate 1-endoddnorth output out.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 180 degrees left and remove even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-endoddleft output out.pdf\r\n</pre>	\r\n</li>\r\n<li>collate documents A and B, merging them one page after another (1A-1B-2A-2B...):\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle A B output out.pdf\r\n</pre>\r\n</li>\r\n<li>collate documents A and B, but keep only even pages from B and rotate pages from A:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle \\\\\r\n     A1-endright B1-endeven output out.pdf\r\n</pre>	\r\n</li>\r\n<li>compress a document:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A.pdf output out.pdf compress\r\n</pre>	\r\n</li>\r\n<li>extract each page of A into pg0001.pdf, pg0002.pdf, etc:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A.pdf burst\r\n</pre>	\r\n</li>\r\n</ul>\r\n','Working with pdfs on Linux','','publish','closed','open','','working-with-pdfs-on-linux','','','2014-07-29 07:16:13','2014-07-29 07:16:13','',0,'http://localhost/html/?p=498',0,'post','',0),(499,3,'2014-07-03 17:36:29','2014-07-03 17:36:29','<h2>cutePDF Editor</h2>\r\nTo manipulate pdfs less than 5MB, <a href=\"https://www.cutepdf-editor.com/edit.asp\">cutpdf-editor</a> is really a nive tool.\r\n\r\nEverything is made online; you can crop, resize, merge, remove pages, etc. and then save the result on your machine.\r\n\r\n<h2>pdftk: a powerful commandline tool</h2>\r\n<a href=\"http://www.pdflabs.com/docs/pdftk-man-page/\">pdftk (man page)</a> is a really powerful tool, which allow us to do pretty everything we want fast and without any restriction in size.\r\n\r\nThe syntax is always the same : <code>pdftk [pdf in] [operation] [page range] output [pdf out]</code>.\r\n\r\nHere is a sample of what it can do:\r\n<ol>\r\n<li>remove some pages from in.pdf. cat = concatenate\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-5 7 9-21 23 25-33 out2.pdf\r\n</pre>	\r\n<li>rotate odd pages by 90 degrees right (possibilities = north, south, east, west, left, right, or down), keeping even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf rotate 1-endoddnorth output out.pdf\r\n</pre>	\r\n<li>rotate odd pages by 180 degrees left and remove even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-endoddleft output out.pdf\r\n</pre>	\r\n</ol>\r\n\r\n\r\n</pre>','Working with pdfs on Linux','','inherit','closed','open','','498-revision-v1','','','2014-07-03 17:36:29','2014-07-03 17:36:29','',498,'http://localhost/html/?p=499',0,'revision','',0),(500,3,'2014-07-03 17:37:03','2014-07-03 17:37:03','<h2>cutePDF Editor</h2>\r\nTo manipulate pdfs less than 5MB, <a href=\"https://www.cutepdf-editor.com/edit.asp\">cutpdf-editor</a> is really a nive tool.\r\n\r\nEverything is made online; you can crop, resize, merge, remove pages, etc. and then save the result on your machine.\r\n\r\n<h2>pdftk: a powerful commandline tool</h2>\r\n<a href=\"http://www.pdflabs.com/docs/pdftk-man-page/\">pdftk (man page)</a> is a really powerful tool, which allow us to do pretty everything we want fast and without any restriction in size.\r\n\r\nThe syntax is always the same : <pre class=\"prettyprint lang-text\">pdftk [pdf in] [operation] [page range] output [pdf out]</pre>.\r\n\r\nHere is a sample of what it can do:\r\n<ul>\r\n<li>remove some pages from in.pdf. cat = concatenate\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-5 7 9-21 23 25-33 out2.pdf\r\n</pre>	\r\n<li>rotate odd pages by 90 degrees right (possibilities = north, south, east, west, left, right, or down), keeping even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf rotate 1-endoddnorth output out.pdf\r\n</pre>	\r\n<li>rotate odd pages by 180 degrees left and remove even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-endoddleft output out.pdf\r\n</pre>	\r\n</ul>\r\n','Working with pdfs on Linux','','inherit','closed','open','','498-revision-v1','','','2014-07-03 17:37:03','2014-07-03 17:37:03','',498,'http://localhost/html/?p=500',0,'revision','',0),(501,3,'2014-07-03 17:55:32','2014-07-03 17:55:32','<h2>cutePDF Editor</h2>\r\nTo manipulate pdfs less than 5MB, <a href=\"https://www.cutepdf-editor.com/edit.asp\">cutpdf-editor</a> is really a nive tool.\r\n\r\nEverything is made online; you can crop, resize, merge, remove pages, etc. and then save the result on your machine.\r\n\r\n<h2>pdftk: a powerful commandline tool</h2>\r\n<a href=\"http://www.pdflabs.com/docs/pdftk-man-page/\">pdftk (man page)</a> is a really powerful tool, which allow us to do pretty everything we want fast and without any restriction in size.\r\n\r\nThe syntax is always the same : <pre class=\"prettyprint lang-text\">pdftk [pdf in] [operation] [page range] output [pdf out]</pre>.\r\n\r\nHere is a sample of what it can do:\r\n<ul>\r\n<li>remove some pages from in.pdf. cat = concatenate\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-5 7 9-21 23 25-33 out2.pdf\r\n</pre>	\r\n<li>rotate odd pages by 90 degrees right (possibilities = north, south, east, west, left, right, or down), keeping even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf rotate 1-endoddnorth output out.pdf\r\n</pre>	\r\n<li>rotate odd pages by 180 degrees left and remove even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-endoddleft output out.pdf\r\n</pre>	\r\n<li>collate documents A and B, merging them one page after another (1A-1B-2A-2B...):\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle A B output out.pdf\r\n</pre>	\r\n<li>collate documents A and B, but keep only even pages from B and rotate pages from A:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle A1-endright B1-endeven output out.pdf\r\n</pre>	\r\n</ul>\r\n','Working with pdfs on Linux','','inherit','closed','open','','498-revision-v1','','','2014-07-03 17:55:32','2014-07-03 17:55:32','',498,'http://localhost/html/?p=501',0,'revision','',0),(502,3,'2014-07-03 17:57:14','2014-07-03 17:57:14','<h2>cutePDF Editor</h2>\r\nTo manipulate pdfs less than 5MB, <a href=\"https://www.cutepdf-editor.com/edit.asp\">cutpdf-editor</a> is really a nive tool.\r\n\r\nEverything is made online; you can crop, resize, merge, remove pages, etc. and then save the result on your machine.\r\n\r\n<h2>pdftk: a powerful commandline tool</h2>\r\n<a href=\"http://www.pdflabs.com/docs/pdftk-man-page/\">pdftk (man page)</a> is a really powerful tool, which allow us to do pretty everything we want fast and without any restriction in size.\r\n\r\nThe syntax is always the same : <pre class=\"prettyprint lang-text\">pdftk [pdf in] [operation] [page range] output [pdf out]</pre>.\r\n\r\nHere is a sample of what it can do:\r\n<ul>\r\n<li>remove some pages from in.pdf. cat = concatenate\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-5 7 9-21 23 25-33 out2.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 90 degrees right (possibilities = north, south, east, west, left, right, or down), keeping even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf rotate 1-endoddnorth output out.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 180 degrees left and remove even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-endoddleft output out.pdf\r\n</pre>	\r\n</li>\r\n<li>collate documents A and B, merging them one page after another (1A-1B-2A-2B...):\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle A B output out.pdf\r\n</pre>\r\n</li>\r\n<li>collate documents A and B, but keep only even pages from B and rotate pages from A:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle A1-endright B1-endeven output out.pdf\r\n</pre>	\r\n</li>\r\n<li>extract each page of A into pg0001.pdf, pg0002.pdf, etc:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A.pdf burst\r\n</pre>	\r\n</li>\r\n</ul>\r\n','Working with pdfs on Linux','','inherit','closed','open','','498-revision-v1','','','2014-07-03 17:57:14','2014-07-03 17:57:14','',498,'http://localhost/html/?p=502',0,'revision','',0),(503,3,'2014-07-03 17:57:30','2014-07-03 17:57:30','<h2>cutePDF Editor</h2>\r\nTo manipulate pdfs less than 5MB, <a href=\"https://www.cutepdf-editor.com/edit.asp\">cutpdf-editor</a> is really a nive tool.\r\n\r\nEverything is made online; you can crop, resize, merge, remove pages, etc. and then save the result on your machine.\r\n\r\n<h2>pdftk: a powerful commandline tool</h2>\r\n<a href=\"http://www.pdflabs.com/docs/pdftk-man-page/\">pdftk (man page)</a> is a really powerful tool, which allow us to do pretty everything we want fast and without any restriction in size.\r\n\r\nThe syntax is always the same : <pre class=\"prettyprint lang-text\">pdftk [pdf in] [operation] [page range] output [pdf out]</pre>.\r\n\r\nHere is a sample of what it can do:\r\n<ul>\r\n<li>remove some pages from in.pdf. cat = concatenate\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-5 7 9-21 23 25-33 out2.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 90 degrees right (possibilities = north, south, east, west, left, right, or down), keeping even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf rotate 1-endoddnorth output out.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 180 degrees left and remove even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-endoddleft output out.pdf\r\n</pre>	\r\n</li>\r\n<li>collate documents A and B, merging them one page after another (1A-1B-2A-2B...):\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle A B output out.pdf\r\n</pre>\r\n</li>\r\n<li>collate documents A and B, but keep only even pages from B and rotate pages from A:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle \\\r\n	A1-endright B1-endeven output out.pdf\r\n</pre>	\r\n</li>\r\n<li>extract each page of A into pg0001.pdf, pg0002.pdf, etc:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A.pdf burst\r\n</pre>	\r\n</li>\r\n</ul>\r\n','Working with pdfs on Linux','','inherit','closed','open','','498-revision-v1','','','2014-07-03 17:57:30','2014-07-03 17:57:30','',498,'http://localhost/html/?p=503',0,'revision','',0),(504,3,'2014-07-03 17:57:42','2014-07-03 17:57:42','<h2>cutePDF Editor</h2>\r\nTo manipulate pdfs less than 5MB, <a href=\"https://www.cutepdf-editor.com/edit.asp\">cutpdf-editor</a> is really a nive tool.\r\n\r\nEverything is made online; you can crop, resize, merge, remove pages, etc. and then save the result on your machine.\r\n\r\n<h2>pdftk: a powerful commandline tool</h2>\r\n<a href=\"http://www.pdflabs.com/docs/pdftk-man-page/\">pdftk (man page)</a> is a really powerful tool, which allow us to do pretty everything we want fast and without any restriction in size.\r\n\r\nThe syntax is always the same : <pre class=\"prettyprint lang-text\">pdftk [pdf in] [operation] [page range] output [pdf out]</pre>.\r\n\r\nHere is a sample of what it can do:\r\n<ul>\r\n<li>remove some pages from in.pdf. cat = concatenate\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-5 7 9-21 23 25-33 out2.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 90 degrees right (possibilities = north, south, east, west, left, right, or down), keeping even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf rotate 1-endoddnorth output out.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 180 degrees left and remove even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-endoddleft output out.pdf\r\n</pre>	\r\n</li>\r\n<li>collate documents A and B, merging them one page after another (1A-1B-2A-2B...):\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle A B output out.pdf\r\n</pre>\r\n</li>\r\n<li>collate documents A and B, but keep only even pages from B and rotate pages from A:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle \\\\\r\n     A1-endright B1-endeven output out.pdf\r\n</pre>	\r\n</li>\r\n<li>extract each page of A into pg0001.pdf, pg0002.pdf, etc:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A.pdf burst\r\n</pre>	\r\n</li>\r\n</ul>\r\n','Working with pdfs on Linux','','inherit','closed','open','','498-revision-v1','','','2014-07-03 17:57:42','2014-07-03 17:57:42','',498,'http://localhost/html/?p=504',0,'revision','',0),(505,3,'2014-07-04 20:22:04','2014-07-04 20:22:04','<h2>install modules</h2>\r\n<ol>\r\n	<li>install pip: <code>sudo apt-get install python-pip</code> or <code>sudo pacman -S python-pip</code>. Note that there is a similar package for python2</li>\r\n	<li>use the easy-install module to find and setup the module:\r\n<pre class=\"prettyprint lang-text\">sudo easy_install-3.4 ws4py</pre>\r\n</li>\r\n</ol>','Python','','publish','closed','open','','python','','','2014-07-04 20:22:04','2014-07-04 20:22:04','',0,'http://localhost/html/?p=505',0,'post','',0),(506,3,'2014-07-04 20:20:43','2014-07-04 20:20:43','<h2>install modules</h2>\r\n<ol>\r\n	<li>install pip: <code>sudo apt-get install python-pip</code> or <code>sudo pacman -S python-pip</code></li>\r\n	<li>use the easy-install module to find and setup the module:</li>\r\n</ol>','Python','','inherit','closed','open','','505-revision-v1','','','2014-07-04 20:20:43','2014-07-04 20:20:43','',505,'http://localhost/html/?p=506',0,'revision','',0),(507,3,'2014-07-04 20:22:04','2014-07-04 20:22:04','<h2>install modules</h2>\r\n<ol>\r\n	<li>install pip: <code>sudo apt-get install python-pip</code> or <code>sudo pacman -S python-pip</code>. Note that there is a similar package for python2</li>\r\n	<li>use the easy-install module to find and setup the module:\r\n<pre class=\"prettyprint lang-text\">sudo easy_install-3.4 ws4py</pre>\r\n</li>\r\n</ol>','Python','','inherit','closed','open','','505-revision-v1','','','2014-07-04 20:22:04','2014-07-04 20:22:04','',505,'http://localhost/html/?p=507',0,'revision','',0),(508,3,'2014-07-04 20:54:12','0000-00-00 00:00:00','<h2>CherryPy and ws4py</h2>\r\n\r\n<h3>The server-side</h3>\r\nThe server part is quite straight-forward:\r\n<pre class=\"prettyprint lang-python\">\r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n__author__ = \'lucy\'\r\n\r\nimport cherrypy\r\nfrom ws4py.server.cherrypyserver import WebSocketPlugin, WebSocketTool\r\nfrom ws4py.websocket import EchoWebSocket\r\n\r\nWebSocketPlugin( cherrypy.engine ).subscribe( )\r\ncherrypy.tools.websocket = WebSocketTool( )\r\n\r\nclass SimpleServer( object ):\r\n    @cherrypy.expose\r\n    def index(self):\r\n        return \'some HTML with a websocket javascript connection\'\r\n\r\n    @cherrypy.expose\r\n    def ws(self):\r\n        # you can access the class instance through\r\n        handler = cherrypy.request.ws_handler\r\n\r\ncherrypy.quickstart(\r\n    SimpleServer( ),\r\n    config = {\r\n        \'global\' : {\r\n            \'server.socket_host\': \"localhost\",\r\n            \'server.socket_port\': 14000,\r\n            \'tools.sessions.on\': True,\r\n            \'tools.sessions.locking\' : \'explicit\',\r\n            \'checker.on\': False\r\n        },\r\n\r\n        \'/ws\': {\r\n            \'tools.websocket.on\': True,\r\n            \'tools.websocket.handler_cls\': EchoWebSocket\r\n        }\r\n    })\r\n</pre>\r\n\r\nThis use a pre-existing WebSocket. To implement your own, create a new class like this:\r\n<pre class=\"prettyprint lang-python\">\r\nclass SocketHandler( WebSocket ):\r\n\r\n    def __init__( self, *args, **kw ):\r\n        WebSocket.__init__( self, *args, **kw )\r\n</pre>\r\nand add all the methods and attributes you want.\r\n\r\n<h3>The client-side</h3>\r\nFirst, you need a javascript object to handle the socket: connection, message passing, etc.\r\n\r\nThe easiest is to have a generic object with basic methods. The application-specific stuff will be handled elsewhere:\r\n<pre class=\"prettyprint lang-js\">\r\n/**\r\n * User: lucy\r\n * Date: 04/07/14\r\n */\r\n\r\nvar ConnectionEvent = {OPEN: \'open\', CLOSE: \'close\'};\r\n/**\r\n * Create a websocket.\r\n * To keep track of the state of the connection, you can register a callback\r\n * function for the open and close events like this:\r\n * \\code{.js}\r\n * // explicit\r\n *  socket.bind( \'open\', function );\r\n *  socket.bind( \'close\', function );\r\n *  // using enum:\r\n *  socket.bind( \'open\', ConnectionEvent.CLOSE );\r\n *  socket.bind( \'close\', ConnectionEvent.CLOSE );\r\n * \\endcode\r\n * @param url\r\n * @constructor\r\n */\r\nvar SimpleSocketHandler = function( url ){\r\n    var conn = new WebSocket( url );\r\n    console.log( conn );\r\n    var callbacks = {};\r\n\r\n    /**\r\n     * register a callback for the specified message_type.\r\n     *\r\n     * @param message_type a unique identifier of this kind of message\r\n     * @param callback  the js function to call upon reception\r\n     * @return {*} this socket object\r\n     */\r\n    this.bind = function( message_type, callback ){\r\n        callbacks[ message_type ] = callbacks[ message_type ] || [];\r\n        callbacks[ message_type ].push( callback );\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * send a message to the server\r\n     * @param message_type  the message type\r\n     * @param event_data  the data, most of the time a json object\r\n     * @return {*} this socket object\r\n     */\r\n    this.send = function( message_type, event_data ){\r\n        var payload = JSON.stringify( { type: message_type, data: event_data } );\r\n        conn.send( payload ); // <= send JSON data to socket server\r\n        return this;\r\n    };\r\n\r\n    // receive handler: use the message type to call the right handler\r\n    conn.onmessage = function( evt ){\r\n        var json = JSON.parse( evt.data );\r\n        dispatch( json.type, json.data );\r\n    };\r\n\r\n    // close handler: send a message of type \"close\"\r\n    conn.onclose = function(){\r\n        dispatch( \'close\', null );\r\n    };\r\n\r\n    // open handler: send a message of type \"open\"\r\n    conn.onopen = function(){\r\n        dispatch( \'open\', null );\r\n    };\r\n\r\n    // call the proper callback depending on the message type\r\n    var dispatch = function( message_type, message ){\r\n        console.log( \"event \" + message_type );\r\n        var chain = callbacks[ message_type ];\r\n\r\n        if( typeof chain == \'undefined\' ) return; // no callbacks for this event\r\n        for( var i = 0; i < chain.length; i++ ){\r\n            chain[i]( message )\r\n        }\r\n    }\r\n};\r\n</pre>\r\n\r\nUsing it is quite easy:\r\n','Simple server with webSockets','','draft','closed','open','','','','','2014-07-04 20:54:12','2014-07-04 20:54:12','',0,'http://localhost/html/?p=508',0,'post','',0),(509,3,'2014-07-04 20:23:20','2014-07-04 20:23:20','','Simple server with webSockets','','inherit','closed','open','','508-revision-v1','','','2014-07-04 20:23:20','2014-07-04 20:23:20','',508,'http://localhost/html/?p=509',0,'revision','',0),(510,3,'2014-07-04 20:23:35','2014-07-04 20:23:35','<h2>CherryPy and ws4py</h2>\r\n\r\nThe server part is quite straight-forward:\r\n<pre class=\"prettyprint lang-python\">\r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n__author__ = \'lucy\'\r\n\r\nimport cherrypy\r\nfrom ws4py.server.cherrypyserver import WebSocketPlugin, WebSocketTool\r\nfrom ws4py.websocket import EchoWebSocket\r\n\r\nWebSocketPlugin( cherrypy.engine ).subscribe( )\r\ncherrypy.tools.websocket = WebSocketTool( )\r\n\r\nclass SimpleServer( object ):\r\n    @cherrypy.expose\r\n    def index(self):\r\n        return \'some HTML with a websocket javascript connection\'\r\n\r\n    @cherrypy.expose\r\n    def ws(self):\r\n        # you can access the class instance through\r\n        handler = cherrypy.request.ws_handler\r\n\r\ncherrypy.quickstart(\r\n    SimpleServer( ),\r\n    config = {\r\n        \'global\' : {\r\n            \'server.socket_host\': \"localhost\",\r\n            \'server.socket_port\': 14000,\r\n            \'tools.sessions.on\': True,\r\n            \'tools.sessions.locking\' : \'explicit\',\r\n            \'checker.on\': False\r\n        },\r\n\r\n        \'/ws\': {\r\n            \'tools.websocket.on\': True,\r\n            \'tools.websocket.handler_cls\': EchoWebSocket\r\n        }\r\n    })\r\n</pre>','Simple server with webSockets','','inherit','closed','open','','508-revision-v1','','','2014-07-04 20:23:35','2014-07-04 20:23:35','',508,'http://localhost/html/?p=510',0,'revision','',0),(511,3,'2014-07-04 20:28:10','2014-07-04 20:28:10','<h2>CherryPy and ws4py</h2>\r\n\r\n<h3>The server-side</h3>\r\nThe server part is quite straight-forward:\r\n<pre class=\"prettyprint lang-python\">\r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n__author__ = \'lucy\'\r\n\r\nimport cherrypy\r\nfrom ws4py.server.cherrypyserver import WebSocketPlugin, WebSocketTool\r\nfrom ws4py.websocket import EchoWebSocket\r\n\r\nWebSocketPlugin( cherrypy.engine ).subscribe( )\r\ncherrypy.tools.websocket = WebSocketTool( )\r\n\r\nclass SimpleServer( object ):\r\n    @cherrypy.expose\r\n    def index(self):\r\n        return \'some HTML with a websocket javascript connection\'\r\n\r\n    @cherrypy.expose\r\n    def ws(self):\r\n        # you can access the class instance through\r\n        handler = cherrypy.request.ws_handler\r\n\r\ncherrypy.quickstart(\r\n    SimpleServer( ),\r\n    config = {\r\n        \'global\' : {\r\n            \'server.socket_host\': \"localhost\",\r\n            \'server.socket_port\': 14000,\r\n            \'tools.sessions.on\': True,\r\n            \'tools.sessions.locking\' : \'explicit\',\r\n            \'checker.on\': False\r\n        },\r\n\r\n        \'/ws\': {\r\n            \'tools.websocket.on\': True,\r\n            \'tools.websocket.handler_cls\': EchoWebSocket\r\n        }\r\n    })\r\n</pre>\r\n\r\nThis use a pre-existing WebSocket. To implement your own, create a new class like this:\r\n<pre class=\"prettyprint lang-python\">\r\nclass SocketHandler( WebSocket ):\r\n\r\n    def __init__( self, *args, **kw ):\r\n        WebSocket.__init__( self, *args, **kw )\r\n</pre>\r\nand add all the methods and attributes you want.\r\n\r\n<h3>The client-side</h3>\r\nFirst, you need a javascript object to handle the socket: connection, message passing, etc.\r\n\r\nThe easiest is to have a generic object with basic methods. The application-specific stuff will be handled elsewhere:\r\n<pre class=\"prettyprint lang-js\">\r\nvar SimpleSocketHandler = function( url ){\r\n    var conn = new WebSocket( url );\r\n    console.log( conn );\r\n    var callbacks = {};\r\n\r\n    this.bind = function( message_type, callback ){\r\n        callbacks[ message_type ] = callbacks[ message_type ] || [];\r\n        callbacks[ message_type ].push( callback );\r\n        return this;\r\n    };\r\n\r\n    this.send = function( message_type, event_data ){\r\n        var payload = JSON.stringify( { type: message_type, data: event_data } );\r\n        conn.send( payload ); // <= send JSON data to socket server\r\n        return this;\r\n    };\r\n\r\n    // dispatch to the right handlers\r\n    conn.onmessage = function( evt ){\r\n        var json = JSON.parse( evt.data );\r\n        dispatch( json.type, json.data );\r\n    };\r\n\r\n    conn.onclose = function(){\r\n        dispatch( \'close\', null );\r\n    };\r\n\r\n    conn.onopen = function(){\r\n        dispatch( \'open\', null );\r\n    };\r\n\r\n    var dispatch = function( message_type, message ){\r\n        console.log( \"event \" + message_type );\r\n        var chain = callbacks[ message_type ];\r\n\r\n        if( typeof chain == \'undefined\' ) return; // no callbacks for this event\r\n        for( var i = 0; i < chain.length; i++ ){\r\n            chain[i]( message )\r\n        }\r\n    }\r\n};\r\n</pre>\r\n\r\nUsing it is quite easy:\r\n','Simple server with webSockets','','inherit','closed','open','','508-revision-v1','','','2014-07-04 20:28:10','2014-07-04 20:28:10','',508,'http://localhost/html/?p=511',0,'revision','',0),(512,3,'2014-07-04 20:54:12','2014-07-04 20:54:12','<h2>CherryPy and ws4py</h2>\r\n\r\n<h3>The server-side</h3>\r\nThe server part is quite straight-forward:\r\n<pre class=\"prettyprint lang-python\">\r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n__author__ = \'lucy\'\r\n\r\nimport cherrypy\r\nfrom ws4py.server.cherrypyserver import WebSocketPlugin, WebSocketTool\r\nfrom ws4py.websocket import EchoWebSocket\r\n\r\nWebSocketPlugin( cherrypy.engine ).subscribe( )\r\ncherrypy.tools.websocket = WebSocketTool( )\r\n\r\nclass SimpleServer( object ):\r\n    @cherrypy.expose\r\n    def index(self):\r\n        return \'some HTML with a websocket javascript connection\'\r\n\r\n    @cherrypy.expose\r\n    def ws(self):\r\n        # you can access the class instance through\r\n        handler = cherrypy.request.ws_handler\r\n\r\ncherrypy.quickstart(\r\n    SimpleServer( ),\r\n    config = {\r\n        \'global\' : {\r\n            \'server.socket_host\': \"localhost\",\r\n            \'server.socket_port\': 14000,\r\n            \'tools.sessions.on\': True,\r\n            \'tools.sessions.locking\' : \'explicit\',\r\n            \'checker.on\': False\r\n        },\r\n\r\n        \'/ws\': {\r\n            \'tools.websocket.on\': True,\r\n            \'tools.websocket.handler_cls\': EchoWebSocket\r\n        }\r\n    })\r\n</pre>\r\n\r\nThis use a pre-existing WebSocket. To implement your own, create a new class like this:\r\n<pre class=\"prettyprint lang-python\">\r\nclass SocketHandler( WebSocket ):\r\n\r\n    def __init__( self, *args, **kw ):\r\n        WebSocket.__init__( self, *args, **kw )\r\n</pre>\r\nand add all the methods and attributes you want.\r\n\r\n<h3>The client-side</h3>\r\nFirst, you need a javascript object to handle the socket: connection, message passing, etc.\r\n\r\nThe easiest is to have a generic object with basic methods. The application-specific stuff will be handled elsewhere:\r\n<pre class=\"prettyprint lang-js\">\r\n/**\r\n * User: lucy\r\n * Date: 04/07/14\r\n */\r\n\r\nvar ConnectionEvent = {OPEN: \'open\', CLOSE: \'close\'};\r\n/**\r\n * Create a websocket.\r\n * To keep track of the state of the connection, you can register a callback\r\n * function for the open and close events like this:\r\n * \\code{.js}\r\n * // explicit\r\n *  socket.bind( \'open\', function );\r\n *  socket.bind( \'close\', function );\r\n *  // using enum:\r\n *  socket.bind( \'open\', ConnectionEvent.CLOSE );\r\n *  socket.bind( \'close\', ConnectionEvent.CLOSE );\r\n * \\endcode\r\n * @param url\r\n * @constructor\r\n */\r\nvar SimpleSocketHandler = function( url ){\r\n    var conn = new WebSocket( url );\r\n    console.log( conn );\r\n    var callbacks = {};\r\n\r\n    /**\r\n     * register a callback for the specified message_type.\r\n     *\r\n     * @param message_type a unique identifier of this kind of message\r\n     * @param callback  the js function to call upon reception\r\n     * @return {*} this socket object\r\n     */\r\n    this.bind = function( message_type, callback ){\r\n        callbacks[ message_type ] = callbacks[ message_type ] || [];\r\n        callbacks[ message_type ].push( callback );\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * send a message to the server\r\n     * @param message_type  the message type\r\n     * @param event_data  the data, most of the time a json object\r\n     * @return {*} this socket object\r\n     */\r\n    this.send = function( message_type, event_data ){\r\n        var payload = JSON.stringify( { type: message_type, data: event_data } );\r\n        conn.send( payload ); // <= send JSON data to socket server\r\n        return this;\r\n    };\r\n\r\n    // receive handler: use the message type to call the right handler\r\n    conn.onmessage = function( evt ){\r\n        var json = JSON.parse( evt.data );\r\n        dispatch( json.type, json.data );\r\n    };\r\n\r\n    // close handler: send a message of type \"close\"\r\n    conn.onclose = function(){\r\n        dispatch( \'close\', null );\r\n    };\r\n\r\n    // open handler: send a message of type \"open\"\r\n    conn.onopen = function(){\r\n        dispatch( \'open\', null );\r\n    };\r\n\r\n    // call the proper callback depending on the message type\r\n    var dispatch = function( message_type, message ){\r\n        console.log( \"event \" + message_type );\r\n        var chain = callbacks[ message_type ];\r\n\r\n        if( typeof chain == \'undefined\' ) return; // no callbacks for this event\r\n        for( var i = 0; i < chain.length; i++ ){\r\n            chain[i]( message )\r\n        }\r\n    }\r\n};\r\n</pre>\r\n\r\nUsing it is quite easy:\r\n','Simple server with webSockets','','inherit','closed','open','','508-revision-v1','','','2014-07-04 20:54:12','2014-07-04 20:54:12','',508,'http://localhost/html/?p=512',0,'revision','',0),(513,3,'2014-07-12 17:14:40','2014-07-12 17:14:40','[display_file path=/wp-content/themes/twentythirteen-child/post-files/arduino_clapper.html]','Arduino clapper','','publish','closed','open','','arduino-clapper','','','2014-07-12 17:14:40','2014-07-12 17:14:40','',0,'http://localhost/html/?p=513',0,'post','',0),(514,3,'2014-07-12 17:14:40','2014-07-12 17:14:40','[display_file path=/wp-content/themes/twentythirteen-child/post-files/arduino_clapper.html]','Arduino clapper','','inherit','closed','open','','513-revision-v1','','','2014-07-12 17:14:40','2014-07-12 17:14:40','',513,'http://localhost/html/?p=514',0,'revision','',0),(516,3,'2014-07-12 17:35:33','2014-07-12 17:35:33','','arduino_clapper_schema','','inherit','closed','open','','arduino_clapper_schema','','','2014-07-12 17:35:33','2014-07-12 17:35:33','',513,'http://localhost/html/wp-content/uploads/2014/07/arduino_clapper_schema.png',0,'attachment','image/png',0),(517,3,'2014-07-12 17:38:55','2014-07-12 17:38:55','<!--[display_file path=/wp-content/themes/twentythirteen-child/post-files/arduino_clapper.html]-->\r\n<h2>Material</h2>\r\n<ul>\r\n    <li>1 arduino uno</li>\r\n    <li>1 sound detector, like <a href=\"https://www.sparkfun.com/products/12642\">this one</a> or a cheaper one. The most important is that it provides sound amplification.</li>\r\n    <li>1 relay supporting high tension. I personally used a relay module srd-05vdc-sl-c </li>\r\n    <li>Wires</li>\r\n</ul>\r\nOptionally:\r\n<ul>\r\n    <li>1 RGB Led</li>\r\n    <li>1 Led + 1 330 Ohm resistor</li>\r\n</ul>\r\n\r\n\r\n<h2>Schema</h2>\r\n\r\n<img src=\"http://localhost/html/?attachment_id=516\" />\r\n<p>\r\nThe led is connected to the relay signal, so that it reflects the state of the light (or whatever you connected to the relay).\r\nWith simple leds, always put a resistor, usually 330 Ohm. Recall that the longest pin of the Led is the +, the other is connected to the ground.\r\n</p>\r\n<p>\r\nThe RGB Led allows us to give feedback during the claps detection.\r\n</p>\r\n<p>\r\nThe relay has three pins: ground, +5v and signal. The latter is configured as INPUT and delivers an analog signal between 0 and 255. It is highly unstable: don\'t expect to be able to differentiate between a clap, a cry or even a laughter.\r\n</p>\r\n\r\n','Arduino clapper','','inherit','closed','open','','513-autosave-v1','','','2014-07-12 17:38:55','2014-07-12 17:38:55','',513,'http://localhost/html/?p=517',0,'revision','',0),(518,3,'2014-07-12 17:44:05','2014-07-12 17:44:05','','RGBLed','','inherit','closed','open','','rgbled','','','2014-07-12 17:44:05','2014-07-12 17:44:05','',520,'http://localhost/html/wp-content/uploads/2014/07/RGBLed.h',0,'attachment','text/plain',0),(519,3,'2014-07-12 17:44:25','2014-07-12 17:44:25','','RGBLed.cpp','','inherit','closed','open','','rgbled-cpp','','','2014-07-12 17:44:25','2014-07-12 17:44:25','',520,'http://localhost/html/wp-content/uploads/2014/07/RGBLed.cpp_.txt',0,'attachment','text/plain',0),(520,3,'2014-07-12 17:45:42','0000-00-00 00:00:00','<a href=\"http://localhost/html/wp-content/uploads/2014/07/RGBLed.cpp_.txt\">RGBLed.cpp</a>\n\n<a href=\"http://localhost/html/wp-content/uploads/2014/07/RGBLed.h\">RGBLed</a>','','','draft','closed','open','','','','','2014-07-12 17:45:42','2014-07-12 17:45:42','',0,'http://localhost/html/?p=520',0,'post','',0),(521,3,'2014-07-12 17:49:59','2014-07-12 17:49:59','','arduino_clapper.ino','','inherit','closed','open','','arduino_clapper-ino','','','2014-07-12 17:49:59','2014-07-12 17:49:59','',0,'http://localhost/html/wp-content/uploads/2014/07/arduino_clapper.ino_.txt',0,'attachment','text/plain',0),(523,3,'2014-07-14 19:42:00','2014-07-14 19:42:00','<h2>Types of RAID</h2>\r\nRAID stands for <strong>Redondant Array of Independant Devices</strong>. There are basically five types of RAID commonly used these days:\r\n<ul>\r\n	<li>RAID 0: the data are distributed amongst two disks, without redundancy (stripping). It improves performances, but does not protect data against devices failures</li>\r\n	<li>RAID 1: the disks are exact mirrors of each other. This is a pure redundancy without striping or parity: its protects data, but does not improve performances.</li>\r\n	<li>RAID 1+0: stripping + mirroring. Requires at least 4 disks.</li>\r\n	<li>RAID 5: blocks of data are distributed amongst at least 3 disks (striping), as well as the parity (versus one dedicated parity disk, as in RAID 4). This protects data against one disk failure. Because of the parity, the space actually available is thus &lt;nbr of disks&gt; - 1.</li>\r\n	<li>RAID 6: same as RAID 5, but there are two blocks of parity for each &lt;nbr of disks -2&gt; blocks of data.</li>\r\n</ul>\r\n<h2>Configuring a RAID 5 (software) in linux</h2>\r\n<ol>\r\n	<li>Totally erase the content of your three (or more) disks</li>\r\n	<li>On each of them, create a gpt table. The easiest way is to use GParted: select the device, clic Device &gt; create partition table</li>\r\n	<li>Use fdisk to create a Linux RAID partition on each disk, spreading upon on the space available:\r\n<pre class=\"prettyprint lang-text\"># sudo fdisk /dev/sd[X]\r\nCommand (m for help): n\r\nPartition number (1-128, default 1):  \r\nFirst sector (34-5860533134, default 2048): \r\nLast sector, +sectors or +size{K,M,G,T,P} (2048-5860533134, default 5860533134): \r\n\r\nCreated a new partition 1 of type \'Linux filesystem\' and of size 2.7 TiB.\r\n\r\nCommand (m for help): t\r\n\r\nSelected partition 1\r\nPartition type (type L to list all types): 14\r\nChanged type of partition \'Linux filesystem\' to \'Linux RAID\'.\r\n\r\nCommand (m for help): w\r\nThe partition table has been altered.\r\nCalling ioctl() to re-read partition table.\r\nSyncing disks.</pre>\r\n</li>\r\n	<li>Install mdadm</li>\r\n	<li>Configure RAID with the following:\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --create --verbose --level=raid5 \\\\\r\n --raid-devices=3  /dev/md0 /dev/sd[acd]1</pre>\r\n</li>\r\n	<li>Wait for the process to terminate. You can see the state of the RAID by displaying the content of the file <code>/proc/mdstat</code>. To view the changes \"live\", use <code>watch -n 1 cat /proc/mdstat</code></li>\r\n</ol>\r\nIf everything went right, you should now have a new device (sudo fdisk -l) called <tt>/dev/md0. </tt>Partition and use it like a regular disk.\r\n<h2>Deleting the array (once and for all)</h2>\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --stop /dev/md0\r\nsudo mdadm --zero-superblock /dev/sd[cde] # to be done for each disk of the array\r\nsudo mdadm --remove /dev/md0</pre>','RAID','','publish','closed','open','','configure-raid-devices','','','2014-07-25 16:26:38','2014-07-25 16:26:38','',0,'http://localhost/html/?p=523',0,'post','',0),(524,3,'2014-07-14 19:42:00','2014-07-14 19:42:00','<h2>Types of RAID</h2>\r\nRAID stands for <strong>Redondant Array of Independant Devices</strong>. There are basically five types of RAID commonly used these days:\r\n<ul>\r\n	<li>RAID 0: the data are distributed amongst two disks, without redundancy (stripping). It improves performances, but does not protect data against devices failures</li>\r\n	<li>RAID 1: the disks are exact mirrors of each other. This is a pure redundancy without striping or parity: its protects data, but does not improve performances.</li>\r\n	<li>RAID 1+0: stripping + mirroring. Requires at least 4 disks.</li>\r\n	<li>RAID 5: blocks of data are distributed amongst at least 3 disks (striping), as well as the parity (versus one dedicated parity disk, as in RAID 4). This protects data against one disk failure. Because of the parity, the space actually available is thus &lt;nbr of disks&gt; - 1.</li>\r\n	<li>RAID 6: same as RAID 5, but there are two blocks of parity for each &lt;nbr of disks -2&gt; blocks of data.</li>\r\n</ul>\r\n<h2>Configuring a RAID 5 (software) in linux</h2>\r\n<ol>\r\n	<li>Totally erase the content of your three (or more) disks</li>\r\n	<li>On each of them, create a gpt table. The easiest way is to use GParted: select the device, clic Device &gt; create partition table</li>\r\n	<li>Use fdisk to create a Linux RAID partition on each disk, spreading upon on the space available:\r\n<pre class=\"prettyprint lang-text\">sudo fdisk /dev/sd[X]\r\nCommand (m for help): p  # new primary partition\r\nCommand (m for help): t  # change partition type\r\nPartition type (type L to list all types): 14 # (Linux RAID)\r\nCommand (m for help): w  # write changes to disk and quit</pre>\r\n</li>\r\n	<li>Install mdadm</li>\r\n	<li>Configure RAID with the following:\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --create --vergose --level=raid5 \\\\\r\n --raid-devices=3 /dev/sd[acd]1</pre>\r\n</li>\r\n	<li>Wait for the process to terminate. You can see the state of the RAID by displaying the content of the file <code>/proc/mdstat</code></li>\r\n</ol>\r\nIf everything went right, you should now have a new device (sudo fdisk -l) called <tt>/dev/md0. </tt>Partition and use it like a regular disk.','Configure RAID devices','','inherit','closed','open','','523-revision-v1','','','2014-07-14 19:42:00','2014-07-14 19:42:00','',523,'http://localhost/html/?p=524',0,'revision','',0),(526,3,'2014-07-20 18:04:58','2014-07-20 18:04:58','Every time I use pacman on a new machine, this f***ing key error occurs:\r\n<pre class=\"prettyprint lang-text\">downloading required keys...\r\n:: Import PGP key 4096R/, \"Anatol Pomozov <anatol.pomozov@gmail.com>\", created: 2014-02-03? [Y/n]\r\nerror: key \"Anatol Pomozov <anatol.pomozov@gmail.com>;\" could not be imported\r\nerror: required key missing from keyring\r\nerror: failed to commit transaction (unexpected error)\r\nErrors occurred, no packages were upgraded.</pre>\r\nTo solve it, I am not quite sure... I normally try one of the two things below, hoping that one works:\r\n<ol>\r\n	<li>On a new install:\r\n<pre class=\"prettyprint lang-text\">pacman-key --init && pacman-key --populate archlinux</pre>\r\n</li>\r\n	<li>On a running system:\r\n<pre class=\"prettyprint lang-text\">pacman -S archlinux-keyring; pacman -Su</pre>\r\n(although, that will put his key in your keyring and let him break whatever he wants... just like any other developer)\r\n\r\nsource <a href=\"https://bbs.archlinux.org/viewtopic.php?id=178185\">https://bbs.archlinux.org/viewtopic.php?id=178185</a></li>\r\n</ol>','f***ing anatol.pomozov@gmail.com','','publish','closed','open','','fing-anatol-pomozovgmail-com','','','2014-12-20 14:33:48','2014-12-20 14:33:48','',0,'http://localhost/html/?p=526',0,'post','',0),(527,3,'2014-07-20 18:04:58','2014-07-20 18:04:58','Every time I use pacman on a new machine, this f***ing key error occurs:\r\n<pre class=\"prettyprint lang-text\">downloading required keys...\r\n:: Import PGP key 4096R/, \"Anatol Pomozov &lt;anatol.pomozov@gmail.com&gt;\", created: 2014-02-03? [Y/n]\r\nerror: key \"Anatol Pomozov &lt;anatol.pomozov@gmail.com&gt;\" could not be imported\r\nerror: required key missing from keyring\r\nerror: failed to commit transaction (unexpected error)\r\nErrors occurred, no packages were upgraded.</pre>\r\nTo solve it, I am not quite sure... I normally try one of the two things below, hoping that one works:\r\n<ol>\r\n	<li>On a new install:\r\n<pre class=\"prettyprint lang-text\">pacman-key --init &amp;&amp; pacman-key --populate archlinux</pre>\r\n</li>\r\n	<li>On a running system:\r\n<pre class=\"prettyprint lang-text\">pacman -S archlinux-keyring; pacman -Su</pre>\r\n</li>\r\n</ol>','f***ing anatol.pomozov@gmail.com','','inherit','closed','open','','526-revision-v1','','','2014-07-20 18:04:58','2014-07-20 18:04:58','',526,'http://localhost/html/?p=527',0,'revision','',0),(528,3,'2014-07-25 16:06:25','2014-07-25 16:06:25','<h2>Types of RAID</h2>\nRAID stands for <strong>Redondant Array of Independant Devices</strong>. There are basically five types of RAID commonly used these days:\n<ul>\n	<li>RAID 0: the data are distributed amongst two disks, without redundancy (stripping). It improves performances, but does not protect data against devices failures</li>\n	<li>RAID 1: the disks are exact mirrors of each other. This is a pure redundancy without striping or parity: its protects data, but does not improve performances.</li>\n	<li>RAID 1+0: stripping + mirroring. Requires at least 4 disks.</li>\n	<li>RAID 5: blocks of data are distributed amongst at least 3 disks (striping), as well as the parity (versus one dedicated parity disk, as in RAID 4). This protects data against one disk failure. Because of the parity, the space actually available is thus &lt;nbr of disks&gt; - 1.</li>\n	<li>RAID 6: same as RAID 5, but there are two blocks of parity for each &lt;nbr of disks -2&gt; blocks of data.</li>\n</ul>\n<h2>Configuring a RAID 5 (software) in linux</h2>\n<ol>\n	<li>Totally erase the content of your three (or more) disks</li>\n	<li>On each of them, create a gpt table. The easiest way is to use GParted: select the device, clic Device &gt; create partition table</li>\n	<li>Use fdisk to create a Linux RAID partition on each disk, spreading upon on the space available:\n<pre class=\"prettyprint lang-text\"># sudo fdisk /dev/sd[X]\nCommand (m for help): n\nPartition number (1-128, default 1):  \nFirst sector (34-5860533134, default 2048): \nLast sector, +sectors or +size{K,M,G,T,P} (2048-5860533134, default 5860533134): \n\nCreated a new partition 1 of type \'Linux filesystem\' and of size 2.7 TiB.\n\nCommand (m for help): t\n\nSelected partition 1\nPartition type (type L to list all types): 14\nChanged type of partition \'Linux filesystem\' to \'Linux RAID\'.\n\nCommand (m for help): w\nThe partition table has been altered.\nCalling ioctl() to re-read partition table.\nSyncing disks.</pre>\n</li>\n	<li>Install mdadm</li>\n	<li>Configure RAID with the following:\n<pre class=\"prettyprint lang-text\">sudo mdadm --create --verbose --level=raid5 \\\\\n --raid-devices=3  /dev/md0 /dev/sd[acd]1</pre>\n</li>\n	<li>Wait for the process to terminate. You can see the state of the RAID by displaying the content of the file <code>/proc/mdstat</code></li>\n</ol>\nIf everything went right, you should now have a new device (sudo fdisk -l) called <tt>/dev/md0. </tt>Partition and use it like a regular disk.\n<h2>Deleting the array (once and for all)</h2>\n<pre class=\"prettyprint lang-text\">sudo mdadm --stop /dev/md0\nsudo mdadm --zero-superblock /dev/sd[cde] # to be done for each disk of the array\nsudo mdadm --remove /dev/md0</pre>','Configure RAID devices','','inherit','closed','open','','523-autosave-v1','','','2014-07-25 16:06:25','2014-07-25 16:06:25','',523,'http://localhost/html/?p=528',0,'revision','',0),(529,3,'2014-07-25 15:44:18','2014-07-25 15:44:18','<h2>Types of RAID</h2>\r\nRAID stands for <strong>Redondant Array of Independant Devices</strong>. There are basically five types of RAID commonly used these days:\r\n<ul>\r\n	<li>RAID 0: the data are distributed amongst two disks, without redundancy (stripping). It improves performances, but does not protect data against devices failures</li>\r\n	<li>RAID 1: the disks are exact mirrors of each other. This is a pure redundancy without striping or parity: its protects data, but does not improve performances.</li>\r\n	<li>RAID 1+0: stripping + mirroring. Requires at least 4 disks.</li>\r\n	<li>RAID 5: blocks of data are distributed amongst at least 3 disks (striping), as well as the parity (versus one dedicated parity disk, as in RAID 4). This protects data against one disk failure. Because of the parity, the space actually available is thus &lt;nbr of disks&gt; - 1.</li>\r\n	<li>RAID 6: same as RAID 5, but there are two blocks of parity for each &lt;nbr of disks -2&gt; blocks of data.</li>\r\n</ul>\r\n<h2>Configuring a RAID 5 (software) in linux</h2>\r\n<ol>\r\n	<li>Totally erase the content of your three (or more) disks</li>\r\n	<li>On each of them, create a gpt table. The easiest way is to use GParted: select the device, clic Device &gt; create partition table</li>\r\n	<li>Use fdisk to create a Linux RAID partition on each disk, spreading upon on the space available:\r\n<pre class=\"prettyprint lang-text\"># sudo fdisk /dev/sd[X]\r\nCommand (m for help): n\r\nPartition number (1-128, default 1):  \r\nFirst sector (34-5860533134, default 2048): \r\nLast sector, +sectors or +size{K,M,G,T,P} (2048-5860533134, default 5860533134): \r\n\r\nCreated a new partition 1 of type \'Linux filesystem\' and of size 2.7 TiB.\r\n\r\nCommand (m for help): t\r\n\r\nSelected partition 1\r\nPartition type (type L to list all types): 14\r\nChanged type of partition \'Linux filesystem\' to \'Linux RAID\'.\r\n\r\nCommand (m for help): w\r\nThe partition table has been altered.\r\nCalling ioctl() to re-read partition table.\r\nSyncing disks.</pre>\r\n</li>\r\n	<li>Install mdadm</li>\r\n	<li>Configure RAID with the following:\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --create --verbose --level=raid5 \\\\\r\n --raid-devices=3 /dev/sd[acd]1</pre>\r\n</li>\r\n	<li>Wait for the process to terminate. You can see the state of the RAID by displaying the content of the file <code>/proc/mdstat</code></li>\r\n</ol>\r\nIf everything went right, you should now have a new device (sudo fdisk -l) called <tt>/dev/md0. </tt>Partition and use it like a regular disk.\r\n<h2>Deleting the array (once and for all)</h2>\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --stop /dev/md0\r\nsudo mdadm --zero-superblock /dev/sd[cde] # to be done for each disk of the array\r\nsudo mdadm --remove /dev/md0</pre>','Configure RAID devices','','inherit','closed','open','','523-revision-v1','','','2014-07-25 15:44:18','2014-07-25 15:44:18','',523,'http://localhost/html/?p=529',0,'revision','',0),(530,3,'2014-07-25 16:06:45','2014-07-25 16:06:45','<h2>Types of RAID</h2>\r\nRAID stands for <strong>Redondant Array of Independant Devices</strong>. There are basically five types of RAID commonly used these days:\r\n<ul>\r\n	<li>RAID 0: the data are distributed amongst two disks, without redundancy (stripping). It improves performances, but does not protect data against devices failures</li>\r\n	<li>RAID 1: the disks are exact mirrors of each other. This is a pure redundancy without striping or parity: its protects data, but does not improve performances.</li>\r\n	<li>RAID 1+0: stripping + mirroring. Requires at least 4 disks.</li>\r\n	<li>RAID 5: blocks of data are distributed amongst at least 3 disks (striping), as well as the parity (versus one dedicated parity disk, as in RAID 4). This protects data against one disk failure. Because of the parity, the space actually available is thus &lt;nbr of disks&gt; - 1.</li>\r\n	<li>RAID 6: same as RAID 5, but there are two blocks of parity for each &lt;nbr of disks -2&gt; blocks of data.</li>\r\n</ul>\r\n<h2>Configuring a RAID 5 (software) in linux</h2>\r\n<ol>\r\n	<li>Totally erase the content of your three (or more) disks</li>\r\n	<li>On each of them, create a gpt table. The easiest way is to use GParted: select the device, clic Device &gt; create partition table</li>\r\n	<li>Use fdisk to create a Linux RAID partition on each disk, spreading upon on the space available:\r\n<pre class=\"prettyprint lang-text\"># sudo fdisk /dev/sd[X]\r\nCommand (m for help): n\r\nPartition number (1-128, default 1):  \r\nFirst sector (34-5860533134, default 2048): \r\nLast sector, +sectors or +size{K,M,G,T,P} (2048-5860533134, default 5860533134): \r\n\r\nCreated a new partition 1 of type \'Linux filesystem\' and of size 2.7 TiB.\r\n\r\nCommand (m for help): t\r\n\r\nSelected partition 1\r\nPartition type (type L to list all types): 14\r\nChanged type of partition \'Linux filesystem\' to \'Linux RAID\'.\r\n\r\nCommand (m for help): w\r\nThe partition table has been altered.\r\nCalling ioctl() to re-read partition table.\r\nSyncing disks.</pre>\r\n</li>\r\n	<li>Install mdadm</li>\r\n	<li>Configure RAID with the following:\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --create --verbose --level=raid5 \\\\\r\n --raid-devices=3  /dev/md0 /dev/sd[acd]1</pre>\r\n</li>\r\n	<li>Wait for the process to terminate. You can see the state of the RAID by displaying the content of the file <code>/proc/mdstat</code></li>\r\n</ol>\r\nIf everything went right, you should now have a new device (sudo fdisk -l) called <tt>/dev/md0. </tt>Partition and use it like a regular disk.\r\n<h2>Deleting the array (once and for all)</h2>\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --stop /dev/md0\r\nsudo mdadm --zero-superblock /dev/sd[cde] # to be done for each disk of the array\r\nsudo mdadm --remove /dev/md0</pre>','Configure RAID devices','','inherit','closed','open','','523-revision-v1','','','2014-07-25 16:06:45','2014-07-25 16:06:45','',523,'http://localhost/html/?p=530',0,'revision','',0),(531,3,'2014-07-25 16:09:27','2014-07-25 16:09:27','<h2>Types of RAID</h2>\r\nRAID stands for <strong>Redondant Array of Independant Devices</strong>. There are basically five types of RAID commonly used these days:\r\n<ul>\r\n	<li>RAID 0: the data are distributed amongst two disks, without redundancy (stripping). It improves performances, but does not protect data against devices failures</li>\r\n	<li>RAID 1: the disks are exact mirrors of each other. This is a pure redundancy without striping or parity: its protects data, but does not improve performances.</li>\r\n	<li>RAID 1+0: stripping + mirroring. Requires at least 4 disks.</li>\r\n	<li>RAID 5: blocks of data are distributed amongst at least 3 disks (striping), as well as the parity (versus one dedicated parity disk, as in RAID 4). This protects data against one disk failure. Because of the parity, the space actually available is thus &lt;nbr of disks&gt; - 1.</li>\r\n	<li>RAID 6: same as RAID 5, but there are two blocks of parity for each &lt;nbr of disks -2&gt; blocks of data.</li>\r\n</ul>\r\n<h2>Configuring a RAID 5 (software) in linux</h2>\r\n<ol>\r\n	<li>Totally erase the content of your three (or more) disks</li>\r\n	<li>On each of them, create a gpt table. The easiest way is to use GParted: select the device, clic Device &gt; create partition table</li>\r\n	<li>Use fdisk to create a Linux RAID partition on each disk, spreading upon on the space available:\r\n<pre class=\"prettyprint lang-text\"># sudo fdisk /dev/sd[X]\r\nCommand (m for help): n\r\nPartition number (1-128, default 1):  \r\nFirst sector (34-5860533134, default 2048): \r\nLast sector, +sectors or +size{K,M,G,T,P} (2048-5860533134, default 5860533134): \r\n\r\nCreated a new partition 1 of type \'Linux filesystem\' and of size 2.7 TiB.\r\n\r\nCommand (m for help): t\r\n\r\nSelected partition 1\r\nPartition type (type L to list all types): 14\r\nChanged type of partition \'Linux filesystem\' to \'Linux RAID\'.\r\n\r\nCommand (m for help): w\r\nThe partition table has been altered.\r\nCalling ioctl() to re-read partition table.\r\nSyncing disks.</pre>\r\n</li>\r\n	<li>Install mdadm</li>\r\n	<li>Configure RAID with the following:\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --create --verbose --level=raid5 \\\\\r\n --raid-devices=3  /dev/md0 /dev/sd[acd]1</pre>\r\n</li>\r\n	<li>Wait for the process to terminate. You can see the state of the RAID by displaying the content of the file <code>/proc/mdstat</code>. To view the changes \"live\", use <code>watch -n 1 cat /proc/mdstat</code></li>\r\n</ol>\r\nIf everything went right, you should now have a new device (sudo fdisk -l) called <tt>/dev/md0. </tt>Partition and use it like a regular disk.\r\n<h2>Deleting the array (once and for all)</h2>\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --stop /dev/md0\r\nsudo mdadm --zero-superblock /dev/sd[cde] # to be done for each disk of the array\r\nsudo mdadm --remove /dev/md0</pre>','Configure RAID devices','','inherit','closed','open','','523-revision-v1','','','2014-07-25 16:09:27','2014-07-25 16:09:27','',523,'http://localhost/html/?p=531',0,'revision','',0),(532,3,'2014-07-25 16:22:18','2014-07-25 16:22:18','<h2>The problem</h2>\r\nWhile willing to create a simple gpt table on a brand new disk, I got the following error:\r\n<pre class=\"prettyprint lang-text raw\">[~] sudo gparted\r\n======================\r\nlibparted : 3.1\r\n======================\r\n/usr/bin/gparted: line 179:   775 Segmentation fault      $BASE_CMD</pre>\r\n<h2>The solution</h2>\r\nA simple way to fix it is to fill the first sectors of the disk with zeroes (or anything, really), in order to force gparted to consider this disk as \"raw\":\r\n<pre class=\"prettyprint lang-text\">\r\n[~] sudo dd if=/dev/zero of=/dev/sde\r\n^C # use ctrl+c after ~ 20 secs should do the trick\r\n961529+0 records in\r\n961529+0 records out\r\n492302848 bytes (492 MB) copied, 19.2061 s, 25.6 MB/s\r\n</pre>\r\n\r\nRelaunches gparted and normally it should run smoothly.','gparted: segfault while creating a gpt table','','publish','closed','open','','gparted-segfault-while-creating-a-gpt-table','','','2014-07-25 16:23:31','2014-07-25 16:23:31','',0,'http://localhost/html/?p=532',0,'post','',0),(533,3,'2014-07-25 16:22:18','2014-07-25 16:22:18','<h2>The problem</h2>\r\nWhile willing to create a simple gpt table on a brand new disk, I got the following error:\r\n<pre class=\"prettyprint\">[~] sudo gparted\r\n======================\r\nlibparted : 3.1\r\n======================\r\n/usr/bin/gparted: line 179:   775 Segmentation fault      $BASE_CMD</pre>\r\n<h2>The solution</h2>\r\nA simple way to fix it is to fill the first sectors of the disk with zeroes (or anything, really), in order to force gparted to consider this disk as \"raw\":\r\n<pre class=\"prettyprint lang-text\">\r\n[~] sudo dd if=/dev/zero of=/dev/sde\r\n^C # use ctrl+c after ~ 20 secs should do the trick\r\n961529+0 records in\r\n961529+0 records out\r\n492302848 bytes (492 MB) copied, 19.2061 s, 25.6 MB/s\r\n</pre>\r\n\r\nRelaunches gparted and normally it should run smoothly.','gparted: segfault while creating a gpt table','','inherit','closed','open','','532-revision-v1','','','2014-07-25 16:22:18','2014-07-25 16:22:18','',532,'http://localhost/html/?p=533',0,'revision','',0),(534,3,'2014-07-25 16:23:26','2014-07-25 16:23:26','<h2>The problem</h2>\r\nWhile willing to create a simple gpt table on a brand new disk, I got the following error:\r\n<pre class=\"prettyprint lang-text raw\">[~] sudo gparted\r\n======================\r\nlibparted : 3.1\r\n======================\r\n/usr/bin/gparted: line 179:   775 Segmentation fault      $BASE_CMD</pre>\r\n<h2>The solution</h2>\r\nA simple way to fix it is to fill the first sectors of the disk with zeroes (or anything, really), in order to force gparted to consider this disk as \"raw\":\r\n<pre class=\"prettyprint lang-text\">\r\n[~] sudo dd if=/dev/zero of=/dev/sde\r\n^C # use ctrl+c after ~ 20 secs should do the trick\r\n961529+0 records in\r\n961529+0 records out\r\n492302848 bytes (492 MB) copied, 19.2061 s, 25.6 MB/s\r\n</pre>\r\n\r\nRelaunches gparted and normally it should run smoothly.','gparted: segfault while creating a gpt table','','inherit','closed','open','','532-autosave-v1','','','2014-07-25 16:23:26','2014-07-25 16:23:26','',532,'http://localhost/html/?p=534',0,'revision','',0),(535,3,'2014-07-25 16:23:31','2014-07-25 16:23:31','<h2>The problem</h2>\r\nWhile willing to create a simple gpt table on a brand new disk, I got the following error:\r\n<pre class=\"prettyprint lang-text raw\">[~] sudo gparted\r\n======================\r\nlibparted : 3.1\r\n======================\r\n/usr/bin/gparted: line 179:   775 Segmentation fault      $BASE_CMD</pre>\r\n<h2>The solution</h2>\r\nA simple way to fix it is to fill the first sectors of the disk with zeroes (or anything, really), in order to force gparted to consider this disk as \"raw\":\r\n<pre class=\"prettyprint lang-text\">\r\n[~] sudo dd if=/dev/zero of=/dev/sde\r\n^C # use ctrl+c after ~ 20 secs should do the trick\r\n961529+0 records in\r\n961529+0 records out\r\n492302848 bytes (492 MB) copied, 19.2061 s, 25.6 MB/s\r\n</pre>\r\n\r\nRelaunches gparted and normally it should run smoothly.','gparted: segfault while creating a gpt table','','inherit','closed','open','','532-revision-v1','','','2014-07-25 16:23:31','2014-07-25 16:23:31','',532,'http://localhost/html/?p=535',0,'revision','',0),(536,3,'2014-07-25 16:26:38','2014-07-25 16:26:38','<h2>Types of RAID</h2>\r\nRAID stands for <strong>Redondant Array of Independant Devices</strong>. There are basically five types of RAID commonly used these days:\r\n<ul>\r\n	<li>RAID 0: the data are distributed amongst two disks, without redundancy (stripping). It improves performances, but does not protect data against devices failures</li>\r\n	<li>RAID 1: the disks are exact mirrors of each other. This is a pure redundancy without striping or parity: its protects data, but does not improve performances.</li>\r\n	<li>RAID 1+0: stripping + mirroring. Requires at least 4 disks.</li>\r\n	<li>RAID 5: blocks of data are distributed amongst at least 3 disks (striping), as well as the parity (versus one dedicated parity disk, as in RAID 4). This protects data against one disk failure. Because of the parity, the space actually available is thus &lt;nbr of disks&gt; - 1.</li>\r\n	<li>RAID 6: same as RAID 5, but there are two blocks of parity for each &lt;nbr of disks -2&gt; blocks of data.</li>\r\n</ul>\r\n<h2>Configuring a RAID 5 (software) in linux</h2>\r\n<ol>\r\n	<li>Totally erase the content of your three (or more) disks</li>\r\n	<li>On each of them, create a gpt table. The easiest way is to use GParted: select the device, clic Device &gt; create partition table</li>\r\n	<li>Use fdisk to create a Linux RAID partition on each disk, spreading upon on the space available:\r\n<pre class=\"prettyprint lang-text\"># sudo fdisk /dev/sd[X]\r\nCommand (m for help): n\r\nPartition number (1-128, default 1):  \r\nFirst sector (34-5860533134, default 2048): \r\nLast sector, +sectors or +size{K,M,G,T,P} (2048-5860533134, default 5860533134): \r\n\r\nCreated a new partition 1 of type \'Linux filesystem\' and of size 2.7 TiB.\r\n\r\nCommand (m for help): t\r\n\r\nSelected partition 1\r\nPartition type (type L to list all types): 14\r\nChanged type of partition \'Linux filesystem\' to \'Linux RAID\'.\r\n\r\nCommand (m for help): w\r\nThe partition table has been altered.\r\nCalling ioctl() to re-read partition table.\r\nSyncing disks.</pre>\r\n</li>\r\n	<li>Install mdadm</li>\r\n	<li>Configure RAID with the following:\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --create --verbose --level=raid5 \\\\\r\n --raid-devices=3  /dev/md0 /dev/sd[acd]1</pre>\r\n</li>\r\n	<li>Wait for the process to terminate. You can see the state of the RAID by displaying the content of the file <code>/proc/mdstat</code>. To view the changes \"live\", use <code>watch -n 1 cat /proc/mdstat</code></li>\r\n</ol>\r\nIf everything went right, you should now have a new device (sudo fdisk -l) called <tt>/dev/md0. </tt>Partition and use it like a regular disk.\r\n<h2>Deleting the array (once and for all)</h2>\r\n<pre class=\"prettyprint lang-text\">sudo mdadm --stop /dev/md0\r\nsudo mdadm --zero-superblock /dev/sd[cde] # to be done for each disk of the array\r\nsudo mdadm --remove /dev/md0</pre>','RAID','','inherit','closed','open','','523-revision-v1','','','2014-07-25 16:26:38','2014-07-25 16:26:38','',523,'http://localhost/html/?p=536',0,'revision','',0),(537,3,'2014-07-29 06:57:13','2014-07-29 06:57:13','<h2>cutePDF Editor</h2>\r\nTo manipulate pdfs less than 5MB, <a href=\"https://www.cutepdf-editor.com/edit.asp\">cutpdf-editor</a> is really a nive tool.\r\n\r\nEverything is made online; you can crop, resize, merge, remove pages, etc. and then save the result on your machine.\r\n\r\n<h2>pdftk: a powerful commandline tool</h2>\r\n<a href=\"http://www.pdflabs.com/docs/pdftk-man-page/\">pdftk (man page)</a> is a really powerful tool, which allow us to do pretty everything we want fast and without any restriction in size.\r\n\r\nThe syntax is always the same : <pre class=\"prettyprint lang-text\">pdftk [pdf in] [operation] [page range] output [pdf out]</pre>.\r\n\r\nHere is a sample of what it can do:\r\n<ul>\r\n<li>remove some pages from in.pdf. cat = concatenate\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-5 7 9-21 23 25-33 output out2.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 90 degrees right (possibilities = north, south, east, west, left, right, or down), keeping even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf rotate 1-endoddnorth output out.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 180 degrees left and remove even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-endoddleft output out.pdf\r\n</pre>	\r\n</li>\r\n<li>collate documents A and B, merging them one page after another (1A-1B-2A-2B...):\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle A B output out.pdf\r\n</pre>\r\n</li>\r\n<li>collate documents A and B, but keep only even pages from B and rotate pages from A:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle \\\\\r\n     A1-endright B1-endeven output out.pdf\r\n</pre>	\r\n</li>\r\n<li>extract each page of A into pg0001.pdf, pg0002.pdf, etc:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A.pdf burst\r\n</pre>	\r\n</li>\r\n</ul>\r\n','Working with pdfs on Linux','','inherit','closed','open','','498-revision-v1','','','2014-07-29 06:57:13','2014-07-29 06:57:13','',498,'http://localhost/html/?p=537',0,'revision','',0),(538,3,'2014-07-29 07:15:57','2014-07-29 07:15:57','<h2>cutePDF Editor</h2>\r\nTo manipulate pdfs less than 5MB, <a href=\"https://www.cutepdf-editor.com/edit.asp\">cutpdf-editor</a> is really a nive tool.\r\n\r\nEverything is made online; you can crop, resize, merge, remove pages, etc. and then save the result on your machine.\r\n\r\n<h2>pdftk: a powerful commandline tool</h2>\r\n<a href=\"http://www.pdflabs.com/docs/pdftk-man-page/\">pdftk (man page)</a> is a really powerful tool, which allow us to do pretty everything we want fast and without any restriction in size.\r\n\r\nThe syntax is always the same : <pre class=\"prettyprint lang-text\">pdftk [pdf in] [operation] [page range] output [pdf out]</pre>.\r\n\r\nHere is a sample of what it can do:\r\n<ul>\r\n<li>remove some pages from in.pdf. cat = concatenate\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-5 7 9-21 23 25-33 output out2.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 90 degrees right (possibilities = north, south, east, west, left, right, or down), keeping even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf rotate 1-endoddnorth output out.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 180 degrees left and remove even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-endoddleft output out.pdf\r\n</pre>	\r\n</li>\r\n<li>collate documents A and B, merging them one page after another (1A-1B-2A-2B...):\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle A B output out.pdf\r\n</pre>\r\n</li>\r\n<li>collate documents A and B, but keep only even pages from B and rotate pages from A:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle \\\\\r\n     A1-endright B1-endeven output out.pdf\r\n</pre>	\r\n</li>\r\n<li>compress a document:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A.pdf output out.pdf compress\r\n</pre>	\r\n</li>\r\n<li>extract each page of A into pg0001.pdf, pg0002.pdf, etc:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A.pdf burst\r\n</pre>	\r\n</li>\r\n</ul>\r\n','Working with pdfs on Linux','','inherit','closed','open','','498-autosave-v1','','','2014-07-29 07:15:57','2014-07-29 07:15:57','',498,'http://localhost/html/?p=538',0,'revision','',0),(539,3,'2014-07-29 07:16:13','2014-07-29 07:16:13','<h2>cutePDF Editor</h2>\r\nTo manipulate pdfs less than 5MB, <a href=\"https://www.cutepdf-editor.com/edit.asp\">cutpdf-editor</a> is really a nive tool.\r\n\r\nEverything is made online; you can crop, resize, merge, remove pages, etc. and then save the result on your machine.\r\n\r\n<h2>pdftk: a powerful commandline tool</h2>\r\n<a href=\"http://www.pdflabs.com/docs/pdftk-man-page/\">pdftk (man page)</a> is a really powerful tool, which allow us to do pretty everything we want fast and without any restriction in size.\r\n\r\nThe syntax is always the same : <pre class=\"prettyprint lang-text\">pdftk [pdf in] [operation] [page range] output [pdf out]</pre>.\r\n\r\nHere is a sample of what it can do:\r\n<ul>\r\n<li>remove some pages from in.pdf. cat = concatenate\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-5 7 9-21 23 25-33 output out2.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 90 degrees right (possibilities = north, south, east, west, left, right, or down), keeping even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf rotate 1-endoddnorth output out.pdf\r\n</pre>	\r\n</li>\r\n<li>rotate odd pages by 180 degrees left and remove even pages:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk in.pdf cat 1-endoddleft output out.pdf\r\n</pre>	\r\n</li>\r\n<li>collate documents A and B, merging them one page after another (1A-1B-2A-2B...):\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle A B output out.pdf\r\n</pre>\r\n</li>\r\n<li>collate documents A and B, but keep only even pages from B and rotate pages from A:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A=A.pdf B=B.pdf shuffle \\\\\r\n     A1-endright B1-endeven output out.pdf\r\n</pre>	\r\n</li>\r\n<li>compress a document:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A.pdf output out.pdf compress\r\n</pre>	\r\n</li>\r\n<li>extract each page of A into pg0001.pdf, pg0002.pdf, etc:\r\n<pre class=\"prettyprint lang-text\">\r\npdftk A.pdf burst\r\n</pre>	\r\n</li>\r\n</ul>\r\n','Working with pdfs on Linux','','inherit','closed','open','','498-revision-v1','','','2014-07-29 07:16:13','2014-07-29 07:16:13','',498,'http://localhost/html/?p=539',0,'revision','',0),(540,3,'2014-07-29 07:19:12','2014-07-29 07:19:12','Every time I use pacman on a new machine, this f***ing key error occurs:\r\n<pre class=\"prettyprint lang-text\">downloading required keys...\r\n:: Import PGP key 4096R/, \"Anatol Pomozov &lt;anatol.pomozov@gmail.com&gt;\", created: 2014-02-03? [Y/n]\r\nerror: key \"Anatol Pomozov &lt;anatol.pomozov@gmail.com&gt;\" could not be imported\r\nerror: required key missing from keyring\r\nerror: failed to commit transaction (unexpected error)\r\nErrors occurred, no packages were upgraded.</pre>\r\nTo solve it, I am not quite sure... I normally try one of the two things below, hoping that one works:\r\n<ol>\r\n	<li>On a new install:\r\n<pre class=\"prettyprint lang-text\">pacman-key --init &amp;&amp; pacman-key --populate archlinux</pre>\r\n</li>\r\n	<li>On a running system:\r\n<pre class=\"prettyprint lang-text\">pacman -S archlinux-keyring; pacman -Su</pre>\r\n(although, that will put his key in your keyring and let him break whatever he wants... just like any other developer)\r\n		\r\nsource <a href=\"https://bbs.archlinux.org/viewtopic.php?id=178185\">https://bbs.archlinux.org/viewtopic.php?id=178185</a> \r\n</li>\r\n</ol>','f***ing anatol.pomozov@gmail.com','','inherit','closed','open','','526-autosave-v1','','','2014-07-29 07:19:12','2014-07-29 07:19:12','',526,'http://localhost/html/?p=540',0,'revision','',0),(541,3,'2014-07-29 07:19:20','2014-07-29 07:19:20','Every time I use pacman on a new machine, this f***ing key error occurs:\r\n<pre class=\"prettyprint lang-text\">downloading required keys...\r\n:: Import PGP key 4096R/, \"Anatol Pomozov &lt;anatol.pomozov@gmail.com&gt;\", created: 2014-02-03? [Y/n]\r\nerror: key \"Anatol Pomozov &lt;anatol.pomozov@gmail.com&gt;\" could not be imported\r\nerror: required key missing from keyring\r\nerror: failed to commit transaction (unexpected error)\r\nErrors occurred, no packages were upgraded.</pre>\r\nTo solve it, I am not quite sure... I normally try one of the two things below, hoping that one works:\r\n<ol>\r\n	<li>On a new install:\r\n<pre class=\"prettyprint lang-text\">pacman-key --init &amp;&amp; pacman-key --populate archlinux</pre>\r\n</li>\r\n	<li>On a running system:\r\n<pre class=\"prettyprint lang-text\">pacman -S archlinux-keyring; pacman -Su</pre>\r\n(although, that will put his key in your keyring and let him break whatever he wants... just like any other developer)\r\n		\r\nsource <a href=\"https://bbs.archlinux.org/viewtopic.php?id=178185\">https://bbs.archlinux.org/viewtopic.php?id=178185</a> \r\n</li>\r\n</ol>','f***ing anatol.pomozov@gmail.com','','inherit','closed','open','','526-revision-v1','','','2014-07-29 07:19:20','2014-07-29 07:19:20','',526,'http://localhost/html/?p=541',0,'revision','',0),(542,3,'2014-08-09 20:11:04','2014-08-09 20:11:04','In perl, we usually use <strong><em>Plain Old Documentation (POD)</em> </strong> to document code and easily produce man pages.\r\n\r\nTo convert pod files to man pages, use:\r\n<pre class=\"prettyprint noescape lang-text\">pod2man help.pod | man -l - # just display the result in terminal\r\npod2man help.pod > help.man # generate the man page</pre>\r\nTo extract POD from source code, use <code>perlpod [path/to/source-file]</code>.\r\n\r\nTo automatically genrate POD from perl code, use the <code>POD::Autopod</code> module.\r\nHere is a little perl script to ease its use:\r\n<pre class=\"prettyprint noescape lang-perl\">#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse strict;\r\n\r\nuse Pod::Autopod;\r\nuse Data::Dumper;\r\n\r\nif( not @ARGV ||  scalar @ARGV != 2 ){\r\n    print \"Usage: autopod.pl  \";\r\n}else{\r\n    new Pod::Autopod(readfile=>$ARGV[0], writefile=>$ARGV[1]);\r\n }</pre>','POD','','publish','closed','open','','pod','','','2014-08-09 20:14:12','2014-08-09 20:14:12','',0,'http://localhost/html/?p=542',0,'post','',0),(543,3,'2014-08-09 20:06:32','2014-08-09 20:06:32','In perl, we usually use <strong><em>Plain Old Documentation (POD)</em> </strong> to document code and easily produce man pages.\r\n\r\nTo convert pod files to man pages, use:','POD','','inherit','closed','open','','542-revision-v1','','','2014-08-09 20:06:32','2014-08-09 20:06:32','',542,'http://localhost/html/?p=543',0,'revision','',0),(544,3,'2014-08-09 20:07:09','2014-08-09 20:07:09','In perl, we usually use <strong><em>Plain Old Documentation (POD)</em> </strong> to document code and easily produce man pages.\r\n\r\nTo convert pod files to man pages, use:\r\n<pre class=\"prettyprint lang-text\">pod2man help.pod | man -l - # just display the result in terminal\r\npod2man help.pod &gt; help.man # generate the man page</pre>\r\nTo extract POD from source code, use <code>perlpod [path/to/source-file]</code>.\r\n\r\nTo automatically genrate POD from perl code, use the <code>POD::Autopod</code> module.\r\nHere is a little perl script to ease its use:\r\n<pre class=\"prettyprint lang-text\">#!/usr/bin/env perl use warnings; use strict; use Pod::Autopod; use Data::Dumper; if( not @ARGV || scalar @ARGV != 2 ){ print \"Usage: autopod.pl \"; }else{ new Pod::Autopod(readfile=&gt;$ARGV[0], writefile=&gt;$ARGV[1]); }</pre>','POD','','inherit','closed','open','','542-revision-v1','','','2014-08-09 20:07:09','2014-08-09 20:07:09','',542,'http://localhost/html/?p=544',0,'revision','',0),(545,3,'2014-08-09 20:09:29','2014-08-09 20:09:29','In perl, we usually use <strong><em>Plain Old Documentation (POD)</em> </strong> to document code and easily produce man pages.\r\n\r\nTo convert pod files to man pages, use:\r\n<pre class=\"prettyprint lang-text\">pod2man help.pod | man -l - # just display the result in terminal\r\npod2man help.pod &gt; help.man # generate the man page</pre>\r\nTo extract POD from source code, use <code>perlpod [path/to/source-file]</code>.\r\n\r\nTo automatically genrate POD from perl code, use the <code>POD::Autopod</code> module.\r\nHere is a little perl script to ease its use:\r\n<pre class=\"prettyprint lang-perl\">#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse strict;\r\n\r\nuse Pod::Autopod;\r\nuse Data::Dumper;\r\n\r\nif( not @ARGV ||  scalar @ARGV != 2 ){\r\n    print \"Usage: autopod.pl  \";\r\n}else{\r\n    new Pod::Autopod(readfile=&gt;$ARGV[0], writefile=&gt;$ARGV[1]);\r\n }</pre>','POD','','inherit','closed','open','','542-revision-v1','','','2014-08-09 20:09:29','2014-08-09 20:09:29','',542,'http://localhost/html/?p=545',0,'revision','',0),(546,3,'2014-08-09 20:11:04','2014-08-09 20:11:04','In perl, we usually use <strong><em>Plain Old Documentation (POD)</em> </strong> to document code and easily produce man pages.\r\n\r\nTo convert pod files to man pages, use:\r\n<pre class=\"prettyprint lang-text\">pod2man help.pod | man -l - # just display the result in terminal\r\npod2man help.pod &gt; help.man # generate the man page</pre>\r\nTo extract POD from source code, use <code>perlpod [path/to/source-file]</code>.\r\n\r\nTo automatically genrate POD from perl code, use the <code>POD::Autopod</code> module.\r\nHere is a little perl script to ease its use:\r\n<pre class=\"prettyprint lang-perl\">#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse strict;\r\n\r\nuse Pod::Autopod;\r\nuse Data::Dumper;\r\n\r\nif( not @ARGV ||  scalar @ARGV != 2 ){\r\n    print \"Usage: autopod.pl  \";\r\n}else{\r\n    new Pod::Autopod(readfile=>$ARGV[0], writefile=>$ARGV[1]);\r\n }</pre>','POD','','inherit','closed','open','','542-revision-v1','','','2014-08-09 20:11:04','2014-08-09 20:11:04','',542,'http://localhost/html/?p=546',0,'revision','',0),(548,3,'2014-08-09 20:14:07','2014-08-09 20:14:07','In perl, we usually use <strong><em>Plain Old Documentation (POD)</em> </strong> to document code and easily produce man pages.\r\n\r\nTo convert pod files to man pages, use:\r\n<pre class=\"prettyprint noescape lang-text\">pod2man help.pod | man -l - # just display the result in terminal\r\npod2man help.pod > help.man # generate the man page</pre>\r\nTo extract POD from source code, use <code>perlpod [path/to/source-file]</code>.\r\n\r\nTo automatically genrate POD from perl code, use the <code>POD::Autopod</code> module.\r\nHere is a little perl script to ease its use:\r\n<pre class=\"prettyprint noescape lang-perl\">#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse strict;\r\n\r\nuse Pod::Autopod;\r\nuse Data::Dumper;\r\n\r\nif( not @ARGV ||  scalar @ARGV != 2 ){\r\n    print \"Usage: autopod.pl  \";\r\n}else{\r\n    new Pod::Autopod(readfile=>$ARGV[0], writefile=>$ARGV[1]);\r\n }</pre>','POD','','inherit','closed','open','','542-autosave-v1','','','2014-08-09 20:14:07','2014-08-09 20:14:07','',542,'http://localhost/html/?p=548',0,'revision','',0),(549,3,'2014-08-09 20:13:42','2014-08-09 20:13:42','In perl, we usually use <strong><em>Plain Old Documentation (POD)</em> </strong> to document code and easily produce man pages.\r\n\r\nTo convert pod files to man pages, use:\r\n<pre class=\"prettyprint noescape lang-text\">pod2man help.pod | man -l - # just display the result in terminal\r\npod2man help.pod &gt; help.man # generate the man page</pre>\r\nTo extract POD from source code, use <code>perlpod [path/to/source-file]</code>.\r\n\r\nTo automatically genrate POD from perl code, use the <code>POD::Autopod</code> module.\r\nHere is a little perl script to ease its use:\r\n<pre class=\"prettyprint noescape lang-perl\">#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse strict;\r\n\r\nuse Pod::Autopod;\r\nuse Data::Dumper;\r\n\r\nif( not @ARGV ||  scalar @ARGV != 2 ){\r\n    print \"Usage: autopod.pl  \";\r\n}else{\r\n    new Pod::Autopod(readfile=>$ARGV[0], writefile=>$ARGV[1]);\r\n }</pre>','POD','','inherit','closed','open','','542-revision-v1','','','2014-08-09 20:13:42','2014-08-09 20:13:42','',542,'http://localhost/html/?p=549',0,'revision','',0),(550,3,'2014-08-09 20:14:12','2014-08-09 20:14:12','In perl, we usually use <strong><em>Plain Old Documentation (POD)</em> </strong> to document code and easily produce man pages.\r\n\r\nTo convert pod files to man pages, use:\r\n<pre class=\"prettyprint noescape lang-text\">pod2man help.pod | man -l - # just display the result in terminal\r\npod2man help.pod > help.man # generate the man page</pre>\r\nTo extract POD from source code, use <code>perlpod [path/to/source-file]</code>.\r\n\r\nTo automatically genrate POD from perl code, use the <code>POD::Autopod</code> module.\r\nHere is a little perl script to ease its use:\r\n<pre class=\"prettyprint noescape lang-perl\">#!/usr/bin/env perl\r\n\r\nuse warnings;\r\nuse strict;\r\n\r\nuse Pod::Autopod;\r\nuse Data::Dumper;\r\n\r\nif( not @ARGV ||  scalar @ARGV != 2 ){\r\n    print \"Usage: autopod.pl  \";\r\n}else{\r\n    new Pod::Autopod(readfile=>$ARGV[0], writefile=>$ARGV[1]);\r\n }</pre>','POD','','inherit','closed','open','','542-revision-v1','','','2014-08-09 20:14:12','2014-08-09 20:14:12','',542,'http://localhost/html/?p=550',0,'revision','',0),(551,3,'2014-08-10 08:25:30','2014-08-10 08:25:30','<h2 id=\"display-information\">Display information</h2>\r\n<h3 id=\"physical-volumes\">Physical volumes</h3>\r\n<pre class=\"prettyprint lang-text\">sudo pvdisplay</pre>\r\nWich results in this (quite queasy) output:\r\n<pre class=\"prettyprint lang-text\">  --- Physical volume ---\r\nPV Name               /dev/sda1\r\nVG Name               sys\r\nPV Size               111.79 GiB / not usable 4.00 MiB\r\nAllocatable           yes\r\nPE Size              4.00 MiB\r\nTotal PE              28617\r\nFree PE               5944\r\nAllocated PE          22673\r\nPV UUID               c3cUMj-Snck-qebQ-yg0d-GgxE-Poje-cMdN6H\r\n\r\n--- Physical volume ---\r\nPV Name               /dev/md0\r\nVG Name               raid\r\nPV Size               8.19 TiB / not usable 5.00 MiB\r\nAllocatable           yes\r\nPE Size               4.00 MiB\r\nTotal PE              2146093\r\nFree PE               954000\r\nAllocated PE          1192093\r\nPV UUID               1Y57gl-zeNd-xVzV-7y6N-Qk4n-d77Q-AI5F0p</pre>\r\nTo have a more useful info, like the space available on each PV, use <code>pvs</code>:\r\n<pre class=\"prettyprint lang-text\">sudo pvs\r\nsudo pvs --segments\r\nsudo pvs /dev/sda1</pre>\r\nExample of output:\r\n<pre class=\"prettyprint lang-text\">[~] sudo pvs\r\nPV         VG   Fmt  Attr PSize   PFree\r\n/dev/md0   raid lvm2 a--    8.19t  3.64t\r\n/dev/sda1  sys  lvm2 a--  111.79g 23.22g</pre>\r\n<h3 id=\"logical-volumes\">Logical volumes</h3>\r\nSimply replace the “p” with “l” on the commands above, for example:\r\n<pre class=\"prettyprint lang-text\">sudo lvdisplay\r\nsudo lvs</pre>\r\n\r\n<hr>\r\n\r\n<h2 id=\"snapshots\">Snapshots</h2>\r\nSnapshots are probably the most useful feature of lvm.\r\n\r\nWhen creating a snapshot, you need to set the maximum space the latter can use. Note that it is just an upper limit (which can be modified latter if needed) and most of the time it won’t be reached since snapshots are <em>incremental</em>: a new snapshot takes 0b in space. After that, each modification of the lv will trigger a copy into the snapshot.\r\n\r\n<em>* A snapshot volume can be as large or a small as you like but it must be large enough to hold all the changes that are likely to happen to the original volume during the lifetime of the snapshot.*</em>\r\n\r\nSo, to create a snapshot named snap of the lv sys/root taking at most 10GB, use:\r\n<pre class=\"prettyprint lang-text\">sudo lvcreate -s -n snap -L 10g sys/lroot</pre>\r\nTo later get back to the saved state, use:\r\n<pre class=\"prettyprint lang-text\">sudo lvconvert --merge sys/snap</pre>\r\n<strong><em>_Note_</em></strong>: If the origin volume of sys/snap is in use, it will inform you that the merge will take place the next time the volumes are activated.\r\nIf this is the root volume, then at the next boot, the volume will be activated and the merge will begin in the background.\r\n\r\n<hr>\r\n\r\n<h2 id=\"resize-logical-volumes\">Resize logical volumes</h2>\r\nSay that we have a lv named <code>raid/ldata</code> (raid is the volume group name) with an ext4 filesystem mounted on <code>/ldata</code> and mapped to <code>/dev/mapper/raid-ldata</code>.\r\nIt’s size is currently 1.8 TB and we want to shrink it to 800 GB.\r\n<pre class=\"prettyprint lang-text\"> > sudo lvs\r\n  LV       VG   Attr      LSize  Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-ao---  1.82t</pre>\r\n<h3 id=\"1-check-and-unmount-the-volume\">1. check and unmount the volume</h3>\r\nAll the operation should be done on an unmounted volume.  If you want to resize the root partition, use a live CD.\r\n\r\nIt is important to check that the filesystem is not corrupt before proceeding. resizing a file system in an inconsistent state could have disastrous consequences! For extX fs, use:\r\n<pre class=\"prettyprint lang-text\">sudo e2fsck -f /dev/mapper/raid-ldata</pre>\r\n<h3 id=\"2-resize-the-filesystem\">2. resize the filesystem</h3>\r\nShrink the fs to a size at most 90% of the new size you want. In our case, it will be ~700 GB:\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata 700G</pre>\r\n<blockquote>From the man page:\r\nThe <strong>resize2fs</strong> program will resize ext2, ext3, or ext4 file systems. It can be used to enlarge or shrink an unmounted file system located on device. If the filesystem is mounted, it can be used to expand the size of the mounted filesystem, assuming the kernel supports on-line resizing.</blockquote>\r\n<h3 id=\"3-reduce-the-size-of-the-logical-volume\">3. reduce the size of the logical volume</h3>\r\n<pre class=\"prettyprint lang-text\">sudo lvreduce -L 800G /dev/mapper/raid-ldata</pre>\r\nresult of the command:\r\n<pre class=\"prettyprint lang-text\">WARNING: Reducing active logical volume to 800.00 GiB\r\n  THIS MAY DESTROY YOUR DATA (filesystem etc.)\r\nDo you really want to reduce ldata? [y/n]: y\r\n  Reducing logical volume ldata to 800.00 GiB\r\n  Logical volume ldata successfully resized</pre>\r\n<h3 id=\"4-expand-the-fs-to-fit-the-whole-partition\">4. expand the fs to fit the whole partition</h3>\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata</pre>\r\nDone!\r\n\r\nresult:\r\n<pre class=\"prettyprint lang-text\">> sudo lvs\r\n  LV       VG   Attr      LSize   Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-a---- 800.00g</pre>\r\n\r\n<hr />\r\n\r\n<h1>Troubleshooting</h1>\r\n<h2 id=\"volume-group-not-mappedinactive-at-boot\">Volume group not mapped/inactive at boot</h2>\r\n<h3 id=\"the-issue\">The issue</h3>\r\nAfter upgrade, I could not boot into my system anymore, getting the grub error:\r\n<blockquote><tt>ERROR: device ‘UUID=……’ not found. Skipping FSCK’\r\nERROR: Unable to find root device ‘UUID=……’\r\nYou are being dropped to the recovery shell\r\nType ‘exit’ to try and continue booting\r\nsh: can’t access tty: job control turned off’</tt></blockquote>\r\nUsing an archlinux live usb, I discovered that my lvm partitions did not show up in <code>/dev/mapper/</code>. First, the command <code>vgdisplay</code> showed not vg. Then, the command <code>lvdisplay</code> showed INACTIVE logical volumes…\r\n<h3 id=\"partial-solution\">A Really partial solution</h3>\r\nTo activate a vg (and all the lv it contains), use the following:\r\n<pre class=\"prettyprint lang-text\">vgscan\r\nvgchange -ay</pre>\r\nIf you are in the <em>grub emergency shell</em>, the same commands <strong>should be preceded by <code>lvm</code></strong>.\r\n\r\nThe system still doesn’t boot automatically, but running the above commands and then typing <code>exit</code> in the emergency shell works…','Using LVM','','publish','closed','open','','551','','','2014-08-31 12:16:26','2014-08-31 12:16:26','',0,'http://localhost/html/?p=551',0,'post','',0),(552,3,'2014-08-10 08:21:34','2014-08-10 08:21:34','<h1 id=\"using-lvm\">Using LVM</h1>\r\n\r\n<hr>\r\n\r\n<h2 id=\"display-information\">Display information</h2>\r\n\r\n<h3 id=\"physical-volumes\">Physical volumes</h3>\r\n\r\n<pre><code>sudo pvdisplay\r\n</code></pre>\r\n\r\n<p>Wich results in this (quite queasy) output:</p>\r\n\r\n<pre><code>  --- Physical volume ---\r\nPV Name               /dev/sda1\r\nVG Name               sys\r\nPV Size               111.79 GiB / not usable 4.00 MiB\r\nAllocatable           yes\r\nPE Size              4.00 MiB\r\nTotal PE              28617\r\nFree PE               5944\r\nAllocated PE          22673\r\nPV UUID               c3cUMj-Snck-qebQ-yg0d-GgxE-Poje-cMdN6H\r\n\r\n--- Physical volume ---\r\nPV Name               /dev/md0\r\nVG Name               raid\r\nPV Size               8.19 TiB / not usable 5.00 MiB\r\nAllocatable           yes\r\nPE Size               4.00 MiB\r\nTotal PE              2146093\r\nFree PE               954000\r\nAllocated PE          1192093\r\nPV UUID               1Y57gl-zeNd-xVzV-7y6N-Qk4n-d77Q-AI5F0p\r\n</code></pre>\r\n\r\n<p>To have a more useful info, like the space available on each PV, use <code>pvs</code>:</p>\r\n\r\n<pre><code>sudo pvs\r\nsudo pvs --segments\r\nsudo pvs /dev/sda1\r\n</code></pre>\r\n\r\n<p>Example of output:</p>\r\n\r\n<pre><code>[~] sudo pvs\r\nPV         VG   Fmt  Attr PSize   PFree\r\n/dev/md0   raid lvm2 a--    8.19t  3.64t\r\n/dev/sda1  sys  lvm2 a--  111.79g 23.22g\r\n</code></pre>\r\n\r\n<h3 id=\"logical-volumes\">Logical volumes</h3>\r\n\r\n<p>Simply replace the “p” with “l” on the commands above, for example:</p>\r\n\r\n<pre><code>sudo lvdisplay\r\nsudo lvs\r\n</code></pre>\r\n\r\n<hr>\r\n\r\n<h2 id=\"snapshots\">Snapshots</h2>\r\n\r\n<p>Snapshots are probably the most useful feature of lvm.</p>\r\n\r\n<p>When creating a snapshot, you need to set the maximum space the latter can use. Note that it is just an upper limit (which can be modified latter if needed) and most of the time it won’t be reached since snapshots are <em>incremental</em>: a new snapshot takes 0b in space. After that, each modification of the lv will trigger a copy into the snapshot.</p>\r\n\r\n<p><em>* A snapshot volume can be as large or a small as you like but it must be large enough to hold all the changes that are likely to happen to the original volume during the lifetime of the snapshot.*</em></p>\r\n\r\n<p>So, to create a snapshot named snap of the lv sys/root taking at most 10GB, use:</p>\r\n\r\n<pre><code>sudo lvcreate -s -n snap -L 10g sys/lroot\r\n</code></pre>\r\n\r\n<p>To later get back to the saved state, use:</p>\r\n\r\n<pre><code>sudo lvconvert --merge sys/snap\r\n</code></pre>\r\n\r\n<p><strong><em>_Note_</em></strong>: If the origin volume of sys/snap is in use, it will inform you that the merge will take place the next time the volumes are activated. <br>\r\nIf this is the root volume, then at the next boot, the volume will be activated and the merge will begin in the background.</p>\r\n\r\n<hr>\r\n\r\n<h2 id=\"resize-logical-volumes\">Resize logical volumes</h2>\r\n\r\n<p>Say that we have a lv named <code>raid/ldata</code> (raid is the volume group name) with an ext4 filesystem mounted on <code>/ldata</code> and mapped to <code>/dev/mapper/raid-ldata</code>.  <br>\r\nIt’s size is currently 1.8 TB and we want to shrink it to 800 GB.</p>\r\n\r\n<pre><code> &gt; sudo lvs\r\n  LV       VG   Attr      LSize  Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-ao---  1.82t  \r\n</code></pre>\r\n\r\n<h3 id=\"1-check-and-unmount-the-volume\">1. check and unmount the volume</h3>\r\n\r\n<p>All the operation should be done on an unmounted volume.  If you want to resize the root partition, use a live CD.</p>\r\n\r\n<p>It is important to check that the filesystem is not corrupt before proceeding. resizing a file system in an inconsistent state could have disastrous consequences! For extX fs, use:</p>\r\n\r\n<pre><code>sudo e2fsck -f /dev/mapper/raid-ldata\r\n</code></pre>\r\n\r\n<h3 id=\"2-resize-the-filesystem\">2. resize the filesystem</h3>\r\n\r\n<p>Shrink the fs to a size at most 90% of the new size you want. In our case, it will be ~700 GB:</p>\r\n\r\n<pre><code>sudo resize2fs /dev/mapper/raid-ldata 700G\r\n</code></pre>\r\n\r\n<blockquote>\r\n  <p>From the man page:  <br>\r\n  The <strong>resize2fs</strong> program will resize ext2, ext3, or ext4 file systems. It can be used to enlarge or shrink an unmounted file system located on device. If the filesystem is mounted, it can be used to expand the size of the mounted filesystem, assuming the kernel supports on-line resizing.  </p>\r\n</blockquote>\r\n\r\n<h3 id=\"3-reduce-the-size-of-the-logical-volume\">3. reduce the size of the logical volume</h3>\r\n\r\n<pre><code>sudo lvreduce -L 800G /dev/mapper/raid-ldata\r\n</code></pre>\r\n\r\n<p>result of the command:</p>\r\n\r\n<pre><code>WARNING: Reducing active logical volume to 800.00 GiB\r\n  THIS MAY DESTROY YOUR DATA (filesystem etc.)\r\nDo you really want to reduce ldata? [y/n]: y\r\n  Reducing logical volume ldata to 800.00 GiB\r\n  Logical volume ldata successfully resized\r\n</code></pre>\r\n\r\n<h3 id=\"4-expand-the-fs-to-fit-the-whole-partition\">4. expand the fs to fit the whole partition</h3>\r\n\r\n<pre><code>sudo resize2fs /dev/mapper/raid-ldata \r\n</code></pre>\r\n\r\n<p>Done!</p>\r\n\r\n<p>result:</p>\r\n\r\n<pre><code>&gt; sudo lvs\r\n  LV       VG   Attr      LSize   Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-a---- 800.00g    \r\n</code></pre>','','','inherit','closed','open','','551-revision-v1','','','2014-08-10 08:21:34','2014-08-10 08:21:34','',551,'http://localhost/html/?p=552',0,'revision','',0),(553,3,'2014-08-10 08:24:01','2014-08-10 08:24:01','<h1 id=\"using-lvm\">Using LVM</h1>\r\n\r\n<hr>\r\n\r\n<h2 id=\"display-information\">Display information</h2>\r\n\r\n<h3 id=\"physical-volumes\">Physical volumes</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo pvdisplay\r\n</pre>\r\n\r\n<p>Wich results in this (quite queasy) output:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">  --- Physical volume ---\r\nPV Name               /dev/sda1\r\nVG Name               sys\r\nPV Size               111.79 GiB / not usable 4.00 MiB\r\nAllocatable           yes\r\nPE Size              4.00 MiB\r\nTotal PE              28617\r\nFree PE               5944\r\nAllocated PE          22673\r\nPV UUID               c3cUMj-Snck-qebQ-yg0d-GgxE-Poje-cMdN6H\r\n\r\n--- Physical volume ---\r\nPV Name               /dev/md0\r\nVG Name               raid\r\nPV Size               8.19 TiB / not usable 5.00 MiB\r\nAllocatable           yes\r\nPE Size               4.00 MiB\r\nTotal PE              2146093\r\nFree PE               954000\r\nAllocated PE          1192093\r\nPV UUID               1Y57gl-zeNd-xVzV-7y6N-Qk4n-d77Q-AI5F0p\r\n</pre>\r\n\r\n<p>To have a more useful info, like the space available on each PV, use <code>pvs</code>:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo pvs\r\nsudo pvs --segments\r\nsudo pvs /dev/sda1\r\n</pre>\r\n\r\n<p>Example of output:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">[~] sudo pvs\r\nPV         VG   Fmt  Attr PSize   PFree\r\n/dev/md0   raid lvm2 a--    8.19t  3.64t\r\n/dev/sda1  sys  lvm2 a--  111.79g 23.22g\r\n</pre>\r\n\r\n<h3 id=\"logical-volumes\">Logical volumes</h3>\r\n\r\n<p>Simply replace the “p” with “l” on the commands above, for example:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvdisplay\r\nsudo lvs\r\n</pre>\r\n\r\n<hr>\r\n\r\n<h2 id=\"snapshots\">Snapshots</h2>\r\n\r\n<p>Snapshots are probably the most useful feature of lvm.</p>\r\n\r\n<p>When creating a snapshot, you need to set the maximum space the latter can use. Note that it is just an upper limit (which can be modified latter if needed) and most of the time it won’t be reached since snapshots are <em>incremental</em>: a new snapshot takes 0b in space. After that, each modification of the lv will trigger a copy into the snapshot.</p>\r\n\r\n<p><em>* A snapshot volume can be as large or a small as you like but it must be large enough to hold all the changes that are likely to happen to the original volume during the lifetime of the snapshot.*</em></p>\r\n\r\n<p>So, to create a snapshot named snap of the lv sys/root taking at most 10GB, use:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvcreate -s -n snap -L 10g sys/lroot\r\n</pre>\r\n\r\n<p>To later get back to the saved state, use:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvconvert --merge sys/snap\r\n</pre>\r\n\r\n<p><strong><em>_Note_</em></strong>: If the origin volume of sys/snap is in use, it will inform you that the merge will take place the next time the volumes are activated. <br>\r\nIf this is the root volume, then at the next boot, the volume will be activated and the merge will begin in the background.</p>\r\n\r\n<hr>\r\n\r\n<h2 id=\"resize-logical-volumes\">Resize logical volumes</h2>\r\n\r\n<p>Say that we have a lv named <code>raid/ldata</code> (raid is the volume group name) with an ext4 filesystem mounted on <code>/ldata</code> and mapped to <code>/dev/mapper/raid-ldata</code>.  <br>\r\nIt’s size is currently 1.8 TB and we want to shrink it to 800 GB.</p>\r\n\r\n<pre class=\"prettyprint lang-text\"> &gt; sudo lvs\r\n  LV       VG   Attr      LSize  Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-ao---  1.82t  \r\n</pre>\r\n\r\n<h3 id=\"1-check-and-unmount-the-volume\">1. check and unmount the volume</h3>\r\n\r\n<p>All the operation should be done on an unmounted volume.  If you want to resize the root partition, use a live CD.</p>\r\n\r\n<p>It is important to check that the filesystem is not corrupt before proceeding. resizing a file system in an inconsistent state could have disastrous consequences! For extX fs, use:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo e2fsck -f /dev/mapper/raid-ldata\r\n</pre>\r\n\r\n<h3 id=\"2-resize-the-filesystem\">2. resize the filesystem</h3>\r\n\r\n<p>Shrink the fs to a size at most 90% of the new size you want. In our case, it will be ~700 GB:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata 700G\r\n</pre>\r\n\r\n<blockquote>\r\n  <p>From the man page:  <br>\r\n  The <strong>resize2fs</strong> program will resize ext2, ext3, or ext4 file systems. It can be used to enlarge or shrink an unmounted file system located on device. If the filesystem is mounted, it can be used to expand the size of the mounted filesystem, assuming the kernel supports on-line resizing.  </p>\r\n</blockquote>\r\n\r\n<h3 id=\"3-reduce-the-size-of-the-logical-volume\">3. reduce the size of the logical volume</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvreduce -L 800G /dev/mapper/raid-ldata\r\n</pre>\r\n\r\n<p>result of the command:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">WARNING: Reducing active logical volume to 800.00 GiB\r\n  THIS MAY DESTROY YOUR DATA (filesystem etc.)\r\nDo you really want to reduce ldata? [y/n]: y\r\n  Reducing logical volume ldata to 800.00 GiB\r\n  Logical volume ldata successfully resized\r\n</pre>\r\n\r\n<h3 id=\"4-expand-the-fs-to-fit-the-whole-partition\">4. expand the fs to fit the whole partition</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata \r\n</pre>\r\n\r\n<p>Done!</p>\r\n\r\n<p>result:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">&gt; sudo lvs\r\n  LV       VG   Attr      LSize   Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-a---- 800.00g    \r\n</pre>','','','inherit','closed','open','','551-revision-v1','','','2014-08-10 08:24:01','2014-08-10 08:24:01','',551,'http://localhost/html/?p=553',0,'revision','',0),(554,3,'2014-08-10 08:24:38','2014-08-10 08:24:38','<h1 id=\"using-lvm\">Using LVM</h1>\r\n\r\n<hr>\r\n\r\n<h2 id=\"display-information\">Display information</h2>\r\n\r\n<h3 id=\"physical-volumes\">Physical volumes</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo pvdisplay\r\n</pre>\r\n\r\n<p>Wich results in this (quite queasy) output:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">  --- Physical volume ---\r\nPV Name               /dev/sda1\r\nVG Name               sys\r\nPV Size               111.79 GiB / not usable 4.00 MiB\r\nAllocatable           yes\r\nPE Size              4.00 MiB\r\nTotal PE              28617\r\nFree PE               5944\r\nAllocated PE          22673\r\nPV UUID               c3cUMj-Snck-qebQ-yg0d-GgxE-Poje-cMdN6H\r\n\r\n--- Physical volume ---\r\nPV Name               /dev/md0\r\nVG Name               raid\r\nPV Size               8.19 TiB / not usable 5.00 MiB\r\nAllocatable           yes\r\nPE Size               4.00 MiB\r\nTotal PE              2146093\r\nFree PE               954000\r\nAllocated PE          1192093\r\nPV UUID               1Y57gl-zeNd-xVzV-7y6N-Qk4n-d77Q-AI5F0p\r\n</pre>\r\n\r\n<p>To have a more useful info, like the space available on each PV, use <code>pvs</code>:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo pvs\r\nsudo pvs --segments\r\nsudo pvs /dev/sda1\r\n</pre>\r\n\r\n<p>Example of output:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">[~] sudo pvs\r\nPV         VG   Fmt  Attr PSize   PFree\r\n/dev/md0   raid lvm2 a--    8.19t  3.64t\r\n/dev/sda1  sys  lvm2 a--  111.79g 23.22g\r\n</pre>\r\n\r\n<h3 id=\"logical-volumes\">Logical volumes</h3>\r\n\r\n<p>Simply replace the “p” with “l” on the commands above, for example:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvdisplay\r\nsudo lvs\r\n</pre>\r\n\r\n<hr>\r\n\r\n<h2 id=\"snapshots\">Snapshots</h2>\r\n\r\n<p>Snapshots are probably the most useful feature of lvm.</p>\r\n\r\n<p>When creating a snapshot, you need to set the maximum space the latter can use. Note that it is just an upper limit (which can be modified latter if needed) and most of the time it won’t be reached since snapshots are <em>incremental</em>: a new snapshot takes 0b in space. After that, each modification of the lv will trigger a copy into the snapshot.</p>\r\n\r\n<p><em>* A snapshot volume can be as large or a small as you like but it must be large enough to hold all the changes that are likely to happen to the original volume during the lifetime of the snapshot.*</em></p>\r\n\r\n<p>So, to create a snapshot named snap of the lv sys/root taking at most 10GB, use:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvcreate -s -n snap -L 10g sys/lroot\r\n</pre>\r\n\r\n<p>To later get back to the saved state, use:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvconvert --merge sys/snap\r\n</pre>\r\n\r\n<p><strong><em>_Note_</em></strong>: If the origin volume of sys/snap is in use, it will inform you that the merge will take place the next time the volumes are activated. <br>\r\nIf this is the root volume, then at the next boot, the volume will be activated and the merge will begin in the background.</p>\r\n\r\n<hr>\r\n\r\n<h2 id=\"resize-logical-volumes\">Resize logical volumes</h2>\r\n\r\n<p>Say that we have a lv named <code>raid/ldata</code> (raid is the volume group name) with an ext4 filesystem mounted on <code>/ldata</code> and mapped to <code>/dev/mapper/raid-ldata</code>.  <br>\r\nIt’s size is currently 1.8 TB and we want to shrink it to 800 GB.</p>\r\n\r\n<pre class=\"prettyprint lang-text\"> > sudo lvs\r\n  LV       VG   Attr      LSize  Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-ao---  1.82t  \r\n</pre>\r\n\r\n<h3 id=\"1-check-and-unmount-the-volume\">1. check and unmount the volume</h3>\r\n\r\n<p>All the operation should be done on an unmounted volume.  If you want to resize the root partition, use a live CD.</p>\r\n\r\n<p>It is important to check that the filesystem is not corrupt before proceeding. resizing a file system in an inconsistent state could have disastrous consequences! For extX fs, use:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo e2fsck -f /dev/mapper/raid-ldata\r\n</pre>\r\n\r\n<h3 id=\"2-resize-the-filesystem\">2. resize the filesystem</h3>\r\n\r\n<p>Shrink the fs to a size at most 90% of the new size you want. In our case, it will be ~700 GB:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata 700G\r\n</pre>\r\n\r\n<blockquote>\r\n  <p>From the man page:  <br>\r\n  The <strong>resize2fs</strong> program will resize ext2, ext3, or ext4 file systems. It can be used to enlarge or shrink an unmounted file system located on device. If the filesystem is mounted, it can be used to expand the size of the mounted filesystem, assuming the kernel supports on-line resizing.  </p>\r\n</blockquote>\r\n\r\n<h3 id=\"3-reduce-the-size-of-the-logical-volume\">3. reduce the size of the logical volume</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvreduce -L 800G /dev/mapper/raid-ldata\r\n</pre>\r\n\r\n<p>result of the command:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">WARNING: Reducing active logical volume to 800.00 GiB\r\n  THIS MAY DESTROY YOUR DATA (filesystem etc.)\r\nDo you really want to reduce ldata? [y/n]: y\r\n  Reducing logical volume ldata to 800.00 GiB\r\n  Logical volume ldata successfully resized\r\n</pre>\r\n\r\n<h3 id=\"4-expand-the-fs-to-fit-the-whole-partition\">4. expand the fs to fit the whole partition</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata \r\n</pre>\r\n\r\n<p>Done!</p>\r\n\r\n<p>result:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">> sudo lvs\r\n  LV       VG   Attr      LSize   Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-a---- 800.00g    \r\n</pre>','','','inherit','closed','open','','551-revision-v1','','','2014-08-10 08:24:38','2014-08-10 08:24:38','',551,'http://localhost/html/?p=554',0,'revision','',0),(555,3,'2014-08-10 08:25:49','2014-08-10 08:25:49','<h2 id=\"display-information\">Display information</h2>\r\n\r\n<h3 id=\"physical-volumes\">Physical volumes</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo pvdisplay\r\n</pre>\r\n\r\n<p>Wich results in this (quite queasy) output:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">  --- Physical volume ---\r\nPV Name               /dev/sda1\r\nVG Name               sys\r\nPV Size               111.79 GiB / not usable 4.00 MiB\r\nAllocatable           yes\r\nPE Size              4.00 MiB\r\nTotal PE              28617\r\nFree PE               5944\r\nAllocated PE          22673\r\nPV UUID               c3cUMj-Snck-qebQ-yg0d-GgxE-Poje-cMdN6H\r\n\r\n--- Physical volume ---\r\nPV Name               /dev/md0\r\nVG Name               raid\r\nPV Size               8.19 TiB / not usable 5.00 MiB\r\nAllocatable           yes\r\nPE Size               4.00 MiB\r\nTotal PE              2146093\r\nFree PE               954000\r\nAllocated PE          1192093\r\nPV UUID               1Y57gl-zeNd-xVzV-7y6N-Qk4n-d77Q-AI5F0p\r\n</pre>\r\n\r\n<p>To have a more useful info, like the space available on each PV, use <code>pvs</code>:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo pvs\r\nsudo pvs --segments\r\nsudo pvs /dev/sda1\r\n</pre>\r\n\r\n<p>Example of output:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">[~] sudo pvs\r\nPV         VG   Fmt  Attr PSize   PFree\r\n/dev/md0   raid lvm2 a--    8.19t  3.64t\r\n/dev/sda1  sys  lvm2 a--  111.79g 23.22g\r\n</pre>\r\n\r\n<h3 id=\"logical-volumes\">Logical volumes</h3>\r\n\r\n<p>Simply replace the “p” with “l” on the commands above, for example:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvdisplay\r\nsudo lvs\r\n</pre>\r\n\r\n<hr>\r\n\r\n<h2 id=\"snapshots\">Snapshots</h2>\r\n\r\n<p>Snapshots are probably the most useful feature of lvm.</p>\r\n\r\n<p>When creating a snapshot, you need to set the maximum space the latter can use. Note that it is just an upper limit (which can be modified latter if needed) and most of the time it won’t be reached since snapshots are <em>incremental</em>: a new snapshot takes 0b in space. After that, each modification of the lv will trigger a copy into the snapshot.</p>\r\n\r\n<p><em>* A snapshot volume can be as large or a small as you like but it must be large enough to hold all the changes that are likely to happen to the original volume during the lifetime of the snapshot.*</em></p>\r\n\r\n<p>So, to create a snapshot named snap of the lv sys/root taking at most 10GB, use:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvcreate -s -n snap -L 10g sys/lroot\r\n</pre>\r\n\r\n<p>To later get back to the saved state, use:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvconvert --merge sys/snap\r\n</pre>\r\n\r\n<p><strong><em>_Note_</em></strong>: If the origin volume of sys/snap is in use, it will inform you that the merge will take place the next time the volumes are activated. <br>\r\nIf this is the root volume, then at the next boot, the volume will be activated and the merge will begin in the background.</p>\r\n\r\n<hr>\r\n\r\n<h2 id=\"resize-logical-volumes\">Resize logical volumes</h2>\r\n\r\n<p>Say that we have a lv named <code>raid/ldata</code> (raid is the volume group name) with an ext4 filesystem mounted on <code>/ldata</code> and mapped to <code>/dev/mapper/raid-ldata</code>.  <br>\r\nIt’s size is currently 1.8 TB and we want to shrink it to 800 GB.</p>\r\n\r\n<pre class=\"prettyprint lang-text\"> > sudo lvs\r\n  LV       VG   Attr      LSize  Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-ao---  1.82t  \r\n</pre>\r\n\r\n<h3 id=\"1-check-and-unmount-the-volume\">1. check and unmount the volume</h3>\r\n\r\n<p>All the operation should be done on an unmounted volume.  If you want to resize the root partition, use a live CD.</p>\r\n\r\n<p>It is important to check that the filesystem is not corrupt before proceeding. resizing a file system in an inconsistent state could have disastrous consequences! For extX fs, use:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo e2fsck -f /dev/mapper/raid-ldata\r\n</pre>\r\n\r\n<h3 id=\"2-resize-the-filesystem\">2. resize the filesystem</h3>\r\n\r\n<p>Shrink the fs to a size at most 90% of the new size you want. In our case, it will be ~700 GB:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata 700G\r\n</pre>\r\n\r\n<blockquote>\r\n  <p>From the man page:  <br>\r\n  The <strong>resize2fs</strong> program will resize ext2, ext3, or ext4 file systems. It can be used to enlarge or shrink an unmounted file system located on device. If the filesystem is mounted, it can be used to expand the size of the mounted filesystem, assuming the kernel supports on-line resizing.  </p>\r\n</blockquote>\r\n\r\n<h3 id=\"3-reduce-the-size-of-the-logical-volume\">3. reduce the size of the logical volume</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvreduce -L 800G /dev/mapper/raid-ldata\r\n</pre>\r\n\r\n<p>result of the command:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">WARNING: Reducing active logical volume to 800.00 GiB\r\n  THIS MAY DESTROY YOUR DATA (filesystem etc.)\r\nDo you really want to reduce ldata? [y/n]: y\r\n  Reducing logical volume ldata to 800.00 GiB\r\n  Logical volume ldata successfully resized\r\n</pre>\r\n\r\n<h3 id=\"4-expand-the-fs-to-fit-the-whole-partition\">4. expand the fs to fit the whole partition</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata \r\n</pre>\r\n\r\n<p>Done!</p>\r\n\r\n<p>result:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">> sudo lvs\r\n  LV       VG   Attr      LSize   Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-a---- 800.00g    \r\n</pre>','Using LVM','','inherit','closed','open','','551-revision-v1','','','2014-08-10 08:25:49','2014-08-10 08:25:49','',551,'http://localhost/html/?p=555',0,'revision','',0),(557,3,'2014-08-10 18:59:39','2014-08-10 18:59:39','<h2 id=\"download-and-install\">Download and install</h2>\r\n<ol>\r\n	<li>Add the repo:\r\n<pre class=\"prettyprint lang-text\">cd /tmp\r\nwget http://download.opensuse.org/repositories/isv:ownCloud:community/xUbuntu_14.04/Release.key\r\nsudo apt-key add - < Release.key sudo sh -c \"echo \'deb http://download.opensuse.org/repositories/isv:/ownCloud:/community/xUbuntu_14.04/ /\' >> /etc/apt/sources.list.d/owncloud.list\"</pre>\r\n</li>\r\n	<li>Update and install OwnCloud:\r\n<pre class=\"prettyprint lang-text\">sudo apt-get update\r\nsudo apt-get install owncloud</pre>\r\n</li>\r\n	<li>Install <code>maria-db</code> (MySQL fork) and use it instead of the regular <code>mysql</code>:\r\n<pre class=\"prettyprint lang-text\">sudo apt-get install mariadb-server</pre>\r\n</li>\r\n	<li>Create the database for OwnCloud:\r\n<pre class=\"prettyprint lang-text\">sudo mysql -u root -p\r\nCREATE DATABASE owncloud;\r\nGRANT ALL ON owncloud.* to \'owncloud\'@\'localhost\' IDENTIFIED BY \'database_password\';\r\nexit</pre>\r\n</li>\r\n	<li>Connect and setup</li>\r\n</ol>\r\nConnect to localhost/owncloud (ensure that apache2 is actually running), you should get a page with a login prompt.\r\n\r\nClick on <em>Storage and database</em>, select MariaDB and fill the form with what you did on the previous step (db name and so forth). Then, click <em>Finish setup</em>.\r\n\r\nEverything should work out of the box !\r\n<h2 id=\"secure-owncloud\">Secure OwnCloud</h2>\r\n<h3 id=\"automatically-install-security-updates-on-ubuntu\">Automatically install security updates on Ubuntu</h3>\r\nType the following in a terminal:\r\n<pre class=\"prettyprint lang-text\">sudo dpkg-reconfigure -plow unattended-upgrades</pre>\r\nSee <a href=\"http://www.rojtberg.net/711/secure-owncloud-server/\">this link</a> for more information.\r\n<h3 id=\"secure-apache-error-pages\">Secure Apache - error pages</h3>\r\n<h3 id=\"setup-ssl-https-for-owncloud\">Setup ssl (https) for OwnCloud</h3>\r\nFirst, create a self-signed certificate:\r\n<pre class=\"prettyprint lang-text\">openssl req -new -sha256 -x509 -nodes -days 365 -out your.website.net.pem -keyout your.website.net.key</pre>\r\n(I put mine in <code>/etc/apache2/self-certs</code>, with an ownership of <code>root:www-data</code>).\r\n\r\nThen, reference the two files in the apache config by editing <code>/etc/apache2/sites-available/default-ssl.conf</code>:\r\n<pre class=\"prettyprint lang-text\">SSLCertificateFile    /path/to/your.website.net.pem\r\nSSLCertificateKeyFile /path/to/your.website.net.key</pre>\r\nYou can also add the following lines to strengthen the security of SSL:\r\n<pre class=\"prettyprint lang-text\">SSLProtocol all -SSLv2 -SSLv3\r\nSSLCompression off\r\nSSLHonorCipherOrder On\r\nSSLCipherSuite EECDH+AESGCM:EECDH+AES:EDH+AES</pre>\r\n<blockquote>The rationale behind this suggestion is\r\n<ul>\r\n	<li>Allow TLS 1.0 for compability with mobile apps</li>\r\n	<li>Disable SSL compression to mitigate the CRIME attack</li>\r\n	<li>always use Diffie Hellman(DH) key exchange(Kx) for forward secrecy</li>\r\n	<li>prefer Elliptic Curve Diffie Hellman (ECDH) for performance</li>\r\n	<li>always use AES for symmetric encryption</li>\r\n	<li>prefer AES GCM mode for security and performance</li>\r\n</ul>\r\n<a href=\"http://www.rojtberg.net/687/secure-owncloud-setup/\">Source</a>.</blockquote>\r\nEnable the ssl module of Apache:\r\n<pre class=\"prettyprint lang-text\">sudo a2enmod ssl\r\nsudo a2ensite default-ssl\r\nsudo service apache2 reload</pre>\r\n<a href=\"http://doc.owncloud.org/server/6.0/admin_manual/installation/installation_source.html\">Source</a>\r\n<h3 id=\"force-apache-to-use-https\">Force Apache to use HTTPS</h3>\r\nEdit <code>/etc/apache2/sites-available/00-default.conf</code> and change the virtualhost:*80. It should look like this:\r\n<pre class=\"prettyprint lang-text\">    ServerAdmin webmaster@localhost\r\n    DocumentRoot /var/www/owncloud # default page\r\n    RewriteEngine on\r\n    ReWriteCond %{SERVER_PORT} !^443$\r\n        RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [NC,R,L]\r\n\r\n    ErrorLog ${APACHE_LOG_DIR}/error.log\r\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\r\n\r\n    #Include conf-available/serve-cgi-bin.conf</pre>\r\nDon’t forget to restart the server with <code>sudo service apache2 restart</code>.\r\n\r\nIf you use <strong>port forwarding</strong>, don\'t forget to set the redirected port to 443 instead of 80.','Install and configure OwnCloud 7 (Ubuntu 14.04)','','publish','closed','open','','install-and-configure-owncloud-7-ubuntu-14-04','','','2014-09-14 09:03:33','2014-09-14 09:03:33','',0,'http://localhost/html/?p=557',0,'post','',0),(558,3,'2014-08-10 18:59:10','2014-08-10 18:59:10','<h2 id=\"download-and-install\">Download and install</h2>\r\n\r\n<ol>\r\n<li><p>Add the repo:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">cd /tmp\r\nwget http://download.opensuse.org/repositories/isv:ownCloud:community/xUbuntu_14.04/Release.key\r\nsudo apt-key add - < Release.key\r\n\r\nsudo sh -c \"echo \'deb http://download.opensuse.org/repositories/isv:/ownCloud:/community/xUbuntu_14.04/ /\' >> /etc/apt/sources.list.d/owncloud.list\"\r\n</pre></li>\r\n<li><p>Update and install OwnCloud:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo apt-get update\r\nsudo apt-get install owncloud\r\n</pre></li>\r\n<li><p>Install <code>maria-db</code> (MySQL fork) and use it instead of the regular <code>mysql</code>:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo apt-get install mariadb-server\r\n</pre></li>\r\n<li><p>Create the database for OwnCloud:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo mysql -u root -p\r\nCREATE DATABASE owncloud;\r\nGRANT ALL ON owncloud.* to \'owncloud\'@\'localhost\' IDENTIFIED BY \'database_password\';\r\nexit\r\n</pre></li>\r\n<li><p>Connect and setup</p></li>\r\n</ol>\r\n\r\n<p>Connect to localhost/owncloud (ensure that apache2 is actually running), you should get a page with a login prompt.</p>\r\n\r\n<p>Click on <em>Storage and database</em>, select MariaDB and fill the form with what you did on the previous step (db name and so forth). Then, click <em>Finish setup</em>. </p>\r\n\r\n<p>Everything should work out of the box !</p>\r\n\r\n<h2 id=\"secure-owncloud\">Secure OwnCloud</h2>\r\n\r\n<h3 id=\"automatically-install-security-updates-on-ubuntu\">Automatically install security updates on Ubuntu</h3>\r\n\r\n<p>Type the following in a terminal: </p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo dpkg-reconfigure -plow unattended-upgrades\r\n</pre>\r\n\r\n<p>See <a href=\"http://www.rojtberg.net/711/secure-owncloud-server/\">this link</a> for more information.</p>\r\n\r\n<h3 id=\"secure-apache-error-pages\">Secure Apache - error pages</h3>\r\n\r\n<h3 id=\"setup-ssl-https-for-owncloud\">Setup ssl (https) for OwnCloud</h3>\r\n\r\n<p>First, create a self-signed certificate:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">openssl req -new -sha256 -x509 -nodes -days 365 -out your.website.net.pem -keyout your.website.net.key\r\n</pre>\r\n\r\n<p>(I put mine in <code>/etc/apache2/self-certs</code>, with an ownership of <code>root:www-data</code>).</p>\r\n\r\n<p>Then, reference the two files in the apache config by editing <code>/etc/apache2/sites-available/default-ssl.conf</code>:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">SSLCertificateFile    /path/to/your.website.net.pem\r\nSSLCertificateKeyFile /path/to/your.website.net.key\r\n</pre>\r\n\r\n<p>You can also add the following lines to strengthen the security of SSL:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">SSLProtocol all -SSLv2 -SSLv3\r\nSSLCompression off\r\nSSLHonorCipherOrder On\r\nSSLCipherSuite EECDH+AESGCM:EECDH+AES:EDH+AES\r\n</pre>\r\n\r\n<blockquote>\r\n  <p>The rationale behind this suggestion is</p>\r\n  \r\n  <ul>\r\n  <li>Allow TLS 1.0 for compability with mobile apps</li>\r\n  <li>Disable SSL compression to mitigate the CRIME attack</li>\r\n  <li>always use Diffie Hellman(DH) key exchange(Kx) for forward secrecy</li>\r\n  <li>prefer Elliptic Curve Diffie Hellman (ECDH) for performance</li>\r\n  <li>always use AES for symmetric encryption</li>\r\n  <li>prefer AES GCM mode for security and performance</li>\r\n  </ul>\r\n  \r\n  <p><a href=\"http://www.rojtberg.net/687/secure-owncloud-setup/\">Source</a>.</p>\r\n</blockquote>\r\n\r\n<p>Enable the ssl module of Apache:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo a2enmod ssl\r\nsudo a2ensite default-ssl\r\nsudo service apache2 reload\r\n</pre>\r\n\r\n<p><a href=\"http://doc.owncloud.org/server/6.0/admin_manual/installation/installation_source.html\">Source</a></p>\r\n\r\n<h3 id=\"force-apache-to-use-https\">Force Apache to use HTTPS</h3>\r\n\r\n<p>Edit <code>/etc/apache2/sites-available/00-default.conf</code> and change the virtualhost:*80. It should look like this:</p>\r\n\r\n<pre class=\"prettyprint lang-text\"><VirtualHost *:80>\r\n    ServerAdmin webmaster@localhost\r\n    DocumentRoot /var/www/owncloud # default page\r\n    RewriteEngine on\r\n    ReWriteCond %{SERVER_PORT} !^443$\r\n        RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [NC,R,L]\r\n\r\n    ErrorLog ${APACHE_LOG_DIR}/error.log\r\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\r\n\r\n    #Include conf-available/serve-cgi-bin.conf\r\n</VirtualHost>\r\n</pre>\r\n\r\n<p>Don’t forget to restart the server with <code>sudo service apache2 restart</code>.</p>','Install and configure OwnCloud 7 (Ubuntu 14.04)','','inherit','closed','open','','557-revision-v1','','','2014-08-10 18:59:10','2014-08-10 18:59:10','',557,'http://localhost/html/?p=558',0,'revision','',0),(559,3,'2014-08-10 19:09:20','2014-08-10 19:09:20','<h2 id=\"download-and-install\">Download and install</h2>\r\n<ol>\r\n	<li>Add the repo:\r\n<pre class=\"prettyprint lang-text\">cd /tmp\r\nwget http://download.opensuse.org/repositories/isv:ownCloud:community/xUbuntu_14.04/Release.key\r\nsudo apt-key add - &lt; Release.key sudo sh -c \"echo \'deb http://download.opensuse.org/repositories/isv:/ownCloud:/community/xUbuntu_14.04/ /\' &gt;&gt; /etc/apt/sources.list.d/owncloud.list\"</pre>\r\n</li>\r\n	<li>Update and install OwnCloud:\r\n<pre class=\"prettyprint lang-text\">sudo apt-get update\r\nsudo apt-get install owncloud</pre>\r\n</li>\r\n	<li>Install <code>maria-db</code> (MySQL fork) and use it instead of the regular <code>mysql</code>:\r\n<pre class=\"prettyprint lang-text\">sudo apt-get install mariadb-server</pre>\r\n</li>\r\n	<li>Create the database for OwnCloud:\r\n<pre class=\"prettyprint lang-text\">sudo mysql -u root -p\r\nCREATE DATABASE owncloud;\r\nGRANT ALL ON owncloud.* to \'owncloud\'@\'localhost\' IDENTIFIED BY \'database_password\';\r\nexit</pre>\r\n</li>\r\n	<li>Connect and setup</li>\r\n</ol>\r\nConnect to localhost/owncloud (ensure that apache2 is actually running), you should get a page with a login prompt.\r\n\r\nClick on <em>Storage and database</em>, select MariaDB and fill the form with what you did on the previous step (db name and so forth). Then, click <em>Finish setup</em>.\r\n\r\nEverything should work out of the box !\r\n<h2 id=\"secure-owncloud\">Secure OwnCloud</h2>\r\n<h3 id=\"automatically-install-security-updates-on-ubuntu\">Automatically install security updates on Ubuntu</h3>\r\nType the following in a terminal:\r\n<pre class=\"prettyprint lang-text\">sudo dpkg-reconfigure -plow unattended-upgrades</pre>\r\nSee <a href=\"http://www.rojtberg.net/711/secure-owncloud-server/\">this link</a> for more information.\r\n<h3 id=\"secure-apache-error-pages\">Secure Apache - error pages</h3>\r\n<h3 id=\"setup-ssl-https-for-owncloud\">Setup ssl (https) for OwnCloud</h3>\r\nFirst, create a self-signed certificate:\r\n<pre class=\"prettyprint lang-text\">openssl req -new -sha256 -x509 -nodes -days 365 -out your.website.net.pem -keyout your.website.net.key</pre>\r\n(I put mine in <code>/etc/apache2/self-certs</code>, with an ownership of <code>root:www-data</code>).\r\n\r\nThen, reference the two files in the apache config by editing <code>/etc/apache2/sites-available/default-ssl.conf</code>:\r\n<pre class=\"prettyprint lang-text\">SSLCertificateFile    /path/to/your.website.net.pem\r\nSSLCertificateKeyFile /path/to/your.website.net.key</pre>\r\nYou can also add the following lines to strengthen the security of SSL:\r\n<pre class=\"prettyprint lang-text\">SSLProtocol all -SSLv2 -SSLv3\r\nSSLCompression off\r\nSSLHonorCipherOrder On\r\nSSLCipherSuite EECDH+AESGCM:EECDH+AES:EDH+AES</pre>\r\n<blockquote>The rationale behind this suggestion is\r\n<ul>\r\n	<li>Allow TLS 1.0 for compability with mobile apps</li>\r\n	<li>Disable SSL compression to mitigate the CRIME attack</li>\r\n	<li>always use Diffie Hellman(DH) key exchange(Kx) for forward secrecy</li>\r\n	<li>prefer Elliptic Curve Diffie Hellman (ECDH) for performance</li>\r\n	<li>always use AES for symmetric encryption</li>\r\n	<li>prefer AES GCM mode for security and performance</li>\r\n</ul>\r\n<a href=\"http://www.rojtberg.net/687/secure-owncloud-setup/\">Source</a>.</blockquote>\r\nEnable the ssl module of Apache:\r\n<pre class=\"prettyprint lang-text\">sudo a2enmod ssl\r\nsudo a2ensite default-ssl\r\nsudo service apache2 reload</pre>\r\n<a href=\"http://doc.owncloud.org/server/6.0/admin_manual/installation/installation_source.html\">Source</a>\r\n<h3 id=\"force-apache-to-use-https\">Force Apache to use HTTPS</h3>\r\nEdit <code>/etc/apache2/sites-available/00-default.conf</code> and change the virtualhost:*80. It should look like this:\r\n<pre class=\"prettyprint lang-text\">    ServerAdmin webmaster@localhost\r\n    DocumentRoot /var/www/owncloud # default page\r\n    RewriteEngine on\r\n    ReWriteCond %{SERVER_PORT} !^443$\r\n        RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [NC,R,L]\r\n\r\n    ErrorLog ${APACHE_LOG_DIR}/error.log\r\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\r\n\r\n    #Include conf-available/serve-cgi-bin.conf</pre>\r\nDon’t forget to restart the server with <code>sudo service apache2 restart</code>.\r\n\r\nIf you use <strong>port forwarding</strong>, don\'t forget to set the redirected port to 443 instead of 80.','Install and configure OwnCloud 7 (Ubuntu 14.04)','','inherit','closed','open','','557-autosave-v1','','','2014-08-10 19:09:20','2014-08-10 19:09:20','',557,'http://localhost/html/?p=559',0,'revision','',0),(560,3,'2014-08-10 19:09:48','2014-08-10 19:09:48','<h2 id=\"download-and-install\">Download and install</h2>\r\n<ol>\r\n	<li>Add the repo:\r\n<pre class=\"prettyprint lang-text\">cd /tmp\r\nwget http://download.opensuse.org/repositories/isv:ownCloud:community/xUbuntu_14.04/Release.key\r\nsudo apt-key add - &lt; Release.key sudo sh -c \"echo \'deb http://download.opensuse.org/repositories/isv:/ownCloud:/community/xUbuntu_14.04/ /\' &gt;&gt; /etc/apt/sources.list.d/owncloud.list\"</pre>\r\n</li>\r\n	<li>Update and install OwnCloud:\r\n<pre class=\"prettyprint lang-text\">sudo apt-get update\r\nsudo apt-get install owncloud</pre>\r\n</li>\r\n	<li>Install <code>maria-db</code> (MySQL fork) and use it instead of the regular <code>mysql</code>:\r\n<pre class=\"prettyprint lang-text\">sudo apt-get install mariadb-server</pre>\r\n</li>\r\n	<li>Create the database for OwnCloud:\r\n<pre class=\"prettyprint lang-text\">sudo mysql -u root -p\r\nCREATE DATABASE owncloud;\r\nGRANT ALL ON owncloud.* to \'owncloud\'@\'localhost\' IDENTIFIED BY \'database_password\';\r\nexit</pre>\r\n</li>\r\n	<li>Connect and setup</li>\r\n</ol>\r\nConnect to localhost/owncloud (ensure that apache2 is actually running), you should get a page with a login prompt.\r\n\r\nClick on <em>Storage and database</em>, select MariaDB and fill the form with what you did on the previous step (db name and so forth). Then, click <em>Finish setup</em>.\r\n\r\nEverything should work out of the box !\r\n<h2 id=\"secure-owncloud\">Secure OwnCloud</h2>\r\n<h3 id=\"automatically-install-security-updates-on-ubuntu\">Automatically install security updates on Ubuntu</h3>\r\nType the following in a terminal:\r\n<pre class=\"prettyprint lang-text\">sudo dpkg-reconfigure -plow unattended-upgrades</pre>\r\nSee <a href=\"http://www.rojtberg.net/711/secure-owncloud-server/\">this link</a> for more information.\r\n<h3 id=\"secure-apache-error-pages\">Secure Apache - error pages</h3>\r\n<h3 id=\"setup-ssl-https-for-owncloud\">Setup ssl (https) for OwnCloud</h3>\r\nFirst, create a self-signed certificate:\r\n<pre class=\"prettyprint lang-text\">openssl req -new -sha256 -x509 -nodes -days 365 -out your.website.net.pem -keyout your.website.net.key</pre>\r\n(I put mine in <code>/etc/apache2/self-certs</code>, with an ownership of <code>root:www-data</code>).\r\n\r\nThen, reference the two files in the apache config by editing <code>/etc/apache2/sites-available/default-ssl.conf</code>:\r\n<pre class=\"prettyprint lang-text\">SSLCertificateFile    /path/to/your.website.net.pem\r\nSSLCertificateKeyFile /path/to/your.website.net.key</pre>\r\nYou can also add the following lines to strengthen the security of SSL:\r\n<pre class=\"prettyprint lang-text\">SSLProtocol all -SSLv2 -SSLv3\r\nSSLCompression off\r\nSSLHonorCipherOrder On\r\nSSLCipherSuite EECDH+AESGCM:EECDH+AES:EDH+AES</pre>\r\n<blockquote>The rationale behind this suggestion is\r\n<ul>\r\n	<li>Allow TLS 1.0 for compability with mobile apps</li>\r\n	<li>Disable SSL compression to mitigate the CRIME attack</li>\r\n	<li>always use Diffie Hellman(DH) key exchange(Kx) for forward secrecy</li>\r\n	<li>prefer Elliptic Curve Diffie Hellman (ECDH) for performance</li>\r\n	<li>always use AES for symmetric encryption</li>\r\n	<li>prefer AES GCM mode for security and performance</li>\r\n</ul>\r\n<a href=\"http://www.rojtberg.net/687/secure-owncloud-setup/\">Source</a>.</blockquote>\r\nEnable the ssl module of Apache:\r\n<pre class=\"prettyprint lang-text\">sudo a2enmod ssl\r\nsudo a2ensite default-ssl\r\nsudo service apache2 reload</pre>\r\n<a href=\"http://doc.owncloud.org/server/6.0/admin_manual/installation/installation_source.html\">Source</a>\r\n<h3 id=\"force-apache-to-use-https\">Force Apache to use HTTPS</h3>\r\nEdit <code>/etc/apache2/sites-available/00-default.conf</code> and change the virtualhost:*80. It should look like this:\r\n<pre class=\"prettyprint lang-text\">    ServerAdmin webmaster@localhost\r\n    DocumentRoot /var/www/owncloud # default page\r\n    RewriteEngine on\r\n    ReWriteCond %{SERVER_PORT} !^443$\r\n        RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [NC,R,L]\r\n\r\n    ErrorLog ${APACHE_LOG_DIR}/error.log\r\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\r\n\r\n    #Include conf-available/serve-cgi-bin.conf</pre>\r\nDon’t forget to restart the server with <code>sudo service apache2 restart</code>.\r\n\r\nIf you use <strong>port forwarding</strong>, don\'t forget to set the redirected port to 443 instead of 80.','Install and configure OwnCloud 7 (Ubuntu 14.04)','','inherit','closed','open','','557-revision-v1','','','2014-08-10 19:09:48','2014-08-10 19:09:48','',557,'http://localhost/html/?p=560',0,'revision','',0),(561,3,'2014-08-12 14:52:14','2014-08-12 14:52:14','<h2>backup your samsung from terminal</h2>\r\nOpen a terminal and type the following command:\r\n<pre class=\"prettyprint lang-text\">adb devices # be sure your device is detected\r\nadb backup -f my_backup.ab -apk -shared -all</pre>','adb','','publish','closed','open','','adb','','','2014-08-12 14:52:14','2014-08-12 14:52:14','',0,'http://localhost/html/?p=561',0,'post','',0),(562,3,'2014-08-12 14:51:47','2014-08-12 14:51:47','<h2>backup your samsung from terminal</h2>\r\nUse the following command:','adb','','inherit','closed','open','','561-revision-v1','','','2014-08-12 14:51:47','2014-08-12 14:51:47','',561,'http://localhost/html/?p=562',0,'revision','',0),(563,3,'2014-08-12 14:51:56','2014-08-12 14:51:56','<h2>backup your samsung from terminal</h2>\r\nUse the following command:\r\n<pre class=\"prettyprint lang-text\">adb devices # be sure your device is detected\r\nadb backup -f my_backup.ab -apk -shared -all</pre>','adb','','inherit','closed','open','','561-revision-v1','','','2014-08-12 14:51:56','2014-08-12 14:51:56','',561,'http://localhost/html/?p=563',0,'revision','',0),(564,3,'2014-08-12 14:52:14','2014-08-12 14:52:14','<h2>backup your samsung from terminal</h2>\r\nOpen a terminal and type the following command:\r\n<pre class=\"prettyprint lang-text\">adb devices # be sure your device is detected\r\nadb backup -f my_backup.ab -apk -shared -all</pre>','adb','','inherit','closed','open','','561-revision-v1','','','2014-08-12 14:52:14','2014-08-12 14:52:14','',561,'http://localhost/html/?p=564',0,'revision','',0),(565,3,'2014-08-12 19:47:32','2014-08-12 19:47:32','A makefile is not always useful, but anyway, it is always easier to type <code>make</code> than <code>pdflatex ... truc.tex</code>.\r\n\r\nAnother thing is when you want to use custom templates and do not remember the exact options (and path) to pass to the pdflatex command.\r\n\r\nSo, here is a simple makefile that works pretty well:\r\n<pre class=\"prettyprint lang-text\">TEX=pdflatex\r\nSRC=$(wildcard *.tex) # change it if you have more than one \r\n                      # .tex file in the current directory\r\nOUT=$(SRC:.tex=.pdf)\r\n\r\nOUT_DIR=./out  # if you do not want it, remove ARGS and compile deps\r\nARGS=-output-directory=$(OUT_DIR) -aux-directory=$(OUT_DIR)\r\n\r\n# if your templates are not in your path (like in ~/texmf folder), \r\n# set the TEXINPUTS path like this:\r\nexport TEXINPUTS=../TEMPLATES:\r\n\r\n# =========================\r\n\r\ncompile: $(OUT_DIR)\r\n	$(TEX) $(ARGS) $(SRC) &amp;&amp; mv out/$(OUT) .\r\n\r\nall: compile clean show\r\n\r\nshow: \r\n	if [ ! -e $(OUT) ]; then make compile; fi\r\n	xdg-open $(OUT)\r\n\r\n# ------------------------\r\n\r\n$(OUT_DIR):\r\n	mkdir $(OUT_DIR)\r\n\r\n# ------------------------\r\n\r\nclean_all: clean\r\n	rm -rf $(OUT)\r\n\r\nclean:\r\n	rm -f $(OUT_DIR) \r\n\r\n# ------------------------\r\n\r\n.PHONY: all clean show</pre>\r\n<a href=\"https://error418.no-ip.org:4320/mywiki/wp-content/uploads/2014/08/latex_makefile.txt\">Download the raw source file</a>.\r\n<h3>Notes:</h3>\r\n<ul>\r\n	<li>clean does delete the whole out folder, so the toc will disappear as well. This is one of the reasons I love out directories: the root folder stays clean , so we don\'t really need to run a clean so often.</li>\r\n	<li>the generated pdf is automatically moved to the root directory.</li>\r\n	<li>the toc problem is one of the reasons I don\'t specify <code>$(OUT)</code> as a compile dependency (or as the target itself): if I do that, it is not possible to compile twice without removing the pdf...</li>\r\n	<li>if all the latex templates are in the default latex path (usually <code>~/texmf/tex/latex</code>), setting the <code>TEXINPUTS</code> variable is useless. You can safely remove the line.</li>\r\n</ul>','latex Makefile','','publish','closed','open','','latex-makefile','','','2014-08-12 20:30:46','2014-08-12 20:30:46','',0,'https://error418.no-ip.org:4320/mywiki/?p=565',0,'post','',0),(566,3,'2014-08-12 19:47:32','2014-08-12 19:47:32','A makefile is not always useful, but anyway, it is always easier to type <code>make</code> than <code>pdflatex ... truc.tex</code>.\r\n\r\nAnother thing is when you want to use custom templates and do not remember the exact options (and path) to pass to the pdflatex command.\r\n\r\nSo, here is a simple makefile that works pretty well:\r\n\r\n<pre class=\"prettyprint\">\r\nTEX=pdflatex\r\nSRC=$(wildcard *.tex) # change it if you have more than one \r\n                      # .tex file in the current directory\r\nOUT=$(SRC:.tex=.pdf)\r\n\r\nOUT_DIR=./out  # if you do not want it, remove ARGS and compile deps\r\nARGS=-output-directory=$(OUT_DIR) -aux-directory=$(OUT_DIR)\r\n\r\nexport TEXINPUTS=../TEMPLATES:\r\n\r\n# =========================\r\n\r\ncompile: $(OUT_DIR)\r\n	$(TEX) $(ARGS) $(SRC) && mv out/$(OUT) .\r\n\r\nall: compile clean show\r\n\r\nshow: \r\n	if [ ! -e $(OUT) ]; then make compile; fi\r\n	xdg-open $(OUT)\r\n\r\n# ------------------------\r\n\r\n$(OUT_DIR):\r\n	mkdir $(OUT_DIR)\r\n\r\n# ------------------------\r\n\r\nclean:\r\n	rm -f out/* \r\n\r\nclean_all: clean\r\n	rm -f $(OUT)\r\n\r\n# ------------------------\r\n\r\n.PHONY: all clean show\r\n\r\n</pre>','latex Makefile','','inherit','closed','open','','565-revision-v1','','','2014-08-12 19:47:32','2014-08-12 19:47:32','',565,'https://error418.no-ip.org:4320/mywiki/565-revision-v1/',0,'revision','',0),(567,3,'2014-08-12 20:13:43','2014-08-12 20:13:43','A makefile is not always useful, but anyway, it is always easier to type <code>make</code> than <code>pdflatex ... truc.tex</code>.\n\nAnother thing is when you want to use custom templates and do not remember the exact options (and path) to pass to the pdflatex command.\n\nSo, here is a simple makefile that works pretty well:\n<pre class=\"prettyprint lang-text\">TEX=pdflatex\nSRC=$(wildcard *.tex) # change it if you have more than one \n                      # .tex file in the current directory\nOUT=$(SRC:.tex=.pdf)\n\nOUT_DIR=./out  # if you do not want it, remove ARGS and compile deps\nARGS=-output-directory=$(OUT_DIR) -aux-directory=$(OUT_DIR)\n\n# if your templates are not in your path (like in ~/texmf folder), \n# set the TEXINPUTS path like this:\nexport TEXINPUTS=../TEMPLATES:\n\n# =========================\n\ncompile: $(OUT_DIR)\n	$(TEX) $(ARGS) $(SRC) &amp;&amp; mv out/$(OUT) .\n\nall: compile clean show\n\nshow: \n	if [ ! -e $(OUT) ]; then make compile; fi\n	xdg-open $(OUT)\n\n# ------------------------\n\n$(OUT_DIR):\n	mkdir $(OUT_DIR)\n\n# ------------------------\n\nclean_all: clean\n	rm -rf $(OUT)\n\nclean:\n	rm -f $(OUT_DIR) \n\n# ------------------------\n\n.PHONY: all clean show</pre>\n<a href=\"https://error418.no-ip.org:4320/mywiki/wp-content/uploads/2014/08/latex_makefile.txt\">Download the raw source file</a>.\n<h3>Notes:</h3>\n<ul>\n	<li>clean does delete the whole out folder, so the toc will disappear as well. This is one of the reasons I love out directories: the root folder stays clean , so we don\'t really need to run a clean so often.</li>\n	<li>the generated pdf is automatically moved to the root directory.</li>\n	<li>the toc problem is one of the reasons I don\'t specify <code>$(OUT)</code> as a compile dependency (or as the target itself): if I do that, it is not possible to compile twice without removing the pdf...</li>\n	<li>if all the latex templates are in the default latex path (usually <code>~/texmf/tex/latex</code>), setting the <code>TEXINPUTS</code> variable is useless. You can safely remove the line.</li>\n</ul>','latex Makefile','','inherit','closed','open','','565-autosave-v1','','','2014-08-12 20:13:43','2014-08-12 20:13:43','',565,'https://error418.no-ip.org:4320/mywiki/565-autosave-v1/',0,'revision','',0),(568,3,'2014-08-12 20:07:01','2014-08-12 20:07:01','','latex_makefile','','inherit','closed','open','','latex_makefile','','','2014-08-12 20:07:01','2014-08-12 20:07:01','',565,'https://error418.no-ip.org:4320/mywiki/wp-content/uploads/2014/08/latex_makefile.txt',0,'attachment','text/plain',0),(569,3,'2014-08-12 20:08:18','2014-08-12 20:08:18','A makefile is not always useful, but anyway, it is always easier to type <code>make</code> than <code>pdflatex ... truc.tex</code>.\r\n\r\nAnother thing is when you want to use custom templates and do not remember the exact options (and path) to pass to the pdflatex command.\r\n\r\nSo, here is a simple makefile that works pretty well:\r\n<pre class=\"prettyprint lang-text\">TEX=pdflatex\r\nSRC=$(wildcard *.tex) # change it if you have more than one \r\n                      # .tex file in the current directory\r\nOUT=$(SRC:.tex=.pdf)\r\n\r\nOUT_DIR=./out  # if you do not want it, remove ARGS and compile deps\r\nARGS=-output-directory=$(OUT_DIR) -aux-directory=$(OUT_DIR)\r\n\r\n# if your templates are not in your path (like in ~/texmf folder), \r\n# set the TEXINPUTS path like this:\r\nexport TEXINPUTS=../TEMPLATES:\r\n\r\n# =========================\r\n\r\ncompile: $(OUT_DIR)\r\n	$(TEX) $(ARGS) $(SRC) &amp;&amp; mv out/$(OUT) .\r\n\r\nall: compile clean show\r\n\r\nshow: \r\n	if [ ! -e $(OUT) ]; then make compile; fi\r\n	xdg-open $(OUT)\r\n\r\n# ------------------------\r\n\r\n$(OUT_DIR):\r\n	mkdir $(OUT_DIR)\r\n\r\n# ------------------------\r\n\r\nclean_all: clean\r\n	rm -f $(OUT)\r\n\r\nclean:\r\n	rm -f $(OUT_DIR) \r\n\r\n# ------------------------\r\n\r\n.PHONY: all clean show</pre>\r\n<a href=\"https://error418.no-ip.org:4320/mywiki/wp-content/uploads/2014/08/latex_makefile.txt\">Download the raw source file</a>.\r\n<h3>Notes:</h3>\r\n<ul>\r\n	<li>clean does delete the whole out folder, so the toc will disappear as well. This is one of the reasons I love out directories: the root folder stays clean , so we don\'t really need to run a clean so often. Also, the pdf generated is automatically moved to the root directory, so you can avoid unecessary calls to clean (and thus keep your toc)</li>\r\n	<li>the toc problem is one of the reasons I don\'t specify <code>$(OUT)</code> as a compile dependency (or as the target itself): if I do that, it is not possible to compile twice without removing the pdf...</li>\r\n	<li>if all the latex templates are in the default latex path (usually <code>~/texmf/tex/latex</code>), setting the <code>TEXINPUTS</code> variable is useless. You can safely remove the line.</li>\r\n</ul>','latex Makefile','','inherit','closed','open','','565-revision-v1','','','2014-08-12 20:08:18','2014-08-12 20:08:18','',565,'https://error418.no-ip.org:4320/mywiki/565-revision-v1/',0,'revision','',0),(570,3,'2014-08-12 20:09:42','2014-08-12 20:09:42','A makefile is not always useful, but anyway, it is always easier to type <code>make</code> than <code>pdflatex ... truc.tex</code>.\r\n\r\nAnother thing is when you want to use custom templates and do not remember the exact options (and path) to pass to the pdflatex command.\r\n\r\nSo, here is a simple makefile that works pretty well:\r\n<pre class=\"prettyprint lang-text\">TEX=pdflatex\r\nSRC=$(wildcard *.tex) # change it if you have more than one \r\n                      # .tex file in the current directory\r\nOUT=$(SRC:.tex=.pdf)\r\n\r\nOUT_DIR=./out  # if you do not want it, remove ARGS and compile deps\r\nARGS=-output-directory=$(OUT_DIR) -aux-directory=$(OUT_DIR)\r\n\r\n# if your templates are not in your path (like in ~/texmf folder), \r\n# set the TEXINPUTS path like this:\r\nexport TEXINPUTS=../TEMPLATES:\r\n\r\n# =========================\r\n\r\ncompile: $(OUT_DIR)\r\n	$(TEX) $(ARGS) $(SRC) &amp;&amp; mv out/$(OUT) .\r\n\r\nall: compile clean show\r\n\r\nshow: \r\n	if [ ! -e $(OUT) ]; then make compile; fi\r\n	xdg-open $(OUT)\r\n\r\n# ------------------------\r\n\r\n$(OUT_DIR):\r\n	mkdir $(OUT_DIR)\r\n\r\n# ------------------------\r\n\r\nclean_all: clean\r\n	rm -f $(OUT)\r\n\r\nclean:\r\n	rm -f $(OUT_DIR) \r\n\r\n# ------------------------\r\n\r\n.PHONY: all clean show</pre>\r\n<a href=\"https://error418.no-ip.org:4320/mywiki/wp-content/uploads/2014/08/latex_makefile.txt\">Download the raw source file</a>.\r\n<h3>Notes:</h3>\r\n<ul>\r\n	<li>clean does delete the whole out folder, so the toc will disappear as well. This is one of the reasons I love out directories: the root folder stays clean , so we don\'t really need to run a clean so often.</li>\r\n	<li>the generated pdf is automatically moved to the root directory.</li>\r\n	<li>the toc problem is one of the reasons I don\'t specify <code>$(OUT)</code> as a compile dependency (or as the target itself): if I do that, it is not possible to compile twice without removing the pdf...</li>\r\n	<li>if all the latex templates are in the default latex path (usually <code>~/texmf/tex/latex</code>), setting the <code>TEXINPUTS</code> variable is useless. You can safely remove the line.</li>\r\n</ul>','latex Makefile','','inherit','closed','open','','565-revision-v1','','','2014-08-12 20:09:42','2014-08-12 20:09:42','',565,'https://error418.no-ip.org:4320/mywiki/565-revision-v1/',0,'revision','',0),(571,3,'2014-08-12 20:30:46','2014-08-12 20:30:46','A makefile is not always useful, but anyway, it is always easier to type <code>make</code> than <code>pdflatex ... truc.tex</code>.\r\n\r\nAnother thing is when you want to use custom templates and do not remember the exact options (and path) to pass to the pdflatex command.\r\n\r\nSo, here is a simple makefile that works pretty well:\r\n<pre class=\"prettyprint lang-text\">TEX=pdflatex\r\nSRC=$(wildcard *.tex) # change it if you have more than one \r\n                      # .tex file in the current directory\r\nOUT=$(SRC:.tex=.pdf)\r\n\r\nOUT_DIR=./out  # if you do not want it, remove ARGS and compile deps\r\nARGS=-output-directory=$(OUT_DIR) -aux-directory=$(OUT_DIR)\r\n\r\n# if your templates are not in your path (like in ~/texmf folder), \r\n# set the TEXINPUTS path like this:\r\nexport TEXINPUTS=../TEMPLATES:\r\n\r\n# =========================\r\n\r\ncompile: $(OUT_DIR)\r\n	$(TEX) $(ARGS) $(SRC) &amp;&amp; mv out/$(OUT) .\r\n\r\nall: compile clean show\r\n\r\nshow: \r\n	if [ ! -e $(OUT) ]; then make compile; fi\r\n	xdg-open $(OUT)\r\n\r\n# ------------------------\r\n\r\n$(OUT_DIR):\r\n	mkdir $(OUT_DIR)\r\n\r\n# ------------------------\r\n\r\nclean_all: clean\r\n	rm -rf $(OUT)\r\n\r\nclean:\r\n	rm -f $(OUT_DIR) \r\n\r\n# ------------------------\r\n\r\n.PHONY: all clean show</pre>\r\n<a href=\"https://error418.no-ip.org:4320/mywiki/wp-content/uploads/2014/08/latex_makefile.txt\">Download the raw source file</a>.\r\n<h3>Notes:</h3>\r\n<ul>\r\n	<li>clean does delete the whole out folder, so the toc will disappear as well. This is one of the reasons I love out directories: the root folder stays clean , so we don\'t really need to run a clean so often.</li>\r\n	<li>the generated pdf is automatically moved to the root directory.</li>\r\n	<li>the toc problem is one of the reasons I don\'t specify <code>$(OUT)</code> as a compile dependency (or as the target itself): if I do that, it is not possible to compile twice without removing the pdf...</li>\r\n	<li>if all the latex templates are in the default latex path (usually <code>~/texmf/tex/latex</code>), setting the <code>TEXINPUTS</code> variable is useless. You can safely remove the line.</li>\r\n</ul>','latex Makefile','','inherit','closed','open','','565-revision-v1','','','2014-08-12 20:30:46','2014-08-12 20:30:46','',565,'https://error418.no-ip.org:4320/mywiki/565-revision-v1/',0,'revision','',0),(574,3,'2014-08-25 13:28:57','2014-08-25 13:28:57','<h2 id=\"preliminary-notes\">Preliminary notes</h2>\r\nThis procedure was tested on a 500GB sdd containing one ext4 partition for the system. The /home and /opt directories are on other disks and no swap partition is used. The linux system to migrate is archlinux 3.16.1, located on <tt>/dev/sda</tt>.\r\n<h2 id=\"backing-up-the-system\">Backing up the system</h2>\r\nSince the root filesystem is only 16GB out of a 500GB partition, it is recommended to use tar.\r\n<ol>\r\n	<li>boot on a live usb</li>\r\n	<li>mount the root filesystem: <code>sudo mkdir /mnt/rootfs &amp;&amp; sudo mount -t ext4 /dev/sda /mnt/rootfs</code></li>\r\n	<li>do the backup:\r\n<pre class=\"prettyprint lang-text\">cd /mnt/rootfs\r\ntar cvzpf rootfs.tar.gz .</pre>\r\nNote the <tt>-p</tt> option: it <em>keeps the original permissions</em>, something not to forget!</li>\r\n</ol>\r\n<h2 id=\"installing-lvm-and-recreating-the-root-partition\">Installing lvm and recreating the root partition</h2>\r\n<ol>\r\n	<li>Open gparted, select /dev/sda and click on <tt>device &gt; create partition table...</tt> to create a gpt partition table. It will also <strong>format the entire disk</strong>.</li>\r\n	<li>We will use <code>gdisk</code> to create two partitions:\r\n<ul>\r\n	<li>a <em>BIOS boot partition</em>, used by GRUB to embed its core.img in the absence of post-MBR gap in GPT partitioned systems</li>\r\n	<li>the actual lvm partition</li>\r\n</ul>\r\nOpen a terminal and type:\r\n<pre class=\"prettyprint lang-text\">gdisk\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst asector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): ef02\r\nChanged type of partition to \'BIOS boot partition\'\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst sector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): 8e00\r\nChanged type of partition to \'Linux LVM\'\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n   1              36            2049   1007.0 KiB  EF02  BIOS boot partition\r\n   2            2052        15974366   7.6 GiB     8E00  Linux LVM\r\n\r\nCommand (? for help): w\r\n\r\nCommand (? for help): q</pre>\r\n</li>\r\n	<li>create the root partition on lvm\r\n<pre class=\"prettyprint lang-text\">sudo su\r\npvcreate /dev/sda2\r\nvgcreate vol-name /dev/sda2\r\nlgcreate -L 30G -n lroot vol-name \r\n\r\npvs\r\nlvs</pre>\r\n</li>\r\n	<li>format the root partition and copy back the system\r\n<pre class=\"prettyprint lang-text\">mkfs.ext4 /dev/mapper/vol-name-lroot\r\nmount /dev/mapper/vol-name-lroot /mnt\r\ncd /mnt\r\ntar xpvzf rootfs.tar .</pre>\r\n</li>\r\n</ol>\r\n<h2 id=\"repairing-the-system\">Repairing the system</h2>\r\nMount your partition (if not already done).\r\n<h3 id=\"update-fstab\">Update fstab</h3>\r\n<pre class=\"prettyprint lang-text\">sudo blkid /dev/mapper/volname-lroot\r\n/dev/sda2: LABEL=\"rootfs\" UUID=\"102adbe7-87c1-4b5a-80e2-97013851d790\" TYPE=\"ext4\" PARTUUID=\"c349be14-9052-407f-b1ce-c419bd20704f\"</pre>\r\nThen, edit <code>/mnt/etc/fstab</code> and replace the UUID of “/” by the one above.\r\n<h3 id=\"recreate-the-boot-image\">Recreate the boot image</h3>\r\nFirst, chroot into your system. With an archlinux Live USB, use <code>arch-chroot</code>.\r\n\r\n<hr />\r\n\r\n<h6 id=\"chroot-using-an-ubuntu-live-usb\">chroot using an Ubuntu Live USB</h6>\r\nBefore chroot, you need to manually mount your virtual filesystem, thing that the <code>arch-chroot</code> command does automatically for you:\r\n<pre class=\"prettyprint lang-text\"># Mount root partition:\r\nsudo mount /dev/sdXY /mnt # /dev/sdXY is your root partition, e.g. /dev/sda1\r\n\r\n# If you have a separate boot partition you\'ll need to mount it also:\r\nsudo mount /dev/sdYY /mnt/boot\r\n\r\n# Mount your virtual filesystems:\r\nfor i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt$i; done\r\n\r\n# Chroot\r\nsudo chroot /mnt</pre>\r\n\r\n<hr />\r\n\r\nOnce chrooted:\r\n<ol>\r\n	<li>Add lvm hook to mkinitcpio.conf. Edit <code>/etc/mkinitcpio.conf</code> and make sure the udev and lvm2 mkinitcpio hooks are enabled:\r\n<pre class=\"prettyprint lang-text\">HOOKS=\"base udev ... block lvm2 filesystems\"</pre>\r\n</li>\r\n	<li>(<em>I am not sure this step is useful, but anyway</em>) edit <code>/etc/rc.conf</code> and add:\r\n<pre class=\"prettyprint lang-text\">USELVM=\"yes\"</pre>\r\n</li>\r\n	<li>recreate the linux.img and linux-fallback.img:\r\n<pre class=\"prettyprint lang-text\">cd /boot\r\nmkinitcpio -p linux</pre>\r\nThe -p switch specifies a preset to utilize; most kernel packages provide a related mkinitcpio preset file, found in /etc/mkinitcpio.d (e.g. /etc/mkinitcpio.d/linux.preset for linux). A preset is a predefined definition of how to create an initramfs image instead of specifying the configuration file and output file every time.</li>\r\n</ol>\r\n<h3 id=\"repair-grub\">Repair GRUB</h3>\r\n<pre class=\"prettyprint lang-text\">grub-install --recheck /dev/sda\r\ngrub-mkconfig -o /boot/grub/grub.cfg</pre>\r\n<strong>Note</strong>: if you get errors like\r\n<pre class=\"prettyprint lang-text\">WARNING: Failed to connect to lvmetad: No such file or directory. Falling back to internal scanning.\r\n/run/lvm/lvmetad.socket: connect failed: No such file or directory\r\n...</pre>\r\ndon’t freak out, this won’t prevent your system to boot normally.\r\n<h3 id=\"test-it\">Test it</h3>\r\nNow, reboot. Everything should run smoothly. If so, don’t forget to take a screenshot of your root filesystem using:\r\n<pre class=\"prettyprint lang-text\">lvcreate -s -n sys-snap -L 3g vol-name/lroot</pre>','Migrate rootfs to LVM','','publish','closed','open','','migrate-rootfs-to-lvm','','','2014-09-14 12:49:37','2014-09-14 12:49:37','',0,'http://localhost/?p=574',0,'post','',0),(575,3,'2014-08-25 13:25:07','2014-08-25 13:25:07','','Migrate rootfs to LVM','','inherit','closed','open','','574-revision-v1','','','2014-08-25 13:25:07','2014-08-25 13:25:07','',574,'http://localhost/574-revision-v1/',0,'revision','',0),(576,3,'2014-08-25 13:25:20','2014-08-25 13:25:20','<h2 id=\"preliminary-notes\">Preliminary notes</h2>\r\nThis procedure was tested on a 500GB sdd containing one ext4 partition for the system. The /home and /opt directories are on other disks and no swap partition is used. The linux system to migrate is archlinux 3.16.1, located on <code>/dev/sda</code>.\r\n<h2 id=\"backing-up-the-system\">Backing up the system</h2>\r\nSince the root filesystem is only 16GB out of a 500GB partition, it is recommended to use tar.\r\n<ol>\r\n	<li>boot on a live usb</li>\r\n	<li>mount the root filesystem: <code>sudo mkdir /mnt/rootfs &amp;&amp; sudo mount -t ext4 /dev/sda /mnt/rootfs</code></li>\r\n	<li>do the backup:\r\n<pre class=\"prettyprint lang-text\">cd /mnt/rootfs\r\ntar cvzpf rootfs.tar.gz .</pre>\r\nNote the <code>-p</code> option: it <em>keeps the original permissions</em>, something not to forget!</li>\r\n</ol>\r\n<h2 id=\"installing-lvm-and-recreating-the-root-partition\">Installing lvm and recreating the root partition</h2>\r\n<ol>\r\n	<li>Open gparted, select /dev/sda and click on <code>device &gt; create partition table...</code> to create a gpt partition table. It will also <strong>format the entire disk</strong>.</li>\r\n	<li>We will use <code>gdisk</code> to create two partitions:\r\n<ul>\r\n	<li>a <em>BIOS boot partition</em>, used by GRUB to embed its core.img in the absence of post-MBR gap in GPT partitioned systems</li>\r\n	<li>the actual lvm partition</li>\r\n</ul>\r\nOpen a terminal and type:\r\n<pre class=\"prettyprint lang-text\">gdisk\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst asector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): ef02\r\nChanged type of partition to \'BIOS boot partition\'\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst sector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): 8e00\r\nChanged type of partition to \'Linux LVM\'\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n   1              36            2049   1007.0 KiB  EF02  BIOS boot partition\r\n   2            2052        15974366   7.6 GiB     8E00  Linux LVM\r\n\r\nCommand (? for help): w\r\n\r\nCommand (? for help): q</pre>\r\n</li>\r\n	<li>create the root partition on lvm\r\n<pre class=\"prettyprint lang-text\">sudo su\r\npvcreate /dev/sda2\r\nvgcreate vol-name /dev/sda2\r\nlgcreate -L 30G -n lroot vol-name \r\n\r\npvs\r\nlvs</pre>\r\n</li>\r\n	<li>format the root partition and copy back the system\r\n<pre class=\"prettyprint lang-text\">mkfs.ext4 /dev/mapper/vol-name-lroot\r\nmount /dev/mapper/vol-name-lroot /mnt\r\ncd /mnt\r\ntar xpvzf rootfs.tar .</pre>\r\n</li>\r\n</ol>\r\n<h2 id=\"repairing-the-system\">Repairing the system</h2>\r\nMount your partition (if not already done).\r\n<h3 id=\"update-fstab\">Update fstab</h3>\r\n<pre class=\"prettyprint lang-text\">sudo blkid /dev/sda2\r\n/dev/sda2: LABEL=\"rootfs\" UUID=\"102adbe7-87c1-4b5a-80e2-97013851d790\" TYPE=\"ext4\" PARTUUID=\"c349be14-9052-407f-b1ce-c419bd20704f\"</pre>\r\nThen, edit <code>/mnt/etc/fstab</code> and replace the UUID of “/” by the one above.\r\n<h3 id=\"recreate-the-boot-image\">Recreate the boot image</h3>\r\nFirst, chroot into your system. With an archlinux Live USB, use <code>arch-chroot</code>.\r\n\r\n<hr />\r\n\r\n<h3 id=\"chroot-using-an-ubuntu-live-usb\">chroot using an Ubuntu Live USB</h3>\r\nBefore chroot, you need to manually mount your virtual filesystem, thing that the <code>arch-chroot</code> command does automatically for you:\r\n<pre class=\"prettyprint lang-text\"># Mount root partition:\r\nsudo mount /dev/sdXY /mnt # /dev/sdXY is your root partition, e.g. /dev/sda1\r\n\r\n# If you have a separate boot partition you\'ll need to mount it also:\r\nsudo mount /dev/sdYY /mnt/boot\r\n\r\n# Mount your virtual filesystems:\r\nfor i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt$i; done\r\n\r\n# Chroot\r\nsudo chroot /mnt</pre>\r\n\r\n<hr />\r\n\r\nOnce chrooted:\r\n<ol>\r\n	<li>Add lvm hook to mkinitcpio.conf. Edit <code>/etc/mkinitcpio.conf</code> and make sure the udev and lvm2 mkinitcpio hooks are enabled:\r\n<pre class=\"prettyprint lang-text\">HOOKS=\"base udev ... block lvm2 filesystems\"</pre>\r\n</li>\r\n	<li>(<em>I am not sure this step is useful, but anyway</em>) edit <code>/etc/rc.conf</code> and add:\r\n<pre class=\"prettyprint lang-text\">USELVM=\"yes\"</pre>\r\n</li>\r\n	<li>recreate the linux.img and linux-fallback.img:\r\n<pre class=\"prettyprint lang-text\">cd /boot\r\nmkinitcpio -p linux</pre>\r\nThe -p switch specifies a preset to utilize; most kernel packages provide a related mkinitcpio preset file, found in /etc/mkinitcpio.d (e.g. /etc/mkinitcpio.d/linux.preset for linux). A preset is a predefined definition of how to create an initramfs image instead of specifying the configuration file and output file every time.</li>\r\n</ol>\r\n<h3 id=\"repair-grub\">Repair GRUB</h3>\r\n<pre class=\"prettyprint lang-text\">grub-install --recheck /dev/sda\r\ngrub-mkconfig -o /boot/grub/grub.cfg</pre>\r\n<strong>Note</strong>: if you get errors like\r\n<pre class=\"prettyprint lang-text\">WARNING: Failed to connect to lvmetad: No such file or directory. Falling back to internal scanning.\r\n/run/lvm/lvmetad.socket: connect failed: No such file or directory\r\n...</pre>\r\ndon’t freak out, this won’t prevent your system to boot normally.\r\n<h3 id=\"test-it\">Test it</h3>\r\nNow, reboot. Everything should run smoothly. If so, don’t forget to take a screenshot of your root filesystem using:\r\n<pre class=\"prettyprint lang-text\">lvcreate -s -n sys-snap -L 3g vol-name/lroot</pre>','Migrate rootfs to LVM','','inherit','closed','open','','574-revision-v1','','','2014-08-25 13:25:20','2014-08-25 13:25:20','',574,'http://localhost/574-revision-v1/',0,'revision','',0),(577,3,'2014-08-25 13:26:31','2014-08-25 13:26:31','<h2 id=\"preliminary-notes\">Preliminary notes</h2>\r\nThis procedure was tested on a 500GB sdd containing one ext4 partition for the system. The /home and /opt directories are on other disks and no swap partition is used. The linux system to migrate is archlinux 3.16.1, located on <code>/dev/sda</code>.\r\n<h2 id=\"backing-up-the-system\">Backing up the system</h2>\r\nSince the root filesystem is only 16GB out of a 500GB partition, it is recommended to use tar.\r\n<ol>\r\n	<li>boot on a live usb</li>\r\n	<li>mount the root filesystem: <code>sudo mkdir /mnt/rootfs &amp;&amp; sudo mount -t ext4 /dev/sda /mnt/rootfs</code></li>\r\n	<li>do the backup:\r\n<pre class=\"prettyprint lang-text\">cd /mnt/rootfs\r\ntar cvzpf rootfs.tar.gz .</pre>\r\nNote the <code>-p</code> option: it <em>keeps the original permissions</em>, something not to forget!</li>\r\n</ol>\r\n<h2 id=\"installing-lvm-and-recreating-the-root-partition\">Installing lvm and recreating the root partition</h2>\r\n<ol>\r\n	<li>Open gparted, select /dev/sda and click on <code>device &gt; create partition table...</code> to create a gpt partition table. It will also <strong>format the entire disk</strong>.</li>\r\n	<li>We will use <code>gdisk</code> to create two partitions:\r\n<ul>\r\n	<li>a <em>BIOS boot partition</em>, used by GRUB to embed its core.img in the absence of post-MBR gap in GPT partitioned systems</li>\r\n	<li>the actual lvm partition</li>\r\n</ul>\r\nOpen a terminal and type:\r\n<pre class=\"prettyprint lang-text\">gdisk\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst asector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): ef02\r\nChanged type of partition to \'BIOS boot partition\'\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst sector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): 8e00\r\nChanged type of partition to \'Linux LVM\'\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n   1              36            2049   1007.0 KiB  EF02  BIOS boot partition\r\n   2            2052        15974366   7.6 GiB     8E00  Linux LVM\r\n\r\nCommand (? for help): w\r\n\r\nCommand (? for help): q</pre>\r\n</li>\r\n	<li>create the root partition on lvm\r\n<pre class=\"prettyprint lang-text\">sudo su\r\npvcreate /dev/sda2\r\nvgcreate vol-name /dev/sda2\r\nlgcreate -L 30G -n lroot vol-name \r\n\r\npvs\r\nlvs</pre>\r\n</li>\r\n	<li>format the root partition and copy back the system\r\n<pre class=\"prettyprint lang-text\">mkfs.ext4 /dev/mapper/vol-name-lroot\r\nmount /dev/mapper/vol-name-lroot /mnt\r\ncd /mnt\r\ntar xpvzf rootfs.tar .</pre>\r\n</li>\r\n</ol>\r\n<h2 id=\"repairing-the-system\">Repairing the system</h2>\r\nMount your partition (if not already done).\r\n<h3 id=\"update-fstab\">Update fstab</h3>\r\n<pre class=\"prettyprint lang-text\">sudo blkid /dev/sda2\r\n/dev/sda2: LABEL=\"rootfs\" UUID=\"102adbe7-87c1-4b5a-80e2-97013851d790\" TYPE=\"ext4\" PARTUUID=\"c349be14-9052-407f-b1ce-c419bd20704f\"</pre>\r\nThen, edit <code>/mnt/etc/fstab</code> and replace the UUID of “/” by the one above.\r\n<h3 id=\"recreate-the-boot-image\">Recreate the boot image</h3>\r\nFirst, chroot into your system. With an archlinux Live USB, use <code>arch-chroot</code>.\r\n\r\n<hr />\r\n\r\n<strong id=\"chroot-using-an-ubuntu-live-usb\">chroot using an Ubuntu Live USB</strong>\r\nBefore chroot, you need to manually mount your virtual filesystem, thing that the <code>arch-chroot</code> command does automatically for you:\r\n<pre class=\"prettyprint lang-text\"># Mount root partition:\r\nsudo mount /dev/sdXY /mnt # /dev/sdXY is your root partition, e.g. /dev/sda1\r\n\r\n# If you have a separate boot partition you\'ll need to mount it also:\r\nsudo mount /dev/sdYY /mnt/boot\r\n\r\n# Mount your virtual filesystems:\r\nfor i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt$i; done\r\n\r\n# Chroot\r\nsudo chroot /mnt</pre>\r\n\r\n<hr />\r\n\r\nOnce chrooted:\r\n<ol>\r\n	<li>Add lvm hook to mkinitcpio.conf. Edit <code>/etc/mkinitcpio.conf</code> and make sure the udev and lvm2 mkinitcpio hooks are enabled:\r\n<pre class=\"prettyprint lang-text\">HOOKS=\"base udev ... block lvm2 filesystems\"</pre>\r\n</li>\r\n	<li>(<em>I am not sure this step is useful, but anyway</em>) edit <code>/etc/rc.conf</code> and add:\r\n<pre class=\"prettyprint lang-text\">USELVM=\"yes\"</pre>\r\n</li>\r\n	<li>recreate the linux.img and linux-fallback.img:\r\n<pre class=\"prettyprint lang-text\">cd /boot\r\nmkinitcpio -p linux</pre>\r\nThe -p switch specifies a preset to utilize; most kernel packages provide a related mkinitcpio preset file, found in /etc/mkinitcpio.d (e.g. /etc/mkinitcpio.d/linux.preset for linux). A preset is a predefined definition of how to create an initramfs image instead of specifying the configuration file and output file every time.</li>\r\n</ol>\r\n<h3 id=\"repair-grub\">Repair GRUB</h3>\r\n<pre class=\"prettyprint lang-text\">grub-install --recheck /dev/sda\r\ngrub-mkconfig -o /boot/grub/grub.cfg</pre>\r\n<strong>Note</strong>: if you get errors like\r\n<pre class=\"prettyprint lang-text\">WARNING: Failed to connect to lvmetad: No such file or directory. Falling back to internal scanning.\r\n/run/lvm/lvmetad.socket: connect failed: No such file or directory\r\n...</pre>\r\ndon’t freak out, this won’t prevent your system to boot normally.\r\n<h3 id=\"test-it\">Test it</h3>\r\nNow, reboot. Everything should run smoothly. If so, don’t forget to take a screenshot of your root filesystem using:\r\n<pre class=\"prettyprint lang-text\">lvcreate -s -n sys-snap -L 3g vol-name/lroot</pre>','Migrate rootfs to LVM','','inherit','closed','open','','574-revision-v1','','','2014-08-25 13:26:31','2014-08-25 13:26:31','',574,'http://localhost/574-revision-v1/',0,'revision','',0),(578,3,'2014-08-25 13:28:02','2014-08-25 13:28:02','<h2 id=\"preliminary-notes\">Preliminary notes</h2>\r\nThis procedure was tested on a 500GB sdd containing one ext4 partition for the system. The /home and /opt directories are on other disks and no swap partition is used. The linux system to migrate is archlinux 3.16.1, located on <tt>/dev/sda</tt>.\r\n<h2 id=\"backing-up-the-system\">Backing up the system</h2>\r\nSince the root filesystem is only 16GB out of a 500GB partition, it is recommended to use tar.\r\n<ol>\r\n	<li>boot on a live usb</li>\r\n	<li>mount the root filesystem: <code>sudo mkdir /mnt/rootfs &amp;&amp; sudo mount -t ext4 /dev/sda /mnt/rootfs</code></li>\r\n	<li>do the backup:\r\n<pre class=\"prettyprint lang-text\">cd /mnt/rootfs\r\ntar cvzpf rootfs.tar.gz .</pre>\r\nNote the <tt>-p</tt> option: it <em>keeps the original permissions</em>, something not to forget!</li>\r\n</ol>\r\n<h2 id=\"installing-lvm-and-recreating-the-root-partition\">Installing lvm and recreating the root partition</h2>\r\n<ol>\r\n	<li>Open gparted, select /dev/sda and click on <tt>device &gt; create partition table...</tt> to create a gpt partition table. It will also <strong>format the entire disk</strong>.</li>\r\n	<li>We will use <code>gdisk</code> to create two partitions:\r\n<ul>\r\n	<li>a <em>BIOS boot partition</em>, used by GRUB to embed its core.img in the absence of post-MBR gap in GPT partitioned systems</li>\r\n	<li>the actual lvm partition</li>\r\n</ul>\r\nOpen a terminal and type:\r\n<pre class=\"prettyprint lang-text\">gdisk\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst asector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): ef02\r\nChanged type of partition to \'BIOS boot partition\'\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst sector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): 8e00\r\nChanged type of partition to \'Linux LVM\'\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n   1              36            2049   1007.0 KiB  EF02  BIOS boot partition\r\n   2            2052        15974366   7.6 GiB     8E00  Linux LVM\r\n\r\nCommand (? for help): w\r\n\r\nCommand (? for help): q</pre>\r\n</li>\r\n	<li>create the root partition on lvm\r\n<pre class=\"prettyprint lang-text\">sudo su\r\npvcreate /dev/sda2\r\nvgcreate vol-name /dev/sda2\r\nlgcreate -L 30G -n lroot vol-name \r\n\r\npvs\r\nlvs</pre>\r\n</li>\r\n	<li>format the root partition and copy back the system\r\n<pre class=\"prettyprint lang-text\">mkfs.ext4 /dev/mapper/vol-name-lroot\r\nmount /dev/mapper/vol-name-lroot /mnt\r\ncd /mnt\r\ntar xpvzf rootfs.tar .</pre>\r\n</li>\r\n</ol>\r\n<h2 id=\"repairing-the-system\">Repairing the system</h2>\r\nMount your partition (if not already done).\r\n<h3 id=\"update-fstab\">Update fstab</h3>\r\n<pre class=\"prettyprint lang-text\">sudo blkid /dev/sda2\r\n/dev/sda2: LABEL=\"rootfs\" UUID=\"102adbe7-87c1-4b5a-80e2-97013851d790\" TYPE=\"ext4\" PARTUUID=\"c349be14-9052-407f-b1ce-c419bd20704f\"</pre>\r\nThen, edit <code>/mnt/etc/fstab</code> and replace the UUID of “/” by the one above.\r\n<h3 id=\"recreate-the-boot-image\">Recreate the boot image</h3>\r\nFirst, chroot into your system. With an archlinux Live USB, use <code>arch-chroot</code>.\r\n\r\n<hr />\r\n\r\n<h6 id=\"chroot-using-an-ubuntu-live-usb\">chroot using an Ubuntu Live USB</h6>\r\nBefore chroot, you need to manually mount your virtual filesystem, thing that the <code>arch-chroot</code> command does automatically for you:\r\n<pre class=\"prettyprint lang-text\"># Mount root partition:\r\nsudo mount /dev/sdXY /mnt # /dev/sdXY is your root partition, e.g. /dev/sda1\r\n\r\n# If you have a separate boot partition you\'ll need to mount it also:\r\nsudo mount /dev/sdYY /mnt/boot\r\n\r\n# Mount your virtual filesystems:\r\nfor i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt$i; done\r\n\r\n# Chroot\r\nsudo chroot /mnt</pre>\r\n\r\n<hr />\r\n\r\nOnce chrooted:\r\n<ol>\r\n	<li>Add lvm hook to mkinitcpio.conf. Edit <code>/etc/mkinitcpio.conf</code> and make sure the udev and lvm2 mkinitcpio hooks are enabled:\r\n<pre class=\"prettyprint lang-text\">HOOKS=\"base udev ... block lvm2 filesystems\"</pre>\r\n</li>\r\n	<li>(<em>I am not sure this step is useful, but anyway</em>) edit <code>/etc/rc.conf</code> and add:\r\n<pre class=\"prettyprint lang-text\">USELVM=\"yes\"</pre>\r\n</li>\r\n	<li>recreate the linux.img and linux-fallback.img:\r\n<pre class=\"prettyprint lang-text\">cd /boot\r\nmkinitcpio -p linux</pre>\r\nThe -p switch specifies a preset to utilize; most kernel packages provide a related mkinitcpio preset file, found in /etc/mkinitcpio.d (e.g. /etc/mkinitcpio.d/linux.preset for linux). A preset is a predefined definition of how to create an initramfs image instead of specifying the configuration file and output file every time.</li>\r\n</ol>\r\n<h3 id=\"repair-grub\">Repair GRUB</h3>\r\n<pre class=\"prettyprint lang-text\">grub-install --recheck /dev/sda\r\ngrub-mkconfig -o /boot/grub/grub.cfg</pre>\r\n<strong>Note</strong>: if you get errors like\r\n<pre class=\"prettyprint lang-text\">WARNING: Failed to connect to lvmetad: No such file or directory. Falling back to internal scanning.\r\n/run/lvm/lvmetad.socket: connect failed: No such file or directory\r\n...</pre>\r\ndon’t freak out, this won’t prevent your system to boot normally.\r\n<h3 id=\"test-it\">Test it</h3>\r\nNow, reboot. Everything should run smoothly. If so, don’t forget to take a screenshot of your root filesystem using:\r\n<pre class=\"prettyprint lang-text\">lvcreate -s -n sys-snap -L 3g vol-name/lroot</pre>','Migrate rootfs to LVM','','inherit','closed','open','','574-revision-v1','','','2014-08-25 13:28:02','2014-08-25 13:28:02','',574,'http://localhost/574-revision-v1/',0,'revision','',0),(579,3,'2014-08-26 09:51:13','2014-08-26 09:51:13','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">\r\n@Override\r\npublic View onCreateView( LayoutInflater inflater, \r\n                 ViewGroup container, Bundle savedInstanceState ) {\r\n    super.onCreate( savedInstanceState );\r\n\r\n    // inflate and sets the dialog\'s content view\r\n    View view = inflater.inflate( R.layout.frag_view, null );\r\n\r\n    editName = ( EditText ) view.findViewById( R.id.details_name );\r\n    // ...\r\n    updateFields();\r\n}\r\n\r\npublic void updateFields() {\r\n    // ...\r\n    editName.setText( account.getNameOrDefault() );\r\n    editPseudo.setText( account.getPseudoOrDefault() );\r\n    editEmail.setText( account.getEmailOrDefault() );\r\n    // ...\r\n}</pre>\r\n</div>\r\nWhen I run it with the debugger, <code>updateFields</code> is called and my edit texts have the right values, but on the screen I still get the old ones... DAFUCK ????\r\n<h3>The solution</h3>\r\nThe EditText appears to have an issue with resetting text in <code>onCreateView</code>. So the solution here is to reset the text in <code>onResume</code>. This works.\r\n\r\nIt would also work if called upon <code>onStart</code>.\r\n<h2>List onItemLongClick causes stack overflow errors</h2>\r\n<h3>The problem</h3>\r\nI have a list adapter and want two actions:\r\n<ol>\r\n	<li>one regular click opens a detailed view</li>\r\n	<li>one long click opens a context menu</li>\r\n</ol>\r\nThe regular click works, but the long click produces stack overflows...\r\n\r\nThe codes:\r\n<pre class=\"prettyprint lang-java\"> registerForContextMenu( mList );\r\n\r\n// one click on an item opens the \"detail\" view of the account entry\r\nmList.setOnItemClickListener( \r\n    new AdapterView.OnItemClickListener(){\r\n        @Override\r\n        public void onItemClick( AdapterView<?> parent, \r\n                   View v, int pos, long id ){\r\n            // ... do stuff ...\r\n        }\r\n} );\r\n\r\nmList.setOnItemLongClickListener( \r\n    new AdapterView.OnItemLongClickListener(){\r\n        @Override\r\n        public boolean onItemLongClick( AdapterView<?> parent,\r\n                   View v, int pos, long id ){\r\n            mList.showContextMenuForChild( view );\r\n            return true;\r\n        }\r\n} );</pre>\r\n<h3>The solution</h3>\r\nWe have registered the ListView for a ContextMenu and set an OnItemLongClickListener that calls <code>showContextMenu()</code>, this creates a circular logic:\r\n<ul>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n</ul>\r\netc. until the stack overflow occurs\r\nTo fix this:\r\nremove the OnItemLongClickListener since it is redundant with a ContextMenu. In fact, the <code>registerForContextMenu</code> does exactly that!','Android dev tips and tricks','','publish','closed','open','','android-dev-tips-and-tricks','','','2014-08-26 09:59:21','2014-08-26 09:59:21','',0,'http://localhost/?p=579',0,'post','',0),(580,3,'2014-08-26 09:40:53','2014-08-26 09:40:53','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">	@Override\r\n    public View onCreateView( LayoutInflater inflater, ViewGroup container,\r\n                              Bundle savedInstanceState ) {\r\n        super.onCreate( savedInstanceState );\r\n\r\n        // inflate and sets the dialog\'s content view\r\n        View view = inflater.inflate( R.layout.fragment_edit_account_details, null );\r\n\r\n        editName = ( EditText ) view.findViewById( R.id.details_name );\r\n        // ...\r\n        updateFields();\r\n}\r\n\r\n    public void updateFields() {\r\n        // ...\r\n        editName.setText( account.getNameOrDefault() );\r\n        editPseudo.setText( account.getPseudoOrDefault() );\r\n        editEmail.setText( account.getEmailOrDefault() );\r\n        // ...\r\n    }</pre>\r\n</div>\r\n<h3>The solution</h3>\r\nlj\r\n<pre class=\"prettyprint lang-java\"></pre>','Android dev tips and tricks','','inherit','closed','open','','579-revision-v1','','','2014-08-26 09:40:53','2014-08-26 09:40:53','',579,'http://localhost/579-revision-v1/',0,'revision','',0),(581,3,'2014-08-26 09:41:16','2014-08-26 09:41:16','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">	@Override\r\n    public View onCreateView( LayoutInflater inflater, ViewGroup container,\r\n                              Bundle savedInstanceState ) {\r\n        super.onCreate( savedInstanceState );\r\n\r\n        // inflate and sets the dialog\'s content view\r\n        View view = inflater.inflate( R.layout.fragment_edit_account_details, null );\r\n\r\n        editName = ( EditText ) view.findViewById( R.id.details_name );\r\n        // ...\r\n        updateFields();\r\n}\r\n\r\n    public void updateFields() {\r\n        // ...\r\n        editName.setText( account.getNameOrDefault() );\r\n        editPseudo.setText( account.getPseudoOrDefault() );\r\n        editEmail.setText( account.getEmailOrDefault() );\r\n        // ...\r\n    }</pre>\r\n</div>\r\nWhen I run it with the debugger, <code>updateFields</code> is called and my edit texts have the right values, but on the screen I still get the old ones... DAFUCK ????\r\n<h3>The solution</h3>\r\nThe EditText appears to have an issue with resetting text in <code>onCreateView</code>. So the solution here is to reset the text in <code>onResume</code>. This works.\r\n\r\nIt would also work if called upon <code>onStart</code>.','Android dev tips and tricks','','inherit','closed','open','','579-revision-v1','','','2014-08-26 09:41:16','2014-08-26 09:41:16','',579,'http://localhost/579-revision-v1/',0,'revision','',0),(582,3,'2014-08-26 09:49:42','2014-08-26 09:49:42','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">	@Override\r\n    public View onCreateView( LayoutInflater inflater, ViewGroup container,\r\n                              Bundle savedInstanceState ) {\r\n        super.onCreate( savedInstanceState );\r\n\r\n        // inflate and sets the dialog\'s content view\r\n        View view = inflater.inflate( R.layout.fragment_edit_account_details, null );\r\n\r\n        editName = ( EditText ) view.findViewById( R.id.details_name );\r\n        // ...\r\n        updateFields();\r\n}\r\n\r\n    public void updateFields() {\r\n        // ...\r\n        editName.setText( account.getNameOrDefault() );\r\n        editPseudo.setText( account.getPseudoOrDefault() );\r\n        editEmail.setText( account.getEmailOrDefault() );\r\n        // ...\r\n    }</pre>\r\n</div>\r\nWhen I run it with the debugger, <code>updateFields</code> is called and my edit texts have the right values, but on the screen I still get the old ones... DAFUCK ????\r\n<h3>The solution</h3>\r\nThe EditText appears to have an issue with resetting text in <code>onCreateView</code>. So the solution here is to reset the text in <code>onResume</code>. This works.\r\n\r\nIt would also work if called upon <code>onStart</code>.\r\n<h2>List onItemLongClick causes stack overflow errors</h2>\r\n<h3>The problem</h3>\r\nI have a list adapter and want two actions:\r\n<ol>\r\n	<li>one regular click opens a detailed view</li>\r\n	<li>one long click opens a context menu</li>\r\n</ol>\r\nThe regular click works, but the long click produces stack overflows...\r\n\r\nThe codes:\r\n<pre class=\"prettyprint lang-java\"> registerForContextMenu( mList );\r\n\r\n        // one click on an item opens the \"detail\" view of the account entry\r\n        mList.setOnItemClickListener( new AdapterView.OnItemClickListener(){\r\n            @Override\r\n            public void onItemClick( AdapterView&lt;?&gt; parent, final View view, final int position, final long id ){\r\n                String accountName = mList.getItemAtPosition( position ).toString();\r\n                if( accountName == null ) return;\r\n                Account account = dataWrapper.getAccount( accountName );\r\n                startEditShowActivityForResult( account, true );\r\n            }\r\n        } );\r\n\r\n        mList.setOnItemLongClickListener( new AdapterView.OnItemLongClickListener(){\r\n            @Override\r\n            public boolean onItemLongClick( AdapterView&lt;?&gt; adapterView, View view, int i, long l ){\r\n                mList.showContextMenuForChild( view );\r\n                return true;\r\n            }\r\n        } );</pre>\r\n<h3>The solution</h3>\r\nYou seem to have registered your ListView for a ContextMenu and set an OnItemLongClickListener that calls showContextMenu(), this creates a circular logic:\r\n<ul>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n</ul>\r\netc. until the stack overflow occurs\r\nTo fix this:\r\n\r\nremove the OnItemLongClickListener since it is redundant with a ContextMenu. In fact, the <code>registerForContextMenu</code> does exactly that!\r\n<pre class=\"prettyprint lang-java\"></pre>\r\n<pre class=\"prettyprint lang-java\"></pre>','Android dev tips and tricks','','inherit','closed','open','','579-revision-v1','','','2014-08-26 09:49:42','2014-08-26 09:49:42','',579,'http://localhost/579-revision-v1/',0,'revision','',0),(583,3,'2014-08-26 09:51:13','2014-08-26 09:51:13','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">	@Override\r\n    public View onCreateView( LayoutInflater inflater, ViewGroup container,\r\n                              Bundle savedInstanceState ) {\r\n        super.onCreate( savedInstanceState );\r\n\r\n        // inflate and sets the dialog\'s content view\r\n        View view = inflater.inflate( R.layout.fragment_edit_account_details, null );\r\n\r\n        editName = ( EditText ) view.findViewById( R.id.details_name );\r\n        // ...\r\n        updateFields();\r\n}\r\n\r\n    public void updateFields() {\r\n        // ...\r\n        editName.setText( account.getNameOrDefault() );\r\n        editPseudo.setText( account.getPseudoOrDefault() );\r\n        editEmail.setText( account.getEmailOrDefault() );\r\n        // ...\r\n    }</pre>\r\n</div>\r\nWhen I run it with the debugger, <code>updateFields</code> is called and my edit texts have the right values, but on the screen I still get the old ones... DAFUCK ????\r\n<h3>The solution</h3>\r\nThe EditText appears to have an issue with resetting text in <code>onCreateView</code>. So the solution here is to reset the text in <code>onResume</code>. This works.\r\n\r\nIt would also work if called upon <code>onStart</code>.\r\n<h2>List onItemLongClick causes stack overflow errors</h2>\r\n<h3>The problem</h3>\r\nI have a list adapter and want two actions:\r\n<ol>\r\n	<li>one regular click opens a detailed view</li>\r\n	<li>one long click opens a context menu</li>\r\n</ol>\r\nThe regular click works, but the long click produces stack overflows...\r\n\r\nThe codes:\r\n<pre class=\"prettyprint lang-java\"> registerForContextMenu( mList );\r\n\r\n        // one click on an item opens the \"detail\" view of the account entry\r\n        mList.setOnItemClickListener( new AdapterView.OnItemClickListener(){\r\n            @Override\r\n            public void onItemClick( AdapterView<?> parent, final View view, final int position, final long id ){\r\n                String accountName = mList.getItemAtPosition( position ).toString();\r\n                if( accountName == null ) return;\r\n                Account account = dataWrapper.getAccount( accountName );\r\n                startEditShowActivityForResult( account, true );\r\n            }\r\n        } );\r\n\r\n        mList.setOnItemLongClickListener( new AdapterView.OnItemLongClickListener(){\r\n            @Override\r\n            public boolean onItemLongClick( AdapterView<?> adapterView, View view, int i, long l ){\r\n                mList.showContextMenuForChild( view );\r\n                return true;\r\n            }\r\n        } );</pre>\r\n<h3>The solution</h3>\r\nYou seem to have registered your ListView for a ContextMenu and set an OnItemLongClickListener that calls showContextMenu(), this creates a circular logic:\r\n<ul>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n</ul>\r\netc. until the stack overflow occurs\r\nTo fix this:\r\n\r\nremove the OnItemLongClickListener since it is redundant with a ContextMenu. In fact, the <code>registerForContextMenu</code> does exactly that!\r\n<pre class=\"prettyprint lang-java\"></pre>\r\n<pre class=\"prettyprint lang-java\"></pre>','Android dev tips and tricks','','inherit','closed','open','','579-revision-v1','','','2014-08-26 09:51:13','2014-08-26 09:51:13','',579,'http://localhost/579-revision-v1/',0,'revision','',0),(584,3,'2014-08-26 09:59:05','2014-08-26 09:59:05','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">\r\n@Override\r\npublic View onCreateView( LayoutInflater inflater, \r\n                 ViewGroup container, Bundle savedInstanceState ) {\r\n    super.onCreate( savedInstanceState );\r\n\r\n    // inflate and sets the dialog\'s content view\r\n    View view = inflater.inflate( R.layout.frag_view, null );\r\n\r\n    editName = ( EditText ) view.findViewById( R.id.details_name );\r\n    // ...\r\n    updateFields();\r\n}\r\n\r\npublic void updateFields() {\r\n    // ...\r\n    editName.setText( account.getNameOrDefault() );\r\n    editPseudo.setText( account.getPseudoOrDefault() );\r\n    editEmail.setText( account.getEmailOrDefault() );\r\n    // ...\r\n}</pre>\r\n</div>\r\nWhen I run it with the debugger, <code>updateFields</code> is called and my edit texts have the right values, but on the screen I still get the old ones... DAFUCK ????\r\n<h3>The solution</h3>\r\nThe EditText appears to have an issue with resetting text in <code>onCreateView</code>. So the solution here is to reset the text in <code>onResume</code>. This works.\r\n\r\nIt would also work if called upon <code>onStart</code>.\r\n<h2>List onItemLongClick causes stack overflow errors</h2>\r\n<h3>The problem</h3>\r\nI have a list adapter and want two actions:\r\n<ol>\r\n	<li>one regular click opens a detailed view</li>\r\n	<li>one long click opens a context menu</li>\r\n</ol>\r\nThe regular click works, but the long click produces stack overflows...\r\n\r\nThe codes:\r\n<pre class=\"prettyprint lang-java\"> registerForContextMenu( mList );\r\n\r\n// one click on an item opens the \"detail\" view of the account entry\r\nmList.setOnItemClickListener( \r\n    new AdapterView.OnItemClickListener(){\r\n        @Override\r\n        public void onItemClick( AdapterView<?> parent, \r\n                   View v, int pos, long id ){\r\n            // ... do stuff ...\r\n        }\r\n} );\r\n\r\nmList.setOnItemLongClickListener( \r\n    new AdapterView.OnItemLongClickListener(){\r\n        @Override\r\n        public boolean onItemLongClick( AdapterView<?> parent,\r\n                   View v, int pos, long id ){\r\n            mList.showContextMenuForChild( view );\r\n            return true;\r\n        }\r\n} );</pre>\r\n<h3>The solution</h3>\r\nWe have registered the ListView for a ContextMenu and set an OnItemLongClickListener that calls <code>showContextMenu()</code>, this creates a circular logic:\r\n<ul>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n</ul>\r\netc. until the stack overflow occurs\r\nTo fix this:\r\nremove the OnItemLongClickListener since it is redundant with a ContextMenu. In fact, the <code>registerForContextMenu</code> does exactly that!','Android dev tips and tricks','','inherit','closed','open','','579-autosave-v1','','','2014-08-26 09:59:05','2014-08-26 09:59:05','',579,'http://localhost/579-autosave-v1/',0,'revision','',0),(585,3,'2014-08-26 09:52:43','2014-08-26 09:52:43','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">	@Override\r\npublic View onCreateView( LayoutInflater inflater, ViewGroup container,\r\n        Bundle savedInstanceState ) {\r\n    super.onCreate( savedInstanceState );\r\n\r\n    // inflate and sets the dialog\'s content view\r\n    View view = inflater.inflate( R.layout.fragment_edit_account_details, null );\r\n\r\n    editName = ( EditText ) view.findViewById( R.id.details_name );\r\n    // ...\r\n    updateFields();\r\n}\r\n\r\npublic void updateFields() {\r\n    // ...\r\n    editName.setText( account.getNameOrDefault() );\r\n    editPseudo.setText( account.getPseudoOrDefault() );\r\n    editEmail.setText( account.getEmailOrDefault() );\r\n    // ...\r\n}</pre>\r\n</div>\r\nWhen I run it with the debugger, <code>updateFields</code> is called and my edit texts have the right values, but on the screen I still get the old ones... DAFUCK ????\r\n<h3>The solution</h3>\r\nThe EditText appears to have an issue with resetting text in <code>onCreateView</code>. So the solution here is to reset the text in <code>onResume</code>. This works.\r\n\r\nIt would also work if called upon <code>onStart</code>.\r\n<h2>List onItemLongClick causes stack overflow errors</h2>\r\n<h3>The problem</h3>\r\nI have a list adapter and want two actions:\r\n<ol>\r\n	<li>one regular click opens a detailed view</li>\r\n	<li>one long click opens a context menu</li>\r\n</ol>\r\nThe regular click works, but the long click produces stack overflows...\r\n\r\nThe codes:\r\n<pre class=\"prettyprint lang-java\"> registerForContextMenu( mList );\r\n\r\n// one click on an item opens the \"detail\" view of the account entry\r\nmList.setOnItemClickListener( new AdapterView.OnItemClickListener(){\r\n    @Override\r\n    public void onItemClick( AdapterView<?> parent, final View view, final int position, final long id ){\r\n        String accountName = mList.getItemAtPosition( position ).toString();\r\n        if( accountName == null ) return;\r\n        Account account = dataWrapper.getAccount( accountName );\r\n        startEditShowActivityForResult( account, true );\r\n    }\r\n} );\r\n\r\nmList.setOnItemLongClickListener( new AdapterView.OnItemLongClickListener(){\r\n    @Override\r\n    public boolean onItemLongClick( AdapterView<?> adapterView, View view, int i, long l ){\r\n        mList.showContextMenuForChild( view );\r\n        return true;\r\n    }\r\n} );</pre>\r\n<h3>The solution</h3>\r\nYou seem to have registered your ListView for a ContextMenu and set an OnItemLongClickListener that calls showContextMenu(), this creates a circular logic:\r\n<ul>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n</ul>\r\netc. until the stack overflow occurs\r\nTo fix this:\r\n\r\nremove the OnItemLongClickListener since it is redundant with a ContextMenu. In fact, the <code>registerForContextMenu</code> does exactly that!\r\n<pre class=\"prettyprint lang-java\"></pre>\r\n<pre class=\"prettyprint lang-java\"></pre>','Android dev tips and tricks','','inherit','closed','open','','579-revision-v1','','','2014-08-26 09:52:43','2014-08-26 09:52:43','',579,'http://localhost/579-revision-v1/',0,'revision','',0),(586,3,'2014-08-26 09:53:52','2014-08-26 09:53:52','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">	@Override\r\npublic View onCreateView( LayoutInflater inflater, ViewGroup container,\r\n        Bundle savedInstanceState ) {\r\n    super.onCreate( savedInstanceState );\r\n\r\n    // inflate and sets the dialog\'s content view\r\n    View view = inflater.inflate( R.layout.frag_view, null );\r\n\r\n    editName = ( EditText ) view.findViewById( R.id.details_name );\r\n    // ...\r\n    updateFields();\r\n}\r\n\r\npublic void updateFields() {\r\n    // ...\r\n    editName.setText( account.getNameOrDefault() );\r\n    editPseudo.setText( account.getPseudoOrDefault() );\r\n    editEmail.setText( account.getEmailOrDefault() );\r\n    // ...\r\n}</pre>\r\n</div>\r\nWhen I run it with the debugger, <code>updateFields</code> is called and my edit texts have the right values, but on the screen I still get the old ones... DAFUCK ????\r\n<h3>The solution</h3>\r\nThe EditText appears to have an issue with resetting text in <code>onCreateView</code>. So the solution here is to reset the text in <code>onResume</code>. This works.\r\n\r\nIt would also work if called upon <code>onStart</code>.\r\n<h2>List onItemLongClick causes stack overflow errors</h2>\r\n<h3>The problem</h3>\r\nI have a list adapter and want two actions:\r\n<ol>\r\n	<li>one regular click opens a detailed view</li>\r\n	<li>one long click opens a context menu</li>\r\n</ol>\r\nThe regular click works, but the long click produces stack overflows...\r\n\r\nThe codes:\r\n<pre class=\"prettyprint lang-java\"> registerForContextMenu( mList );\r\n\r\n// one click on an item opens the \"detail\" view of the account entry\r\nmList.setOnItemClickListener( new AdapterView.OnItemClickListener(){\r\n    @Override\r\n    public void onItemClick( AdapterView<?> parent, final View view, final int position, final long id ){\r\n        // ... do stuff ...\r\n    }\r\n} );\r\n\r\nmList.setOnItemLongClickListener( new AdapterView.OnItemLongClickListener(){\r\n    @Override\r\n    public boolean onItemLongClick( AdapterView<?> adapterView, View view, int i, long l ){\r\n        mList.showContextMenuForChild( view );\r\n        return true;\r\n    }\r\n} );</pre>\r\n<h3>The solution</h3>\r\nYou seem to have registered your ListView for a ContextMenu and set an OnItemLongClickListener that calls showContextMenu(), this creates a circular logic:\r\n<ul>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n</ul>\r\netc. until the stack overflow occurs\r\nTo fix this:\r\n\r\nremove the OnItemLongClickListener since it is redundant with a ContextMenu. In fact, the <code>registerForContextMenu</code> does exactly that!\r\n','Android dev tips and tricks','','inherit','closed','open','','579-revision-v1','','','2014-08-26 09:53:52','2014-08-26 09:53:52','',579,'http://localhost/579-revision-v1/',0,'revision','',0),(587,3,'2014-08-26 09:54:53','2014-08-26 09:54:53','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">	@Override\r\npublic View onCreateView( LayoutInflater inflater, ViewGroup container,\r\n        Bundle savedInstanceState ) {\r\n    super.onCreate( savedInstanceState );\r\n\r\n    // inflate and sets the dialog\'s content view\r\n    View view = inflater.inflate( R.layout.frag_view, null );\r\n\r\n    editName = ( EditText ) view.findViewById( R.id.details_name );\r\n    // ...\r\n    updateFields();\r\n}\r\n\r\npublic void updateFields() {\r\n    // ...\r\n    editName.setText( account.getNameOrDefault() );\r\n    editPseudo.setText( account.getPseudoOrDefault() );\r\n    editEmail.setText( account.getEmailOrDefault() );\r\n    // ...\r\n}</pre>\r\n</div>\r\nWhen I run it with the debugger, <code>updateFields</code> is called and my edit texts have the right values, but on the screen I still get the old ones... DAFUCK ????\r\n<h3>The solution</h3>\r\nThe EditText appears to have an issue with resetting text in <code>onCreateView</code>. So the solution here is to reset the text in <code>onResume</code>. This works.\r\n\r\nIt would also work if called upon <code>onStart</code>.\r\n<h2>List onItemLongClick causes stack overflow errors</h2>\r\n<h3>The problem</h3>\r\nI have a list adapter and want two actions:\r\n<ol>\r\n	<li>one regular click opens a detailed view</li>\r\n	<li>one long click opens a context menu</li>\r\n</ol>\r\nThe regular click works, but the long click produces stack overflows...\r\n\r\nThe codes:\r\n<pre class=\"prettyprint lang-java\"> registerForContextMenu( mList );\r\n\r\n// one click on an item opens the \"detail\" view of the account entry\r\nmList.setOnItemClickListener( new AdapterView.OnItemClickListener(){\r\n    @Override\r\n    public void onItemClick( AdapterView<?> parent, final View view, final int position, final long id ){\r\n        // ... do stuff ...\r\n    }\r\n} );\r\n\r\nmList.setOnItemLongClickListener( new AdapterView.OnItemLongClickListener(){\r\n    @Override\r\n    public boolean onItemLongClick( AdapterView<?> adapterView, View view, int i, long l ){\r\n        mList.showContextMenuForChild( view );\r\n        return true;\r\n    }\r\n} );</pre>\r\n<h3>The solution</h3>\r\nWe have registered the ListView for a ContextMenu and set an OnItemLongClickListener that calls <code>showContextMenu()</code>, this creates a circular logic:\r\n<ul>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n</ul>\r\netc. until the stack overflow occurs\r\nTo fix this:\r\nremove the OnItemLongClickListener since it is redundant with a ContextMenu. In fact, the <code>registerForContextMenu</code> does exactly that!','Android dev tips and tricks','','inherit','closed','open','','579-revision-v1','','','2014-08-26 09:54:53','2014-08-26 09:54:53','',579,'http://localhost/579-revision-v1/',0,'revision','',0),(588,3,'2014-08-26 09:57:52','2014-08-26 09:57:52','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">\r\n@Override\r\npublic View onCreateView( LayoutInflater inflater, \r\n                 ViewGroup container, Bundle savedInstanceState ) {\r\n    super.onCreate( savedInstanceState );\r\n\r\n    // inflate and sets the dialog\'s content view\r\n    View view = inflater.inflate( R.layout.frag_view, null );\r\n\r\n    editName = ( EditText ) view.findViewById( R.id.details_name );\r\n    // ...\r\n    updateFields();\r\n}\r\n\r\npublic void updateFields() {\r\n    // ...\r\n    editName.setText( account.getNameOrDefault() );\r\n    editPseudo.setText( account.getPseudoOrDefault() );\r\n    editEmail.setText( account.getEmailOrDefault() );\r\n    // ...\r\n}</pre>\r\n</div>\r\nWhen I run it with the debugger, <code>updateFields</code> is called and my edit texts have the right values, but on the screen I still get the old ones... DAFUCK ????\r\n<h3>The solution</h3>\r\nThe EditText appears to have an issue with resetting text in <code>onCreateView</code>. So the solution here is to reset the text in <code>onResume</code>. This works.\r\n\r\nIt would also work if called upon <code>onStart</code>.\r\n<h2>List onItemLongClick causes stack overflow errors</h2>\r\n<h3>The problem</h3>\r\nI have a list adapter and want two actions:\r\n<ol>\r\n	<li>one regular click opens a detailed view</li>\r\n	<li>one long click opens a context menu</li>\r\n</ol>\r\nThe regular click works, but the long click produces stack overflows...\r\n\r\nThe codes:\r\n<pre class=\"prettyprint lang-java\"> registerForContextMenu( mList );\r\n\r\n// one click on an item opens the \"detail\" view of the account entry\r\nmList.setOnItemClickListener( new AdapterView.OnItemClickListener(){\r\n    @Override\r\n    public void onItemClick( AdapterView<?> parent, \r\n               View v, int pos, long id ){\r\n        // ... do stuff ...\r\n    }\r\n} );\r\n\r\nmList.setOnItemLongClickListener( new AdapterView.OnItemLongClickListener(){\r\n    @Override\r\n    public boolean onItemLongClick( AdapterView<?> parent,\r\n               View v, int pos, long id ){\r\n        mList.showContextMenuForChild( view );\r\n        return true;\r\n    }\r\n} );</pre>\r\n<h3>The solution</h3>\r\nWe have registered the ListView for a ContextMenu and set an OnItemLongClickListener that calls <code>showContextMenu()</code>, this creates a circular logic:\r\n<ul>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n</ul>\r\netc. until the stack overflow occurs\r\nTo fix this:\r\nremove the OnItemLongClickListener since it is redundant with a ContextMenu. In fact, the <code>registerForContextMenu</code> does exactly that!','Android dev tips and tricks','','inherit','closed','open','','579-revision-v1','','','2014-08-26 09:57:52','2014-08-26 09:57:52','',579,'http://localhost/579-revision-v1/',0,'revision','',0),(589,3,'2014-08-26 09:59:21','2014-08-26 09:59:21','<h2>EditText not updating</h2>\r\n<h3>The problem</h3>\r\nSay I have fragments for 2 states of a screen: Edit and View. When I switch to the Edit view, I update the editText values to reflect the current data using this code:\r\n<div>\r\n<pre class=\"prettyprint lang-java\">\r\n@Override\r\npublic View onCreateView( LayoutInflater inflater, \r\n                 ViewGroup container, Bundle savedInstanceState ) {\r\n    super.onCreate( savedInstanceState );\r\n\r\n    // inflate and sets the dialog\'s content view\r\n    View view = inflater.inflate( R.layout.frag_view, null );\r\n\r\n    editName = ( EditText ) view.findViewById( R.id.details_name );\r\n    // ...\r\n    updateFields();\r\n}\r\n\r\npublic void updateFields() {\r\n    // ...\r\n    editName.setText( account.getNameOrDefault() );\r\n    editPseudo.setText( account.getPseudoOrDefault() );\r\n    editEmail.setText( account.getEmailOrDefault() );\r\n    // ...\r\n}</pre>\r\n</div>\r\nWhen I run it with the debugger, <code>updateFields</code> is called and my edit texts have the right values, but on the screen I still get the old ones... DAFUCK ????\r\n<h3>The solution</h3>\r\nThe EditText appears to have an issue with resetting text in <code>onCreateView</code>. So the solution here is to reset the text in <code>onResume</code>. This works.\r\n\r\nIt would also work if called upon <code>onStart</code>.\r\n<h2>List onItemLongClick causes stack overflow errors</h2>\r\n<h3>The problem</h3>\r\nI have a list adapter and want two actions:\r\n<ol>\r\n	<li>one regular click opens a detailed view</li>\r\n	<li>one long click opens a context menu</li>\r\n</ol>\r\nThe regular click works, but the long click produces stack overflows...\r\n\r\nThe codes:\r\n<pre class=\"prettyprint lang-java\"> registerForContextMenu( mList );\r\n\r\n// one click on an item opens the \"detail\" view of the account entry\r\nmList.setOnItemClickListener( \r\n    new AdapterView.OnItemClickListener(){\r\n        @Override\r\n        public void onItemClick( AdapterView<?> parent, \r\n                   View v, int pos, long id ){\r\n            // ... do stuff ...\r\n        }\r\n} );\r\n\r\nmList.setOnItemLongClickListener( \r\n    new AdapterView.OnItemLongClickListener(){\r\n        @Override\r\n        public boolean onItemLongClick( AdapterView<?> parent,\r\n                   View v, int pos, long id ){\r\n            mList.showContextMenuForChild( view );\r\n            return true;\r\n        }\r\n} );</pre>\r\n<h3>The solution</h3>\r\nWe have registered the ListView for a ContextMenu and set an OnItemLongClickListener that calls <code>showContextMenu()</code>, this creates a circular logic:\r\n<ul>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n	<li>The OnItemLongClickListener calls the ContextMenu,</li>\r\n	<li>The ContextMenu calls the OnItemLongClickListener,</li>\r\n</ul>\r\netc. until the stack overflow occurs\r\nTo fix this:\r\nremove the OnItemLongClickListener since it is redundant with a ContextMenu. In fact, the <code>registerForContextMenu</code> does exactly that!','Android dev tips and tricks','','inherit','closed','open','','579-revision-v1','','','2014-08-26 09:59:21','2014-08-26 09:59:21','',579,'http://localhost/579-revision-v1/',0,'revision','',0),(590,3,'2014-08-26 10:23:49','2014-08-26 10:23:49','[display_file path=wp-content/themes/twentythirteen-child/post-files/terminal-misc.html]','Terminal misc','','publish','closed','open','','terminal-misc','','','2014-08-26 10:23:49','2014-08-26 10:23:49','',0,'http://localhost/?p=590',0,'post','',0),(591,3,'2014-08-26 10:23:49','2014-08-26 10:23:49','[display_file path=wp-content/themes/twentythirteen-child/post-files/terminal-misc.html]','Terminal misc','','inherit','closed','open','','590-revision-v1','','','2014-08-26 10:23:49','2014-08-26 10:23:49','',590,'http://localhost/590-revision-v1/',0,'revision','',0),(592,3,'2014-08-26 17:05:21','2014-08-26 17:05:21','<h2 id=\"preliminary-notes\">Preliminary notes</h2>\r\nThis procedure was tested on a 500GB sdd containing one ext4 partition for the system. The /home and /opt directories are on other disks and no swap partition is used. The linux system to migrate is archlinux 3.16.1, located on <tt>/dev/sda</tt>.\r\n<h2 id=\"backing-up-the-system\">Backing up the system</h2>\r\nSince the root filesystem is only 16GB out of a 500GB partition, it is recommended to use tar.\r\n<ol>\r\n	<li>boot on a live usb</li>\r\n	<li>mount the root filesystem: <code>sudo mkdir /mnt/rootfs &amp;&amp; sudo mount -t ext4 /dev/sda /mnt/rootfs</code></li>\r\n	<li>do the backup:\r\n<pre class=\"prettyprint lang-text\">cd /mnt/rootfs\r\ntar cvzpf rootfs.tar.gz .</pre>\r\nNote the <tt>-p</tt> option: it <em>keeps the original permissions</em>, something not to forget!</li>\r\n</ol>\r\n<h2 id=\"installing-lvm-and-recreating-the-root-partition\">Installing lvm and recreating the root partition</h2>\r\n<ol>\r\n	<li>Open gparted, select /dev/sda and click on <tt>device &gt; create partition table...</tt> to create a gpt partition table. It will also <strong>format the entire disk</strong>.</li>\r\n	<li>We will use <code>gdisk</code> to create two partitions:\r\n<ul>\r\n	<li>a <em>BIOS boot partition</em>, used by GRUB to embed its core.img in the absence of post-MBR gap in GPT partitioned systems</li>\r\n	<li>the actual lvm partition</li>\r\n</ul>\r\nOpen a terminal and type:\r\n<pre class=\"prettyprint lang-text\">gdisk\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst asector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): ef02\r\nChanged type of partition to \'BIOS boot partition\'\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst sector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): 8e00\r\nChanged type of partition to \'Linux LVM\'\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n   1              36            2049   1007.0 KiB  EF02  BIOS boot partition\r\n   2            2052        15974366   7.6 GiB     8E00  Linux LVM\r\n\r\nCommand (? for help): w\r\n\r\nCommand (? for help): q</pre>\r\n</li>\r\n	<li>create the root partition on lvm\r\n<pre class=\"prettyprint lang-text\">sudo su\r\npvcreate /dev/sda2\r\nvgcreate vol-name /dev/sda2\r\nlgcreate -L 30G -n lroot vol-name \r\n\r\npvs\r\nlvs</pre>\r\n</li>\r\n	<li>format the root partition and copy back the system\r\n<pre class=\"prettyprint lang-text\">mkfs.ext4 /dev/mapper/vol-name-lroot\r\nmount /dev/mapper/vol-name-lroot /mnt\r\ncd /mnt\r\ntar xpvzf rootfs.tar .</pre>\r\n</li>\r\n</ol>\r\n<h2 id=\"repairing-the-system\">Repairing the system</h2>\r\nMount your partition (if not already done).\r\n<h3 id=\"update-fstab\">Update fstab</h3>\r\n<pre class=\"prettyprint lang-text\">sudo blkid /dev/mapper/volname-lroot\r\n/dev/sda2: LABEL=\"rootfs\" UUID=\"102adbe7-87c1-4b5a-80e2-97013851d790\" TYPE=\"ext4\" PARTUUID=\"c349be14-9052-407f-b1ce-c419bd20704f\"</pre>\r\nThen, edit <code>/mnt/etc/fstab</code> and replace the UUID of “/” by the one above.\r\n<h3 id=\"recreate-the-boot-image\">Recreate the boot image</h3>\r\nFirst, chroot into your system. With an archlinux Live USB, use <code>arch-chroot</code>.\r\n\r\n<hr />\r\n\r\n<h6 id=\"chroot-using-an-ubuntu-live-usb\">chroot using an Ubuntu Live USB</h6>\r\nBefore chroot, you need to manually mount your virtual filesystem, thing that the <code>arch-chroot</code> command does automatically for you:\r\n<pre class=\"prettyprint lang-text\"># Mount root partition:\r\nsudo mount /dev/sdXY /mnt # /dev/sdXY is your root partition, e.g. /dev/sda1\r\n\r\n# If you have a separate boot partition you\'ll need to mount it also:\r\nsudo mount /dev/sdYY /mnt/boot\r\n\r\n# Mount your virtual filesystems:\r\nfor i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt$i; done\r\n\r\n# Chroot\r\nsudo chroot /mnt</pre>\r\n\r\n<hr />\r\n\r\nOnce chrooted:\r\n<ol>\r\n	<li>Add lvm hook to mkinitcpio.conf. Edit <code>/etc/mkinitcpio.conf</code> and make sure the udev and lvm2 mkinitcpio hooks are enabled:\r\n<pre class=\"prettyprint lang-text\">HOOKS=\"base udev ... block lvm2 filesystems\"</pre>\r\n</li>\r\n	<li>(<em>I am not sure this step is useful, but anyway</em>) edit <code>/etc/rc.conf</code> and add:\r\n<pre class=\"prettyprint lang-text\">USELVM=\"yes\"</pre>\r\n</li>\r\n	<li>recreate the linux.img and linux-fallback.img:\r\n<pre class=\"prettyprint lang-text\">cd /boot\r\nmkinitcpio -p linux</pre>\r\nThe -p switch specifies a preset to utilize; most kernel packages provide a related mkinitcpio preset file, found in /etc/mkinitcpio.d (e.g. /etc/mkinitcpio.d/linux.preset for linux). A preset is a predefined definition of how to create an initramfs image instead of specifying the configuration file and output file every time.</li>\r\n</ol>\r\n<h3 id=\"repair-grub\">Repair GRUB</h3>\r\n<pre class=\"prettyprint lang-text\">grub-install --recheck /dev/sda\r\ngrub-mkconfig -o /boot/grub/grub.cfg</pre>\r\n<strong>Note</strong>: if you get errors like\r\n<pre class=\"prettyprint lang-text\">WARNING: Failed to connect to lvmetad: No such file or directory. Falling back to internal scanning.\r\n/run/lvm/lvmetad.socket: connect failed: No such file or directory\r\n...</pre>\r\ndon’t freak out, this won’t prevent your system to boot normally.\r\n<h3 id=\"test-it\">Test it</h3>\r\nNow, reboot. Everything should run smoothly. If so, don’t forget to take a screenshot of your root filesystem using:\r\n<pre class=\"prettyprint lang-text\">lvcreate -s -n sys-snap -L 3g vol-name/lroot</pre>','Migrate rootfs to LVM','','inherit','closed','open','','574-revision-v1','','','2014-08-26 17:05:21','2014-08-26 17:05:21','',574,'http://localhost/574-revision-v1/',0,'revision','',0),(593,3,'2014-08-31 11:53:19','2014-08-31 11:53:19','<h2 id=\"the-issue\">The issue</h2>\r\nAfter upgrade, the printer (a Canon MX 360) is still listed, but nothing happens when is try to print a test page. The only hint is the status “stopped” in the print queue window…\r\n\r\nThe logs show nothing special, no error reported.\r\n<h2 id=\"finding-hints\">Finding hints</h2>\r\nTo get more information, go to the web interface of cups: <a href=\"http://127.0.0.1:631/\">http://127.0.0.1:631/</a> (If you don’t know the port, try running <code>netstat -tulpn</code> as root and search for cups) under the administration panel. Clic on your printer and send a job to the print queue.\r\n\r\nIn my case, I got the error:\r\n<blockquote><tt>The PPD version (5.2.9) is not compatible with Gutenprint 5.2.10.</tt></blockquote>\r\nNow that we got our hands on the problem, it is easy to find a solution!\r\n<h2 id=\"the-solution\">The solution</h2>\r\nIn this case, the easiest thing to do is to remove the printer and add it again. Cups will automatically search for (and find) the latest ppd. Problem solved.','CUPS - printer not working','','publish','closed','open','','cups-printer-not-working','','','2014-08-31 12:16:49','2014-08-31 12:16:49','',0,'http://localhost/?p=593',0,'post','',0),(594,3,'2014-08-31 11:52:55','2014-08-31 11:52:55','<h2 id=\"the-issue\">The issue</h2>\r\nAfter upgrade, the printer (a Canon MX 360) is still listed, but nothing happens when is try to print a test page. The only hint is the status “stopped” in the print queue window…\r\n\r\nThe logs show nothing special, no error reported.\r\n<h2 id=\"finding-hints\">Finding hints</h2>\r\nTo get more information, go to the web interface of cups: <a href=\"http://127.0.0.1:631/\">http://127.0.0.1:631/</a> (If you don’t know the port, try running <code>netstat -tulpn</code> as root and search for cups) under the administration panel. Clic on your printer and send a job to the print queue.\r\n\r\nIn my case, I got the error:\r\n<blockquote>The PPD version (5.2.9) is not compatible with Gutenprint 5.2.10.</blockquote>\r\nNow that we got our hands on the problem, it is easy to find a solution!\r\n<h2 id=\"the-solution\">The solution</h2>\r\nIn this case, the easiest thing to do is to remove the printer and add it again. Cups will automatically search for (and find) the latest ppd. Problem solved.','CUPS - printer not working','','inherit','closed','open','','593-revision-v1','','','2014-08-31 11:52:55','2014-08-31 11:52:55','',593,'http://localhost/593-revision-v1/',0,'revision','',0),(595,3,'2014-08-31 11:55:18','2014-08-31 11:55:18','<h2 id=\"preliminary-notes\">Preliminary notes</h2>\r\nThis procedure was tested on a 500GB sdd containing one ext4 partition for the system. The /home and /opt directories are on other disks and no swap partition is used. The linux system to migrate is archlinux 3.16.1, located on <tt>/dev/sda</tt>.\r\n<h2 id=\"backing-up-the-system\">Backing up the system</h2>\r\nSince the root filesystem is only 16GB out of a 500GB partition, it is recommended to use tar.\r\n<ol>\r\n	<li>boot on a live usb</li>\r\n	<li>mount the root filesystem: <code>sudo mkdir /mnt/rootfs &amp;&amp; sudo mount -t ext4 /dev/sda /mnt/rootfs</code></li>\r\n	<li>do the backup:\r\n<pre class=\"prettyprint lang-text\">cd /mnt/rootfs\r\ntar cvzpf rootfs.tar.gz .</pre>\r\nNote the <tt>-p</tt> option: it <em>keeps the original permissions</em>, something not to forget!</li>\r\n</ol>\r\n<h2 id=\"installing-lvm-and-recreating-the-root-partition\">Installing lvm and recreating the root partition</h2>\r\n<ol>\r\n	<li>Open gparted, select /dev/sda and click on <tt>device &gt; create partition table...</tt> to create a gpt partition table. It will also <strong>format the entire disk</strong>.</li>\r\n	<li>We will use <code>gdisk</code> to create two partitions:\r\n<ul>\r\n	<li>a <em>BIOS boot partition</em>, used by GRUB to embed its core.img in the absence of post-MBR gap in GPT partitioned systems</li>\r\n	<li>the actual lvm partition</li>\r\n</ul>\r\nOpen a terminal and type:\r\n<pre class=\"prettyprint lang-text\">gdisk\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst asector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): ef02\r\nChanged type of partition to \'BIOS boot partition\'\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst sector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): 8e00\r\nChanged type of partition to \'Linux LVM\'\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n   1              36            2049   1007.0 KiB  EF02  BIOS boot partition\r\n   2            2052        15974366   7.6 GiB     8E00  Linux LVM\r\n\r\nCommand (? for help): w\r\n\r\nCommand (? for help): q</pre>\r\n</li>\r\n	<li>create the root partition on lvm\r\n<pre class=\"prettyprint lang-text\">sudo su\r\npvcreate /dev/sda2\r\nvgcreate vol-name /dev/sda2\r\nlgcreate -L 30G -n lroot vol-name \r\n\r\npvs\r\nlvs</pre>\r\n</li>\r\n	<li>format the root partition and copy back the system\r\n<pre class=\"prettyprint lang-text\">mkfs.ext4 /dev/mapper/vol-name-lroot\r\nmount /dev/mapper/vol-name-lroot /mnt\r\ncd /mnt\r\ntar xpvzf rootfs.tar .</pre>\r\n</li>\r\n</ol>\r\n<h2 id=\"repairing-the-system\">Repairing the system</h2>\r\nMount your partition (if not already done).\r\n<h3 id=\"update-fstab\">Update fstab</h3>\r\n<pre class=\"prettyprint lang-text\">sudo blkid /dev/mapper/volname-lroot\r\n/dev/sda2: LABEL=\"rootfs\" UUID=\"102adbe7-87c1-4b5a-80e2-97013851d790\" TYPE=\"ext4\" PARTUUID=\"c349be14-9052-407f-b1ce-c419bd20704f\"</pre>\r\nThen, edit <code>/mnt/etc/fstab</code> and replace the UUID of “/” by the one above.\r\n<h3 id=\"recreate-the-boot-image\">Recreate the boot image</h3>\r\nFirst, chroot into your system. With an archlinux Live USB, use <code>arch-chroot</code>.\r\n\r\n<hr />\r\n\r\n<h6 id=\"chroot-using-an-ubuntu-live-usb\">chroot using an Ubuntu Live USB</h6>\r\nBefore chroot, you need to manually mount your virtual filesystem, thing that the <code>arch-chroot</code> command does automatically for you:\r\n<pre class=\"prettyprint lang-text\"># Mount root partition:\r\nsudo mount /dev/sdXY /mnt # /dev/sdXY is your root partition, e.g. /dev/sda1\r\n\r\n# If you have a separate boot partition you\'ll need to mount it also:\r\nsudo mount /dev/sdYY /mnt/boot\r\n\r\n# Mount your virtual filesystems:\r\nfor i in /dev/pts /dev /proc /sys /run; do sudo mount -B $i /mnt$i; done\r\n\r\n# Chroot\r\nsudo chroot /mnt</pre>\r\n\r\n<hr />\r\n\r\nOnce chrooted:\r\n<ol>\r\n	<li>Add lvm hook to mkinitcpio.conf. Edit <code>/etc/mkinitcpio.conf</code> and make sure the udev and lvm2 mkinitcpio hooks are enabled:\r\n<pre class=\"prettyprint lang-text\">HOOKS=\"base udev ... block lvm2 filesystems\"</pre>\r\n</li>\r\n	<li>(<em>I am not sure this step is useful, but anyway</em>) edit <code>/etc/rc.conf</code> and add:\r\n<pre class=\"prettyprint lang-text\">USELVM=\"yes\"</pre>\r\n</li>\r\n	<li>recreate the linux.img and linux-fallback.img:\r\n<pre class=\"prettyprint lang-text\">cd /boot\r\nmkinitcpio -p linux</pre>\r\nThe -p switch specifies a preset to utilize; most kernel packages provide a related mkinitcpio preset file, found in /etc/mkinitcpio.d (e.g. /etc/mkinitcpio.d/linux.preset for linux). A preset is a predefined definition of how to create an initramfs image instead of specifying the configuration file and output file every time.</li>\r\n</ol>\r\n<h3 id=\"repair-grub\">Repair GRUB</h3>\r\n<pre class=\"prettyprint lang-text\">grub-install --recheck /dev/sda\r\ngrub-mkconfig -o /boot/grub/grub.cfg</pre>\r\n<strong>Note</strong>: if you get errors like\r\n<pre class=\"prettyprint lang-text\">WARNING: Failed to connect to lvmetad: No such file or directory. Falling back to internal scanning.\r\n/run/lvm/lvmetad.socket: connect failed: No such file or directory\r\n...</pre>\r\ndon’t freak out, this won’t prevent your system to boot normally.\r\n<h3 id=\"test-it\">Test it</h3>\r\nNow, reboot. Everything should run smoothly. If so, don’t forget to take a screenshot of your root filesystem using:\r\n<pre class=\"prettyprint lang-text\">lvcreate -s -n sys-snap -L 3g vol-name/lroot</pre>','Migrate rootfs to LVM','','inherit','closed','open','','574-revision-v1','','','2014-08-31 11:55:18','2014-08-31 11:55:18','',574,'http://localhost/574-revision-v1/',0,'revision','',0),(596,3,'2014-08-31 12:16:16','2014-08-31 12:16:16','<h2 id=\"display-information\">Display information</h2>\r\n<h3 id=\"physical-volumes\">Physical volumes</h3>\r\n<pre class=\"prettyprint lang-text\">sudo pvdisplay</pre>\r\nWich results in this (quite queasy) output:\r\n<pre class=\"prettyprint lang-text\">  --- Physical volume ---\r\nPV Name               /dev/sda1\r\nVG Name               sys\r\nPV Size               111.79 GiB / not usable 4.00 MiB\r\nAllocatable           yes\r\nPE Size              4.00 MiB\r\nTotal PE              28617\r\nFree PE               5944\r\nAllocated PE          22673\r\nPV UUID               c3cUMj-Snck-qebQ-yg0d-GgxE-Poje-cMdN6H\r\n\r\n--- Physical volume ---\r\nPV Name               /dev/md0\r\nVG Name               raid\r\nPV Size               8.19 TiB / not usable 5.00 MiB\r\nAllocatable           yes\r\nPE Size               4.00 MiB\r\nTotal PE              2146093\r\nFree PE               954000\r\nAllocated PE          1192093\r\nPV UUID               1Y57gl-zeNd-xVzV-7y6N-Qk4n-d77Q-AI5F0p</pre>\r\nTo have a more useful info, like the space available on each PV, use <code>pvs</code>:\r\n<pre class=\"prettyprint lang-text\">sudo pvs\r\nsudo pvs --segments\r\nsudo pvs /dev/sda1</pre>\r\nExample of output:\r\n<pre class=\"prettyprint lang-text\">[~] sudo pvs\r\nPV         VG   Fmt  Attr PSize   PFree\r\n/dev/md0   raid lvm2 a--    8.19t  3.64t\r\n/dev/sda1  sys  lvm2 a--  111.79g 23.22g</pre>\r\n<h3 id=\"logical-volumes\">Logical volumes</h3>\r\nSimply replace the “p” with “l” on the commands above, for example:\r\n<pre class=\"prettyprint lang-text\">sudo lvdisplay\r\nsudo lvs</pre>\r\n\r\n<hr>\r\n\r\n<h2 id=\"snapshots\">Snapshots</h2>\r\nSnapshots are probably the most useful feature of lvm.\r\n\r\nWhen creating a snapshot, you need to set the maximum space the latter can use. Note that it is just an upper limit (which can be modified latter if needed) and most of the time it won’t be reached since snapshots are <em>incremental</em>: a new snapshot takes 0b in space. After that, each modification of the lv will trigger a copy into the snapshot.\r\n\r\n<em>* A snapshot volume can be as large or a small as you like but it must be large enough to hold all the changes that are likely to happen to the original volume during the lifetime of the snapshot.*</em>\r\n\r\nSo, to create a snapshot named snap of the lv sys/root taking at most 10GB, use:\r\n<pre class=\"prettyprint lang-text\">sudo lvcreate -s -n snap -L 10g sys/lroot</pre>\r\nTo later get back to the saved state, use:\r\n<pre class=\"prettyprint lang-text\">sudo lvconvert --merge sys/snap</pre>\r\n<strong><em>_Note_</em></strong>: If the origin volume of sys/snap is in use, it will inform you that the merge will take place the next time the volumes are activated.\r\nIf this is the root volume, then at the next boot, the volume will be activated and the merge will begin in the background.\r\n\r\n<hr>\r\n\r\n<h2 id=\"resize-logical-volumes\">Resize logical volumes</h2>\r\nSay that we have a lv named <code>raid/ldata</code> (raid is the volume group name) with an ext4 filesystem mounted on <code>/ldata</code> and mapped to <code>/dev/mapper/raid-ldata</code>.\r\nIt’s size is currently 1.8 TB and we want to shrink it to 800 GB.\r\n<pre class=\"prettyprint lang-text\"> > sudo lvs\r\n  LV       VG   Attr      LSize  Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-ao---  1.82t</pre>\r\n<h3 id=\"1-check-and-unmount-the-volume\">1. check and unmount the volume</h3>\r\nAll the operation should be done on an unmounted volume.  If you want to resize the root partition, use a live CD.\r\n\r\nIt is important to check that the filesystem is not corrupt before proceeding. resizing a file system in an inconsistent state could have disastrous consequences! For extX fs, use:\r\n<pre class=\"prettyprint lang-text\">sudo e2fsck -f /dev/mapper/raid-ldata</pre>\r\n<h3 id=\"2-resize-the-filesystem\">2. resize the filesystem</h3>\r\nShrink the fs to a size at most 90% of the new size you want. In our case, it will be ~700 GB:\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata 700G</pre>\r\n<blockquote>From the man page:\r\nThe <strong>resize2fs</strong> program will resize ext2, ext3, or ext4 file systems. It can be used to enlarge or shrink an unmounted file system located on device. If the filesystem is mounted, it can be used to expand the size of the mounted filesystem, assuming the kernel supports on-line resizing.</blockquote>\r\n<h3 id=\"3-reduce-the-size-of-the-logical-volume\">3. reduce the size of the logical volume</h3>\r\n<pre class=\"prettyprint lang-text\">sudo lvreduce -L 800G /dev/mapper/raid-ldata</pre>\r\nresult of the command:\r\n<pre class=\"prettyprint lang-text\">WARNING: Reducing active logical volume to 800.00 GiB\r\n  THIS MAY DESTROY YOUR DATA (filesystem etc.)\r\nDo you really want to reduce ldata? [y/n]: y\r\n  Reducing logical volume ldata to 800.00 GiB\r\n  Logical volume ldata successfully resized</pre>\r\n<h3 id=\"4-expand-the-fs-to-fit-the-whole-partition\">4. expand the fs to fit the whole partition</h3>\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata</pre>\r\nDone!\r\n\r\nresult:\r\n<pre class=\"prettyprint lang-text\">> sudo lvs\r\n  LV       VG   Attr      LSize   Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-a---- 800.00g</pre>\r\n\r\n<hr />\r\n\r\n<h1>Troubleshooting</h1>\r\n<h2 id=\"volume-group-not-mappedinactive-at-boot\">Volume group not mapped/inactive at boot</h2>\r\n<h3 id=\"the-issue\">The issue</h3>\r\nAfter upgrade, I could not boot into my system anymore, getting the grub error:\r\n<blockquote><tt>ERROR: device ‘UUID=……’ not found. Skipping FSCK’\r\nERROR: Unable to find root device ‘UUID=……’\r\nYou are being dropped to the recovery shell\r\nType ‘exit’ to try and continue booting\r\nsh: can’t access tty: job control turned off’</tt></blockquote>\r\nUsing an archlinux live usb, I discovered that my lvm partitions did not show up in <code>/dev/mapper/</code>. First, the command <code>vgdisplay</code> showed not vg. Then, the command <code>lvdisplay</code> showed INACTIVE logical volumes…\r\n<h3 id=\"partial-solution\">A Really partial solution</h3>\r\nTo activate a vg (and all the lv it contains), use the following:\r\n<pre class=\"prettyprint lang-text\">vgscan\r\nvgchange -ay</pre>\r\nIf you are in the <em>grub emergency shell</em>, the same commands <strong>should be preceded by <code>lvm</code></strong>.\r\n\r\nThe system still doesn’t boot automatically, but running the above commands and then typing <code>exit</code> in the emergency shell works…','Using LVM','','inherit','closed','open','','551-autosave-v1','','','2014-08-31 12:16:16','2014-08-31 12:16:16','',551,'http://localhost/551-autosave-v1/',0,'revision','',0),(597,3,'2014-08-31 12:15:45','2014-08-31 12:15:45','<h2 id=\"display-information\">Display information</h2>\r\n<h3 id=\"physical-volumes\">Physical volumes</h3>\r\n<pre class=\"prettyprint lang-text\">sudo pvdisplay</pre>\r\nWich results in this (quite queasy) output:\r\n<pre class=\"prettyprint lang-text\">  --- Physical volume ---\r\nPV Name               /dev/sda1\r\nVG Name               sys\r\nPV Size               111.79 GiB / not usable 4.00 MiB\r\nAllocatable           yes\r\nPE Size              4.00 MiB\r\nTotal PE              28617\r\nFree PE               5944\r\nAllocated PE          22673\r\nPV UUID               c3cUMj-Snck-qebQ-yg0d-GgxE-Poje-cMdN6H\r\n\r\n--- Physical volume ---\r\nPV Name               /dev/md0\r\nVG Name               raid\r\nPV Size               8.19 TiB / not usable 5.00 MiB\r\nAllocatable           yes\r\nPE Size               4.00 MiB\r\nTotal PE              2146093\r\nFree PE               954000\r\nAllocated PE          1192093\r\nPV UUID               1Y57gl-zeNd-xVzV-7y6N-Qk4n-d77Q-AI5F0p</pre>\r\nTo have a more useful info, like the space available on each PV, use <code>pvs</code>:\r\n<pre class=\"prettyprint lang-text\">sudo pvs\r\nsudo pvs --segments\r\nsudo pvs /dev/sda1</pre>\r\nExample of output:\r\n<pre class=\"prettyprint lang-text\">[~] sudo pvs\r\nPV         VG   Fmt  Attr PSize   PFree\r\n/dev/md0   raid lvm2 a--    8.19t  3.64t\r\n/dev/sda1  sys  lvm2 a--  111.79g 23.22g</pre>\r\n<h3 id=\"logical-volumes\">Logical volumes</h3>\r\nSimply replace the “p” with “l” on the commands above, for example:\r\n<pre class=\"prettyprint lang-text\">sudo lvdisplay\r\nsudo lvs</pre>\r\n\r\n<hr>\r\n\r\n<h2 id=\"snapshots\">Snapshots</h2>\r\nSnapshots are probably the most useful feature of lvm.\r\n\r\nWhen creating a snapshot, you need to set the maximum space the latter can use. Note that it is just an upper limit (which can be modified latter if needed) and most of the time it won’t be reached since snapshots are <em>incremental</em>: a new snapshot takes 0b in space. After that, each modification of the lv will trigger a copy into the snapshot.\r\n\r\n<em>* A snapshot volume can be as large or a small as you like but it must be large enough to hold all the changes that are likely to happen to the original volume during the lifetime of the snapshot.*</em>\r\n\r\nSo, to create a snapshot named snap of the lv sys/root taking at most 10GB, use:\r\n<pre class=\"prettyprint lang-text\">sudo lvcreate -s -n snap -L 10g sys/lroot</pre>\r\nTo later get back to the saved state, use:\r\n<pre class=\"prettyprint lang-text\">sudo lvconvert --merge sys/snap</pre>\r\n<strong><em>_Note_</em></strong>: If the origin volume of sys/snap is in use, it will inform you that the merge will take place the next time the volumes are activated.\r\nIf this is the root volume, then at the next boot, the volume will be activated and the merge will begin in the background.\r\n\r\n<br /><hr>\r\n\r\n<h2 id=\"resize-logical-volumes\">Resize logical volumes</h2>\r\nSay that we have a lv named <code>raid/ldata</code> (raid is the volume group name) with an ext4 filesystem mounted on <code>/ldata</code> and mapped to <code>/dev/mapper/raid-ldata</code>.\r\nIt’s size is currently 1.8 TB and we want to shrink it to 800 GB.\r\n<pre class=\"prettyprint lang-text\"> > sudo lvs\r\n  LV       VG   Attr      LSize  Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-ao---  1.82t</pre>\r\n<h3 id=\"1-check-and-unmount-the-volume\">1. check and unmount the volume</h3>\r\nAll the operation should be done on an unmounted volume.  If you want to resize the root partition, use a live CD.\r\n\r\nIt is important to check that the filesystem is not corrupt before proceeding. resizing a file system in an inconsistent state could have disastrous consequences! For extX fs, use:\r\n<pre class=\"prettyprint lang-text\">sudo e2fsck -f /dev/mapper/raid-ldata</pre>\r\n<h3 id=\"2-resize-the-filesystem\">2. resize the filesystem</h3>\r\nShrink the fs to a size at most 90% of the new size you want. In our case, it will be ~700 GB:\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata 700G</pre>\r\n<blockquote>From the man page:\r\nThe <strong>resize2fs</strong> program will resize ext2, ext3, or ext4 file systems. It can be used to enlarge or shrink an unmounted file system located on device. If the filesystem is mounted, it can be used to expand the size of the mounted filesystem, assuming the kernel supports on-line resizing.</blockquote>\r\n<h3 id=\"3-reduce-the-size-of-the-logical-volume\">3. reduce the size of the logical volume</h3>\r\n<pre class=\"prettyprint lang-text\">sudo lvreduce -L 800G /dev/mapper/raid-ldata</pre>\r\nresult of the command:\r\n<pre class=\"prettyprint lang-text\">WARNING: Reducing active logical volume to 800.00 GiB\r\n  THIS MAY DESTROY YOUR DATA (filesystem etc.)\r\nDo you really want to reduce ldata? [y/n]: y\r\n  Reducing logical volume ldata to 800.00 GiB\r\n  Logical volume ldata successfully resized</pre>\r\n<h3 id=\"4-expand-the-fs-to-fit-the-whole-partition\">4. expand the fs to fit the whole partition</h3>\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata</pre>\r\nDone!\r\n\r\nresult:\r\n<pre class=\"prettyprint lang-text\">> sudo lvs\r\n  LV       VG   Attr      LSize   Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-a---- 800.00g</pre>\r\n\r\n<br /><hr />\r\n\r\n<h1>Troubleshooting</h1>\r\n\r\n<h2 id=\"volume-group-not-mappedinactive-at-boot\">Volume group not mapped/inactive at boot</h2>\r\n\r\n<h3 id=\"the-issue\">The issue</h3>\r\n\r\n<p>After upgrade, I could not boot into my system anymore, getting the grub error:</p>\r\n\r\n<blockquote>\r\n  <p>ERROR: device ‘UUID=……’ not found. Skipping FSCK’ <br>\r\n  ERROR: Unable to find root device ‘UUID=……’ <br>\r\n  You are being dropped to the recovery shell <br>\r\n  Type ‘exit’ to try and continue booting <br>\r\n  sh: can’t access tty: job control turned off’</p>\r\n</blockquote>\r\n\r\n<p>Using an archlinux live usb, I discovered that my lvm partitions did not show up in <code>/dev/mapper/</code>. First, the command <code>vgdisplay</code> showed not vg. Then, the command <code>lvdisplay</code> showed INACTIVE logical volumes…</p>\r\n\r\n\r\n\r\n<h3 id=\"partial-solution\">A Really partial solution</h3>\r\n\r\n<p>To activate a vg (and all the lv it contains), use the following:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">vgscan\r\nvgchange -ay\r\n</pre>\r\n\r\n<p>If you are in the <em>grub emergency shell</em>, the same commands <strong>should be preceded by <code>lvm</code></strong>.</p>\r\n\r\n<p>The system still doesn’t boot automatically, but running the above commands and then typing <code>exit</code> in the emergency shell works…</p>','Using LVM','','inherit','closed','open','','551-revision-v1','','','2014-08-31 12:15:45','2014-08-31 12:15:45','',551,'http://localhost/551-revision-v1/',0,'revision','',0),(598,3,'2014-08-31 12:16:26','2014-08-31 12:16:26','<h2 id=\"display-information\">Display information</h2>\r\n<h3 id=\"physical-volumes\">Physical volumes</h3>\r\n<pre class=\"prettyprint lang-text\">sudo pvdisplay</pre>\r\nWich results in this (quite queasy) output:\r\n<pre class=\"prettyprint lang-text\">  --- Physical volume ---\r\nPV Name               /dev/sda1\r\nVG Name               sys\r\nPV Size               111.79 GiB / not usable 4.00 MiB\r\nAllocatable           yes\r\nPE Size              4.00 MiB\r\nTotal PE              28617\r\nFree PE               5944\r\nAllocated PE          22673\r\nPV UUID               c3cUMj-Snck-qebQ-yg0d-GgxE-Poje-cMdN6H\r\n\r\n--- Physical volume ---\r\nPV Name               /dev/md0\r\nVG Name               raid\r\nPV Size               8.19 TiB / not usable 5.00 MiB\r\nAllocatable           yes\r\nPE Size               4.00 MiB\r\nTotal PE              2146093\r\nFree PE               954000\r\nAllocated PE          1192093\r\nPV UUID               1Y57gl-zeNd-xVzV-7y6N-Qk4n-d77Q-AI5F0p</pre>\r\nTo have a more useful info, like the space available on each PV, use <code>pvs</code>:\r\n<pre class=\"prettyprint lang-text\">sudo pvs\r\nsudo pvs --segments\r\nsudo pvs /dev/sda1</pre>\r\nExample of output:\r\n<pre class=\"prettyprint lang-text\">[~] sudo pvs\r\nPV         VG   Fmt  Attr PSize   PFree\r\n/dev/md0   raid lvm2 a--    8.19t  3.64t\r\n/dev/sda1  sys  lvm2 a--  111.79g 23.22g</pre>\r\n<h3 id=\"logical-volumes\">Logical volumes</h3>\r\nSimply replace the “p” with “l” on the commands above, for example:\r\n<pre class=\"prettyprint lang-text\">sudo lvdisplay\r\nsudo lvs</pre>\r\n\r\n<hr>\r\n\r\n<h2 id=\"snapshots\">Snapshots</h2>\r\nSnapshots are probably the most useful feature of lvm.\r\n\r\nWhen creating a snapshot, you need to set the maximum space the latter can use. Note that it is just an upper limit (which can be modified latter if needed) and most of the time it won’t be reached since snapshots are <em>incremental</em>: a new snapshot takes 0b in space. After that, each modification of the lv will trigger a copy into the snapshot.\r\n\r\n<em>* A snapshot volume can be as large or a small as you like but it must be large enough to hold all the changes that are likely to happen to the original volume during the lifetime of the snapshot.*</em>\r\n\r\nSo, to create a snapshot named snap of the lv sys/root taking at most 10GB, use:\r\n<pre class=\"prettyprint lang-text\">sudo lvcreate -s -n snap -L 10g sys/lroot</pre>\r\nTo later get back to the saved state, use:\r\n<pre class=\"prettyprint lang-text\">sudo lvconvert --merge sys/snap</pre>\r\n<strong><em>_Note_</em></strong>: If the origin volume of sys/snap is in use, it will inform you that the merge will take place the next time the volumes are activated.\r\nIf this is the root volume, then at the next boot, the volume will be activated and the merge will begin in the background.\r\n\r\n<hr>\r\n\r\n<h2 id=\"resize-logical-volumes\">Resize logical volumes</h2>\r\nSay that we have a lv named <code>raid/ldata</code> (raid is the volume group name) with an ext4 filesystem mounted on <code>/ldata</code> and mapped to <code>/dev/mapper/raid-ldata</code>.\r\nIt’s size is currently 1.8 TB and we want to shrink it to 800 GB.\r\n<pre class=\"prettyprint lang-text\"> > sudo lvs\r\n  LV       VG   Attr      LSize  Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-ao---  1.82t</pre>\r\n<h3 id=\"1-check-and-unmount-the-volume\">1. check and unmount the volume</h3>\r\nAll the operation should be done on an unmounted volume.  If you want to resize the root partition, use a live CD.\r\n\r\nIt is important to check that the filesystem is not corrupt before proceeding. resizing a file system in an inconsistent state could have disastrous consequences! For extX fs, use:\r\n<pre class=\"prettyprint lang-text\">sudo e2fsck -f /dev/mapper/raid-ldata</pre>\r\n<h3 id=\"2-resize-the-filesystem\">2. resize the filesystem</h3>\r\nShrink the fs to a size at most 90% of the new size you want. In our case, it will be ~700 GB:\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata 700G</pre>\r\n<blockquote>From the man page:\r\nThe <strong>resize2fs</strong> program will resize ext2, ext3, or ext4 file systems. It can be used to enlarge or shrink an unmounted file system located on device. If the filesystem is mounted, it can be used to expand the size of the mounted filesystem, assuming the kernel supports on-line resizing.</blockquote>\r\n<h3 id=\"3-reduce-the-size-of-the-logical-volume\">3. reduce the size of the logical volume</h3>\r\n<pre class=\"prettyprint lang-text\">sudo lvreduce -L 800G /dev/mapper/raid-ldata</pre>\r\nresult of the command:\r\n<pre class=\"prettyprint lang-text\">WARNING: Reducing active logical volume to 800.00 GiB\r\n  THIS MAY DESTROY YOUR DATA (filesystem etc.)\r\nDo you really want to reduce ldata? [y/n]: y\r\n  Reducing logical volume ldata to 800.00 GiB\r\n  Logical volume ldata successfully resized</pre>\r\n<h3 id=\"4-expand-the-fs-to-fit-the-whole-partition\">4. expand the fs to fit the whole partition</h3>\r\n<pre class=\"prettyprint lang-text\">sudo resize2fs /dev/mapper/raid-ldata</pre>\r\nDone!\r\n\r\nresult:\r\n<pre class=\"prettyprint lang-text\">> sudo lvs\r\n  LV       VG   Attr      LSize   Pool Origin Data%  Move Log Copy%  Convert\r\n  ldata    raid -wi-a---- 800.00g</pre>\r\n\r\n<hr />\r\n\r\n<h1>Troubleshooting</h1>\r\n<h2 id=\"volume-group-not-mappedinactive-at-boot\">Volume group not mapped/inactive at boot</h2>\r\n<h3 id=\"the-issue\">The issue</h3>\r\nAfter upgrade, I could not boot into my system anymore, getting the grub error:\r\n<blockquote><tt>ERROR: device ‘UUID=……’ not found. Skipping FSCK’\r\nERROR: Unable to find root device ‘UUID=……’\r\nYou are being dropped to the recovery shell\r\nType ‘exit’ to try and continue booting\r\nsh: can’t access tty: job control turned off’</tt></blockquote>\r\nUsing an archlinux live usb, I discovered that my lvm partitions did not show up in <code>/dev/mapper/</code>. First, the command <code>vgdisplay</code> showed not vg. Then, the command <code>lvdisplay</code> showed INACTIVE logical volumes…\r\n<h3 id=\"partial-solution\">A Really partial solution</h3>\r\nTo activate a vg (and all the lv it contains), use the following:\r\n<pre class=\"prettyprint lang-text\">vgscan\r\nvgchange -ay</pre>\r\nIf you are in the <em>grub emergency shell</em>, the same commands <strong>should be preceded by <code>lvm</code></strong>.\r\n\r\nThe system still doesn’t boot automatically, but running the above commands and then typing <code>exit</code> in the emergency shell works…','Using LVM','','inherit','closed','open','','551-revision-v1','','','2014-08-31 12:16:26','2014-08-31 12:16:26','',551,'http://localhost/551-revision-v1/',0,'revision','',0),(599,3,'2014-08-31 12:16:49','2014-08-31 12:16:49','<h2 id=\"the-issue\">The issue</h2>\r\nAfter upgrade, the printer (a Canon MX 360) is still listed, but nothing happens when is try to print a test page. The only hint is the status “stopped” in the print queue window…\r\n\r\nThe logs show nothing special, no error reported.\r\n<h2 id=\"finding-hints\">Finding hints</h2>\r\nTo get more information, go to the web interface of cups: <a href=\"http://127.0.0.1:631/\">http://127.0.0.1:631/</a> (If you don’t know the port, try running <code>netstat -tulpn</code> as root and search for cups) under the administration panel. Clic on your printer and send a job to the print queue.\r\n\r\nIn my case, I got the error:\r\n<blockquote><tt>The PPD version (5.2.9) is not compatible with Gutenprint 5.2.10.</tt></blockquote>\r\nNow that we got our hands on the problem, it is easy to find a solution!\r\n<h2 id=\"the-solution\">The solution</h2>\r\nIn this case, the easiest thing to do is to remove the printer and add it again. Cups will automatically search for (and find) the latest ppd. Problem solved.','CUPS - printer not working','','inherit','closed','open','','593-revision-v1','','','2014-08-31 12:16:49','2014-08-31 12:16:49','',593,'http://localhost/593-revision-v1/',0,'revision','',0),(601,3,'2014-09-02 11:18:49','2014-09-02 11:18:49','<h2 id=\"backup\">Backup</h2>\r\n\r\n<p>If you use lvm, do a snapshot of the system:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvcreate -s -n snap -L 10g sys/lroot\r\nsudo lvcreate -s -n snap -L 10g sys/lhome\r\nsudo lvdisplay\r\n</pre>\r\n\r\n<p>This will create two snapshots, one for the root partition and one for the home partition. If anything goes wrong, simply do:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvconvert --merge sys/snap\r\nsudo lvconvert --merge sys/snapHome\r\nsudo reboot\r\n</pre>\r\n\r\n<p>and you are back to unity.</p>\r\n\r\n<p>If you do not use lvm, well, it is time to start !</p>\r\n\r\n\r\n\r\n<h2 id=\"install-cinnamon\">Install Cinnamon</h2>\r\n\r\n<p>For Ubuntu 14.04, there is currently no cinnamon packages in the Universe repository (read <a href=\"http://www.omgubuntu.co.uk/2014/05/ubuntu-cinnamon-desktop-ppa-retired\">this</a> for more info.</p>\r\n\r\n<p>Fortunately, there are several PPAs which seem to be stable. Note that I am not responsible for any dammages to your machine.</p>\r\n\r\n\r\n\r\n<h3 id=\"stable-ppa-1404-only\">Stable PPA (14.04 only !)</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo add-apt-repository ppa:lestcape/cinnamon\r\nsudo apt-get update\r\nsudo apt-get install cinnamon\r\n</pre>\r\n\r\n\r\n\r\n<h3 id=\"unstable-nightly-build-1404-only\">Unstable - Nightly build (14.04 only !)</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo add-apt-repository ppa:gwendal-lebihan-dev/cinnamon-nightly\r\nsudo apt-get update\r\nsudo apt-get install cinnamon\r\n</pre>\r\n\r\n<p>Then, logout and login with cinnamon to ensure everything went well.</p>\r\n\r\n\r\n\r\n<h2 id=\"purge-unity-from-your-system\">Purge Unity from your system</h2>\r\n\r\n<p>The fun part ;).</p>\r\n\r\n<p>Remove the unecessary packages:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo apt-get autoremove --purge unity unity-common unity-services unity-lens-\\* unity-scope-\\* unity-webapps-\\* gnome-control-center-unity hud libunity-core-6\\* libunity-misc4 libunity-webapps\\* appmenu-gtk appmenu-gtk3 appmenu-qt\\* overlay-scrollbar\\* activity-log-manager-control-center firefox-globalmenu thunderbird-globalmenu libufe-xidgetter0 xul-ext-unity xul-ext-webaccounts webaccounts-extension-common xul-ext-websites-integration gnome-control-center gnome-session\r\n</pre>\r\n\r\n<p>Since cinnamon uses Muffin as a Window Manager, compiz is useless:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo apt-get autoremove --purge compiz compiz-gnome compiz-plugins-default libcompizconfig0\r\n</pre>\r\n\r\n<p>Cinnamon is shipped with Nemo, which is a good alternative to Nautilus:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo apt-get autoremove --purge nautilus nautilus-sendto nautilus-sendto-empathy nautilus-share\r\n</pre>\r\n\r\n<p>Optionally, remove Zeitgeist:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">zeitgeist-daemon --quit\r\nsudo apt-get autoremove --purge activity-log-manager-common python-zeitgeist rhythmbox-plugin-zeitgeist zeitgeist zeitgeist-core zeitgeist-datahub\r\n</pre>\r\n\r\n<p>Finally, remove the config files polluting your home, namely:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">~/.local/share/unity-webapps\r\n~/.compiz\r\n~/.config/compiz-1\r\n~/.config/nautilus\r\n~/.local/share/nautilus\r\n~/.local/share/zeitgeist\r\n</pre>\r\n\r\n<p>You can also install <code>bleachbit</code>, a nice utility to clean temp file (a sort of CCLeaner for Linux).</p>\r\n\r\n<p>Reboot, and normally you have Cinnamon !</p>','Replace Unity with Cinnamon - Ubuntu 14.04','','publish','closed','open','','replace-unity-with-cinnamon-ubuntu-14-04','','','2014-09-02 11:18:49','2014-09-02 11:18:49','',0,'http://localhost/?p=601',0,'post','',0),(602,3,'2014-09-02 11:18:39','2014-09-02 11:18:39','<h2 id=\"backup\">Backup</h2>\r\n\r\n<p>If you use lvm, do a snapshot of the system:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvcreate -s -n snap -L 10g sys/lroot\r\nsudo lvcreate -s -n snap -L 10g sys/lhome\r\nsudo lvdisplay\r\n</pre>\r\n\r\n<p>This will create two snapshots, one for the root partition and one for the home partition. If anything goes wrong, simply do:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo lvconvert --merge sys/snap\r\nsudo lvconvert --merge sys/snapHome\r\nsudo reboot\r\n</pre>\r\n\r\n<p>and you are back to unity.</p>\r\n\r\n<p>If you do not use lvm, well, it is time to start !</p>\r\n\r\n\r\n\r\n<h2 id=\"install-cinnamon\">Install Cinnamon</h2>\r\n\r\n<p>For Ubuntu 14.04, there is currently no cinnamon packages in the Universe repository (read <a href=\"http://www.omgubuntu.co.uk/2014/05/ubuntu-cinnamon-desktop-ppa-retired\">this</a> for more info.</p>\r\n\r\n<p>Fortunately, there are several PPAs which seem to be stable. Note that I am not responsible for any dammages to your machine.</p>\r\n\r\n\r\n\r\n<h3 id=\"stable-ppa-1404-only\">Stable PPA (14.04 only !)</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo add-apt-repository ppa:lestcape/cinnamon\r\nsudo apt-get update\r\nsudo apt-get install cinnamon\r\n</pre>\r\n\r\n\r\n\r\n<h3 id=\"unstable-nightly-build-1404-only\">Unstable - Nightly build (14.04 only !)</h3>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo add-apt-repository ppa:gwendal-lebihan-dev/cinnamon-nightly\r\nsudo apt-get update\r\nsudo apt-get install cinnamon\r\n</pre>\r\n\r\n<p>Then, logout and login with cinnamon to ensure everything went well.</p>\r\n\r\n\r\n\r\n<h2 id=\"purge-unity-from-your-system\">Purge Unity from your system</h2>\r\n\r\n<p>The fun part ;).</p>\r\n\r\n<p>Remove the unecessary packages:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo apt-get autoremove --purge unity unity-common unity-services unity-lens-\\* unity-scope-\\* unity-webapps-\\* gnome-control-center-unity hud libunity-core-6\\* libunity-misc4 libunity-webapps\\* appmenu-gtk appmenu-gtk3 appmenu-qt\\* overlay-scrollbar\\* activity-log-manager-control-center firefox-globalmenu thunderbird-globalmenu libufe-xidgetter0 xul-ext-unity xul-ext-webaccounts webaccounts-extension-common xul-ext-websites-integration gnome-control-center gnome-session\r\n</pre>\r\n\r\n<p>Since cinnamon uses Muffin as a Window Manager, compiz is useless:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo apt-get autoremove --purge compiz compiz-gnome compiz-plugins-default libcompizconfig0\r\n</pre>\r\n\r\n<p>Cinnamon is shipped with Nemo, which is a good alternative to Nautilus:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">sudo apt-get autoremove --purge nautilus nautilus-sendto nautilus-sendto-empathy nautilus-share\r\n</pre>\r\n\r\n<p>Optionally, remove Zeitgeist:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">zeitgeist-daemon --quit\r\nsudo apt-get autoremove --purge activity-log-manager-common python-zeitgeist rhythmbox-plugin-zeitgeist zeitgeist zeitgeist-core zeitgeist-datahub\r\n</pre>\r\n\r\n<p>Finally, remove the config files polluting your home, namely:</p>\r\n\r\n<pre class=\"prettyprint lang-text\">~/.local/share/unity-webapps\r\n~/.compiz\r\n~/.config/compiz-1\r\n~/.config/nautilus\r\n~/.local/share/nautilus\r\n~/.local/share/zeitgeist\r\n</pre>\r\n\r\n<p>You can also install <code>bleachbit</code>, a nice utility to clean temp file (a sort of CCLeaner for Linux).</p>\r\n\r\n<p>Reboot, and normally you have Cinnamon !</p>','Replace Unity with Cinnamon - Ubuntu 14.04','','inherit','closed','open','','601-revision-v1','','','2014-09-02 11:18:39','2014-09-02 11:18:39','',601,'http://localhost/601-revision-v1/',0,'revision','',0),(604,3,'2014-09-12 18:09:10','2014-09-12 18:09:10','<h2>Use the dollar sign instead of \'jQuery\'</h2>\r\nTwo solutions.\r\n<ul>\r\n	<li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\r\n	<li>you need the $ sign somewhere else, like a named function</li>\r\n</ul>\r\nInside an anonymous function, you can simply pass the $ directly to the function:\r\n<pre class=\"prettyprint\">// pass the $ as an argument of the an. function\r\njQuery( document ).ready( function( $ ){\r\n		$(\'my-selector\').doStuff();\r\n	});\r\n});</pre>\r\nOtherwise, you can declare the $ variable and assign jQuery to it:\r\n<pre class=\"prettyprint\">function marvellousFunction(){\r\n    var $ = jQuery;\r\n// more code\r\n}</pre>\r\n<h2>Enqueue scripts and styles from a child theme</h2>\r\nSimply add the following in your <code>functions.php</code>:\r\n<pre class=\"prettyprint\">\r\n<?php\r\n	// CHILD_DIR = path the the child theme \r\n    define( \'CHILD_DIR\', get_stylesheet_directory_uri() );\r\n\r\nfunction nameofchildtheme_enqueue() {\r\n    // enqueue a stylesheet \r\n    wp_enqueue_style( \'bootstrap.css\', \r\n        CHILD_DIR . \'/css/bootstrap.css\' );\r\n    // script loaded AFTER jquery >= 1.0.0\r\n    wp_enqueue_script( \'bootstrap.min.js\', \r\n        CHILD_DIR . \'/js/bootstrap.js\', \r\n        array(\'jquery\'), \r\n        \'1.0.0\', true );\r\n    // script depending on both jquery and bootstrap \r\n    wp_enqueue_script(\'myutils\', \r\n        CHILD_DIR. \'/js/myutils.js\', \r\n        array( \'jquery\', \'bootstrap.min.js\' ) );\r\n}\r\n\r\n// register the hook\r\nadd_action( \'wp_enqueue_scripts\', \'nameofchildtheme_enqueue\' );\r\n?></pre>\r\n\r\n<h2 id=\"add-a-loginlogout-menu-item\">add a login/logout menu item</h2>\r\nFor that, we can use the filter hook <code>wp_nav_menu_items</code>.\r\n\r\nOpen your theme <code>function.php</code> and copy-paste the following:\r\n<pre class=\"prettyprint lang-php\">add_filter( \'wp_nav_menu_items\',\'wpsites_loginout_menu_link\' );\r\n\r\nfunction wpsites_loginout_menu_link( $menu ) { \r\n    $loginout = wp_loginout($_SERVER[\'REQUEST_URI\'], false );\r\n    $menu .= \'<li>\' . $loginout . \'</li>\';\r\n    return $menu;\r\n}\r\n</pre>\r\nNote that based on your theme, you need to customize the li classes. For twenty-thirteen for example, we would have:\r\n<pre class=\"prettyprint lang-php\">$loginout = \'<li class=\"nav-menu\" class=\"menu-item\">\' . \r\n                wp_loginout($_SERVER[\'REQUEST_URI\'], false ) . \'</li>\';\r\n</pre>\r\n<h2 id=\"use-sshsftp-to-update-your-wordpress-apache2\">Use ssh/sftp to update your wordpress (apache2)</h2>\r\n<ol>\r\n	<li>Ensure that apache2 has the <tt>ssh</tt> extension installed and enabled. If not:\r\n<pre class=\"prettyprint lang-text\">apt-get install libssh2-php\r\necho extension=ssh2.so | sudo tee -a /etc/php5/apache2/php.ini\r\nservice apache2 restart\r\n</pre>\r\n</li>\r\n	<li>Create an ssh key for your wordpress user\r\n<pre class=\"prettyprint lang-text\">sudo mkdir /home/wp-user/.ssh\r\nsudo chown wp-user:wp-user /home/wp-user/.ssh/\r\n\r\nsu wp-user\r\nssh-keygen -t rsa -b 4096\r\n</pre>\r\n</li>\r\n	<li>Add the correct permissions\r\n<pre class=\"prettyprint lang-text\">sudo chmod 0700 /home/wp-user/.ssh/\r\nsudo chown wp-user:www-data /home/wp-user/id_rsa*\r\nsudo chmod 0640 /home/wp-user/id_rsa*\r\n</pre>\r\n</li>\r\n	<li>add your user to the authorized keys\r\n<pre class=\"prettyprint lang-text\">cat /home/wp-user/.ssh/wp_rsa.pub &gt;&gt; /home/wp-user/.ssh/authorized_keys\r\n</pre>\r\n</li>\r\n</ol>\r\nNow, if you try to update wordpress, you will get the possibility to use ssh2. Note that I could only achieve the update from localhost (<tt>host=localhost, user=wp-user, password=, paths=/home/wp-user/.ssh/id_rda*</tt>).\r\n<h3 id=\"automatize-the-process\">Automatize the process</h3>\r\n<pre class=\"prettyprint lang-php\">define(\'FTP_PUBKEY\',\'/home/wp-user/.ssh/id_rsa.pub\');\r\ndefine(\'FTP_PRIKEY\',\'/home/wp-user/.ssh/id_rsa\');\r\ndefine(\'FTP_USER\',\'wp-user\');\r\ndefine(\'FTP_PASS\',\'\');\r\ndefine(\'FTP_HOST\',\'localhost\');\r\n</pre>\r\n<h3 id=\"a-word-about-permissions\">A word about permissions</h3>\r\nNormally, the wordpress files should be owned by the ftp/ssh user. In our case, we should have created a new user (wp-user), and chowned all the site content to him. Note that there is a security breach if you use sudo while logged-in as your user !!\r\n\r\n<h3 id=\"some-sources\">some sources</h3>\r\n\r\n<p>SSH2:</p>\r\n\r\n<ul>\r\n<li><a href=\"http://www.jonathan.vc/2009/02/09/wordpress-install-upgrade-ssh/\">http://www.jonathan.vc/2009/02/09/wordpress-install-upgrade-ssh/</a></li>\r\n<li><a href=\"http://www.htpcbeginner.com/enable-wordpress-ssh-access/\">http://www.htpcbeginner.com/enable-wordpress-ssh-access/</a></li>\r\n<li><a href=\"http://code.tutsplus.com/articles/quick-tip-upgrade-your-wordpress-site-via-ssh--wp-27691\">http://code.tutsplus.com/articles/quick-tip-upgrade-your-wordpress-site-via-ssh–wp-27691</a></li>\r\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-secure-updates-and-installations-in-wordpress-on-ubuntu\">https://www.digitalocean.com/community/tutorials/how-to-configure-secure-updates-and-installations-in-wordpress-on-ubuntu</a></li>\r\n</ul>\r\n\r\n<p>permissions:</p>\r\n\r\n<ul>\r\n<li><a href=\"http://codex.wordpress.org/Changing_File_Permissions\">http://codex.wordpress.org/Changing_File_Permissions</a></li>\r\n<li><a href=\"http://codex.wordpress.org/Hardening_WordPress#File_Permissions\">http://codex.wordpress.org/Hardening_WordPress#File_Permissions</a></li>\r\n</ul>','Wordpress general tricks','','inherit','closed','open','','200-revision-v1','','','2014-09-12 18:09:10','2014-09-12 18:09:10','',200,'http://localhost/200-revision-v1/',0,'revision','',0),(605,3,'2014-09-12 18:09:49','2014-09-12 18:09:49','<h2>Use the dollar sign instead of \'jQuery\'</h2>\r\nTwo solutions.\r\n<ul>\r\n	<li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\r\n	<li>you need the $ sign somewhere else, like a named function</li>\r\n</ul>\r\nInside an anonymous function, you can simply pass the $ directly to the function:\r\n<pre class=\"prettyprint\">// pass the $ as an argument of the an. function\r\njQuery( document ).ready( function( $ ){\r\n		$(\'my-selector\').doStuff();\r\n	});\r\n});</pre>\r\nOtherwise, you can declare the $ variable and assign jQuery to it:\r\n<pre class=\"prettyprint\">function marvellousFunction(){\r\n    var $ = jQuery;\r\n// more code\r\n}</pre>\r\n<h2>Enqueue scripts and styles from a child theme</h2>\r\nSimply add the following in your <code>functions.php</code>:\r\n<pre class=\"prettyprint\">\r\n<?php\r\n	// CHILD_DIR = path the the child theme \r\n    define( \'CHILD_DIR\', get_stylesheet_directory_uri() );\r\n\r\nfunction nameofchildtheme_enqueue() {\r\n    // enqueue a stylesheet \r\n    wp_enqueue_style( \'bootstrap.css\', \r\n        CHILD_DIR . \'/css/bootstrap.css\' );\r\n    // script loaded AFTER jquery >= 1.0.0\r\n    wp_enqueue_script( \'bootstrap.min.js\', \r\n        CHILD_DIR . \'/js/bootstrap.js\', \r\n        array(\'jquery\'), \r\n        \'1.0.0\', true );\r\n    // script depending on both jquery and bootstrap \r\n    wp_enqueue_script(\'myutils\', \r\n        CHILD_DIR. \'/js/myutils.js\', \r\n        array( \'jquery\', \'bootstrap.min.js\' ) );\r\n}\r\n\r\n// register the hook\r\nadd_action( \'wp_enqueue_scripts\', \'nameofchildtheme_enqueue\' );\r\n?></pre>\r\n<h2 id=\"add-a-loginlogout-menu-item\">add a login/logout menu item</h2>\r\nFor that, we can use the filter hook <code>wp_nav_menu_items</code>.\r\n\r\nOpen your theme <code>function.php</code> and copy-paste the following:\r\n<pre class=\"prettyprint lang-php\">add_filter( \'wp_nav_menu_items\',\'wpsites_loginout_menu_link\' );\r\n\r\nfunction wpsites_loginout_menu_link( $menu ) { \r\n    $loginout = wp_loginout($_SERVER[\'REQUEST_URI\'], false );\r\n    $menu .= \'\r\n	<li>\' . $loginout . \'</li>\r\n\';\r\n    return $menu;\r\n}\r\n</pre>\r\nNote that based on your theme, you need to customize the li classes. For twenty-thirteen for example, we would have:\r\n<pre class=\"prettyprint lang-php\">$loginout = \'\r\n	<li class=\"nav-menu\" class=\"menu-item\">\' . \r\n                wp_loginout($_SERVER[\'REQUEST_URI\'], false ) . \'</li>\r\n\';\r\n</pre>\r\n<h2 id=\"use-sshsftp-to-update-your-wordpress-apache2\">Use ssh/sftp to update your wordpress (apache2)</h2>\r\n<ol>\r\n	<li>Ensure that apache2 has the <tt>ssh</tt> extension installed and enabled. If not:\r\n<pre class=\"prettyprint lang-text\">apt-get install libssh2-php\r\necho extension=ssh2.so | sudo tee -a /etc/php5/apache2/php.ini\r\nservice apache2 restart\r\n</pre>\r\n</li>\r\n	<li>Create an ssh key for your wordpress user\r\n<pre class=\"prettyprint lang-text\">sudo mkdir /home/wp-user/.ssh\r\nsudo chown wp-user:wp-user /home/wp-user/.ssh/\r\n\r\nsu wp-user\r\nssh-keygen -t rsa -b 4096\r\n</pre>\r\n</li>\r\n	<li>Add the correct permissions\r\n<pre class=\"prettyprint lang-text\">sudo chmod 0700 /home/wp-user/.ssh/\r\nsudo chown wp-user:www-data /home/wp-user/id_rsa*\r\nsudo chmod 0640 /home/wp-user/id_rsa*\r\n</pre>\r\n</li>\r\n	<li>add your user to the authorized keys\r\n<pre class=\"prettyprint lang-text\">cat /home/wp-user/.ssh/wp_rsa.pub >> /home/wp-user/.ssh/authorized_keys\r\n</pre>\r\n</li>\r\n</ol>\r\nNow, if you try to update wordpress, you will get the possibility to use ssh2. Note that I could only achieve the update from localhost (<tt>host=localhost, user=wp-user, password=, paths=/home/wp-user/.ssh/id_rda*</tt>).\r\n<h3 id=\"automatize-the-process\">Automatize the process</h3>\r\n<pre class=\"prettyprint lang-php\">define(\'FTP_PUBKEY\',\'/home/wp-user/.ssh/id_rsa.pub\');\r\ndefine(\'FTP_PRIKEY\',\'/home/wp-user/.ssh/id_rsa\');\r\ndefine(\'FTP_USER\',\'wp-user\');\r\ndefine(\'FTP_PASS\',\'\');\r\ndefine(\'FTP_HOST\',\'localhost\');\r\n</pre>\r\n<h3 id=\"a-word-about-permissions\">A word about permissions</h3>\r\nNormally, the wordpress files should be owned by the ftp/ssh user. In our case, we should have created a new user (wp-user), and chowned all the site content to him. Note that there is a security breach if you use sudo while logged-in as your user !!\r\n<h3 id=\"some-sources\">some sources</h3>\r\nSSH2:\r\n<ul>\r\n	<li><a href=\"http://www.jonathan.vc/2009/02/09/wordpress-install-upgrade-ssh/\">http://www.jonathan.vc/2009/02/09/wordpress-install-upgrade-ssh/</a></li>\r\n	<li><a href=\"http://www.htpcbeginner.com/enable-wordpress-ssh-access/\">http://www.htpcbeginner.com/enable-wordpress-ssh-access/</a></li>\r\n	<li><a href=\"http://code.tutsplus.com/articles/quick-tip-upgrade-your-wordpress-site-via-ssh--wp-27691\">http://code.tutsplus.com/articles/quick-tip-upgrade-your-wordpress-site-via-ssh–wp-27691</a></li>\r\n	<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-secure-updates-and-installations-in-wordpress-on-ubuntu\">https://www.digitalocean.com/community/tutorials/how-to-configure-secure-updates-and-installations-in-wordpress-on-ubuntu</a></li>\r\n</ul>\r\npermissions:\r\n<ul>\r\n	<li><a href=\"http://codex.wordpress.org/Changing_File_Permissions\">http://codex.wordpress.org/Changing_File_Permissions</a></li>\r\n	<li><a href=\"http://codex.wordpress.org/Hardening_WordPress#File_Permissions\">http://codex.wordpress.org/Hardening_WordPress#File_Permissions</a></li>\r\n</ul>','Wordpress general tricks','','inherit','closed','open','','200-revision-v1','','','2014-09-12 18:09:49','2014-09-12 18:09:49','',200,'http://localhost/200-revision-v1/',0,'revision','',0),(606,3,'2014-09-13 15:30:10','2014-09-13 15:30:10','<h4>Create the skeleton</h4>\r\n\r\nRun the command : <code>h2xs -AX -skip-exporter -n MyModule::Name</code>\r\nThis will create the usual folders, structure and also the most important file, <tt>Makefile.pl</tt>.\r\n\r\n<h4>Edit the Makefile.PL</h4>\r\n\r\nHere, we use <code>ExtUtils::MakeMaker</code>, which is really simple to use. \r\n\r\nThe file is composed of a simple function with named arguments. The most useful ones are:\r\n\r\n<table id=\"the_table\" class=\"table table-responsive\"> \r\n    <tr>\r\n        <td>NAME</td>\r\n        <td>The name of your module/script</td>\r\n    </tr>\r\n    <tr>\r\n        <td>VERSION/VERSION_FROM</td>\r\n        <td>The module\'s version, or the file containing the version informations.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PREREQ_PM</td>\r\n        <td>The dependencies, with their version number. Use 0 when in doubt.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PM</td>\r\n        <td>By default, the script will search for .pm file under the <tt>lib</tt> directory. In case you have some other scripts (.pl) or use a custom structure, it can be useful to manually list the files you want to include in your module, as well as where and under which name it must be installed. So, PM is a hash in the form <tt>source location / destination location</tt>.\r\n        <br />\r\n        For .pm files, use the variable <code>$(INST_LIB)</code>; for scripts, use <code>$(INST_BIN)</code>...\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td>MAN1PODS/MAN3PODS</td>\r\n        <td>In case the documentation is in separate(s) file(s), you can list them here. The keys are the files, the values the destionations in the blib directory. So, your entries will be of the form <code>somedoc.pod => \'blib/man1/someprogram.1</code></td>\r\n    </tr>\r\n\r\n</table>\r\n\r\n<h4>Make and install</h4>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nperl Makefile.PL # or ./Makefile.PL\r\nmake \r\n# check the content of the blib directory to be sure\r\n# the structure is as expected\r\nmake install\r\n</pre>\r\n\r\n<h2>A full example</h2>\r\n\r\n<pre class=\"prettyprint lang-perl\">\r\nuse 5.018000;\r\nuse ExtUtils::MakeMaker;\r\n# See lib/ExtUtils/MakeMaker.pm for details of how to influence\r\n# the contents of the Makefile that is written.\r\n\r\nWriteMakefile(\r\n    NAME              => \'EasyCmd\',\r\n\r\n    VERSION_FROM      => \'easypass.pl\', # finds $VERSION\r\n\r\n    PREREQ_PM         => {  # e.g., Module::Name => 1.1\r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Data::Dumper\"          => 0, \r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ReadKey\"         => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Cwd\"                   => 0, \r\n        \"Getopt::Long\"          => 0, \r\n        \"File::Spec::Functions\" => 0, \r\n        \"Clipboard\"             => 0, \r\n        \"Text::ParseWords\"      => 0, \r\n        \"JSON\"                  => 0, \r\n        \"Data::Dumper\"          => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ReadKey\"         => 0, \r\n        \"utf8\"                  => 0, \r\n    },\r\n\r\n\r\n    PM              => { \r\n        \'lib/DataContainer.pm\' => \'$(INST_LIB)/DataContainer.pm\',\r\n         \'easypass.pl\'         => \'$(INST_BIN)/easycmd\'\r\n    },\r\n\r\n    # PL_FILES => { \'easypass.pl\' => \'bin/easypass\'},\r\n\r\n      MAN1PODS     => {\r\n        \'easypass_doc.pod\'    => \'blib/man1/easycmd.1\'\r\n      },\r\n\r\n\r\n\r\n    ($] >= 5.005 ?     ## Add these new keywords supported since 5.005\r\n\r\n      (ABSTRACT_FROM  => \'easypass_doc.pod\', # retrieve abstract from module\r\n\r\n       AUTHOR         => \'Lucy Linder <lucy.derline@gmail.com>\') : ()),\r\n);\r\n</pre>\r\n<style>\r\n#the_table td:first-child{ font-family: \"Lucida Console\"; font-size: 0.9em;  }\r\n#the_table td {text-align: justify;}\r\n</style>','Perl makefile','','publish','closed','open','','perl-makefile','','','2014-09-13 15:30:26','2014-09-13 15:30:26','',0,'http://localhost/?p=606',0,'post','',0),(607,3,'2014-09-13 15:24:49','2014-09-13 15:24:49','<h4>Create the skeleton</h4>\r\n\r\nRun the command : <code>h2xs -AX -skip-exporter -n MyModule::Name</code>\r\nThis will create the usual folders, structure and also the most important file, <tt>Makefile.pl</tt>.\r\n\r\n<h4>Edit the Makefile.PL</h4>\r\n\r\nHere, we use <code>ExtUtils::MakeMaker</code>, which is really simple to use. \r\n\r\nThe file is composed of a simple function with named arguments. The most useful ones are:\r\n\r\n<table> \r\n    <tr>\r\n        <td>NAME</td>\r\n        <td>The name of your module/script</td>\r\n    </tr>\r\n    <tr>\r\n        <td>VERSION/VERSION_FROM</td>\r\n        <td>The module\'s version, or the file containing the version informations.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PREREQ_PM</td>\r\n        <td>The dependencies, with their version number. Use 0 when in doubt.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PM</td>\r\n        <td>By default, the script will search for .pm file under the <tt>lib</tt> directory. In case you have some other scripts (.pl) or use a custom structure, it can be useful to manually list the files you want to include in your module, as well as where and under which name it must be installed. So, PM is a hash in the form <tt>source location / destination location</tt>.\r\n        <br />\r\n        For .pm files, use the variable <code>$(INST_LIB)</code>; for scripts, use <code>$(INST_BIN)</code>...\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td>MAN1PODS/MAN3PODS</td>\r\n        <td>In case the documentation is in separate(s) file(s), you can list them here. The keys are the files, the values the destionations in the blib directory. So, your entries will be of the form <code>somedoc.pod => \'blib/man1/someprogram.1</code></td>\r\n    </tr>\r\n\r\n</table>\r\n\r\n<h4>Make and install</h4>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nperl Makefile.PL # or ./Makefile.PL\r\nmake \r\n# check the content of the blib directory to be sure\r\n# the structure is as expected\r\nmake install\r\n</pre>\r\n\r\n<h2>A full example</h2>\r\n\r\n<pre class=\"prettyprint lang-perl\">\r\nuse 5.018000;\r\nuse ExtUtils::MakeMaker;\r\n# See lib/ExtUtils/MakeMaker.pm for details of how to influence\r\n# the contents of the Makefile that is written.\r\n\r\nWriteMakefile(\r\n    NAME              => \'EasyCmd\',\r\n\r\n    VERSION_FROM      => \'easypass.pl\', # finds $VERSION\r\n\r\n    PREREQ_PM         => {  # e.g., Module::Name => 1.1\r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Data::Dumper\"          => 0, \r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ReadKey\"         => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Cwd\"                   => 0, \r\n        \"Getopt::Long\"          => 0, \r\n        \"File::Spec::Functions\" => 0, \r\n        \"Clipboard\"             => 0, \r\n        \"Text::ParseWords\"      => 0, \r\n        \"JSON\"                  => 0, \r\n        \"Data::Dumper\"          => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ReadKey\"         => 0, \r\n        \"utf8\"                  => 0, \r\n    },\r\n\r\n\r\n    PM              => { \r\n        \'lib/DataContainer.pm\' => \'$(INST_LIB)/DataContainer.pm\',\r\n         \'easypass.pl\'         => \'$(INST_BIN)/easycmd\'\r\n    },\r\n\r\n    # PL_FILES => { \'easypass.pl\' => \'bin/easypass\'},\r\n\r\n      MAN1PODS     => {\r\n        \'easypass_doc.pod\'    => \'blib/man1/easycmd.1\'\r\n      },\r\n\r\n\r\n\r\n    ($] >= 5.005 ?     ## Add these new keywords supported since 5.005\r\n\r\n      (ABSTRACT_FROM  => \'easypass_doc.pod\', # retrieve abstract from module\r\n\r\n       AUTHOR         => \'Lucy Linder <lucy.derline@gmail.com>\') : ()),\r\n);\r\n</pre>','Perl makefile','','inherit','closed','open','','606-revision-v1','','','2014-09-13 15:24:49','2014-09-13 15:24:49','',606,'http://localhost/606-revision-v1/',0,'revision','',0),(608,3,'2014-09-13 15:27:43','2014-09-13 15:27:43','<h4>Create the skeleton</h4>\r\n\r\nRun the command : <code>h2xs -AX -skip-exporter -n MyModule::Name</code>\r\nThis will create the usual folders, structure and also the most important file, <tt>Makefile.pl</tt>.\r\n\r\n<h4>Edit the Makefile.PL</h4>\r\n\r\nHere, we use <code>ExtUtils::MakeMaker</code>, which is really simple to use. \r\n\r\nThe file is composed of a simple function with named arguments. The most useful ones are:\r\n\r\n<table id=\"the_table\"> \r\n    <tr>\r\n        <td>NAME</td>\r\n        <td>The name of your module/script</td>\r\n    </tr>\r\n    <tr>\r\n        <td>VERSION/VERSION_FROM</td>\r\n        <td>The module\'s version, or the file containing the version informations.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PREREQ_PM</td>\r\n        <td>The dependencies, with their version number. Use 0 when in doubt.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PM</td>\r\n        <td>By default, the script will search for .pm file under the <tt>lib</tt> directory. In case you have some other scripts (.pl) or use a custom structure, it can be useful to manually list the files you want to include in your module, as well as where and under which name it must be installed. So, PM is a hash in the form <tt>source location / destination location</tt>.\r\n        <br />\r\n        For .pm files, use the variable <code>$(INST_LIB)</code>; for scripts, use <code>$(INST_BIN)</code>...\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td>MAN1PODS/MAN3PODS</td>\r\n        <td>In case the documentation is in separate(s) file(s), you can list them here. The keys are the files, the values the destionations in the blib directory. So, your entries will be of the form <code>somedoc.pod => \'blib/man1/someprogram.1</code></td>\r\n    </tr>\r\n\r\n</table>\r\n\r\n<h4>Make and install</h4>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nperl Makefile.PL # or ./Makefile.PL\r\nmake \r\n# check the content of the blib directory to be sure\r\n# the structure is as expected\r\nmake install\r\n</pre>\r\n\r\n<h2>A full example</h2>\r\n\r\n<pre class=\"prettyprint lang-perl\">\r\nuse 5.018000;\r\nuse ExtUtils::MakeMaker;\r\n# See lib/ExtUtils/MakeMaker.pm for details of how to influence\r\n# the contents of the Makefile that is written.\r\n\r\nWriteMakefile(\r\n    NAME              => \'EasyCmd\',\r\n\r\n    VERSION_FROM      => \'easypass.pl\', # finds $VERSION\r\n\r\n    PREREQ_PM         => {  # e.g., Module::Name => 1.1\r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Data::Dumper\"          => 0, \r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ReadKey\"         => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Cwd\"                   => 0, \r\n        \"Getopt::Long\"          => 0, \r\n        \"File::Spec::Functions\" => 0, \r\n        \"Clipboard\"             => 0, \r\n        \"Text::ParseWords\"      => 0, \r\n        \"JSON\"                  => 0, \r\n        \"Data::Dumper\"          => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ReadKey\"         => 0, \r\n        \"utf8\"                  => 0, \r\n    },\r\n\r\n\r\n    PM              => { \r\n        \'lib/DataContainer.pm\' => \'$(INST_LIB)/DataContainer.pm\',\r\n         \'easypass.pl\'         => \'$(INST_BIN)/easycmd\'\r\n    },\r\n\r\n    # PL_FILES => { \'easypass.pl\' => \'bin/easypass\'},\r\n\r\n      MAN1PODS     => {\r\n        \'easypass_doc.pod\'    => \'blib/man1/easycmd.1\'\r\n      },\r\n\r\n\r\n\r\n    ($] >= 5.005 ?     ## Add these new keywords supported since 5.005\r\n\r\n      (ABSTRACT_FROM  => \'easypass_doc.pod\', # retrieve abstract from module\r\n\r\n       AUTHOR         => \'Lucy Linder <lucy.derline@gmail.com>\') : ()),\r\n);\r\n</pre>\r\n<style>\r\n#the_table td:first-child{ font-family: \"Lucida Console\"; font-weight: bold; }\r\n</style>','Perl makefile','','inherit','closed','open','','606-revision-v1','','','2014-09-13 15:27:43','2014-09-13 15:27:43','',606,'http://localhost/606-revision-v1/',0,'revision','',0),(609,3,'2014-09-13 15:28:56','2014-09-13 15:28:56','<h4>Create the skeleton</h4>\r\n\r\nRun the command : <code>h2xs -AX -skip-exporter -n MyModule::Name</code>\r\nThis will create the usual folders, structure and also the most important file, <tt>Makefile.pl</tt>.\r\n\r\n<h4>Edit the Makefile.PL</h4>\r\n\r\nHere, we use <code>ExtUtils::MakeMaker</code>, which is really simple to use. \r\n\r\nThe file is composed of a simple function with named arguments. The most useful ones are:\r\n\r\n<table id=\"the_table\" class=\"table table-responsive\"> \r\n    <tr>\r\n        <td>NAME</td>\r\n        <td>The name of your module/script</td>\r\n    </tr>\r\n    <tr>\r\n        <td>VERSION/VERSION_FROM</td>\r\n        <td>The module\'s version, or the file containing the version informations.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PREREQ_PM</td>\r\n        <td>The dependencies, with their version number. Use 0 when in doubt.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PM</td>\r\n        <td>By default, the script will search for .pm file under the <tt>lib</tt> directory. In case you have some other scripts (.pl) or use a custom structure, it can be useful to manually list the files you want to include in your module, as well as where and under which name it must be installed. So, PM is a hash in the form <tt>source location / destination location</tt>.\r\n        <br />\r\n        For .pm files, use the variable <code>$(INST_LIB)</code>; for scripts, use <code>$(INST_BIN)</code>...\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td>MAN1PODS/MAN3PODS</td>\r\n        <td>In case the documentation is in separate(s) file(s), you can list them here. The keys are the files, the values the destionations in the blib directory. So, your entries will be of the form <code>somedoc.pod => \'blib/man1/someprogram.1</code></td>\r\n    </tr>\r\n\r\n</table>\r\n\r\n<h4>Make and install</h4>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nperl Makefile.PL # or ./Makefile.PL\r\nmake \r\n# check the content of the blib directory to be sure\r\n# the structure is as expected\r\nmake install\r\n</pre>\r\n\r\n<h2>A full example</h2>\r\n\r\n<pre class=\"prettyprint lang-perl\">\r\nuse 5.018000;\r\nuse ExtUtils::MakeMaker;\r\n# See lib/ExtUtils/MakeMaker.pm for details of how to influence\r\n# the contents of the Makefile that is written.\r\n\r\nWriteMakefile(\r\n    NAME              => \'EasyCmd\',\r\n\r\n    VERSION_FROM      => \'easypass.pl\', # finds $VERSION\r\n\r\n    PREREQ_PM         => {  # e.g., Module::Name => 1.1\r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Data::Dumper\"          => 0, \r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ReadKey\"         => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Cwd\"                   => 0, \r\n        \"Getopt::Long\"          => 0, \r\n        \"File::Spec::Functions\" => 0, \r\n        \"Clipboard\"             => 0, \r\n        \"Text::ParseWords\"      => 0, \r\n        \"JSON\"                  => 0, \r\n        \"Data::Dumper\"          => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ReadKey\"         => 0, \r\n        \"utf8\"                  => 0, \r\n    },\r\n\r\n\r\n    PM              => { \r\n        \'lib/DataContainer.pm\' => \'$(INST_LIB)/DataContainer.pm\',\r\n         \'easypass.pl\'         => \'$(INST_BIN)/easycmd\'\r\n    },\r\n\r\n    # PL_FILES => { \'easypass.pl\' => \'bin/easypass\'},\r\n\r\n      MAN1PODS     => {\r\n        \'easypass_doc.pod\'    => \'blib/man1/easycmd.1\'\r\n      },\r\n\r\n\r\n\r\n    ($] >= 5.005 ?     ## Add these new keywords supported since 5.005\r\n\r\n      (ABSTRACT_FROM  => \'easypass_doc.pod\', # retrieve abstract from module\r\n\r\n       AUTHOR         => \'Lucy Linder <lucy.derline@gmail.com>\') : ()),\r\n);\r\n</pre>\r\n<style>\r\n#the_table td:first-child{ font-family: \"Lucida Console\"; font-size: 0.9em;  }\r\n</style>','Perl makefile','','inherit','closed','open','','606-revision-v1','','','2014-09-13 15:28:56','2014-09-13 15:28:56','',606,'http://localhost/606-revision-v1/',0,'revision','',0),(610,3,'2014-09-13 15:29:56','2014-09-13 15:29:56','<h4>Create the skeleton</h4>\r\n\r\nRun the command : <code>h2xs -AX -skip-exporter -n MyModule::Name</code>\r\nThis will create the usual folders, structure and also the most important file, <tt>Makefile.pl</tt>.\r\n\r\n<h4>Edit the Makefile.PL</h4>\r\n\r\nHere, we use <code>ExtUtils::MakeMaker</code>, which is really simple to use. \r\n\r\nThe file is composed of a simple function with named arguments. The most useful ones are:\r\n\r\n<table id=\"the_table\" class=\"table table-responsive\"> \r\n    <tr>\r\n        <td>NAME</td>\r\n        <td>The name of your module/script</td>\r\n    </tr>\r\n    <tr>\r\n        <td>VERSION/VERSION_FROM</td>\r\n        <td>The module\'s version, or the file containing the version informations.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PREREQ_PM</td>\r\n        <td>The dependencies, with their version number. Use 0 when in doubt.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PM</td>\r\n        <td>By default, the script will search for .pm file under the <tt>lib</tt> directory. In case you have some other scripts (.pl) or use a custom structure, it can be useful to manually list the files you want to include in your module, as well as where and under which name it must be installed. So, PM is a hash in the form <tt>source location / destination location</tt>.\r\n        <br />\r\n        For .pm files, use the variable <code>$(INST_LIB)</code>; for scripts, use <code>$(INST_BIN)</code>...\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td>MAN1PODS/MAN3PODS</td>\r\n        <td>In case the documentation is in separate(s) file(s), you can list them here. The keys are the files, the values the destionations in the blib directory. So, your entries will be of the form <code>somedoc.pod => \'blib/man1/someprogram.1</code></td>\r\n    </tr>\r\n\r\n</table>\r\n\r\n<h4>Make and install</h4>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\nperl Makefile.PL # or ./Makefile.PL\r\nmake \r\n# check the content of the blib directory to be sure\r\n# the structure is as expected\r\nmake install\r\n</pre>\r\n\r\n<h2>A full example</h2>\r\n\r\n<pre class=\"prettyprint lang-perl\">\r\nuse 5.018000;\r\nuse ExtUtils::MakeMaker;\r\n# See lib/ExtUtils/MakeMaker.pm for details of how to influence\r\n# the contents of the Makefile that is written.\r\n\r\nWriteMakefile(\r\n    NAME              => \'EasyCmd\',\r\n\r\n    VERSION_FROM      => \'easypass.pl\', # finds $VERSION\r\n\r\n    PREREQ_PM         => {  # e.g., Module::Name => 1.1\r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Data::Dumper\"          => 0, \r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ReadKey\"         => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Cwd\"                   => 0, \r\n        \"Getopt::Long\"          => 0, \r\n        \"File::Spec::Functions\" => 0, \r\n        \"Clipboard\"             => 0, \r\n        \"Text::ParseWords\"      => 0, \r\n        \"JSON\"                  => 0, \r\n        \"Data::Dumper\"          => 0, \r\n        \"Term::ANSIColor\"       => 0, \r\n        \"Term::ReadLine\"        => 0, \r\n        \"Term::ReadKey\"         => 0, \r\n        \"utf8\"                  => 0, \r\n    },\r\n\r\n\r\n    PM              => { \r\n        \'lib/DataContainer.pm\' => \'$(INST_LIB)/DataContainer.pm\',\r\n         \'easypass.pl\'         => \'$(INST_BIN)/easycmd\'\r\n    },\r\n\r\n    # PL_FILES => { \'easypass.pl\' => \'bin/easypass\'},\r\n\r\n      MAN1PODS     => {\r\n        \'easypass_doc.pod\'    => \'blib/man1/easycmd.1\'\r\n      },\r\n\r\n\r\n\r\n    ($] >= 5.005 ?     ## Add these new keywords supported since 5.005\r\n\r\n      (ABSTRACT_FROM  => \'easypass_doc.pod\', # retrieve abstract from module\r\n\r\n       AUTHOR         => \'Lucy Linder <lucy.derline@gmail.com>\') : ()),\r\n);\r\n</pre>\r\n<style>\r\n#the_table td:first-child{ font-family: \"Lucida Console\"; font-size: 0.9em;  }\r\n#the_table td {text-align: justify;}\r\n</style>','Perl makefile','','inherit','closed','open','','606-revision-v1','','','2014-09-13 15:29:56','2014-09-13 15:29:56','',606,'http://localhost/606-revision-v1/',0,'revision','',0),(611,3,'2014-09-14 08:49:34','2014-09-14 08:49:34','<h2>Use the dollar sign instead of \'jQuery\'</h2>\r\nTwo solutions.\r\n<ul>\r\n	<li>Either you have a function inside a <code>jQuery(\'document\').ready</code> block, or</li>\r\n	<li>you need the $ sign somewhere else, like a named function</li>\r\n</ul>\r\nInside an anonymous function, you can simply pass the $ directly to the function:\r\n<pre class=\"prettyprint\">// pass the $ as an argument of the an. function\r\njQuery( document ).ready( function( $ ){\r\n		$(\'my-selector\').doStuff();\r\n	});\r\n});</pre>\r\nOtherwise, you can declare the $ variable and assign jQuery to it:\r\n<pre class=\"prettyprint\">function marvellousFunction(){\r\n    var $ = jQuery;\r\n// more code\r\n}</pre>\r\n<h2>Enqueue scripts and styles from a child theme</h2>\r\nSimply add the following in your <code>functions.php</code>:\r\n<pre class=\"prettyprint\">\r\n<?php\r\n	// CHILD_DIR = path the the child theme \r\n    define( \'CHILD_DIR\', get_stylesheet_directory_uri() );\r\n\r\nfunction nameofchildtheme_enqueue() {\r\n    // enqueue a stylesheet \r\n    wp_enqueue_style( \'bootstrap.css\', \r\n        CHILD_DIR . \'/css/bootstrap.css\' );\r\n    // script loaded AFTER jquery >= 1.0.0\r\n    wp_enqueue_script( \'bootstrap.min.js\', \r\n        CHILD_DIR . \'/js/bootstrap.js\', \r\n        array(\'jquery\'), \r\n        \'1.0.0\', true );\r\n    // script depending on both jquery and bootstrap \r\n    wp_enqueue_script(\'myutils\', \r\n        CHILD_DIR. \'/js/myutils.js\', \r\n        array( \'jquery\', \'bootstrap.min.js\' ) );\r\n}\r\n\r\n// register the hook\r\nadd_action( \'wp_enqueue_scripts\', \'nameofchildtheme_enqueue\' );\r\n?></pre>\r\n<h2 id=\"add-a-loginlogout-menu-item\">add a login/logout menu item</h2>\r\nFor that, we can use the filter hook <code>wp_nav_menu_items</code>.\r\n\r\nOpen your theme <code>function.php</code> and copy-paste the following:\r\n<pre class=\"prettyprint lang-php\">add_filter( \'wp_nav_menu_items\',\'wpsites_loginout_menu_link\' );\r\n\r\nfunction wpsites_loginout_menu_link( $menu ) { \r\n    $loginout = wp_loginout($_SERVER[\'REQUEST_URI\'], false );\r\n    $menu .= \'\r\n\r\n	<li>\' . $loginout . \'</li>\r\n\r\n\';\r\n    return $menu;\r\n}\r\n</pre>\r\nNote that based on your theme, you need to customize the li classes. For twenty-thirteen for example, we would have:\r\n<pre class=\"prettyprint lang-php\">$loginout = \'\r\n\r\n	<li class=\"nav-menu\" class=\"menu-item\">\' . \r\n                wp_loginout($_SERVER[\'REQUEST_URI\'], false ) . \'</li>\r\n\r\n\';\r\n</pre>\r\n<h2 id=\"use-sshsftp-to-update-your-wordpress-apache2\">Use ssh/sftp to update your wordpress (apache2)</h2>\r\n<ol>\r\n	<li>Ensure that apache2 has the <tt>ssh</tt> extension installed and enabled. If not:\r\n<pre class=\"prettyprint lang-text\">apt-get install libssh2-php\r\necho extension=ssh2.so | sudo tee -a /etc/php5/apache2/php.ini\r\nservice apache2 restart\r\n</pre>\r\n</li>\r\n	<li>Create an ssh key for your wordpress user\r\n<pre class=\"prettyprint lang-text\">sudo mkdir /home/wp-user/.ssh\r\nsudo chown wp-user:wp-user /home/wp-user/.ssh/\r\n\r\nsu wp-user\r\nssh-keygen -t rsa -b 4096\r\n</pre>\r\n</li>\r\n	<li>Add the correct permissions\r\n<pre class=\"prettyprint lang-text\">sudo chmod 0700 /home/wp-user/.ssh/\r\nsudo chown wp-user:www-data /home/wp-user/id_rsa*\r\nsudo chmod 0640 /home/wp-user/id_rsa*\r\n</pre>\r\n</li>\r\n	<li>add your user to the authorized keys\r\n<pre class=\"prettyprint lang-text\">cat /home/wp-user/.ssh/wp_rsa.pub >> /home/wp-user/.ssh/authorized_keys\r\n</pre>\r\n</li>\r\n</ol>\r\nNow, if you try to update wordpress, you will get the possibility to use ssh2. Note that I could only achieve the update from localhost (<tt>host=localhost, user=wp-user, password=, paths=/home/wp-user/.ssh/id_rda*</tt>).\r\n<h3 id=\"automatize-the-process\">Automatize the process</h3>\r\n<pre class=\"prettyprint lang-php\">define(\'FTP_PUBKEY\',\'/home/wp-user/.ssh/id_rsa.pub\');\r\ndefine(\'FTP_PRIKEY\',\'/home/wp-user/.ssh/id_rsa\');\r\ndefine(\'FTP_USER\',\'wp-user\');\r\ndefine(\'FTP_PASS\',\'\');\r\ndefine(\'FTP_HOST\',\'localhost\');\r\n</pre>\r\n<h3 id=\"a-word-about-permissions\">A word about permissions</h3>\r\nNormally, the wordpress files should be owned by the ftp/ssh user. In our case, we should have created a new user (wp-user), and chowned all the site content to him. Note that there is a security breach if you use sudo while logged-in as your user !!\r\n<h3 id=\"some-sources\">some sources</h3>\r\nSSH2:\r\n<ul>\r\n	<li><a href=\"http://www.jonathan.vc/2009/02/09/wordpress-install-upgrade-ssh/\">http://www.jonathan.vc/2009/02/09/wordpress-install-upgrade-ssh/</a></li>\r\n	<li><a href=\"http://www.htpcbeginner.com/enable-wordpress-ssh-access/\">http://www.htpcbeginner.com/enable-wordpress-ssh-access/</a></li>\r\n	<li><a href=\"http://code.tutsplus.com/articles/quick-tip-upgrade-your-wordpress-site-via-ssh--wp-27691\">http://code.tutsplus.com/articles/quick-tip-upgrade-your-wordpress-site-via-ssh–wp-27691</a></li>\r\n	<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-secure-updates-and-installations-in-wordpress-on-ubuntu\">https://www.digitalocean.com/community/tutorials/how-to-configure-secure-updates-and-installations-in-wordpress-on-ubuntu</a></li>\r\n</ul>\r\npermissions:\r\n<ul>\r\n	<li><a href=\"http://codex.wordpress.org/Changing_File_Permissions\">http://codex.wordpress.org/Changing_File_Permissions</a></li>\r\n	<li><a href=\"http://codex.wordpress.org/Hardening_WordPress#File_Permissions\">http://codex.wordpress.org/Hardening_WordPress#File_Permissions</a></li>\r\n</ul>\r\n\r\n\r\n<h2>Backup/restore database</h2>\r\n\r\n<pre class=\"prettyprint lang-text\">\r\n# backup db\r\nmysqldump -u <user> -p <dbname> > dbname.sql \r\n\r\n# restore db\r\n# if the database does not exist, create it before running\r\n# the following:\r\nmysql -u <user> -p <dbname> < dbname.sql \r\n</pre>','Wordpress general tricks','','inherit','closed','open','','200-revision-v1','','','2014-09-14 08:49:34','2014-09-14 08:49:34','',200,'http://localhost/200-revision-v1/',0,'revision','',0),(612,3,'2014-09-14 09:03:33','2014-09-14 09:03:33','<h2 id=\"download-and-install\">Download and install</h2>\r\n<ol>\r\n	<li>Add the repo:\r\n<pre class=\"prettyprint lang-text\">cd /tmp\r\nwget http://download.opensuse.org/repositories/isv:ownCloud:community/xUbuntu_14.04/Release.key\r\nsudo apt-key add - < Release.key sudo sh -c \"echo \'deb http://download.opensuse.org/repositories/isv:/ownCloud:/community/xUbuntu_14.04/ /\' >> /etc/apt/sources.list.d/owncloud.list\"</pre>\r\n</li>\r\n	<li>Update and install OwnCloud:\r\n<pre class=\"prettyprint lang-text\">sudo apt-get update\r\nsudo apt-get install owncloud</pre>\r\n</li>\r\n	<li>Install <code>maria-db</code> (MySQL fork) and use it instead of the regular <code>mysql</code>:\r\n<pre class=\"prettyprint lang-text\">sudo apt-get install mariadb-server</pre>\r\n</li>\r\n	<li>Create the database for OwnCloud:\r\n<pre class=\"prettyprint lang-text\">sudo mysql -u root -p\r\nCREATE DATABASE owncloud;\r\nGRANT ALL ON owncloud.* to \'owncloud\'@\'localhost\' IDENTIFIED BY \'database_password\';\r\nexit</pre>\r\n</li>\r\n	<li>Connect and setup</li>\r\n</ol>\r\nConnect to localhost/owncloud (ensure that apache2 is actually running), you should get a page with a login prompt.\r\n\r\nClick on <em>Storage and database</em>, select MariaDB and fill the form with what you did on the previous step (db name and so forth). Then, click <em>Finish setup</em>.\r\n\r\nEverything should work out of the box !\r\n<h2 id=\"secure-owncloud\">Secure OwnCloud</h2>\r\n<h3 id=\"automatically-install-security-updates-on-ubuntu\">Automatically install security updates on Ubuntu</h3>\r\nType the following in a terminal:\r\n<pre class=\"prettyprint lang-text\">sudo dpkg-reconfigure -plow unattended-upgrades</pre>\r\nSee <a href=\"http://www.rojtberg.net/711/secure-owncloud-server/\">this link</a> for more information.\r\n<h3 id=\"secure-apache-error-pages\">Secure Apache - error pages</h3>\r\n<h3 id=\"setup-ssl-https-for-owncloud\">Setup ssl (https) for OwnCloud</h3>\r\nFirst, create a self-signed certificate:\r\n<pre class=\"prettyprint lang-text\">openssl req -new -sha256 -x509 -nodes -days 365 -out your.website.net.pem -keyout your.website.net.key</pre>\r\n(I put mine in <code>/etc/apache2/self-certs</code>, with an ownership of <code>root:www-data</code>).\r\n\r\nThen, reference the two files in the apache config by editing <code>/etc/apache2/sites-available/default-ssl.conf</code>:\r\n<pre class=\"prettyprint lang-text\">SSLCertificateFile    /path/to/your.website.net.pem\r\nSSLCertificateKeyFile /path/to/your.website.net.key</pre>\r\nYou can also add the following lines to strengthen the security of SSL:\r\n<pre class=\"prettyprint lang-text\">SSLProtocol all -SSLv2 -SSLv3\r\nSSLCompression off\r\nSSLHonorCipherOrder On\r\nSSLCipherSuite EECDH+AESGCM:EECDH+AES:EDH+AES</pre>\r\n<blockquote>The rationale behind this suggestion is\r\n<ul>\r\n	<li>Allow TLS 1.0 for compability with mobile apps</li>\r\n	<li>Disable SSL compression to mitigate the CRIME attack</li>\r\n	<li>always use Diffie Hellman(DH) key exchange(Kx) for forward secrecy</li>\r\n	<li>prefer Elliptic Curve Diffie Hellman (ECDH) for performance</li>\r\n	<li>always use AES for symmetric encryption</li>\r\n	<li>prefer AES GCM mode for security and performance</li>\r\n</ul>\r\n<a href=\"http://www.rojtberg.net/687/secure-owncloud-setup/\">Source</a>.</blockquote>\r\nEnable the ssl module of Apache:\r\n<pre class=\"prettyprint lang-text\">sudo a2enmod ssl\r\nsudo a2ensite default-ssl\r\nsudo service apache2 reload</pre>\r\n<a href=\"http://doc.owncloud.org/server/6.0/admin_manual/installation/installation_source.html\">Source</a>\r\n<h3 id=\"force-apache-to-use-https\">Force Apache to use HTTPS</h3>\r\nEdit <code>/etc/apache2/sites-available/00-default.conf</code> and change the virtualhost:*80. It should look like this:\r\n<pre class=\"prettyprint lang-text\">    ServerAdmin webmaster@localhost\r\n    DocumentRoot /var/www/owncloud # default page\r\n    RewriteEngine on\r\n    ReWriteCond %{SERVER_PORT} !^443$\r\n        RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [NC,R,L]\r\n\r\n    ErrorLog ${APACHE_LOG_DIR}/error.log\r\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\r\n\r\n    #Include conf-available/serve-cgi-bin.conf</pre>\r\nDon’t forget to restart the server with <code>sudo service apache2 restart</code>.\r\n\r\nIf you use <strong>port forwarding</strong>, don\'t forget to set the redirected port to 443 instead of 80.','Install and configure OwnCloud 7 (Ubuntu 14.04)','','inherit','closed','open','','557-revision-v1','','','2014-09-14 09:03:33','2014-09-14 09:03:33','',557,'http://localhost/557-revision-v1/',0,'revision','',0),(613,3,'2014-09-14 12:48:11','2014-09-14 12:48:11','Assuming you already created and formatted a boot partition (if you use LVM, you can safely use gparted from an ubuntu live cd, it works great ^^), here are the steps to follow.\r\n\r\nNote: I assume you use an Ubuntu Live CD.\r\n<ol>\r\n    <li>Mount your root partition and your boot partition, for example in <tt>/mnt/root</tt> and <tt>/mnt/boot</tt>.</li>\r\n    <li>Copy all the files from <tt>root/boot</tt> to <tt>boot</tt>.</li>\r\n    <li>Remove all the files from the <tt>root/boot</tt> folder.</li>\r\n    <li>Umount <tt>boot</tt> and remount it under <tt>/mnt/root/boot</tt>.</li>\r\n    <li>Mount the different volatile directories, which will be necessary to update grub:\r\n<pre class=\"prettyprint lang-text\">\r\nfor i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt/root$i; done\r\n</pre>\r\n    </li>\r\n    <li>Chroot into your system: <code>chroot /mnt/root</code>.</li>\r\n    <li>Update your fstab (<tt>/etc/fstab</tt>):\r\n<pre class=\"prettyprint lang-text\">\r\nblkid /dev/sda1 # get the UUID of the boot partition\r\nvim /etc/fstab\r\n## add the following line:\r\nUUID=<boot partition id>  ext3   /boot  defaults  0 0\r\n</pre>\r\n    </li>\r\n    <li>Update grub:\r\n<pre class=\"prettyprint lang-text\">\r\ngrub-install --recheck /dev/sda\r\ngrub-mkconfig -o /boot/grub/grub.cfg\r\n</pre>\r\n    </li>\r\n    <li>Exit the chroot environment (<tt>exit</tt>) and umount everything:\r\n<pre class=\"prettyprint lang-text\">\r\nfor i in /dev/pts /dev /proc /sys /run; do sudo mount -B $i /mnt/root$i; done\r\numount /mnt/root/boot\r\numount /mnt/root\r\n</pre>\r\n    </li>\r\n    <li>Reboot and enjoy</li>\r\n</ol>','Separate boot partition after install','','publish','closed','open','','separate-boot-partition-after-install','','','2014-09-14 12:48:11','2014-09-14 12:48:11','',0,'http://localhost/?p=613',0,'post','',0),(614,3,'2014-09-14 12:45:31','2014-09-14 12:45:31','Assuming you already created and formatted a boot partition (if you use LVM, you can safely use gparted from an ubuntu live cd, it works great ^^), here are the steps to follow.\r\n\r\nNote: I assume you use an Ubuntu Live CD.\r\n<ol>\r\n    <li>Mount your root partition and your boot partition, for example in <tt>/mnt/root</tt> and <tt>/mnt/boot</tt>.</li>\r\n    <li>Copy all the files from <tt>root/boot</tt> to <tt>boot</tt>.</li>\r\n    <li>Remove or rename the now unused <tt>root/boot</tt> folder.</li>\r\n    <li>Umount <tt>boot</tt> and remount it under <tt>/mnt/root/boot</tt>.</li>\r\n    <li>Mount the different volatile directories, which will be necessary to update grub:\r\n<pre class=\"prettyprint lang-text\">\r\nfor i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt/root$i; done\r\n</pre>\r\n    </li>\r\n    <li>Chroot into your system: <code>chroot /mnt/root</code>.</li>\r\n    <li>Update your fstab (<tt>root/etc/fstab</tt>):\r\n<pre class=\"prettyprint lang-text\">\r\nblkid /dev/sda1 # get the UUID of the boot partition\r\nvim /etc/fstab\r\n## add the following line:\r\n# UUID=<boot partition id>  ext3   /boot  defaults  0 0\r\n</pre>\r\n    </li>\r\n    <li>Update grub:\r\n<pre class=\"prettyprint lang-text\">\r\ngrub-install --recheck /dev/sda\r\ngrub-mkconfig -o /boot/grub/grub.cfg\r\n</pre>\r\n    </li>\r\n    <li>Exit the chroot environment (<tt>exit</tt>) and umount everything:\r\n<pre class=\"prettyprint lang-text\">\r\nfor i in /dev/pts /dev /proc /sys /run; do sudo mount -B $i /mnt/root$i; done\r\numount /mnt/root/boot\r\numount /mnt/root\r\n</pre>\r\n    </li>\r\n    <li>Reboot and enjoy</li>\r\n</ol>\r\n','Separate boot partition after install','','inherit','closed','open','','613-revision-v1','','','2014-09-14 12:45:31','2014-09-14 12:45:31','',613,'http://localhost/613-revision-v1/',0,'revision','',0),(615,3,'2014-09-14 12:47:45','2014-09-14 12:47:45','Assuming you already created and formatted a boot partition (if you use LVM, you can safely use gparted from an ubuntu live cd, it works great ^^), here are the steps to follow.\r\n\r\nNote: I assume you use an Ubuntu Live CD.\r\n<ol>\r\n    <li>Mount your root partition and your boot partition, for example in <tt>/mnt/root</tt> and <tt>/mnt/boot</tt>.</li>\r\n    <li>Copy all the files from <tt>root/boot</tt> to <tt>boot</tt>.</li>\r\n    <li>Remove all the files from the <tt>root/boot</tt> folder.</li>\r\n    <li>Umount <tt>boot</tt> and remount it under <tt>/mnt/root/boot</tt>.</li>\r\n    <li>Mount the different volatile directories, which will be necessary to update grub:\r\n<pre class=\"prettyprint lang-text\">\r\nfor i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt/root$i; done\r\n</pre>\r\n    </li>\r\n    <li>Chroot into your system: <code>chroot /mnt/root</code>.</li>\r\n    <li>Update your fstab (<tt>/etc/fstab</tt>):\r\n<pre class=\"prettyprint lang-text\">\r\nblkid /dev/sda1 # get the UUID of the boot partition\r\nvim /etc/fstab\r\n## add the following line:\r\nUUID=<boot partition id>  ext3   /boot  defaults  0 0\r\n</pre>\r\n    </li>\r\n    <li>Update grub:\r\n<pre class=\"prettyprint lang-text\">\r\ngrub-install --recheck /dev/sda\r\ngrub-mkconfig -o /boot/grub/grub.cfg\r\n</pre>\r\n    </li>\r\n    <li>Exit the chroot environment (<tt>exit</tt>) and umount everything:\r\n<pre class=\"prettyprint lang-text\">\r\nfor i in /dev/pts /dev /proc /sys /run; do sudo mount -B $i /mnt/root$i; done\r\numount /mnt/root/boot\r\numount /mnt/root\r\n</pre>\r\n    </li>\r\n    <li>Reboot and enjoy</li>\r\n</ol>','Separate boot partition after install','','inherit','closed','open','','613-revision-v1','','','2014-09-14 12:47:45','2014-09-14 12:47:45','',613,'http://localhost/613-revision-v1/',0,'revision','',0),(616,3,'2014-09-14 12:49:37','2014-09-14 12:49:37','<h2 id=\"preliminary-notes\">Preliminary notes</h2>\r\nThis procedure was tested on a 500GB sdd containing one ext4 partition for the system. The /home and /opt directories are on other disks and no swap partition is used. The linux system to migrate is archlinux 3.16.1, located on <tt>/dev/sda</tt>.\r\n<h2 id=\"backing-up-the-system\">Backing up the system</h2>\r\nSince the root filesystem is only 16GB out of a 500GB partition, it is recommended to use tar.\r\n<ol>\r\n	<li>boot on a live usb</li>\r\n	<li>mount the root filesystem: <code>sudo mkdir /mnt/rootfs &amp;&amp; sudo mount -t ext4 /dev/sda /mnt/rootfs</code></li>\r\n	<li>do the backup:\r\n<pre class=\"prettyprint lang-text\">cd /mnt/rootfs\r\ntar cvzpf rootfs.tar.gz .</pre>\r\nNote the <tt>-p</tt> option: it <em>keeps the original permissions</em>, something not to forget!</li>\r\n</ol>\r\n<h2 id=\"installing-lvm-and-recreating-the-root-partition\">Installing lvm and recreating the root partition</h2>\r\n<ol>\r\n	<li>Open gparted, select /dev/sda and click on <tt>device &gt; create partition table...</tt> to create a gpt partition table. It will also <strong>format the entire disk</strong>.</li>\r\n	<li>We will use <code>gdisk</code> to create two partitions:\r\n<ul>\r\n	<li>a <em>BIOS boot partition</em>, used by GRUB to embed its core.img in the absence of post-MBR gap in GPT partitioned systems</li>\r\n	<li>the actual lvm partition</li>\r\n</ul>\r\nOpen a terminal and type:\r\n<pre class=\"prettyprint lang-text\">gdisk\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst asector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): ef02\r\nChanged type of partition to \'BIOS boot partition\'\r\n\r\nCommand (? for help): n\r\nPartition number (1-128, default 1): \r\nFirst sector (34-15974366, default = 36) or {+-}size{KMGTP}: \r\nLast sector (36-15974366, default = 15974366) or {+-}size{KMGTP}: +1007k\r\nCurrent type is \'Linux filesystem\'\r\nHex code or GUID (L to show codes, Enter = 8300): 8e00\r\nChanged type of partition to \'Linux LVM\'\r\n\r\nCommand (? for help): p\r\nNumber  Start (sector)    End (sector)  Size       Code  Name\r\n   1              36            2049   1007.0 KiB  EF02  BIOS boot partition\r\n   2            2052        15974366   7.6 GiB     8E00  Linux LVM\r\n\r\nCommand (? for help): w\r\n\r\nCommand (? for help): q</pre>\r\n</li>\r\n	<li>create the root partition on lvm\r\n<pre class=\"prettyprint lang-text\">sudo su\r\npvcreate /dev/sda2\r\nvgcreate vol-name /dev/sda2\r\nlgcreate -L 30G -n lroot vol-name \r\n\r\npvs\r\nlvs</pre>\r\n</li>\r\n	<li>format the root partition and copy back the system\r\n<pre class=\"prettyprint lang-text\">mkfs.ext4 /dev/mapper/vol-name-lroot\r\nmount /dev/mapper/vol-name-lroot /mnt\r\ncd /mnt\r\ntar xpvzf rootfs.tar .</pre>\r\n</li>\r\n</ol>\r\n<h2 id=\"repairing-the-system\">Repairing the system</h2>\r\nMount your partition (if not already done).\r\n<h3 id=\"update-fstab\">Update fstab</h3>\r\n<pre class=\"prettyprint lang-text\">sudo blkid /dev/mapper/volname-lroot\r\n/dev/sda2: LABEL=\"rootfs\" UUID=\"102adbe7-87c1-4b5a-80e2-97013851d790\" TYPE=\"ext4\" PARTUUID=\"c349be14-9052-407f-b1ce-c419bd20704f\"</pre>\r\nThen, edit <code>/mnt/etc/fstab</code> and replace the UUID of “/” by the one above.\r\n<h3 id=\"recreate-the-boot-image\">Recreate the boot image</h3>\r\nFirst, chroot into your system. With an archlinux Live USB, use <code>arch-chroot</code>.\r\n\r\n<hr />\r\n\r\n<h6 id=\"chroot-using-an-ubuntu-live-usb\">chroot using an Ubuntu Live USB</h6>\r\nBefore chroot, you need to manually mount your virtual filesystem, thing that the <code>arch-chroot</code> command does automatically for you:\r\n<pre class=\"prettyprint lang-text\"># Mount root partition:\r\nsudo mount /dev/sdXY /mnt # /dev/sdXY is your root partition, e.g. /dev/sda1\r\n\r\n# If you have a separate boot partition you\'ll need to mount it also:\r\nsudo mount /dev/sdYY /mnt/boot\r\n\r\n# Mount your virtual filesystems:\r\nfor i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt$i; done\r\n\r\n# Chroot\r\nsudo chroot /mnt</pre>\r\n\r\n<hr />\r\n\r\nOnce chrooted:\r\n<ol>\r\n	<li>Add lvm hook to mkinitcpio.conf. Edit <code>/etc/mkinitcpio.conf</code> and make sure the udev and lvm2 mkinitcpio hooks are enabled:\r\n<pre class=\"prettyprint lang-text\">HOOKS=\"base udev ... block lvm2 filesystems\"</pre>\r\n</li>\r\n	<li>(<em>I am not sure this step is useful, but anyway</em>) edit <code>/etc/rc.conf</code> and add:\r\n<pre class=\"prettyprint lang-text\">USELVM=\"yes\"</pre>\r\n</li>\r\n	<li>recreate the linux.img and linux-fallback.img:\r\n<pre class=\"prettyprint lang-text\">cd /boot\r\nmkinitcpio -p linux</pre>\r\nThe -p switch specifies a preset to utilize; most kernel packages provide a related mkinitcpio preset file, found in /etc/mkinitcpio.d (e.g. /etc/mkinitcpio.d/linux.preset for linux). A preset is a predefined definition of how to create an initramfs image instead of specifying the configuration file and output file every time.</li>\r\n</ol>\r\n<h3 id=\"repair-grub\">Repair GRUB</h3>\r\n<pre class=\"prettyprint lang-text\">grub-install --recheck /dev/sda\r\ngrub-mkconfig -o /boot/grub/grub.cfg</pre>\r\n<strong>Note</strong>: if you get errors like\r\n<pre class=\"prettyprint lang-text\">WARNING: Failed to connect to lvmetad: No such file or directory. Falling back to internal scanning.\r\n/run/lvm/lvmetad.socket: connect failed: No such file or directory\r\n...</pre>\r\ndon’t freak out, this won’t prevent your system to boot normally.\r\n<h3 id=\"test-it\">Test it</h3>\r\nNow, reboot. Everything should run smoothly. If so, don’t forget to take a screenshot of your root filesystem using:\r\n<pre class=\"prettyprint lang-text\">lvcreate -s -n sys-snap -L 3g vol-name/lroot</pre>','Migrate rootfs to LVM','','inherit','closed','open','','574-revision-v1','','','2014-09-14 12:49:37','2014-09-14 12:49:37','',574,'http://localhost/574-revision-v1/',0,'revision','',0),(617,3,'2014-09-22 06:14:13','2014-09-22 06:14:13','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h2>Installing DAVmail</h2>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint lang-sh\">sudo dpkg -i devmail.deb\r\nsudo apt-get install -f\r\ndavmail &</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h2>Configuring thunderbird</h2>\r\n<ol>\r\n	<li>create a new account: <i>Edit > Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h2>Adding the address book</h2>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h2>Adding the calendar</h2>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h2>Init script for DavMail</h2>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a href=\"http://error418.no-ip.info/mywiki/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n\r\n\r\n<pre class=\"lang-sh\" id=\"lala\"></pre>\r\n\r\n\r\n<script type=\"text/javascript\">// <![CDATA[\r\ndisplay_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n// ]]></script>\r\n\r\n<style type=\"text/css\"><!--\r\ntable.small tr td{ font-size: 10pt; text-align: center; }\r\n--></style>','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-revision-v1','','','2014-09-22 06:14:13','2014-09-22 06:14:13','',103,'http://localhost/103-revision-v1/',0,'revision','',0),(618,3,'2014-09-22 06:24:27','2014-09-22 06:24:27','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h2>Installing DAVmail</h2>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint lang-sh\">sudo dpkg -i devmail.deb\r\nsudo apt-get install -f\r\ndavmail &</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h2>Configuring thunderbird</h2>\r\n<ol>\r\n	<li>create a new account: <i>Edit > Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h2>Adding the address book</h2>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h2>Adding the calendar</h2>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h2>Init script for DavMail</h2>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a class=\"add-site-prefix\" href=\"/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n\r\n\r\n\r\n<pre class=\"lang-sh\" id=\"lala\"></pre>\r\n\r\n\r\n\r\n<script type=\"text/javascript\">// <![CDATA[\r\ndisplay_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n// ]]></script>\r\n\r\n<style type=\"text/css\"><!--\r\ntable.small tr td{ font-size: 10pt; text-align: center; }\r\n--></style>','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-revision-v1','','','2014-09-22 06:24:27','2014-09-22 06:24:27','',103,'http://localhost/103-revision-v1/',0,'revision','',0),(619,3,'2014-09-22 06:29:05','2014-09-22 06:29:05','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h2>Installing DAVmail</h2>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint lang-sh\">sudo dpkg -i devmail.deb\r\nsudo apt-get install -f\r\ndavmail &</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h2>Configuring thunderbird</h2>\r\n<ol>\r\n	<li>create a new account: <i>Edit > Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h2>Adding the address book</h2>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h2>Adding the calendar</h2>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h2>Init script for DavMail</h2>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a class=\"add-site-prefix\" href=\"/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n\r\n\r\n\r\n\r\n<pre class=\"lang-sh\" id=\"lala\">\r\n[display_file path\"/mywiki/wp-content/uploads/2013/12/davmail.txt\"]\r\n</pre>\r\n\r\n\r\n<script type=\"text/javascript\">// <![CDATA[\r\ndisplay_file_content(\"/mywiki/wp-content/uploads/2013/12/davmail.txt\", \"#lala\");\r\n// ]]></script>\r\n\r\n<style type=\"text/css\"><!--\r\ntable.small tr td{ font-size: 10pt; text-align: center; }\r\n--></style>','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-revision-v1','','','2014-09-22 06:29:05','2014-09-22 06:29:05','',103,'http://localhost/103-revision-v1/',0,'revision','',0),(620,3,'2014-09-22 06:33:53','2014-09-22 06:33:53','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h2>Installing DAVmail</h2>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint lang-sh\">sudo dpkg -i devmail.deb\r\nsudo apt-get install -f\r\ndavmail &</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h2>Configuring thunderbird</h2>\r\n<ol>\r\n	<li>create a new account: <i>Edit > Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h2>Adding the address book</h2>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h2>Adding the calendar</h2>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h2>Init script for DavMail</h2>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a class=\"add-site-prefix\" href=\"/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n\r\n\r\n\r\n\r\n\r\n<pre class=\"lang-sh\" id=\"lala\">\r\n[display_file path\"/wp-content/uploads/2013/12/davmail.txt\"]\r\n</pre>\r\n\r\n\r\n<style type=\"text/css\"><!--\r\ntable.small tr td{ font-size: 10pt; text-align: center; }\r\n--></style>','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-revision-v1','','','2014-09-22 06:33:53','2014-09-22 06:33:53','',103,'http://localhost/103-revision-v1/',0,'revision','',0),(622,3,'2014-09-22 06:37:07','2014-09-22 06:37:07','Using thunderbird instead of the common webmail of the hefr is really convenient, except when we need to consult the address book or the calendar. Here, no other possibility that to open the web browser. Or is it ?\r\n\r\nTo be able to use the owa server exchange from Thunderbird, we need a middleware: DAVmail. Here is the setup procedure.\r\n<h2>Installing DAVmail</h2>\r\n<ol>\r\n	<li>go to the <a href=\"http://sourceforge.net/projects/davmail/files/davmail/\">davmail sourceforge page</a> and download the last deb package</li>\r\n	<li>install and start it:\r\n<pre class=\"prettyprint lang-sh\">sudo dpkg -i devmail.deb\r\nsudo apt-get install -f\r\ndavmail &</pre>\r\n</li>\r\n	<li>in the window that appears, change only the URL OWA (Exchange) to\r\n<code>https://webmail.hefr.ch/owa</code></li>\r\n</ol>\r\nTo be sure it works, try <code>sudo netstat -tulpn</code>, you should see a java program listening on the 1143 port.\r\n<h2>Configuring thunderbird</h2>\r\n<ol>\r\n	<li>create a new account: <i>Edit > Account Settings &gt; Account Actions &gt; Add new mail account</i>\r\n<ul>\r\n	<li>In the first window, give your edut.hefr email address and password</li>\r\n	<li>In the second window, click on <i>manual config</i> and change the following:\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Incoming</td>\r\n<td>IMAP</td>\r\n<td>localhost</td>\r\n<td>1143</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n<tr>\r\n<td>Outgoing</td>\r\n<td>SMTP</td>\r\n<td>localhost</td>\r\n<td>1025</td>\r\n<td>none</td>\r\n<td>normalpassword</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>click on re-test. If the configuration seems incorrect, check that davmail is running.</li>\r\n	<li>if a security popup arise, don\'t panic: the credentials are transmitted unencrypted between davmail and thunderbird (local only),\r\nbut the rest of the communications are encrypted via https</li>\r\n</ol>\r\n<h2>Adding the address book</h2>\r\n<ol>\r\n	<li>add a new LDAP directory: <i>Tools &gt; Address Book &gt; File... &gt; New LDAP directory</i></li>\r\n	<li>Fill the following fields:\r\n<table class=\"small\">\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Hostname</td>\r\n<td>Base DN</td>\r\n<td>Port number</td>\r\n<td>Bind DN</td>\r\n</tr>\r\n<tr>\r\n<td>whatever you want</td>\r\n<td>localhost</td>\r\n<td>OU=people</td>\r\n<td>1389</td>\r\n<td><i>firstname.surname</i></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n	<li>Test it: try to type a name in the search field</li>\r\n</ol>\r\n<div class=\"alert alert-warning\"><strong>Warning! </strong>the contacts do not appear in the list, due to a bug of thunderbird, but normally, the names appear after entering a search string and the completion works perfectly if you thought of checking <i>Directory server</i> in the <i>Edit &gt; Preferences &gt; Composition &gt; Address autocompletion</i> settings.</div>\r\n<!--h2>Adding the calendar</h2>\r\n<ol>\r\n	<li>add a new calendar: <i>File.., &gt;  &gt; Composition  &gt; Address autocompletion</i></li>\r\n	<li></li>\r\n</ol-->\r\n<h2>Init script for DavMail</h2>\r\nTo make it work as a daemon, just copy the following file to the <code>/etc/init.d</code> directory, ensure that it has the right permissions (755) and run <code>sudo update-rc.d davmail defaults</code>.\r\n\r\n<a class=\"add-site-prefix\" href=\"/wp-content/uploads/2013/12/davmail.txt\">view raw file</a>\r\n<script type=\"text/javascript\" src=\"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\"></script>\r\n\r\n<pre class=\"prettyprint lang-sh\" id=\"lala\">\r\n[display_file path=\"/wp-content/uploads/2013/12/davmail.txt\"]\r\n</pre>\r\n<style type=\"text/css\"><!--\r\ntable.small tr td{ font-size: 10pt; text-align: center; }\r\n--></style>','Microsoft Exchange through Thunderbird','','inherit','closed','open','','103-revision-v1','','','2014-09-22 06:37:07','2014-09-22 06:37:07','',103,'http://localhost/103-revision-v1/',0,'revision','',0),(623,3,'2014-12-17 17:12:23','2014-12-17 17:12:23','<h2>Opening files with a system call</h2>\r\n<pre class=\"prettyprint\">#include \r\n#include \r\n#include \r\n\r\nint main(){\r\n    int i = 0;\r\n    for(; i &lt; 2; i++)\r\n    {\r\n        int f = open(\"f\", O_WRONLY|O_CREAT, 0666);\r\n        write(f, \"aaa\", 3);\r\n        close(f);\r\n        int f2 = open(\"f\", O_WRONLY|O_APPEND, 0666);\r\n        write(f2, \"bb\",2);\r\n        close(f2);\r\n    }\r\n}\r\n</pre>\r\nAt the end of this script, the result of\r\n<code>cat </code>will be <tt>aaabbbb</tt> and note <tt>aaabb</tt>! Why ? simply because the flag O_CREATE will create the file if not exists and place the cursor to the beginning. O_APPEND will place the cursor at the end. The content of the file is not erased !\r\n\r\nTo really create or overwrite a file (like the shell behavior of &gt;), use the flags <code>O_CREAT|O_TRUNC</code>.\r\n<h2>The strange behavior of recursive main</h2>\r\nThe code:\r\n<pre class=\"prettyprint\">int main() { \r\n    main(); \r\n    return 0;\r\n}\r\n</pre>\r\nshould result in a stack overflow error. But the system will output a segfault... Why ? No idea!\r\n\r\nAn interesting thing is that the version:\r\n<pre class=\"prettyprint\">int main() { \r\n    return main(); \r\n}\r\n</pre>\r\nWill be a simple infinite loop. The reason is that it is a tail recursion, so the compiler will optimize it with a loop.','C misc notes','','publish','closed','open','','c-misc-notes','','','2014-12-17 17:19:15','2014-12-17 17:19:15','',0,'http://localhost/?p=623',0,'post','',0),(624,3,'2014-12-17 17:07:30','2014-12-17 17:07:30','Strings in C are kind of a pain in the ass.\r\n<blockquote>Char pointers defined with an initialization value [may] go into a read-only segment</blockquote>\r\nconsider the following:\r\n<pre class=\"prettyprint\">    char * s1 = \"Hello Word\";       \\\\1  \r\n    const char * s2 = \"Hello Word\"; \\\\2\r\n\r\n    char s3[] = \"Hello Word\"; \\\\3\r\n    char s4[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\n\' }; \\\\4</pre>\r\nIn the first case, s1 is a [modifiable] pointer to a <strong>read-only</strong> string literal / array of char: we can do <code>s1 = \"another string\";</code>, but <code>s1[1] = \'a\'</code> will result in an undefined behavior: segfault or can work 50% of the time. So 1 and 2 are equivalent.\r\n\r\nThe 3 and 4 initialisations are equivalent: we create an array of char, not a pointer, which means that the adress it references is <strong>non-modifiable</strong>: indeed, an array can be thought of as a <i>non-modifiable pointer to a specific block of memory</i>.\r\n\r\nThe difference between a pointer and an array is important if we plan to use the variable in a static context. Consider the following:\r\n<pre class=\"prettyprint\">// 1\r\nchar *hi = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};\r\n\r\n// 2\r\nchar hi[] = \"hello\";\r\nchar *array[3] = \r\n{\r\n    hi,\r\n    \"world\",\r\n    \"there.\"\r\n};</pre>\r\nThe first block triggers an <code>error: initializer element is not constant</code>, while the second works as expected.\r\n<h2>Initializing modifiable strings</h2>\r\nIn C, litterals are read-only. If we really want a modifiable string, two choices: either use malloc and then sprintf or such, or use strdup or asnprintf which take care of the malloc part for us. In either case, we should think of freeing the string when we are done.\r\n<pre class=\"prettyprint\">char * modifiable; // easiest way \r\nmodifiable = strdup(\"A litteral\");</pre>\r\nIf you are worried that you don\'t have strdup available, add\r\n<code>AC_CHECK_FUNCS([asprintf strdup])</code> in your configure.ac and use this block:\r\n<pre class=\"prettyprint\">#ifndef HAVE_STRDUP\r\nchar *strdup( char const * in ){\r\n    if(!in) return NULL;\r\n    char * out;\r\n    asprintf( &amp;out, \"%s\", in );\r\n    return out;\r\n}\r\n#endif</pre>\r\n\r\n','C strings ','','inherit','closed','open','','243-revision-v1','','','2014-12-17 17:07:30','2014-12-17 17:07:30','',243,'http://localhost/243-revision-v1/',0,'revision','',0),(625,3,'2014-12-17 17:12:23','2014-12-17 17:12:23','<h2>Opening files with a system call</h2>\r\n<pre class=\"prettyprint\">#include \r\n#include \r\n#include \r\n\r\nint main(){\r\n    int i = 0;\r\n    for(; i &lt; 2; i++)\r\n    {\r\n        int f = open(\"f\", O_WRONLY|O_CREAT, 0666);\r\n        write(f, \"aaa\", 3);\r\n        close(f);\r\n        int f2 = open(\"f\", O_WRONLY|O_APPEND, 0666);\r\n        write(f2, \"bb\",2);\r\n        close(f2);\r\n    }\r\n}\r\n</pre>\r\nAt the end of this script, the result of\r\n<code>cat </code>will be <tt>aaabbbb</tt> and note <tt>aaabb</tt>! Why ? simply because the flag O_CREATE will create the file if not exists and place the cursor to the beginning. O_APPEND will place the cursor at the end. The content of the file is not erased !\r\n\r\nTo really create or overwrite a file (like the shell behavior of &gt;), use the flags <code>O_CREAT|O_TRUNC</code>.','C misc notes','','inherit','closed','open','','623-revision-v1','','','2014-12-17 17:12:23','2014-12-17 17:12:23','',623,'http://localhost/623-revision-v1/',0,'revision','',0),(626,3,'2014-12-17 17:18:41','2014-12-17 17:18:41','<h2>Opening files with a system call</h2>\n<pre class=\"prettyprint\">#include \n#include \n#include \n\nint main(){\n    int i = 0;\n    for(; i &lt; 2; i++)\n    {\n        int f = open(\"f\", O_WRONLY|O_CREAT, 0666);\n        write(f, \"aaa\", 3);\n        close(f);\n        int f2 = open(\"f\", O_WRONLY|O_APPEND, 0666);\n        write(f2, \"bb\",2);\n        close(f2);\n    }\n}\n</pre>\nAt the end of this script, the result of\n<code>cat </code>will be <tt>aaabbbb</tt> and note <tt>aaabb</tt>! Why ? simply because the flag O_CREATE will create the file if not exists and place the cursor to the beginning. O_APPEND will place the cursor at the end. The content of the file is not erased !\n\nTo really create or overwrite a file (like the shell behavior of &gt;), use the flags <code>O_CREAT|O_TRUNC</code>.\n<h2>The strange behavior of recursive main</h2>\nThe code:\n<pre class=\"prettyprint\">int main() { \n    main(); \n    return 0;\n}\n</pre>\nshould result in a stack overflow error. But the system will output a segfault... Why ? No idea!\n\nAn interesting thing is that the version:\n<pre class=\"prettyprint\">int main() { \n    return main(); \n}\n</pre>\nWill be','C misc notes','','inherit','closed','open','','623-autosave-v1','','','2014-12-17 17:18:41','2014-12-17 17:18:41','',623,'http://localhost/623-autosave-v1/',0,'revision','',0),(627,3,'2014-12-17 17:19:15','2014-12-17 17:19:15','<h2>Opening files with a system call</h2>\r\n<pre class=\"prettyprint\">#include \r\n#include \r\n#include \r\n\r\nint main(){\r\n    int i = 0;\r\n    for(; i &lt; 2; i++)\r\n    {\r\n        int f = open(\"f\", O_WRONLY|O_CREAT, 0666);\r\n        write(f, \"aaa\", 3);\r\n        close(f);\r\n        int f2 = open(\"f\", O_WRONLY|O_APPEND, 0666);\r\n        write(f2, \"bb\",2);\r\n        close(f2);\r\n    }\r\n}\r\n</pre>\r\nAt the end of this script, the result of\r\n<code>cat </code>will be <tt>aaabbbb</tt> and note <tt>aaabb</tt>! Why ? simply because the flag O_CREATE will create the file if not exists and place the cursor to the beginning. O_APPEND will place the cursor at the end. The content of the file is not erased !\r\n\r\nTo really create or overwrite a file (like the shell behavior of &gt;), use the flags <code>O_CREAT|O_TRUNC</code>.\r\n<h2>The strange behavior of recursive main</h2>\r\nThe code:\r\n<pre class=\"prettyprint\">int main() { \r\n    main(); \r\n    return 0;\r\n}\r\n</pre>\r\nshould result in a stack overflow error. But the system will output a segfault... Why ? No idea!\r\n\r\nAn interesting thing is that the version:\r\n<pre class=\"prettyprint\">int main() { \r\n    return main(); \r\n}\r\n</pre>\r\nWill be a simple infinite loop. The reason is that it is a tail recursion, so the compiler will optimize it with a loop.','C misc notes','','inherit','closed','open','','623-revision-v1','','','2014-12-17 17:19:15','2014-12-17 17:19:15','',623,'http://localhost/623-revision-v1/',0,'revision','',0),(628,3,'2014-12-20 14:33:48','2014-12-20 14:33:48','Every time I use pacman on a new machine, this f***ing key error occurs:\r\n<pre class=\"prettyprint lang-text\">downloading required keys...\r\n:: Import PGP key 4096R/, \"Anatol Pomozov <anatol.pomozov@gmail.com>\", created: 2014-02-03? [Y/n]\r\nerror: key \"Anatol Pomozov <anatol.pomozov@gmail.com>;\" could not be imported\r\nerror: required key missing from keyring\r\nerror: failed to commit transaction (unexpected error)\r\nErrors occurred, no packages were upgraded.</pre>\r\nTo solve it, I am not quite sure... I normally try one of the two things below, hoping that one works:\r\n<ol>\r\n	<li>On a new install:\r\n<pre class=\"prettyprint lang-text\">pacman-key --init && pacman-key --populate archlinux</pre>\r\n</li>\r\n	<li>On a running system:\r\n<pre class=\"prettyprint lang-text\">pacman -S archlinux-keyring; pacman -Su</pre>\r\n(although, that will put his key in your keyring and let him break whatever he wants... just like any other developer)\r\n\r\nsource <a href=\"https://bbs.archlinux.org/viewtopic.php?id=178185\">https://bbs.archlinux.org/viewtopic.php?id=178185</a></li>\r\n</ol>','f***ing anatol.pomozov@gmail.com','','inherit','closed','open','','526-revision-v1','','','2014-12-20 14:33:48','2014-12-20 14:33:48','',526,'http://localhost/526-revision-v1/',0,'revision','',0),(630,3,'2015-04-04 18:50:25','0000-00-00 00:00:00','','citations','','draft','closed','open','','','','','2015-04-04 18:50:25','2015-04-04 18:50:25','',0,'http://localhost/?p=630',0,'post','',0),(631,3,'2015-04-04 18:50:25','2015-04-04 18:50:25','','citations','','inherit','closed','open','','630-revision-v1','','','2015-04-04 18:50:25','2015-04-04 18:50:25','',630,'http://localhost/630-revision-v1/',0,'revision','',0),(632,3,'2022-07-26 18:16:40','0000-00-00 00:00:00','','Auto Draft','','auto-draft','closed','open','','','','','2022-07-26 18:16:40','0000-00-00 00:00:00','',0,'http://localhost/?p=632',0,'post','',0);
/*!40000 ALTER TABLE `mk_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mk_term_relationships`
--

DROP TABLE IF EXISTS `mk_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `term_order` int(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_term_relationships`
--

LOCK TABLES `mk_term_relationships` WRITE;
/*!40000 ALTER TABLE `mk_term_relationships` DISABLE KEYS */;
INSERT INTO `mk_term_relationships` VALUES (1,1,0),(4,2,0),(4,3,0),(4,4,0),(4,5,0),(4,6,0),(7,7,0),(7,8,0),(7,9,0),(7,10,0),(7,11,0),(18,12,0),(20,12,0),(23,1,0),(24,7,0),(24,13,0),(24,14,0),(24,15,0),(27,7,0),(27,16,0),(45,7,0),(45,16,0),(45,17,0),(45,18,0),(45,19,0),(62,12,0),(64,12,0),(65,1,0),(65,20,0),(65,21,0),(76,22,0),(81,1,0),(81,23,0),(81,24,0),(81,25,0),(89,12,0),(103,26,0),(103,27,0),(103,45,0),(129,1,0),(136,24,0),(136,26,0),(136,28,0),(136,29,0),(136,45,0),(149,1,0),(179,26,0),(179,45,0),(182,1,0),(191,1,0),(195,12,0),(200,1,0),(200,2,0),(200,4,0),(200,30,0),(208,1,0),(229,24,0),(229,25,0),(229,26,0),(229,31,0),(229,45,0),(237,32,0),(242,12,0),(243,33,0),(243,35,0),(253,7,0),(253,24,0),(253,31,0),(253,33,0),(253,35,0),(256,16,0),(256,19,0),(256,34,0),(268,12,0),(269,12,0),(270,12,0),(271,1,0),(271,37,0),(277,32,0),(283,32,0),(284,7,0),(284,22,0),(290,1,0),(291,1,0),(298,1,0),(304,1,0),(307,1,0),(308,1,0),(313,1,0),(315,1,0),(316,1,0),(328,1,0),(330,1,0),(333,1,0),(336,1,0),(343,1,0),(343,7,0),(343,8,0),(352,26,0),(366,7,0),(366,38,0),(374,1,0),(377,26,0),(377,46,0),(383,24,0),(383,25,0),(383,26,0),(383,46,0),(392,23,0),(392,24,0),(392,26,0),(392,45,0),(397,12,0),(402,26,0),(402,31,0),(402,39,0),(402,40,0),(410,24,0),(410,26,0),(410,41,0),(410,42,0),(410,46,0),(420,16,0),(423,32,0),(431,26,0),(431,43,0),(431,47,0),(434,43,0),(437,22,0),(437,26,0),(437,43,0),(437,47,0),(441,12,0),(442,12,0),(443,23,0),(443,24,0),(443,25,0),(443,26,0),(443,31,0),(443,44,0),(443,47,0),(450,12,0),(451,12,0),(452,12,0),(453,26,0),(453,45,0),(465,1,0),(465,26,0),(465,46,0),(465,48,0),(469,26,0),(469,45,0),(469,50,0),(474,26,0),(474,34,0),(474,45,0),(474,49,0),(481,26,0),(481,45,0),(483,26,0),(483,47,0),(486,1,0),(486,7,0),(486,8,0),(486,21,0),(490,24,0),(490,26,0),(490,45,0),(490,51,0),(492,26,0),(492,43,0),(492,47,0),(492,52,0),(492,53,0),(492,54,0),(494,7,0),(494,8,0),(494,26,0),(494,45,0),(498,26,0),(498,45,0),(505,7,0),(505,55,0),(508,1,0),(513,56,0),(520,1,0),(523,26,0),(523,46,0),(526,26,0),(526,43,0),(532,26,0),(532,46,0),(542,7,0),(542,16,0),(551,26,0),(551,47,0),(557,26,0),(557,45,0),(561,1,0),(565,1,0),(565,7,0),(565,8,0),(574,26,0),(574,46,0),(579,7,0),(579,38,0),(590,26,0),(590,47,0),(593,26,0),(593,46,0),(601,26,0),(601,47,0),(606,7,0),(606,16,0),(613,26,0),(613,46,0),(623,7,0),(623,35,0),(630,1,0);
/*!40000 ALTER TABLE `mk_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mk_term_taxonomy`
--

DROP TABLE IF EXISTS `mk_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT 0,
  `count` bigint(20) NOT NULL DEFAULT 0,
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=57 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_term_taxonomy`
--

LOCK TABLES `mk_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `mk_term_taxonomy` DISABLE KEYS */;
INSERT INTO `mk_term_taxonomy` VALUES (1,1,'category','',0,15),(2,2,'category','',0,2),(3,3,'post_tag','',0,1),(4,4,'post_tag','',0,2),(5,5,'post_tag','',0,1),(6,6,'post_tag','',0,1),(7,7,'category','',0,16),(8,8,'category','',7,5),(9,8,'post_tag','',0,1),(10,9,'post_tag','',0,1),(11,10,'post_tag','',0,1),(12,11,'nav_menu','',0,16),(13,12,'category','',7,1),(14,12,'post_tag','',0,1),(15,13,'post_tag','',0,1),(16,14,'category','',7,6),(17,15,'post_tag','',0,1),(18,16,'post_tag','',0,1),(19,14,'post_tag','',0,2),(20,17,'post_tag','',0,1),(21,18,'post_tag','',0,2),(22,19,'category','',7,3),(23,20,'post_tag','',0,3),(24,21,'post_tag','',0,8),(25,22,'post_tag','',0,4),(26,23,'category','',0,32),(27,24,'category','',0,1),(28,25,'post_tag','',0,1),(29,26,'post_tag','',0,1),(30,27,'post_tag','',0,1),(31,28,'post_tag','',0,4),(32,29,'category','',0,3),(33,30,'post_tag','',0,2),(34,31,'post_tag','',0,2),(35,30,'category','',7,3),(36,32,'post_format','',0,0),(37,33,'post_format','',0,0),(38,34,'category','',7,2),(39,35,'post_tag','',0,1),(40,36,'post_tag','',0,1),(41,37,'post_tag','',0,1),(42,38,'post_tag','',0,1),(43,39,'category','',0,5),(44,40,'post_tag','',0,1),(45,41,'category','',23,12),(46,42,'category','',23,9),(47,43,'category','',23,8),(48,44,'post_tag','',0,1),(49,45,'post_tag','',0,1),(50,46,'post_tag','',0,1),(51,47,'post_tag','',0,0),(52,39,'post_tag','',0,1),(53,48,'post_tag','',0,1),(54,49,'post_tag','',0,1),(55,50,'category','',7,1),(56,51,'category','',0,1);
/*!40000 ALTER TABLE `mk_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mk_terms`
--

DROP TABLE IF EXISTS `mk_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT 0,
  PRIMARY KEY (`term_id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=52 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_terms`
--

LOCK TABLES `mk_terms` WRITE;
/*!40000 ALTER TABLE `mk_terms` DISABLE KEYS */;
INSERT INTO `mk_terms` VALUES (1,'Uncategorized','uncategorized',0),(2,'Web','web',0),(3,'db','db',0),(4,'wordpress','wordpress',0),(5,'lampp','lampp',0),(6,'mysql','mysql',0),(7,'languages','languages',0),(8,'other','other',0),(9,'raspberry pi','raspberry-pi',0),(10,'ARM','arm',0),(11,'top menu','top-menu',0),(12,'java','java',0),(13,'finalizer','finalizer',0),(14,'perl','perl',0),(15,'debian','debian',0),(16,'packaging','packaging',0),(17,'svg','svg',0),(18,'latex','latex',0),(19,'Bash','bash',0),(20,'bash','bash-2',0),(21,'linux','linux',0),(22,'customization','customization',0),(23,'Configuration tricks','configuration-tricks',0),(24,'eia','eia',0),(25,'security','security',0),(26,'gnu','gnu',0),(27,'jquery','jquery',0),(28,'utilities','utilities',0),(29,'RAV','rav',0),(30,'C','c',0),(31,'windows','windows',0),(32,'post-format-aside','post-format-aside',0),(33,'post-format-quote','post-format-quote',0),(34,'Android','android',0),(35,'gnome','gnome',0),(36,'uuntu','uuntu',0),(37,'optimus','optimus',0),(38,'ubuntu','ubuntu',0),(39,'archlinux','archlinux',0),(40,'zsh','zsh',0),(41,'programs','programs',0),(42,'material','material',0),(43,'terminal-environment','env',0),(44,'bumblebee archlinux','bumblebee-archlinux',0),(45,'office','office',0),(46,'vim','vim',0),(47,'backup','backup',0),(48,'configuration','configuration',0),(49,'yaourt','yaourt',0),(50,'python','python',0),(51,'Arduino','arduino',0);
/*!40000 ALTER TABLE `mk_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mk_usermeta`
--

DROP TABLE IF EXISTS `mk_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext DEFAULT NULL,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_usermeta`
--

LOCK TABLES `mk_usermeta` WRITE;
/*!40000 ALTER TABLE `mk_usermeta` DISABLE KEYS */;
INSERT INTO `mk_usermeta` VALUES (20,2,'first_name','Damien'),(21,2,'last_name','Goetschi'),(22,2,'nickname','damien.goetschi'),(23,2,'description',''),(24,2,'rich_editing','true'),(25,2,'comment_shortcuts','false'),(26,2,'admin_color','fresh'),(27,2,'use_ssl','0'),(28,2,'show_admin_bar_front','true'),(29,2,'mk_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(30,2,'mk_user_level','0'),(31,2,'dismissed_wp_pointers','wp330_toolbar,wp330_saving_widgets,wp340_choose_image_from_library,wp340_customize_current_theme_link,wp350_media,wp360_revisions,wp360_locks'),(34,3,'first_name','Lucy'),(35,3,'last_name','Linder'),(36,3,'nickname','chief'),(37,3,'description',''),(38,3,'rich_editing','true'),(39,3,'comment_shortcuts','false'),(40,3,'admin_color','fresh'),(41,3,'use_ssl','0'),(42,3,'show_admin_bar_front','true'),(43,3,'mk_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(44,3,'mk_user_level','10'),(45,3,'dismissed_wp_pointers','wp330_toolbar,wp330_saving_widgets,wp340_choose_image_from_library,wp340_customize_current_theme_link,wp350_media,wp360_revisions,wp360_locks'),(46,3,'mk_dashboard_quick_press_last_post_id','632'),(47,3,'mk_user-settings','editor=tinymce'),(48,3,'mk_user-settings-time','1428173421'),(49,3,'session_tokens','a:2:{s:64:\"6739ffa8b3ebb732f5341b10081003b2a1394c28be40654dcdb0edf9fb1782e5\";i:1659032183;s:64:\"b54f8e8d95d321bd68770569825c94bf60dcf4f91e66900bf1898a72d204d806\";i:1659032211;}');
/*!40000 ALTER TABLE `mk_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mk_users`
--

DROP TABLE IF EXISTS `mk_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mk_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(64) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(60) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT 0,
  `display_name` varchar(250) NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mk_users`
--

LOCK TABLES `mk_users` WRITE;
/*!40000 ALTER TABLE `mk_users` DISABLE KEYS */;
INSERT INTO `mk_users` VALUES (2,'damien.goetschi','$P$B84U5eS0dNTkdsELJfUIcEEmwqiaoO0','damien-goetschi','damien.goetschi@dg-web.ch','','2013-12-19 13:27:21','',0,'Damien Goetschi'),(3,'chief','$P$BNO.UZ5ZNnfCP0rd1u/6nSXpxcrAZN1','chief','lucy.derlin@gmail.com','','2014-08-14 08:58:33','',0,'Lucy Linder');
/*!40000 ALTER TABLE `mk_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-07-26 18:19:06
